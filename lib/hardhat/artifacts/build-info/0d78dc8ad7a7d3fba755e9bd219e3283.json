{"id":"0d78dc8ad7a7d3fba755e9bd219e3283","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\n     * the storage mapping.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/Counters.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"@openzeppelin/contracts/utils/structs/EnumerableMap.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableMap.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\n\npragma solidity ^0.8.0;\n\nimport \"./EnumerableSet.sol\";\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * The following map types are supported:\n *\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableMap.\n * ====\n */\nlibrary EnumerableMap {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct Bytes32ToBytes32Map {\n        // Storage of keys\n        EnumerableSet.Bytes32Set _keys;\n        mapping(bytes32 => bytes32) _values;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        Bytes32ToBytes32Map storage map,\n        bytes32 key,\n        bytes32 value\n    ) internal returns (bool) {\n        map._values[key] = value;\n        return map._keys.add(key);\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\n        delete map._values[key];\n        return map._keys.remove(key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\n        return map._keys.contains(key);\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\n        return map._keys.length();\n    }\n\n    /**\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n     *\n     * Note that there are no guarantees on the ordering of entries inside the\n     * array, and it may change when more entries are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\n        bytes32 key = map._keys.at(index);\n        return (key, map._values[key]);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\n        bytes32 value = map._values[key];\n        if (value == bytes32(0)) {\n            return (contains(map, key), bytes32(0));\n        } else {\n            return (true, value);\n        }\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\n        bytes32 value = map._values[key];\n        require(value != 0 || contains(map, key), \"EnumerableMap: nonexistent key\");\n        return value;\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        Bytes32ToBytes32Map storage map,\n        bytes32 key,\n        string memory errorMessage\n    ) internal view returns (bytes32) {\n        bytes32 value = map._values[key];\n        require(value != 0 || contains(map, key), errorMessage);\n        return value;\n    }\n\n    // UintToUintMap\n\n    struct UintToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        UintToUintMap storage map,\n        uint256 key,\n        uint256 value\n    ) internal returns (bool) {\n        return set(map._inner, bytes32(key), bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\n        return remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\n        return contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (uint256(key), uint256(value));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\n        return (success, uint256(value));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(key)));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        UintToUintMap storage map,\n        uint256 key,\n        string memory errorMessage\n    ) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(key), errorMessage));\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        UintToAddressMap storage map,\n        uint256 key,\n        address value\n    ) internal returns (bool) {\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (uint256(key), address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\n        return (success, address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        UintToAddressMap storage map,\n        uint256 key,\n        string memory errorMessage\n    ) internal view returns (address) {\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\n    }\n\n    // AddressToUintMap\n\n    struct AddressToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        AddressToUintMap storage map,\n        address key,\n        uint256 value\n    ) internal returns (bool) {\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\n        return remove(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\n        return contains(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (address(uint160(uint256(key))), uint256(value));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\n        return (success, uint256(value));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        AddressToUintMap storage map,\n        address key,\n        string memory errorMessage\n    ) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\n    }\n\n    // Bytes32ToUintMap\n\n    struct Bytes32ToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        Bytes32ToUintMap storage map,\n        bytes32 key,\n        uint256 value\n    ) internal returns (bool) {\n        return set(map._inner, key, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\n        return remove(map._inner, key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\n        return contains(map._inner, key);\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (key, uint256(value));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\n        (bool success, bytes32 value) = tryGet(map._inner, key);\n        return (success, uint256(value));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\n        return uint256(get(map._inner, key));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        Bytes32ToUintMap storage map,\n        bytes32 key,\n        string memory errorMessage\n    ) internal view returns (uint256) {\n        return uint256(get(map._inner, key, errorMessage));\n    }\n}\n"},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"},"contracts/Marketplace.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\";\n\nimport \"./Pixel4te.sol\";\n\ncontract Marketplace {\n    using SafeMath for uint256;\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\n    // Struct para representar un NFT en venta\n    struct NFT {\n        address seller;\n        uint256 tokenId;\n        uint256 price;\n        address buyer;\n    }\n    struct Offer {\n        address offerer;\n        uint256 value;\n    }\n    // Mapping para almacenar todos los NFTs en venta en el marketplace\n    mapping(uint256 => NFT) public nfts;\n\n    // Mapping para almacenar los NFTs listados por cada vendedor\n    mapping(address => EnumerableSet.UintSet) private sellerToNfts;\n\n    mapping(uint256 => EnumerableMap.AddressToUintMap) private pendingOffers;\n\n    // Eventos\n    event NFTListed(uint256 indexed tokenId, address indexed seller, uint256 price);\n    event NFTPriceUpdated(uint256 indexed tokenId, uint256 price);\n    event OfferMade(uint256 indexed tokenId, address indexed offerer, uint256 value);\n    event PurchaseMade(uint256 indexed tokenId, uint256 price, address indexed buyer);\n    event NFTRemoved(uint256 indexed tokenId);\n\n    // Propietario del contrato\n    address owner;\n\n    // Contrato de la colección Pixel4te\n    Pixel4te private pixel4teContract;\n    // Constructor\n    constructor(address collection) {\n        owner = msg.sender;\n        pixel4teContract = Pixel4te(collection);\n    }\n\n    function _isValidNFT(uint _tokenId) internal view returns (bool) {\n      try pixel4teContract.ownerOf(_tokenId) {\n        return true;\n      } catch {\n        return false;\n      }\n    }\n    // Función para listar un nuevo NFT en el marketplace\n    function listNFT(uint256 _tokenId, uint256 _price) external {\n        require(_price > 0, \"Price cannot be zero\");\n        require(_isValidNFT(_tokenId), \"Invalid NFT\");\n        // Verificar que el NFT no está listado\n        // Verificar que el NFT pertenece al msg.sender\n        address _owner = pixel4teContract.ownerOf(_tokenId);\n        require(_owner == msg.sender, \"Not the NFT owner\");\n        // Añadir el NFT al mapping de nfts\n        nfts[_tokenId] = NFT({\n            seller: msg.sender,\n            tokenId: _tokenId,\n            price: _price,\n            buyer: address(0)\n        });\n\n        // Añadir el NFT al set de sellerToNfts\n        sellerToNfts[msg.sender].add(_tokenId);\n\n        // Disparar el evento NFTListed\n        emit NFTListed(_tokenId, msg.sender, _price);\n    }\n    \n    function removeNFT(uint256 _tokenId) external {\n      require(nfts[_tokenId].seller == msg.sender, \"Only seller can remove NFT\");\n      sellerToNfts[msg.sender].remove(_tokenId);\n      delete nfts[_tokenId];\n      emit NFTRemoved(_tokenId);\n    }\n\n    // Función para actualizar el precio de un NFT\n    function updateNFTPrice(uint256 _tokenId, uint256 _price) external {\n        require(isNFTListed(_tokenId), \"NFT does not exist\");\n        require(msg.sender == nfts[_tokenId].seller, \"Only NFT seller can update the price\");\n\n        // Actualizar el precio del NFT\n        nfts[_tokenId].price = _price;\n\n        // Disparar el evento NFTPriceUpdated\n        emit NFTPriceUpdated(_tokenId, _price);\n    }\n\n    function _processSaleAndTransferNFT(uint256 _tokenId, uint256 _price) internal {\n      uint256 royaltiesPercent = pixel4teContract.getRoyaltiesPercent(_tokenId); // Obtener royalties percent\n      require(royaltiesPercent > 0, \"Royalties percent must be greater than zero.\");\n      address royaltiesOwner = pixel4teContract.getMinter(_tokenId); // Obtener royalties beneficario\n      uint256 royalties = _price.mul(royaltiesPercent); // Calcular royalties\n      address payable seller = payable(nfts[_tokenId].seller); // Obtener la dirección del vendedor como payable\n      seller.transfer(_price.sub(royalties)); // Transferir el precio del NFT menos las royalties al vendedor\n      payable(royaltiesOwner).transfer(royalties); // Transferir las royalties al beneficario\n      pixel4teContract.safeTransferFrom(nfts[_tokenId].seller, msg.sender, nfts[_tokenId].tokenId); // Transferir el NFT al comprador\n      sellerToNfts[nfts[_tokenId].seller].remove(_tokenId); // Eliminar el NFT del set de NFTs del vendedor\n      delete nfts[_tokenId]; // Eliminar el NFT del mapping de NFTs\n    }\n\n    // Función para hacer una oferta por un NFT\n    function makeOffer(uint256 _tokenId) external payable {\n        require(isNFTListed(_tokenId), \"NFT does not exist\");\n        require(msg.sender != nfts[_tokenId].seller, \"Seller cannot make an offer for their own NFT\");\n        require(msg.value > 0, \"Offer value must be greater than zero\");\n\n        if (pendingOffers[_tokenId].contains(msg.sender)) {\n          uint existingOffer = pendingOffers[_tokenId].get(msg.sender);\n          if (existingOffer > 0 && msg.value > existingOffer) { // Si la nueva oferta es mayor que la oferta existente\n            uint256 refundAmount = existingOffer;\n            existingOffer = msg.value;\n            pendingOffers[_tokenId].set(msg.sender, existingOffer);\n            payable(msg.sender).transfer(refundAmount); // Reembolsar la oferta anterior\n            emit OfferMade(_tokenId, msg.sender, msg.value);\n\n          } else {\n            // La nueva oferta es menor o igual que la oferta existente\n            revert(\"Offer value must be higher than existing offer\");\n          }\n        } else {\n          if (msg.value >= nfts[_tokenId].price) { // Si la oferta es mayor o igual que el precio del NFT\n            nfts[_tokenId].buyer = msg.sender; // Almacenar el comprador del NFT\n\n            _processSaleAndTransferNFT(_tokenId, nfts[_tokenId].price);\n\n            emit PurchaseMade(_tokenId, nfts[_tokenId].price, msg.sender); // Disparar el evento PurchaseMade\n          } else {\n            // No hay una oferta pendiente del usuario para este NFT\n            pendingOffers[_tokenId].set(msg.sender, msg.value);\n            emit OfferMade(_tokenId, msg.sender, msg.value);\n\n          }\n        }\n    }\n\n    function acceptOffer(uint256 _tokenId, address _buyer) external {\n        require(isNFTListed(_tokenId), \"NFT does not exist\");\n        require(msg.sender == nfts[_tokenId].seller, \"Only the seller can accept an offer\");\n        require(pendingOffers[_tokenId].contains(_buyer), \"There are no pending offers for this NFT\");\n\n        nfts[_tokenId].buyer = _buyer; // Almacenar el comprador del NFT\n        pendingOffers[_tokenId].remove(_buyer);\n        _processSaleAndTransferNFT(_tokenId, nfts[_tokenId].price);\n\n        emit PurchaseMade(_tokenId, nfts[_tokenId].price, _buyer); // Disparar el evento PurchaseMade\n    }\n\n    function cancelOffer(uint256 _tokenId) external {\n      require(pendingOffers[_tokenId].contains(msg.sender), \"There are no pending offers for this NFT\");\n      uint256 offerValue = pendingOffers[_tokenId].get(msg.sender);\n      require(offerValue > 0, \"Offer value must be greater than zero\");\n      pendingOffers[_tokenId].remove(msg.sender);\n      payable(msg.sender).transfer(offerValue);\n    }\n\n    // Función para comprar un NFT sin hacer una oferta\n    function buyNFT(uint256 _tokenId) external payable {\n        require(isNFTListed(_tokenId), \"NFT does not exist\");\n        require(msg.sender != nfts[_tokenId].seller, \"Seller cannot buy their own NFT\");\n        require(msg.value >= nfts[_tokenId].price, \"Insufficient funds\");\n\n        nfts[_tokenId].buyer = msg.sender; // Almacenar el comprador del NFT\n\n        _processSaleAndTransferNFT(_tokenId, nfts[_tokenId].price);\n\n        emit PurchaseMade(_tokenId, nfts[_tokenId].price, msg.sender); // Disparar el evento PurchaseMade\n    }\n\n    function getPendingOffers(uint256 _tokenId) external view returns (Offer[] memory) {\n        Offer[] memory offers = new Offer[](pendingOffers[_tokenId].length());\n        for (uint256 i = 0; i < pendingOffers[_tokenId].length(); i++) {\n            (address offerer, uint256 value) = pendingOffers[_tokenId].at(i);\n            offers[i] = Offer({offerer: offerer, value: value});\n        }\n        return offers;\n    }\n\n    function getNFTsBySeller(address _seller) external view returns (uint256[] memory) {\n      uint256[] memory result = new uint256[](sellerToNfts[_seller].length());\n      for (uint256 i = 0; i < sellerToNfts[_seller].length(); i++) {\n          result[i] = sellerToNfts[_seller].at(i);\n      }\n      return result;\n    }\n\n    function getNFTPrice(uint256 _tokenId) external view returns (uint256) {\n      return isNFTListed(_tokenId) ? nfts[_tokenId].price : 0;\n    }\n\n    function isNFTListed(uint256 _tokenId) internal view returns (bool) {\n      return nfts[_tokenId].tokenId > 0;\n    }\n\n}\n"},"contracts/Pixel4te.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Pixel4te is ERC721URIStorage, Ownable {\n    using Counters for Counters.Counter;\n    Counters.Counter private _tokenIds;\n    mapping(uint256 => address) private _mintedBy;\n    mapping(uint256 => uint256) private _royaltiesPercent;\n\n    uint256 public mintFee;\n\n    constructor() ERC721(\"Pixel4te\", \"PIX\") {\n        mintFee = 0.01 ether; // Set a default minting fee of 0.01 ether\n    }\n\n    function mintItem(address to, uint256 royaltiesPercent, string memory tokenURI)\n        public\n        payable\n        returns (uint256)\n    {\n        require(msg.value >= mintFee, \"Insufficient payment\"); // Require payment of the minting fee\n        _tokenIds.increment();\n\n        uint256 newItemId = _tokenIds.current();\n        _mint(to, newItemId);\n        _setTokenURI(newItemId, tokenURI);\n        _mintedBy[newItemId] = msg.sender; // Store the address of the user who minted the NFT\n        _royaltiesPercent[newItemId] = royaltiesPercent;\n\n        // Transfer the minting fee to the contract owner\n        payable(owner()).transfer(msg.value);\n\n        return newItemId;\n    }\n\n    function setURI(uint tokenId, string memory newURI)\n        public\n    {\n        address itemOwner = ownerOf(tokenId);\n        require(msg.sender == itemOwner, 'UNAUTHORIZED');\n        _setTokenURI(tokenId, newURI);\n    }\n\n    function currentItem()\n        public\n        view\n        returns (uint256)\n    {\n        return _tokenIds.current();\n    }\n\n    function itemsOf(address owner) public view returns (uint256[] memory) {\n      \n      uint256 balance = balanceOf(owner);\n      uint256[] memory items = new uint256[](balance);\n      if (balance == uint256(0)) {\n        return items;\n      }\n      uint256 j = 0;\n      for (uint256 i = 1; i <= currentItem(); i++) {\n        if (ownerOf(i) == owner) {\n          items[j] = i;\n          j++;\n        }\n      }\n      return items;\n    }\n\n    function mintFeeUpdate(uint256 newFee) public onlyOwner {\n        mintFee = newFee;\n    }\n\n    function getMinter(uint256 tokenId) public view returns (address) {\n        return _mintedBy[tokenId];\n    }\n\n    function setRoyaltiesPercent(uint256 tokenId, uint256 percent) public {\n        require(_mintedBy[tokenId] == msg.sender, \"Unauthorized\");\n        _royaltiesPercent[tokenId] = percent;\n    }\n\n    function getRoyaltiesPercent(uint256 tokenId) public view returns (uint256) {\n        return _royaltiesPercent[tokenId];\n    }\n}\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[1695],"Ownable":[112]},"id":113,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":113,"sourceUnit":1696,"src":"127:30:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4,"name":"Context","nameLocations":["683:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":1695,"src":"683:7:0"},"id":5,"nodeType":"InheritanceSpecifier","src":"683:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"159:494:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":112,"linearizedBaseContracts":[112,1695],"name":"Ownable","nameLocation":"672:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":7,"mutability":"mutable","name":"_owner","nameLocation":"713:6:0","nodeType":"VariableDeclaration","scope":112,"src":"697:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":13,"name":"OwnershipTransferred","nameLocation":"732:20:0","nodeType":"EventDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"769:13:0","nodeType":"VariableDeclaration","scope":13,"src":"753:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":11,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"800:8:0","nodeType":"VariableDeclaration","scope":13,"src":"784:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"784:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:57:0"},"src":"726:84:0"},{"body":{"id":22,"nodeType":"Block","src":"926:49:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":18,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"955:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":19,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"955:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":17,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"936:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":20,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"936:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":21,"nodeType":"ExpressionStatement","src":"936:32:0"}]},"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"816:91:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":23,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"923:2:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"926:0:0"},"scope":112,"src":"912:63:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":30,"nodeType":"Block","src":"1084:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":26,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1094:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":27,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1094:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":28,"nodeType":"ExpressionStatement","src":"1094:13:0"},{"id":29,"nodeType":"PlaceholderStatement","src":"1117:1:0"}]},"documentation":{"id":24,"nodeType":"StructuredDocumentation","src":"981:77:0","text":" @dev Throws if called by any account other than the owner."},"id":31,"name":"onlyOwner","nameLocation":"1072:9:0","nodeType":"ModifierDefinition","parameters":{"id":25,"nodeType":"ParameterList","parameters":[],"src":"1081:2:0"},"src":"1063:62:0","virtual":false,"visibility":"internal"},{"body":{"id":39,"nodeType":"Block","src":"1256:30:0","statements":[{"expression":{"id":37,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"1273:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":36,"id":38,"nodeType":"Return","src":"1266:13:0"}]},"documentation":{"id":32,"nodeType":"StructuredDocumentation","src":"1131:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":40,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1210:5:0","nodeType":"FunctionDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"1215:2:0"},"returnParameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":35,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":40,"src":"1247:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":34,"name":"address","nodeType":"ElementaryTypeName","src":"1247:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1246:9:0"},"scope":112,"src":"1201:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":53,"nodeType":"Block","src":"1404:85:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":45,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"1422:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1422:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":47,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"1433:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1433:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1422:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":50,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1447:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":44,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1414:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1414:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52,"nodeType":"ExpressionStatement","src":"1414:68:0"}]},"documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"1292:62:0","text":" @dev Throws if the sender is not the owner."},"id":54,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1368:11:0","nodeType":"FunctionDefinition","parameters":{"id":42,"nodeType":"ParameterList","parameters":[],"src":"1379:2:0"},"returnParameters":{"id":43,"nodeType":"ParameterList","parameters":[],"src":"1404:0:0"},"scope":112,"src":"1359:130:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":67,"nodeType":"Block","src":"1885:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":63,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1922:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":62,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1914:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1914:7:0","typeDescriptions":{}}},"id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1914:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":60,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"1895:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1895:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":66,"nodeType":"ExpressionStatement","src":"1895:30:0"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1495:331:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."},"functionSelector":"715018a6","id":68,"implemented":true,"kind":"function","modifiers":[{"id":58,"kind":"modifierInvocation","modifierName":{"id":57,"name":"onlyOwner","nameLocations":["1875:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1875:9:0"},"nodeType":"ModifierInvocation","src":"1875:9:0"}],"name":"renounceOwnership","nameLocation":"1840:17:0","nodeType":"FunctionDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"1857:2:0"},"returnParameters":{"id":59,"nodeType":"ParameterList","parameters":[],"src":"1885:0:0"},"scope":112,"src":"1831:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":90,"nodeType":"Block","src":"2151:128:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":77,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2169:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":80,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2189:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":79,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2181:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":78,"name":"address","nodeType":"ElementaryTypeName","src":"2181:7:0","typeDescriptions":{}}},"id":81,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2181:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2169:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":83,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2193:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":76,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2161:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":84,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2161:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":85,"nodeType":"ExpressionStatement","src":"2161:73:0"},{"expression":{"arguments":[{"id":87,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2263:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":86,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"2244:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2244:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":89,"nodeType":"ExpressionStatement","src":"2244:28:0"}]},"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"1938:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":91,"implemented":true,"kind":"function","modifiers":[{"id":74,"kind":"modifierInvocation","modifierName":{"id":73,"name":"onlyOwner","nameLocations":["2141:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2141:9:0"},"nodeType":"ModifierInvocation","src":"2141:9:0"}],"name":"transferOwnership","nameLocation":"2090:17:0","nodeType":"FunctionDefinition","parameters":{"id":72,"nodeType":"ParameterList","parameters":[{"constant":false,"id":71,"mutability":"mutable","name":"newOwner","nameLocation":"2116:8:0","nodeType":"VariableDeclaration","scope":91,"src":"2108:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":70,"name":"address","nodeType":"ElementaryTypeName","src":"2108:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2107:18:0"},"returnParameters":{"id":75,"nodeType":"ParameterList","parameters":[],"src":"2151:0:0"},"scope":112,"src":"2081:198:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":110,"nodeType":"Block","src":"2496:124:0","statements":[{"assignments":[98],"declarations":[{"constant":false,"id":98,"mutability":"mutable","name":"oldOwner","nameLocation":"2514:8:0","nodeType":"VariableDeclaration","scope":110,"src":"2506:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":97,"name":"address","nodeType":"ElementaryTypeName","src":"2506:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":100,"initialValue":{"id":99,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2525:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2506:25:0"},{"expression":{"id":103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":101,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2541:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":102,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2550:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2541:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":104,"nodeType":"ExpressionStatement","src":"2541:17:0"},{"eventCall":{"arguments":[{"id":106,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"2594:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":107,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2604:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":105,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"2573:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2573:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":109,"nodeType":"EmitStatement","src":"2568:45:0"}]},"documentation":{"id":92,"nodeType":"StructuredDocumentation","src":"2285:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":111,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2442:18:0","nodeType":"FunctionDefinition","parameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":94,"mutability":"mutable","name":"newOwner","nameLocation":"2469:8:0","nodeType":"VariableDeclaration","scope":111,"src":"2461:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":93,"name":"address","nodeType":"ElementaryTypeName","src":"2461:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2460:18:0"},"returnParameters":{"id":96,"nodeType":"ParameterList","parameters":[],"src":"2496:0:0"},"scope":112,"src":"2433:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":113,"src":"654:1968:0","usedErrors":[]}],"src":"102:2521:0"},"id":0},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","exportedSymbols":{"Address":[1673],"Context":[1695],"ERC165":[1968],"ERC721":[1057],"IERC165":[1980],"IERC721":[1173],"IERC721Metadata":[1343],"IERC721Receiver":[1191],"Math":[2845],"Strings":[1944]},"id":1058,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":114,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:1"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"./IERC721.sol","id":115,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1058,"sourceUnit":1174,"src":"132:23:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"./IERC721Receiver.sol","id":116,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1058,"sourceUnit":1192,"src":"156:31:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","file":"./extensions/IERC721Metadata.sol","id":117,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1058,"sourceUnit":1344,"src":"188:42:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../utils/Address.sol","id":118,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1058,"sourceUnit":1674,"src":"231:33:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":119,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1058,"sourceUnit":1696,"src":"265:33:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../../utils/Strings.sol","id":120,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1058,"sourceUnit":1945,"src":"299:33:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":121,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1058,"sourceUnit":1969,"src":"333:46:1","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":123,"name":"Context","nameLocations":["647:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":1695,"src":"647:7:1"},"id":124,"nodeType":"InheritanceSpecifier","src":"647:7:1"},{"baseName":{"id":125,"name":"ERC165","nameLocations":["656:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":1968,"src":"656:6:1"},"id":126,"nodeType":"InheritanceSpecifier","src":"656:6:1"},{"baseName":{"id":127,"name":"IERC721","nameLocations":["664:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":1173,"src":"664:7:1"},"id":128,"nodeType":"InheritanceSpecifier","src":"664:7:1"},{"baseName":{"id":129,"name":"IERC721Metadata","nameLocations":["673:15:1"],"nodeType":"IdentifierPath","referencedDeclaration":1343,"src":"673:15:1"},"id":130,"nodeType":"InheritanceSpecifier","src":"673:15:1"}],"canonicalName":"ERC721","contractDependencies":[],"contractKind":"contract","documentation":{"id":122,"nodeType":"StructuredDocumentation","src":"381:246:1","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."},"fullyImplemented":true,"id":1057,"linearizedBaseContracts":[1057,1343,1173,1968,1980,1695],"name":"ERC721","nameLocation":"637:6:1","nodeType":"ContractDefinition","nodes":[{"global":false,"id":133,"libraryName":{"id":131,"name":"Address","nameLocations":["701:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":1673,"src":"701:7:1"},"nodeType":"UsingForDirective","src":"695:26:1","typeName":{"id":132,"name":"address","nodeType":"ElementaryTypeName","src":"713:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":136,"libraryName":{"id":134,"name":"Strings","nameLocations":["732:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":1944,"src":"732:7:1"},"nodeType":"UsingForDirective","src":"726:26:1","typeName":{"id":135,"name":"uint256","nodeType":"ElementaryTypeName","src":"744:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":138,"mutability":"mutable","name":"_name","nameLocation":"791:5:1","nodeType":"VariableDeclaration","scope":1057,"src":"776:20:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":137,"name":"string","nodeType":"ElementaryTypeName","src":"776:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":140,"mutability":"mutable","name":"_symbol","nameLocation":"838:7:1","nodeType":"VariableDeclaration","scope":1057,"src":"823:22:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":139,"name":"string","nodeType":"ElementaryTypeName","src":"823:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":144,"mutability":"mutable","name":"_owners","nameLocation":"934:7:1","nodeType":"VariableDeclaration","scope":1057,"src":"898:43:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":143,"keyType":{"id":141,"name":"uint256","nodeType":"ElementaryTypeName","src":"906:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"898:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":142,"name":"address","nodeType":"ElementaryTypeName","src":"917:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":148,"mutability":"mutable","name":"_balances","nameLocation":"1028:9:1","nodeType":"VariableDeclaration","scope":1057,"src":"992:45:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":147,"keyType":{"id":145,"name":"address","nodeType":"ElementaryTypeName","src":"1000:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"992:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":146,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":152,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1129:15:1","nodeType":"VariableDeclaration","scope":1057,"src":"1093:51:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":151,"keyType":{"id":149,"name":"uint256","nodeType":"ElementaryTypeName","src":"1101:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1093:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":150,"name":"address","nodeType":"ElementaryTypeName","src":"1112:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":158,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1252:18:1","nodeType":"VariableDeclaration","scope":1057,"src":"1199:71:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":157,"keyType":{"id":153,"name":"address","nodeType":"ElementaryTypeName","src":"1207:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1199:44:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueType":{"id":156,"keyType":{"id":154,"name":"address","nodeType":"ElementaryTypeName","src":"1226:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1218:24:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":155,"name":"bool","nodeType":"ElementaryTypeName","src":"1237:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":174,"nodeType":"Block","src":"1446:57:1","statements":[{"expression":{"id":168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":166,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"1456:5:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":167,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"1464:5:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1456:13:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":169,"nodeType":"ExpressionStatement","src":"1456:13:1"},{"expression":{"id":172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":170,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":140,"src":"1479:7:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":171,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"1489:7:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1479:17:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":173,"nodeType":"ExpressionStatement","src":"1479:17:1"}]},"documentation":{"id":159,"nodeType":"StructuredDocumentation","src":"1277:108:1","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":175,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":161,"mutability":"mutable","name":"name_","nameLocation":"1416:5:1","nodeType":"VariableDeclaration","scope":175,"src":"1402:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":160,"name":"string","nodeType":"ElementaryTypeName","src":"1402:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":163,"mutability":"mutable","name":"symbol_","nameLocation":"1437:7:1","nodeType":"VariableDeclaration","scope":175,"src":"1423:21:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":162,"name":"string","nodeType":"ElementaryTypeName","src":"1423:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1401:44:1"},"returnParameters":{"id":165,"nodeType":"ParameterList","parameters":[],"src":"1446:0:1"},"scope":1057,"src":"1390:113:1","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1967,1979],"body":{"id":205,"nodeType":"Block","src":"1678:192:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":186,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":178,"src":"1707:11:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":188,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1173,"src":"1727:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$1173_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$1173_$","typeString":"type(contract IERC721)"}],"id":187,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1722:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1722:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$1173","typeString":"type(contract IERC721)"}},"id":190,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1736:11:1","memberName":"interfaceId","nodeType":"MemberAccess","src":"1722:25:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1707:40:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":192,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":178,"src":"1763:11:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":194,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1343,"src":"1783:15:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1343_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1343_$","typeString":"type(contract IERC721Metadata)"}],"id":193,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1778:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1778:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$1343","typeString":"type(contract IERC721Metadata)"}},"id":196,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1800:11:1","memberName":"interfaceId","nodeType":"MemberAccess","src":"1778:33:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1763:48:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:104:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":201,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":178,"src":"1851:11:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":199,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1827:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721_$1057_$","typeString":"type(contract super ERC721)"}},"id":200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1833:17:1","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1967,"src":"1827:23:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1827:36:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:156:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":185,"id":204,"nodeType":"Return","src":"1688:175:1"}]},"documentation":{"id":176,"nodeType":"StructuredDocumentation","src":"1509:56:1","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":206,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1579:17:1","nodeType":"FunctionDefinition","overrides":{"id":182,"nodeType":"OverrideSpecifier","overrides":[{"id":180,"name":"ERC165","nameLocations":["1646:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":1968,"src":"1646:6:1"},{"id":181,"name":"IERC165","nameLocations":["1654:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":1980,"src":"1654:7:1"}],"src":"1637:25:1"},"parameters":{"id":179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":178,"mutability":"mutable","name":"interfaceId","nameLocation":"1604:11:1","nodeType":"VariableDeclaration","scope":206,"src":"1597:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":177,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1597:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1596:20:1"},"returnParameters":{"id":185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":184,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":206,"src":"1672:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":183,"name":"bool","nodeType":"ElementaryTypeName","src":"1672:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1671:6:1"},"scope":1057,"src":"1570:300:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1098],"body":{"id":229,"nodeType":"Block","src":"2010:123:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":216,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"2028:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2045:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":218,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2037:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":217,"name":"address","nodeType":"ElementaryTypeName","src":"2037:7:1","typeDescriptions":{}}},"id":220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2037:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2028:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572","id":222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2049:43:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""},"value":"ERC721: address zero is not a valid owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""}],"id":215,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2020:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2020:73:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":224,"nodeType":"ExpressionStatement","src":"2020:73:1"},{"expression":{"baseExpression":{"id":225,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"2110:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":227,"indexExpression":{"id":226,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"2120:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2110:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":214,"id":228,"nodeType":"Return","src":"2103:23:1"}]},"documentation":{"id":207,"nodeType":"StructuredDocumentation","src":"1876:48:1","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":230,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1938:9:1","nodeType":"FunctionDefinition","overrides":{"id":211,"nodeType":"OverrideSpecifier","overrides":[],"src":"1983:8:1"},"parameters":{"id":210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":209,"mutability":"mutable","name":"owner","nameLocation":"1956:5:1","nodeType":"VariableDeclaration","scope":230,"src":"1948:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":208,"name":"address","nodeType":"ElementaryTypeName","src":"1948:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1947:15:1"},"returnParameters":{"id":214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":213,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":230,"src":"2001:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":212,"name":"uint256","nodeType":"ElementaryTypeName","src":"2001:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2000:9:1"},"scope":1057,"src":"1929:204:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1106],"body":{"id":257,"nodeType":"Block","src":"2271:138:1","statements":[{"assignments":[240],"declarations":[{"constant":false,"id":240,"mutability":"mutable","name":"owner","nameLocation":"2289:5:1","nodeType":"VariableDeclaration","scope":257,"src":"2281:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":239,"name":"address","nodeType":"ElementaryTypeName","src":"2281:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":244,"initialValue":{"arguments":[{"id":242,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"2306:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":241,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":540,"src":"2297:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2297:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2281:33:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":246,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":240,"src":"2332:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2349:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":248,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2341:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":247,"name":"address","nodeType":"ElementaryTypeName","src":"2341:7:1","typeDescriptions":{}}},"id":250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2341:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2332:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2353:26:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":245,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2324:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2324:56:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":254,"nodeType":"ExpressionStatement","src":"2324:56:1"},{"expression":{"id":255,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":240,"src":"2397:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":238,"id":256,"nodeType":"Return","src":"2390:12:1"}]},"documentation":{"id":231,"nodeType":"StructuredDocumentation","src":"2139:46:1","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":258,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"2199:7:1","nodeType":"FunctionDefinition","overrides":{"id":235,"nodeType":"OverrideSpecifier","overrides":[],"src":"2244:8:1"},"parameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":233,"mutability":"mutable","name":"tokenId","nameLocation":"2215:7:1","nodeType":"VariableDeclaration","scope":258,"src":"2207:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":232,"name":"uint256","nodeType":"ElementaryTypeName","src":"2207:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2206:17:1"},"returnParameters":{"id":238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":237,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":258,"src":"2262:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":236,"name":"address","nodeType":"ElementaryTypeName","src":"2262:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2261:9:1"},"scope":1057,"src":"2190:219:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1328],"body":{"id":267,"nodeType":"Block","src":"2540:29:1","statements":[{"expression":{"id":265,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"2557:5:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":264,"id":266,"nodeType":"Return","src":"2550:12:1"}]},"documentation":{"id":259,"nodeType":"StructuredDocumentation","src":"2415:51:1","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":268,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2480:4:1","nodeType":"FunctionDefinition","overrides":{"id":261,"nodeType":"OverrideSpecifier","overrides":[],"src":"2507:8:1"},"parameters":{"id":260,"nodeType":"ParameterList","parameters":[],"src":"2484:2:1"},"returnParameters":{"id":264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":263,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":268,"src":"2525:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":262,"name":"string","nodeType":"ElementaryTypeName","src":"2525:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2524:15:1"},"scope":1057,"src":"2471:98:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1334],"body":{"id":277,"nodeType":"Block","src":"2704:31:1","statements":[{"expression":{"id":275,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":140,"src":"2721:7:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":274,"id":276,"nodeType":"Return","src":"2714:14:1"}]},"documentation":{"id":269,"nodeType":"StructuredDocumentation","src":"2575:53:1","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":278,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2642:6:1","nodeType":"FunctionDefinition","overrides":{"id":271,"nodeType":"OverrideSpecifier","overrides":[],"src":"2671:8:1"},"parameters":{"id":270,"nodeType":"ParameterList","parameters":[],"src":"2648:2:1"},"returnParameters":{"id":274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":273,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":278,"src":"2689:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":272,"name":"string","nodeType":"ElementaryTypeName","src":"2689:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2688:15:1"},"scope":1057,"src":"2633:102:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1342],"body":{"id":316,"nodeType":"Block","src":"2889:188:1","statements":[{"expression":{"arguments":[{"id":288,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"2914:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":287,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"2899:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2899:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":290,"nodeType":"ExpressionStatement","src":"2899:23:1"},{"assignments":[292],"declarations":[{"constant":false,"id":292,"mutability":"mutable","name":"baseURI","nameLocation":"2947:7:1","nodeType":"VariableDeclaration","scope":316,"src":"2933:21:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":291,"name":"string","nodeType":"ElementaryTypeName","src":"2933:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":295,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":293,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":326,"src":"2957:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2957:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2933:34:1"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":298,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":292,"src":"2990:7:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":297,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2984:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":296,"name":"bytes","nodeType":"ElementaryTypeName","src":"2984:5:1","typeDescriptions":{}}},"id":299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2984:14:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2999:6:1","memberName":"length","nodeType":"MemberAccess","src":"2984:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3008:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2984:25:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3068:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2984:86:1","trueExpression":{"arguments":[{"arguments":[{"id":307,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":292,"src":"3036:7:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":308,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"3045:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3053:8:1","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1827,"src":"3045:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3045:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":305,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3019:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":306,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3023:12:1","memberName":"encodePacked","nodeType":"MemberAccess","src":"3019:16:1","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3019:45:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":304,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3012:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":303,"name":"string","nodeType":"ElementaryTypeName","src":"3012:6:1","typeDescriptions":{}}},"id":312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3012:53:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":286,"id":315,"nodeType":"Return","src":"2977:93:1"}]},"documentation":{"id":279,"nodeType":"StructuredDocumentation","src":"2741:55:1","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":317,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"2810:8:1","nodeType":"FunctionDefinition","overrides":{"id":283,"nodeType":"OverrideSpecifier","overrides":[],"src":"2856:8:1"},"parameters":{"id":282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":281,"mutability":"mutable","name":"tokenId","nameLocation":"2827:7:1","nodeType":"VariableDeclaration","scope":317,"src":"2819:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":280,"name":"uint256","nodeType":"ElementaryTypeName","src":"2819:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2818:17:1"},"returnParameters":{"id":286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":285,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":317,"src":"2874:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":284,"name":"string","nodeType":"ElementaryTypeName","src":"2874:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2873:15:1"},"scope":1057,"src":"2801:276:1","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":325,"nodeType":"Block","src":"3385:26:1","statements":[{"expression":{"hexValue":"","id":323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3402:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":322,"id":324,"nodeType":"Return","src":"3395:9:1"}]},"documentation":{"id":318,"nodeType":"StructuredDocumentation","src":"3083:231:1","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":326,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"3328:8:1","nodeType":"FunctionDefinition","parameters":{"id":319,"nodeType":"ParameterList","parameters":[],"src":"3336:2:1"},"returnParameters":{"id":322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":321,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":326,"src":"3370:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":320,"name":"string","nodeType":"ElementaryTypeName","src":"3370:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3369:15:1"},"scope":1057,"src":"3319:92:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[1146],"body":{"id":368,"nodeType":"Block","src":"3538:336:1","statements":[{"assignments":[336],"declarations":[{"constant":false,"id":336,"mutability":"mutable","name":"owner","nameLocation":"3556:5:1","nodeType":"VariableDeclaration","scope":368,"src":"3548:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":335,"name":"address","nodeType":"ElementaryTypeName","src":"3548:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":341,"initialValue":{"arguments":[{"id":339,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"3579:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":337,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"3564:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1057_$","typeString":"type(contract ERC721)"}},"id":338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3571:7:1","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"3564:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3564:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3548:39:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":343,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"3605:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":344,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":336,"src":"3611:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3605:11:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572","id":346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3618:35:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""},"value":"ERC721: approval to current owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""}],"id":342,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3597:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3597:57:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":348,"nodeType":"ExpressionStatement","src":"3597:57:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":350,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"3686:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3686:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":352,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":336,"src":"3702:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3686:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":355,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":336,"src":"3728:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":356,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"3735:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3735:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":354,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":422,"src":"3711:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3711:37:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3686:62:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","id":360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3762:63:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""},"value":"ERC721: approve caller is not token owner or approved for all"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""}],"id":349,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3665:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3665:170:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":362,"nodeType":"ExpressionStatement","src":"3665:170:1"},{"expression":{"arguments":[{"id":364,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"3855:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":365,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"3859:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":363,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"3846:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":366,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3846:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":367,"nodeType":"ExpressionStatement","src":"3846:21:1"}]},"documentation":{"id":327,"nodeType":"StructuredDocumentation","src":"3417:46:1","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":369,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3477:7:1","nodeType":"FunctionDefinition","overrides":{"id":333,"nodeType":"OverrideSpecifier","overrides":[],"src":"3529:8:1"},"parameters":{"id":332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":329,"mutability":"mutable","name":"to","nameLocation":"3493:2:1","nodeType":"VariableDeclaration","scope":369,"src":"3485:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":328,"name":"address","nodeType":"ElementaryTypeName","src":"3485:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":331,"mutability":"mutable","name":"tokenId","nameLocation":"3505:7:1","nodeType":"VariableDeclaration","scope":369,"src":"3497:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":330,"name":"uint256","nodeType":"ElementaryTypeName","src":"3497:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3484:29:1"},"returnParameters":{"id":334,"nodeType":"ParameterList","parameters":[],"src":"3538:0:1"},"scope":1057,"src":"3468:406:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1162],"body":{"id":386,"nodeType":"Block","src":"4020:82:1","statements":[{"expression":{"arguments":[{"id":379,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"4045:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":378,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"4030:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4030:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":381,"nodeType":"ExpressionStatement","src":"4030:23:1"},{"expression":{"baseExpression":{"id":382,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":152,"src":"4071:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":384,"indexExpression":{"id":383,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"4087:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4071:24:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":377,"id":385,"nodeType":"Return","src":"4064:31:1"}]},"documentation":{"id":370,"nodeType":"StructuredDocumentation","src":"3880:50:1","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":387,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"3944:11:1","nodeType":"FunctionDefinition","overrides":{"id":374,"nodeType":"OverrideSpecifier","overrides":[],"src":"3993:8:1"},"parameters":{"id":373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":372,"mutability":"mutable","name":"tokenId","nameLocation":"3964:7:1","nodeType":"VariableDeclaration","scope":387,"src":"3956:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":371,"name":"uint256","nodeType":"ElementaryTypeName","src":"3956:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3955:17:1"},"returnParameters":{"id":377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":376,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":387,"src":"4011:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":375,"name":"address","nodeType":"ElementaryTypeName","src":"4011:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4010:9:1"},"scope":1057,"src":"3935:167:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1154],"body":{"id":403,"nodeType":"Block","src":"4253:69:1","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":397,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"4282:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4282:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":399,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"4296:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":400,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":392,"src":"4306:8:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":396,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":921,"src":"4263:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4263:52:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":402,"nodeType":"ExpressionStatement","src":"4263:52:1"}]},"documentation":{"id":388,"nodeType":"StructuredDocumentation","src":"4108:56:1","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":404,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4178:17:1","nodeType":"FunctionDefinition","overrides":{"id":394,"nodeType":"OverrideSpecifier","overrides":[],"src":"4244:8:1"},"parameters":{"id":393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":390,"mutability":"mutable","name":"operator","nameLocation":"4204:8:1","nodeType":"VariableDeclaration","scope":404,"src":"4196:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":389,"name":"address","nodeType":"ElementaryTypeName","src":"4196:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":392,"mutability":"mutable","name":"approved","nameLocation":"4219:8:1","nodeType":"VariableDeclaration","scope":404,"src":"4214:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":391,"name":"bool","nodeType":"ElementaryTypeName","src":"4214:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4195:33:1"},"returnParameters":{"id":395,"nodeType":"ParameterList","parameters":[],"src":"4253:0:1"},"scope":1057,"src":"4169:153:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1172],"body":{"id":421,"nodeType":"Block","src":"4491:59:1","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":415,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"4508:18:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":417,"indexExpression":{"id":416,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"4527:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:25:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":419,"indexExpression":{"id":418,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"4534:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:35:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":414,"id":420,"nodeType":"Return","src":"4501:42:1"}]},"documentation":{"id":405,"nodeType":"StructuredDocumentation","src":"4328:55:1","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":422,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4397:16:1","nodeType":"FunctionDefinition","overrides":{"id":411,"nodeType":"OverrideSpecifier","overrides":[],"src":"4467:8:1"},"parameters":{"id":410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":407,"mutability":"mutable","name":"owner","nameLocation":"4422:5:1","nodeType":"VariableDeclaration","scope":422,"src":"4414:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":406,"name":"address","nodeType":"ElementaryTypeName","src":"4414:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":409,"mutability":"mutable","name":"operator","nameLocation":"4437:8:1","nodeType":"VariableDeclaration","scope":422,"src":"4429:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":408,"name":"address","nodeType":"ElementaryTypeName","src":"4429:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4413:33:1"},"returnParameters":{"id":414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":413,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":422,"src":"4485:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":412,"name":"bool","nodeType":"ElementaryTypeName","src":"4485:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4484:6:1"},"scope":1057,"src":"4388:162:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1138],"body":{"id":448,"nodeType":"Block","src":"4731:207:1","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":435,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"4820:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4820:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":437,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":429,"src":"4834:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":434,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"4801:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":438,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4801:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4844:47:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":433,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4793:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":440,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4793:99:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":441,"nodeType":"ExpressionStatement","src":"4793:99:1"},{"expression":{"arguments":[{"id":443,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":425,"src":"4913:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":444,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"4919:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":445,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":429,"src":"4923:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":442,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"4903:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4903:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":447,"nodeType":"ExpressionStatement","src":"4903:28:1"}]},"documentation":{"id":423,"nodeType":"StructuredDocumentation","src":"4556:51:1","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":449,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"4621:12:1","nodeType":"FunctionDefinition","overrides":{"id":431,"nodeType":"OverrideSpecifier","overrides":[],"src":"4722:8:1"},"parameters":{"id":430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":425,"mutability":"mutable","name":"from","nameLocation":"4651:4:1","nodeType":"VariableDeclaration","scope":449,"src":"4643:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":424,"name":"address","nodeType":"ElementaryTypeName","src":"4643:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":427,"mutability":"mutable","name":"to","nameLocation":"4673:2:1","nodeType":"VariableDeclaration","scope":449,"src":"4665:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":426,"name":"address","nodeType":"ElementaryTypeName","src":"4665:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":429,"mutability":"mutable","name":"tokenId","nameLocation":"4693:7:1","nodeType":"VariableDeclaration","scope":449,"src":"4685:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":428,"name":"uint256","nodeType":"ElementaryTypeName","src":"4685:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4633:73:1"},"returnParameters":{"id":432,"nodeType":"ParameterList","parameters":[],"src":"4731:0:1"},"scope":1057,"src":"4612:326:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1128],"body":{"id":467,"nodeType":"Block","src":"5127:56:1","statements":[{"expression":{"arguments":[{"id":461,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":452,"src":"5154:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":462,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"5160:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":463,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":456,"src":"5164:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5173:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":460,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[468,498],"referencedDeclaration":498,"src":"5137:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5137:39:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":466,"nodeType":"ExpressionStatement","src":"5137:39:1"}]},"documentation":{"id":450,"nodeType":"StructuredDocumentation","src":"4944:55:1","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":468,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5013:16:1","nodeType":"FunctionDefinition","overrides":{"id":458,"nodeType":"OverrideSpecifier","overrides":[],"src":"5118:8:1"},"parameters":{"id":457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":452,"mutability":"mutable","name":"from","nameLocation":"5047:4:1","nodeType":"VariableDeclaration","scope":468,"src":"5039:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":451,"name":"address","nodeType":"ElementaryTypeName","src":"5039:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":454,"mutability":"mutable","name":"to","nameLocation":"5069:2:1","nodeType":"VariableDeclaration","scope":468,"src":"5061:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":453,"name":"address","nodeType":"ElementaryTypeName","src":"5061:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":456,"mutability":"mutable","name":"tokenId","nameLocation":"5089:7:1","nodeType":"VariableDeclaration","scope":468,"src":"5081:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":455,"name":"uint256","nodeType":"ElementaryTypeName","src":"5081:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5029:73:1"},"returnParameters":{"id":459,"nodeType":"ParameterList","parameters":[],"src":"5127:0:1"},"scope":1057,"src":"5004:179:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1118],"body":{"id":497,"nodeType":"Block","src":"5399:164:1","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":483,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"5436:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5436:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":485,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":475,"src":"5450:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":482,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"5417:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5417:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5460:47:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":481,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5409:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5409:99:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":489,"nodeType":"ExpressionStatement","src":"5409:99:1"},{"expression":{"arguments":[{"id":491,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"5532:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":492,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":473,"src":"5538:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":493,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":475,"src":"5542:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":494,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"5551:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":490,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"5518:13:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5518:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":496,"nodeType":"ExpressionStatement","src":"5518:38:1"}]},"documentation":{"id":469,"nodeType":"StructuredDocumentation","src":"5189:55:1","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":498,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5258:16:1","nodeType":"FunctionDefinition","overrides":{"id":479,"nodeType":"OverrideSpecifier","overrides":[],"src":"5390:8:1"},"parameters":{"id":478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":471,"mutability":"mutable","name":"from","nameLocation":"5292:4:1","nodeType":"VariableDeclaration","scope":498,"src":"5284:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":470,"name":"address","nodeType":"ElementaryTypeName","src":"5284:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":473,"mutability":"mutable","name":"to","nameLocation":"5314:2:1","nodeType":"VariableDeclaration","scope":498,"src":"5306:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":472,"name":"address","nodeType":"ElementaryTypeName","src":"5306:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":475,"mutability":"mutable","name":"tokenId","nameLocation":"5334:7:1","nodeType":"VariableDeclaration","scope":498,"src":"5326:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":474,"name":"uint256","nodeType":"ElementaryTypeName","src":"5326:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":477,"mutability":"mutable","name":"data","nameLocation":"5364:4:1","nodeType":"VariableDeclaration","scope":498,"src":"5351:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":476,"name":"bytes","nodeType":"ElementaryTypeName","src":"5351:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5274:100:1"},"returnParameters":{"id":480,"nodeType":"ParameterList","parameters":[],"src":"5399:0:1"},"scope":1057,"src":"5249:314:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":526,"nodeType":"Block","src":"6564:165:1","statements":[{"expression":{"arguments":[{"id":511,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"6584:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":512,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"6590:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":513,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"6594:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":510,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"6574:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6574:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":515,"nodeType":"ExpressionStatement","src":"6574:28:1"},{"expression":{"arguments":[{"arguments":[{"id":518,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"6643:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":519,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"6649:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":520,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"6653:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":521,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":507,"src":"6662:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":517,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"6620:22:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6620:47:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6669:52:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":516,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6612:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6612:110:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":525,"nodeType":"ExpressionStatement","src":"6612:110:1"}]},"documentation":{"id":499,"nodeType":"StructuredDocumentation","src":"5569:850:1","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":527,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"6433:13:1","nodeType":"FunctionDefinition","parameters":{"id":508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":501,"mutability":"mutable","name":"from","nameLocation":"6464:4:1","nodeType":"VariableDeclaration","scope":527,"src":"6456:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":500,"name":"address","nodeType":"ElementaryTypeName","src":"6456:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":503,"mutability":"mutable","name":"to","nameLocation":"6486:2:1","nodeType":"VariableDeclaration","scope":527,"src":"6478:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":502,"name":"address","nodeType":"ElementaryTypeName","src":"6478:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":505,"mutability":"mutable","name":"tokenId","nameLocation":"6506:7:1","nodeType":"VariableDeclaration","scope":527,"src":"6498:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":504,"name":"uint256","nodeType":"ElementaryTypeName","src":"6498:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":507,"mutability":"mutable","name":"data","nameLocation":"6536:4:1","nodeType":"VariableDeclaration","scope":527,"src":"6523:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":506,"name":"bytes","nodeType":"ElementaryTypeName","src":"6523:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6446:100:1"},"returnParameters":{"id":509,"nodeType":"ParameterList","parameters":[],"src":"6564:0:1"},"scope":1057,"src":"6424:305:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":539,"nodeType":"Block","src":"6913:40:1","statements":[{"expression":{"baseExpression":{"id":535,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":144,"src":"6930:7:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":537,"indexExpression":{"id":536,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"6938:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6930:16:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":534,"id":538,"nodeType":"Return","src":"6923:23:1"}]},"documentation":{"id":528,"nodeType":"StructuredDocumentation","src":"6735:98:1","text":" @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist"},"id":540,"implemented":true,"kind":"function","modifiers":[],"name":"_ownerOf","nameLocation":"6847:8:1","nodeType":"FunctionDefinition","parameters":{"id":531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":530,"mutability":"mutable","name":"tokenId","nameLocation":"6864:7:1","nodeType":"VariableDeclaration","scope":540,"src":"6856:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":529,"name":"uint256","nodeType":"ElementaryTypeName","src":"6856:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6855:17:1"},"returnParameters":{"id":534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":533,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":540,"src":"6904:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":532,"name":"address","nodeType":"ElementaryTypeName","src":"6904:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6903:9:1"},"scope":1057,"src":"6838:115:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":557,"nodeType":"Block","src":"7327:55:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":549,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"7353:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":548,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":540,"src":"7344:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7344:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7373:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":552,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7365:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":551,"name":"address","nodeType":"ElementaryTypeName","src":"7365:7:1","typeDescriptions":{}}},"id":554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7365:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7344:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":547,"id":556,"nodeType":"Return","src":"7337:38:1"}]},"documentation":{"id":541,"nodeType":"StructuredDocumentation","src":"6959:292:1","text":" @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),\n and stop existing when they are burned (`_burn`)."},"id":558,"implemented":true,"kind":"function","modifiers":[],"name":"_exists","nameLocation":"7265:7:1","nodeType":"FunctionDefinition","parameters":{"id":544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":543,"mutability":"mutable","name":"tokenId","nameLocation":"7281:7:1","nodeType":"VariableDeclaration","scope":558,"src":"7273:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":542,"name":"uint256","nodeType":"ElementaryTypeName","src":"7273:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7272:17:1"},"returnParameters":{"id":547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":546,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":558,"src":"7321:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":545,"name":"bool","nodeType":"ElementaryTypeName","src":"7321:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7320:6:1"},"scope":1057,"src":"7256:126:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":591,"nodeType":"Block","src":"7639:162:1","statements":[{"assignments":[569],"declarations":[{"constant":false,"id":569,"mutability":"mutable","name":"owner","nameLocation":"7657:5:1","nodeType":"VariableDeclaration","scope":591,"src":"7649:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":568,"name":"address","nodeType":"ElementaryTypeName","src":"7649:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":574,"initialValue":{"arguments":[{"id":572,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"7680:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":570,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"7665:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1057_$","typeString":"type(contract ERC721)"}},"id":571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7672:7:1","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"7665:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7665:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7649:39:1"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":575,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"7706:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":576,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":569,"src":"7717:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7706:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":579,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":569,"src":"7743:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":580,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"7750:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":578,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":422,"src":"7726:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7726:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7706:52:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":584,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"7774:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":583,"name":"getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"7762:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7762:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":586,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"7786:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7762:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7706:87:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":589,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7705:89:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":567,"id":590,"nodeType":"Return","src":"7698:96:1"}]},"documentation":{"id":559,"nodeType":"StructuredDocumentation","src":"7388:147:1","text":" @dev Returns whether `spender` is allowed to manage `tokenId`.\n Requirements:\n - `tokenId` must exist."},"id":592,"implemented":true,"kind":"function","modifiers":[],"name":"_isApprovedOrOwner","nameLocation":"7549:18:1","nodeType":"FunctionDefinition","parameters":{"id":564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":561,"mutability":"mutable","name":"spender","nameLocation":"7576:7:1","nodeType":"VariableDeclaration","scope":592,"src":"7568:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":560,"name":"address","nodeType":"ElementaryTypeName","src":"7568:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":563,"mutability":"mutable","name":"tokenId","nameLocation":"7593:7:1","nodeType":"VariableDeclaration","scope":592,"src":"7585:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":562,"name":"uint256","nodeType":"ElementaryTypeName","src":"7585:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7567:34:1"},"returnParameters":{"id":567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":566,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":592,"src":"7633:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":565,"name":"bool","nodeType":"ElementaryTypeName","src":"7633:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7632:6:1"},"scope":1057,"src":"7540:261:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":606,"nodeType":"Block","src":"8196:43:1","statements":[{"expression":{"arguments":[{"id":601,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":595,"src":"8216:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":602,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"8220:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8229:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":600,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[607,636],"referencedDeclaration":636,"src":"8206:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8206:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":605,"nodeType":"ExpressionStatement","src":"8206:26:1"}]},"documentation":{"id":593,"nodeType":"StructuredDocumentation","src":"7807:319:1","text":" @dev Safely mints `tokenId` and transfers it to `to`.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":607,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8140:9:1","nodeType":"FunctionDefinition","parameters":{"id":598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":595,"mutability":"mutable","name":"to","nameLocation":"8158:2:1","nodeType":"VariableDeclaration","scope":607,"src":"8150:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":594,"name":"address","nodeType":"ElementaryTypeName","src":"8150:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":597,"mutability":"mutable","name":"tokenId","nameLocation":"8170:7:1","nodeType":"VariableDeclaration","scope":607,"src":"8162:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":596,"name":"uint256","nodeType":"ElementaryTypeName","src":"8162:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8149:29:1"},"returnParameters":{"id":599,"nodeType":"ParameterList","parameters":[],"src":"8196:0:1"},"scope":1057,"src":"8131:108:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":635,"nodeType":"Block","src":"8574:195:1","statements":[{"expression":{"arguments":[{"id":618,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"8590:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":619,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"8594:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":617,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"8584:5:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8584:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":621,"nodeType":"ExpressionStatement","src":"8584:18:1"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"30","id":626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8664:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":625,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8656:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":624,"name":"address","nodeType":"ElementaryTypeName","src":"8656:7:1","typeDescriptions":{}}},"id":627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8656:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":628,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"8668:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":629,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"8672:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":630,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":614,"src":"8681:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":623,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"8633:22:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8633:53:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8700:52:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":622,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8612:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8612:150:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":634,"nodeType":"ExpressionStatement","src":"8612:150:1"}]},"documentation":{"id":608,"nodeType":"StructuredDocumentation","src":"8245:210:1","text":" @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":636,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8469:9:1","nodeType":"FunctionDefinition","parameters":{"id":615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":610,"mutability":"mutable","name":"to","nameLocation":"8496:2:1","nodeType":"VariableDeclaration","scope":636,"src":"8488:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":609,"name":"address","nodeType":"ElementaryTypeName","src":"8488:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":612,"mutability":"mutable","name":"tokenId","nameLocation":"8516:7:1","nodeType":"VariableDeclaration","scope":636,"src":"8508:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":611,"name":"uint256","nodeType":"ElementaryTypeName","src":"8508:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":614,"mutability":"mutable","name":"data","nameLocation":"8546:4:1","nodeType":"VariableDeclaration","scope":636,"src":"8533:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":613,"name":"bytes","nodeType":"ElementaryTypeName","src":"8533:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8478:78:1"},"returnParameters":{"id":616,"nodeType":"ParameterList","parameters":[],"src":"8574:0:1"},"scope":1057,"src":"8460:309:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":712,"nodeType":"Block","src":"9152:859:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":645,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"9170:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9184:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":647,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9176:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":646,"name":"address","nodeType":"ElementaryTypeName","src":"9176:7:1","typeDescriptions":{}}},"id":649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9176:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9170:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","id":651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9188:34:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""},"value":"ERC721: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""}],"id":644,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9162:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9162:61:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":653,"nodeType":"ExpressionStatement","src":"9162:61:1"},{"expression":{"arguments":[{"id":658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9241:17:1","subExpression":{"arguments":[{"id":656,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"9250:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":655,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"9242:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9242:16:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9260:30:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":654,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9233:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9233:58:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":661,"nodeType":"ExpressionStatement","src":"9233:58:1"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9331:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":664,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9323:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":663,"name":"address","nodeType":"ElementaryTypeName","src":"9323:7:1","typeDescriptions":{}}},"id":666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9323:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":667,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"9335:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":668,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"9339:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9348:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":662,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"9302:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9302:48:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":671,"nodeType":"ExpressionStatement","src":"9302:48:1"},{"expression":{"arguments":[{"id":676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9445:17:1","subExpression":{"arguments":[{"id":674,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"9454:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":673,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"9446:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9446:16:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9464:30:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":672,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9437:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9437:58:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":679,"nodeType":"ExpressionStatement","src":"9437:58:1"},{"id":686,"nodeType":"UncheckedBlock","src":"9506:360:1","statements":[{"expression":{"id":684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":680,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"9837:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":682,"indexExpression":{"id":681,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"9847:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9837:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9854:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9837:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":685,"nodeType":"ExpressionStatement","src":"9837:18:1"}]},{"expression":{"id":691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":687,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":144,"src":"9876:7:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":689,"indexExpression":{"id":688,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"9884:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9876:16:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":690,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"9895:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9876:21:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":692,"nodeType":"ExpressionStatement","src":"9876:21:1"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9930:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":695,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9922:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":694,"name":"address","nodeType":"ElementaryTypeName","src":"9922:7:1","typeDescriptions":{}}},"id":697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9922:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":698,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"9934:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":699,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"9938:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":693,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1072,"src":"9913:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9913:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":701,"nodeType":"EmitStatement","src":"9908:38:1"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9985:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":704,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9977:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":703,"name":"address","nodeType":"ElementaryTypeName","src":"9977:7:1","typeDescriptions":{}}},"id":706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9977:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":707,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"9989:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":708,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"9993:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10002:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":702,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"9957:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9957:47:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":711,"nodeType":"ExpressionStatement","src":"9957:47:1"}]},"documentation":{"id":637,"nodeType":"StructuredDocumentation","src":"8775:311:1","text":" @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":713,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"9100:5:1","nodeType":"FunctionDefinition","parameters":{"id":642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":639,"mutability":"mutable","name":"to","nameLocation":"9114:2:1","nodeType":"VariableDeclaration","scope":713,"src":"9106:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":638,"name":"address","nodeType":"ElementaryTypeName","src":"9106:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":641,"mutability":"mutable","name":"tokenId","nameLocation":"9126:7:1","nodeType":"VariableDeclaration","scope":713,"src":"9118:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":640,"name":"uint256","nodeType":"ElementaryTypeName","src":"9118:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9105:29:1"},"returnParameters":{"id":643,"nodeType":"ParameterList","parameters":[],"src":"9152:0:1"},"scope":1057,"src":"9091:920:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":779,"nodeType":"Block","src":"10386:713:1","statements":[{"assignments":[720],"declarations":[{"constant":false,"id":720,"mutability":"mutable","name":"owner","nameLocation":"10404:5:1","nodeType":"VariableDeclaration","scope":779,"src":"10396:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":719,"name":"address","nodeType":"ElementaryTypeName","src":"10396:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":725,"initialValue":{"arguments":[{"id":723,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"10427:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":721,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"10412:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1057_$","typeString":"type(contract ERC721)"}},"id":722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10419:7:1","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"10412:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10412:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10396:39:1"},{"expression":{"arguments":[{"id":727,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"10467:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10482:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":729,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10474:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":728,"name":"address","nodeType":"ElementaryTypeName","src":"10474:7:1","typeDescriptions":{}}},"id":731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10474:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":732,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"10486:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10495:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":726,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"10446:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10446:51:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":735,"nodeType":"ExpressionStatement","src":"10446:51:1"},{"expression":{"id":741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":736,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"10599:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":739,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"10622:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":737,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"10607:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1057_$","typeString":"type(contract ERC721)"}},"id":738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10614:7:1","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"10607:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10607:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10599:31:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":742,"nodeType":"ExpressionStatement","src":"10599:31:1"},{"expression":{"id":746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10668:31:1","subExpression":{"baseExpression":{"id":743,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":152,"src":"10675:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":745,"indexExpression":{"id":744,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"10691:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10675:24:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":747,"nodeType":"ExpressionStatement","src":"10668:31:1"},{"id":754,"nodeType":"UncheckedBlock","src":"10710:237:1","statements":[{"expression":{"id":752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":748,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"10915:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":750,"indexExpression":{"id":749,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"10925:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10915:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10935:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10915:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":753,"nodeType":"ExpressionStatement","src":"10915:21:1"}]},{"expression":{"id":758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10956:23:1","subExpression":{"baseExpression":{"id":755,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":144,"src":"10963:7:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":757,"indexExpression":{"id":756,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"10971:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10963:16:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":759,"nodeType":"ExpressionStatement","src":"10956:23:1"},{"eventCall":{"arguments":[{"id":761,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"11004:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11019:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":763,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11011:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":762,"name":"address","nodeType":"ElementaryTypeName","src":"11011:7:1","typeDescriptions":{}}},"id":765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11011:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":766,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"11023:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":760,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1072,"src":"10995:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10995:36:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":768,"nodeType":"EmitStatement","src":"10990:41:1"},{"expression":{"arguments":[{"id":770,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"11062:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11077:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":772,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11069:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":771,"name":"address","nodeType":"ElementaryTypeName","src":"11069:7:1","typeDescriptions":{}}},"id":774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11069:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":775,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"11081:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11090:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":769,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"11042:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11042:50:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":778,"nodeType":"ExpressionStatement","src":"11042:50:1"}]},"documentation":{"id":714,"nodeType":"StructuredDocumentation","src":"10017:315:1","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":780,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"10346:5:1","nodeType":"FunctionDefinition","parameters":{"id":717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":716,"mutability":"mutable","name":"tokenId","nameLocation":"10360:7:1","nodeType":"VariableDeclaration","scope":780,"src":"10352:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":715,"name":"uint256","nodeType":"ElementaryTypeName","src":"10352:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10351:17:1"},"returnParameters":{"id":718,"nodeType":"ParameterList","parameters":[],"src":"10386:0:1"},"scope":1057,"src":"10337:762:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":864,"nodeType":"Block","src":"11532:1124:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":793,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"11565:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":791,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"11550:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1057_$","typeString":"type(contract ERC721)"}},"id":792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11557:7:1","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"11550:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11550:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":795,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"11577:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11550:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11583:39:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":790,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11542:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11542:81:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":799,"nodeType":"ExpressionStatement","src":"11542:81:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":801,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"11641:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11655:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":803,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11647:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":802,"name":"address","nodeType":"ElementaryTypeName","src":"11647:7:1","typeDescriptions":{}}},"id":805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11647:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11641:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373","id":807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11659:38:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""},"value":"ERC721: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""}],"id":800,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11633:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11633:65:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":809,"nodeType":"ExpressionStatement","src":"11633:65:1"},{"expression":{"arguments":[{"id":811,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"11730:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":812,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"11736:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":813,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"11740:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11749:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":810,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"11709:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11709:42:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":816,"nodeType":"ExpressionStatement","src":"11709:42:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":820,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"11866:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":818,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"11851:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1057_$","typeString":"type(contract ERC721)"}},"id":819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11858:7:1","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"11851:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11851:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":822,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"11878:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11851:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11884:39:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":817,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11843:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11843:81:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":826,"nodeType":"ExpressionStatement","src":"11843:81:1"},{"expression":{"id":830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"11986:31:1","subExpression":{"baseExpression":{"id":827,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":152,"src":"11993:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":829,"indexExpression":{"id":828,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"12009:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11993:24:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":831,"nodeType":"ExpressionStatement","src":"11986:31:1"},{"id":844,"nodeType":"UncheckedBlock","src":"12028:496:1","statements":[{"expression":{"id":836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":832,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"12461:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":834,"indexExpression":{"id":833,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"12471:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12461:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12480:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12461:20:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":837,"nodeType":"ExpressionStatement","src":"12461:20:1"},{"expression":{"id":842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":838,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"12495:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":840,"indexExpression":{"id":839,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"12505:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12495:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12512:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12495:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":843,"nodeType":"ExpressionStatement","src":"12495:18:1"}]},{"expression":{"id":849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":845,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":144,"src":"12533:7:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":847,"indexExpression":{"id":846,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"12541:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12533:16:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":848,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"12552:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12533:21:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":850,"nodeType":"ExpressionStatement","src":"12533:21:1"},{"eventCall":{"arguments":[{"id":852,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"12579:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":853,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"12585:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":854,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"12589:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":851,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1072,"src":"12570:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":855,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12570:27:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":856,"nodeType":"EmitStatement","src":"12565:32:1"},{"expression":{"arguments":[{"id":858,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"12628:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":859,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"12634:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":860,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"12638:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12647:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":857,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"12608:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12608:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":863,"nodeType":"ExpressionStatement","src":"12608:41:1"}]},"documentation":{"id":781,"nodeType":"StructuredDocumentation","src":"11105:313:1","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":865,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"11432:9:1","nodeType":"FunctionDefinition","parameters":{"id":788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":783,"mutability":"mutable","name":"from","nameLocation":"11459:4:1","nodeType":"VariableDeclaration","scope":865,"src":"11451:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":782,"name":"address","nodeType":"ElementaryTypeName","src":"11451:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":785,"mutability":"mutable","name":"to","nameLocation":"11481:2:1","nodeType":"VariableDeclaration","scope":865,"src":"11473:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":784,"name":"address","nodeType":"ElementaryTypeName","src":"11473:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":787,"mutability":"mutable","name":"tokenId","nameLocation":"11501:7:1","nodeType":"VariableDeclaration","scope":865,"src":"11493:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":786,"name":"uint256","nodeType":"ElementaryTypeName","src":"11493:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11441:73:1"},"returnParameters":{"id":789,"nodeType":"ParameterList","parameters":[],"src":"11532:0:1"},"scope":1057,"src":"11423:1233:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":888,"nodeType":"Block","src":"12832:107:1","statements":[{"expression":{"id":877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":873,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":152,"src":"12842:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":875,"indexExpression":{"id":874,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"12858:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12842:24:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":876,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"12869:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12842:29:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":878,"nodeType":"ExpressionStatement","src":"12842:29:1"},{"eventCall":{"arguments":[{"arguments":[{"id":882,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"12910:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":880,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"12895:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1057_$","typeString":"type(contract ERC721)"}},"id":881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12902:7:1","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"12895:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12895:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":884,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"12920:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":885,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"12924:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":879,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"12886:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":886,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12886:46:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":887,"nodeType":"EmitStatement","src":"12881:51:1"}]},"documentation":{"id":866,"nodeType":"StructuredDocumentation","src":"12662:101:1","text":" @dev Approve `to` to operate on `tokenId`\n Emits an {Approval} event."},"id":889,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"12777:8:1","nodeType":"FunctionDefinition","parameters":{"id":871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":868,"mutability":"mutable","name":"to","nameLocation":"12794:2:1","nodeType":"VariableDeclaration","scope":889,"src":"12786:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":867,"name":"address","nodeType":"ElementaryTypeName","src":"12786:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":870,"mutability":"mutable","name":"tokenId","nameLocation":"12806:7:1","nodeType":"VariableDeclaration","scope":889,"src":"12798:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":869,"name":"uint256","nodeType":"ElementaryTypeName","src":"12798:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12785:29:1"},"returnParameters":{"id":872,"nodeType":"ParameterList","parameters":[],"src":"12832:0:1"},"scope":1057,"src":"12768:171:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":920,"nodeType":"Block","src":"13198:184:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":900,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":892,"src":"13216:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":901,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"13225:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13216:17:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","id":903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13235:27:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""},"value":"ERC721: approve to caller"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""}],"id":899,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13208:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13208:55:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":905,"nodeType":"ExpressionStatement","src":"13208:55:1"},{"expression":{"id":912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":906,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"13273:18:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":909,"indexExpression":{"id":907,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":892,"src":"13292:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13273:25:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":910,"indexExpression":{"id":908,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"13299:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13273:35:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":911,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":896,"src":"13311:8:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13273:46:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":913,"nodeType":"ExpressionStatement","src":"13273:46:1"},{"eventCall":{"arguments":[{"id":915,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":892,"src":"13349:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":916,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"13356:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":917,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":896,"src":"13366:8:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":914,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"13334:14:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13334:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":919,"nodeType":"EmitStatement","src":"13329:46:1"}]},"documentation":{"id":890,"nodeType":"StructuredDocumentation","src":"12945:125:1","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."},"id":921,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"13084:18:1","nodeType":"FunctionDefinition","parameters":{"id":897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":892,"mutability":"mutable","name":"owner","nameLocation":"13120:5:1","nodeType":"VariableDeclaration","scope":921,"src":"13112:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":891,"name":"address","nodeType":"ElementaryTypeName","src":"13112:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":894,"mutability":"mutable","name":"operator","nameLocation":"13143:8:1","nodeType":"VariableDeclaration","scope":921,"src":"13135:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":893,"name":"address","nodeType":"ElementaryTypeName","src":"13135:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":896,"mutability":"mutable","name":"approved","nameLocation":"13166:8:1","nodeType":"VariableDeclaration","scope":921,"src":"13161:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":895,"name":"bool","nodeType":"ElementaryTypeName","src":"13161:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13102:78:1"},"returnParameters":{"id":898,"nodeType":"ParameterList","parameters":[],"src":"13198:0:1"},"scope":1057,"src":"13075:307:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":934,"nodeType":"Block","src":"13529:70:1","statements":[{"expression":{"arguments":[{"arguments":[{"id":929,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"13555:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":928,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"13547:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13547:16:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13565:26:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":927,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13539:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13539:53:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":933,"nodeType":"ExpressionStatement","src":"13539:53:1"}]},"documentation":{"id":922,"nodeType":"StructuredDocumentation","src":"13388:73:1","text":" @dev Reverts if the `tokenId` has not been minted yet."},"id":935,"implemented":true,"kind":"function","modifiers":[],"name":"_requireMinted","nameLocation":"13475:14:1","nodeType":"FunctionDefinition","parameters":{"id":925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":924,"mutability":"mutable","name":"tokenId","nameLocation":"13498:7:1","nodeType":"VariableDeclaration","scope":935,"src":"13490:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":923,"name":"uint256","nodeType":"ElementaryTypeName","src":"13490:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13489:17:1"},"returnParameters":{"id":926,"nodeType":"ParameterList","parameters":[],"src":"13529:0:1"},"scope":1057,"src":"13466:133:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":996,"nodeType":"Block","src":"14306:676:1","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":949,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"14320:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14323:10:1","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1361,"src":"14320:13:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14320:15:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":994,"nodeType":"Block","src":"14940:36:1","statements":[{"expression":{"hexValue":"74727565","id":992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14961:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":948,"id":993,"nodeType":"Return","src":"14954:11:1"}]},"id":995,"nodeType":"IfStatement","src":"14316:660:1","trueBody":{"id":991,"nodeType":"Block","src":"14337:597:1","statements":[{"clauses":[{"block":{"id":971,"nodeType":"Block","src":"14451:91:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":965,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":963,"src":"14476:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":966,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"14486:15:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1191_$","typeString":"type(contract IERC721Receiver)"}},"id":967,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14502:16:1","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1190,"src":"14486:32:1","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":968,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14519:8:1","memberName":"selector","nodeType":"MemberAccess","src":"14486:41:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"14476:51:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":948,"id":970,"nodeType":"Return","src":"14469:58:1"}]},"errorName":"","id":972,"nodeType":"TryCatchClause","parameters":{"id":964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":963,"mutability":"mutable","name":"retval","nameLocation":"14443:6:1","nodeType":"VariableDeclaration","scope":972,"src":"14436:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":962,"name":"bytes4","nodeType":"ElementaryTypeName","src":"14436:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"14435:15:1"},"src":"14427:115:1"},{"block":{"id":988,"nodeType":"Block","src":"14571:353:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":976,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"14593:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14600:6:1","memberName":"length","nodeType":"MemberAccess","src":"14593:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14610:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14593:18:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":986,"nodeType":"Block","src":"14720:190:1","statements":[{"AST":{"nodeType":"YulBlock","src":"14806:86:1","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14843:2:1","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"14847:6:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14839:3:1"},"nodeType":"YulFunctionCall","src":"14839:15:1"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"14862:6:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14856:5:1"},"nodeType":"YulFunctionCall","src":"14856:13:1"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14832:6:1"},"nodeType":"YulFunctionCall","src":"14832:38:1"},"nodeType":"YulExpressionStatement","src":"14832:38:1"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":974,"isOffset":false,"isSlot":false,"src":"14847:6:1","valueSize":1},{"declaration":974,"isOffset":false,"isSlot":false,"src":"14862:6:1","valueSize":1}],"id":985,"nodeType":"InlineAssembly","src":"14797:95:1"}]},"id":987,"nodeType":"IfStatement","src":"14589:321:1","trueBody":{"id":984,"nodeType":"Block","src":"14613:101:1","statements":[{"expression":{"arguments":[{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":981,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14642:52:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":980,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"14635:6:1","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14635:60:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":983,"nodeType":"ExpressionStatement","src":"14635:60:1"}]}}]},"errorName":"","id":989,"nodeType":"TryCatchClause","parameters":{"id":975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":974,"mutability":"mutable","name":"reason","nameLocation":"14563:6:1","nodeType":"VariableDeclaration","scope":989,"src":"14550:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":973,"name":"bytes","nodeType":"ElementaryTypeName","src":"14550:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14549:21:1"},"src":"14543:381:1"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":956,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"14392:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":957,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14392:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":958,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"14406:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":959,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":942,"src":"14412:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":960,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"14421:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":953,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"14371:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":952,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"14355:15:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1191_$","typeString":"type(contract IERC721Receiver)"}},"id":954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14355:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$1191","typeString":"contract IERC721Receiver"}},"id":955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14375:16:1","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1190,"src":"14355:36:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14355:71:1","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":990,"nodeType":"TryStatement","src":"14351:573:1"}]}}]},"documentation":{"id":936,"nodeType":"StructuredDocumentation","src":"13605:541:1","text":" @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"},"id":997,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"14160:22:1","nodeType":"FunctionDefinition","parameters":{"id":945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":938,"mutability":"mutable","name":"from","nameLocation":"14200:4:1","nodeType":"VariableDeclaration","scope":997,"src":"14192:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":937,"name":"address","nodeType":"ElementaryTypeName","src":"14192:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":940,"mutability":"mutable","name":"to","nameLocation":"14222:2:1","nodeType":"VariableDeclaration","scope":997,"src":"14214:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":939,"name":"address","nodeType":"ElementaryTypeName","src":"14214:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":942,"mutability":"mutable","name":"tokenId","nameLocation":"14242:7:1","nodeType":"VariableDeclaration","scope":997,"src":"14234:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":941,"name":"uint256","nodeType":"ElementaryTypeName","src":"14234:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":944,"mutability":"mutable","name":"data","nameLocation":"14272:4:1","nodeType":"VariableDeclaration","scope":997,"src":"14259:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":943,"name":"bytes","nodeType":"ElementaryTypeName","src":"14259:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14182:100:1"},"returnParameters":{"id":948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":947,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":997,"src":"14300:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":946,"name":"bool","nodeType":"ElementaryTypeName","src":"14300:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14299:6:1"},"scope":1057,"src":"14151:831:1","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1042,"nodeType":"Block","src":"15856:238:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1009,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"15870:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15882:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15870:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1041,"nodeType":"IfStatement","src":"15866:222:1","trueBody":{"id":1040,"nodeType":"Block","src":"15885:203:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1012,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"15903:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15919:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1014,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15911:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1013,"name":"address","nodeType":"ElementaryTypeName","src":"15911:7:1","typeDescriptions":{}}},"id":1016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15911:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15903:18:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1025,"nodeType":"IfStatement","src":"15899:85:1","trueBody":{"id":1024,"nodeType":"Block","src":"15923:61:1","statements":[{"expression":{"id":1022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1018,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"15941:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1020,"indexExpression":{"id":1019,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"15951:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15941:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":1021,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"15960:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15941:28:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1023,"nodeType":"ExpressionStatement","src":"15941:28:1"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1026,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1002,"src":"16001:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16015:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1028,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16007:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1027,"name":"address","nodeType":"ElementaryTypeName","src":"16007:7:1","typeDescriptions":{}}},"id":1030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16007:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16001:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1039,"nodeType":"IfStatement","src":"15997:81:1","trueBody":{"id":1038,"nodeType":"Block","src":"16019:59:1","statements":[{"expression":{"id":1036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1032,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"16037:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1034,"indexExpression":{"id":1033,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1002,"src":"16047:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16037:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1035,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"16054:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16037:26:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1037,"nodeType":"ExpressionStatement","src":"16037:26:1"}]}}]}}]},"documentation":{"id":998,"nodeType":"StructuredDocumentation","src":"14988:705:1","text":" @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n - When `from` is zero, the tokens will be minted for `to`.\n - When `to` is zero, ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1043,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"15707:20:1","nodeType":"FunctionDefinition","parameters":{"id":1007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1000,"mutability":"mutable","name":"from","nameLocation":"15745:4:1","nodeType":"VariableDeclaration","scope":1043,"src":"15737:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":999,"name":"address","nodeType":"ElementaryTypeName","src":"15737:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1002,"mutability":"mutable","name":"to","nameLocation":"15767:2:1","nodeType":"VariableDeclaration","scope":1043,"src":"15759:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1001,"name":"address","nodeType":"ElementaryTypeName","src":"15759:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1004,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1043,"src":"15779:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1003,"name":"uint256","nodeType":"ElementaryTypeName","src":"15779:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1006,"mutability":"mutable","name":"batchSize","nameLocation":"15823:9:1","nodeType":"VariableDeclaration","scope":1043,"src":"15815:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1005,"name":"uint256","nodeType":"ElementaryTypeName","src":"15815:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15727:111:1"},"returnParameters":{"id":1008,"nodeType":"ParameterList","parameters":[],"src":"15856:0:1"},"scope":1057,"src":"15698:396:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1055,"nodeType":"Block","src":"16951:2:1","statements":[]},"documentation":{"id":1044,"nodeType":"StructuredDocumentation","src":"16100:695:1","text":" @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n - When `from` is zero, the tokens were minted for `to`.\n - When `to` is zero, ``from``'s tokens were burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1056,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"16809:19:1","nodeType":"FunctionDefinition","parameters":{"id":1053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1046,"mutability":"mutable","name":"from","nameLocation":"16846:4:1","nodeType":"VariableDeclaration","scope":1056,"src":"16838:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1045,"name":"address","nodeType":"ElementaryTypeName","src":"16838:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1048,"mutability":"mutable","name":"to","nameLocation":"16868:2:1","nodeType":"VariableDeclaration","scope":1056,"src":"16860:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1047,"name":"address","nodeType":"ElementaryTypeName","src":"16860:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1050,"mutability":"mutable","name":"firstTokenId","nameLocation":"16888:12:1","nodeType":"VariableDeclaration","scope":1056,"src":"16880:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1049,"name":"uint256","nodeType":"ElementaryTypeName","src":"16880:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1052,"mutability":"mutable","name":"batchSize","nameLocation":"16918:9:1","nodeType":"VariableDeclaration","scope":1056,"src":"16910:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1051,"name":"uint256","nodeType":"ElementaryTypeName","src":"16910:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16828:105:1"},"returnParameters":{"id":1054,"nodeType":"ParameterList","parameters":[],"src":"16951:0:1"},"scope":1057,"src":"16800:153:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1058,"src":"628:16327:1","usedErrors":[]}],"src":"107:16849:1"},"id":1},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[1980],"IERC721":[1173]},"id":1174,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1059,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:2"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":1060,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1174,"sourceUnit":1981,"src":"133:47:2","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1062,"name":"IERC165","nameLocations":["271:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":1980,"src":"271:7:2"},"id":1063,"nodeType":"InheritanceSpecifier","src":"271:7:2"}],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":1061,"nodeType":"StructuredDocumentation","src":"182:67:2","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":1173,"linearizedBaseContracts":[1173,1980],"name":"IERC721","nameLocation":"260:7:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1064,"nodeType":"StructuredDocumentation","src":"285:88:2","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1072,"name":"Transfer","nameLocation":"384:8:2","nodeType":"EventDefinition","parameters":{"id":1071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1066,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"409:4:2","nodeType":"VariableDeclaration","scope":1072,"src":"393:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1065,"name":"address","nodeType":"ElementaryTypeName","src":"393:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1068,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"431:2:2","nodeType":"VariableDeclaration","scope":1072,"src":"415:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1067,"name":"address","nodeType":"ElementaryTypeName","src":"415:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1070,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"451:7:2","nodeType":"VariableDeclaration","scope":1072,"src":"435:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1069,"name":"uint256","nodeType":"ElementaryTypeName","src":"435:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"392:67:2"},"src":"378:82:2"},{"anonymous":false,"documentation":{"id":1073,"nodeType":"StructuredDocumentation","src":"466:94:2","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1081,"name":"Approval","nameLocation":"571:8:2","nodeType":"EventDefinition","parameters":{"id":1080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1075,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"596:5:2","nodeType":"VariableDeclaration","scope":1081,"src":"580:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1074,"name":"address","nodeType":"ElementaryTypeName","src":"580:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1077,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"619:8:2","nodeType":"VariableDeclaration","scope":1081,"src":"603:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1076,"name":"address","nodeType":"ElementaryTypeName","src":"603:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1079,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"645:7:2","nodeType":"VariableDeclaration","scope":1081,"src":"629:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1078,"name":"uint256","nodeType":"ElementaryTypeName","src":"629:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"579:74:2"},"src":"565:89:2"},{"anonymous":false,"documentation":{"id":1082,"nodeType":"StructuredDocumentation","src":"660:117:2","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":1090,"name":"ApprovalForAll","nameLocation":"788:14:2","nodeType":"EventDefinition","parameters":{"id":1089,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1084,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"819:5:2","nodeType":"VariableDeclaration","scope":1090,"src":"803:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1083,"name":"address","nodeType":"ElementaryTypeName","src":"803:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1086,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"842:8:2","nodeType":"VariableDeclaration","scope":1090,"src":"826:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1085,"name":"address","nodeType":"ElementaryTypeName","src":"826:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1088,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"857:8:2","nodeType":"VariableDeclaration","scope":1090,"src":"852:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1087,"name":"bool","nodeType":"ElementaryTypeName","src":"852:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"802:64:2"},"src":"782:85:2"},{"documentation":{"id":1091,"nodeType":"StructuredDocumentation","src":"873:76:2","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":1098,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"963:9:2","nodeType":"FunctionDefinition","parameters":{"id":1094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1093,"mutability":"mutable","name":"owner","nameLocation":"981:5:2","nodeType":"VariableDeclaration","scope":1098,"src":"973:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1092,"name":"address","nodeType":"ElementaryTypeName","src":"973:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"972:15:2"},"returnParameters":{"id":1097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1096,"mutability":"mutable","name":"balance","nameLocation":"1019:7:2","nodeType":"VariableDeclaration","scope":1098,"src":"1011:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1095,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1010:17:2"},"scope":1173,"src":"954:74:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1099,"nodeType":"StructuredDocumentation","src":"1034:131:2","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":1106,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1179:7:2","nodeType":"FunctionDefinition","parameters":{"id":1102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1101,"mutability":"mutable","name":"tokenId","nameLocation":"1195:7:2","nodeType":"VariableDeclaration","scope":1106,"src":"1187:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1100,"name":"uint256","nodeType":"ElementaryTypeName","src":"1187:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1186:17:2"},"returnParameters":{"id":1105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1104,"mutability":"mutable","name":"owner","nameLocation":"1235:5:2","nodeType":"VariableDeclaration","scope":1106,"src":"1227:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1103,"name":"address","nodeType":"ElementaryTypeName","src":"1227:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1226:15:2"},"scope":1173,"src":"1170:72:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1107,"nodeType":"StructuredDocumentation","src":"1248:556:2","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":1118,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1818:16:2","nodeType":"FunctionDefinition","parameters":{"id":1116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1109,"mutability":"mutable","name":"from","nameLocation":"1852:4:2","nodeType":"VariableDeclaration","scope":1118,"src":"1844:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1108,"name":"address","nodeType":"ElementaryTypeName","src":"1844:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1111,"mutability":"mutable","name":"to","nameLocation":"1874:2:2","nodeType":"VariableDeclaration","scope":1118,"src":"1866:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1110,"name":"address","nodeType":"ElementaryTypeName","src":"1866:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1113,"mutability":"mutable","name":"tokenId","nameLocation":"1894:7:2","nodeType":"VariableDeclaration","scope":1118,"src":"1886:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1112,"name":"uint256","nodeType":"ElementaryTypeName","src":"1886:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1115,"mutability":"mutable","name":"data","nameLocation":"1926:4:2","nodeType":"VariableDeclaration","scope":1118,"src":"1911:19:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1114,"name":"bytes","nodeType":"ElementaryTypeName","src":"1911:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1834:102:2"},"returnParameters":{"id":1117,"nodeType":"ParameterList","parameters":[],"src":"1945:0:2"},"scope":1173,"src":"1809:137:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1119,"nodeType":"StructuredDocumentation","src":"1952:687:2","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":1128,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2653:16:2","nodeType":"FunctionDefinition","parameters":{"id":1126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1121,"mutability":"mutable","name":"from","nameLocation":"2687:4:2","nodeType":"VariableDeclaration","scope":1128,"src":"2679:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1120,"name":"address","nodeType":"ElementaryTypeName","src":"2679:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1123,"mutability":"mutable","name":"to","nameLocation":"2709:2:2","nodeType":"VariableDeclaration","scope":1128,"src":"2701:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1122,"name":"address","nodeType":"ElementaryTypeName","src":"2701:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1125,"mutability":"mutable","name":"tokenId","nameLocation":"2729:7:2","nodeType":"VariableDeclaration","scope":1128,"src":"2721:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1124,"name":"uint256","nodeType":"ElementaryTypeName","src":"2721:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2669:73:2"},"returnParameters":{"id":1127,"nodeType":"ParameterList","parameters":[],"src":"2751:0:2"},"scope":1173,"src":"2644:108:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1129,"nodeType":"StructuredDocumentation","src":"2758:732:2","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1138,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3504:12:2","nodeType":"FunctionDefinition","parameters":{"id":1136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1131,"mutability":"mutable","name":"from","nameLocation":"3534:4:2","nodeType":"VariableDeclaration","scope":1138,"src":"3526:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1130,"name":"address","nodeType":"ElementaryTypeName","src":"3526:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1133,"mutability":"mutable","name":"to","nameLocation":"3556:2:2","nodeType":"VariableDeclaration","scope":1138,"src":"3548:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1132,"name":"address","nodeType":"ElementaryTypeName","src":"3548:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1135,"mutability":"mutable","name":"tokenId","nameLocation":"3576:7:2","nodeType":"VariableDeclaration","scope":1138,"src":"3568:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1134,"name":"uint256","nodeType":"ElementaryTypeName","src":"3568:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3516:73:2"},"returnParameters":{"id":1137,"nodeType":"ParameterList","parameters":[],"src":"3598:0:2"},"scope":1173,"src":"3495:104:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1139,"nodeType":"StructuredDocumentation","src":"3605:452:2","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1146,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4071:7:2","nodeType":"FunctionDefinition","parameters":{"id":1144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1141,"mutability":"mutable","name":"to","nameLocation":"4087:2:2","nodeType":"VariableDeclaration","scope":1146,"src":"4079:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1140,"name":"address","nodeType":"ElementaryTypeName","src":"4079:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1143,"mutability":"mutable","name":"tokenId","nameLocation":"4099:7:2","nodeType":"VariableDeclaration","scope":1146,"src":"4091:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1142,"name":"uint256","nodeType":"ElementaryTypeName","src":"4091:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4078:29:2"},"returnParameters":{"id":1145,"nodeType":"ParameterList","parameters":[],"src":"4116:0:2"},"scope":1173,"src":"4062:55:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1147,"nodeType":"StructuredDocumentation","src":"4123:309:2","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":1154,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4446:17:2","nodeType":"FunctionDefinition","parameters":{"id":1152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1149,"mutability":"mutable","name":"operator","nameLocation":"4472:8:2","nodeType":"VariableDeclaration","scope":1154,"src":"4464:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1148,"name":"address","nodeType":"ElementaryTypeName","src":"4464:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1151,"mutability":"mutable","name":"_approved","nameLocation":"4487:9:2","nodeType":"VariableDeclaration","scope":1154,"src":"4482:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1150,"name":"bool","nodeType":"ElementaryTypeName","src":"4482:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4463:34:2"},"returnParameters":{"id":1153,"nodeType":"ParameterList","parameters":[],"src":"4506:0:2"},"scope":1173,"src":"4437:70:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1155,"nodeType":"StructuredDocumentation","src":"4513:139:2","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":1162,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4666:11:2","nodeType":"FunctionDefinition","parameters":{"id":1158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1157,"mutability":"mutable","name":"tokenId","nameLocation":"4686:7:2","nodeType":"VariableDeclaration","scope":1162,"src":"4678:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1156,"name":"uint256","nodeType":"ElementaryTypeName","src":"4678:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4677:17:2"},"returnParameters":{"id":1161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1160,"mutability":"mutable","name":"operator","nameLocation":"4726:8:2","nodeType":"VariableDeclaration","scope":1162,"src":"4718:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1159,"name":"address","nodeType":"ElementaryTypeName","src":"4718:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4717:18:2"},"scope":1173,"src":"4657:79:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1163,"nodeType":"StructuredDocumentation","src":"4742:138:2","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":1172,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4894:16:2","nodeType":"FunctionDefinition","parameters":{"id":1168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1165,"mutability":"mutable","name":"owner","nameLocation":"4919:5:2","nodeType":"VariableDeclaration","scope":1172,"src":"4911:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1164,"name":"address","nodeType":"ElementaryTypeName","src":"4911:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1167,"mutability":"mutable","name":"operator","nameLocation":"4934:8:2","nodeType":"VariableDeclaration","scope":1172,"src":"4926:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1166,"name":"address","nodeType":"ElementaryTypeName","src":"4926:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4910:33:2"},"returnParameters":{"id":1171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1170,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1172,"src":"4967:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1169,"name":"bool","nodeType":"ElementaryTypeName","src":"4967:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4966:6:2"},"scope":1173,"src":"4885:88:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1174,"src":"250:4725:2","usedErrors":[]}],"src":"108:4868:2"},"id":2},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[1191]},"id":1192,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1175,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"116:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":1176,"nodeType":"StructuredDocumentation","src":"141:152:3","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":1191,"linearizedBaseContracts":[1191],"name":"IERC721Receiver","nameLocation":"304:15:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1177,"nodeType":"StructuredDocumentation","src":"326:493:3","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":1190,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"833:16:3","nodeType":"FunctionDefinition","parameters":{"id":1186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1179,"mutability":"mutable","name":"operator","nameLocation":"867:8:3","nodeType":"VariableDeclaration","scope":1190,"src":"859:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1178,"name":"address","nodeType":"ElementaryTypeName","src":"859:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1181,"mutability":"mutable","name":"from","nameLocation":"893:4:3","nodeType":"VariableDeclaration","scope":1190,"src":"885:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1180,"name":"address","nodeType":"ElementaryTypeName","src":"885:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1183,"mutability":"mutable","name":"tokenId","nameLocation":"915:7:3","nodeType":"VariableDeclaration","scope":1190,"src":"907:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1182,"name":"uint256","nodeType":"ElementaryTypeName","src":"907:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1185,"mutability":"mutable","name":"data","nameLocation":"947:4:3","nodeType":"VariableDeclaration","scope":1190,"src":"932:19:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1184,"name":"bytes","nodeType":"ElementaryTypeName","src":"932:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"849:108:3"},"returnParameters":{"id":1189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1188,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1190,"src":"976:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1187,"name":"bytes4","nodeType":"ElementaryTypeName","src":"976:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"975:8:3"},"scope":1191,"src":"824:160:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1192,"src":"294:692:3","usedErrors":[]}],"src":"116:871:3"},"id":3},"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","exportedSymbols":{"Address":[1673],"Context":[1695],"ERC165":[1968],"ERC721":[1057],"ERC721URIStorage":[1316],"IERC165":[1980],"IERC721":[1173],"IERC721Metadata":[1343],"IERC721Receiver":[1191],"Math":[2845],"Strings":[1944]},"id":1317,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1193,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"128:23:4"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"../ERC721.sol","id":1194,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1317,"sourceUnit":1058,"src":"153:23:4","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1196,"name":"ERC721","nameLocations":["286:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":1057,"src":"286:6:4"},"id":1197,"nodeType":"InheritanceSpecifier","src":"286:6:4"}],"canonicalName":"ERC721URIStorage","contractDependencies":[],"contractKind":"contract","documentation":{"id":1195,"nodeType":"StructuredDocumentation","src":"178:69:4","text":" @dev ERC721 token with storage based token URI management."},"fullyImplemented":false,"id":1316,"linearizedBaseContracts":[1316,1057,1343,1173,1968,1980,1695],"name":"ERC721URIStorage","nameLocation":"266:16:4","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1200,"libraryName":{"id":1198,"name":"Strings","nameLocations":["305:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":1944,"src":"305:7:4"},"nodeType":"UsingForDirective","src":"299:26:4","typeName":{"id":1199,"name":"uint256","nodeType":"ElementaryTypeName","src":"317:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":1204,"mutability":"mutable","name":"_tokenURIs","nameLocation":"405:10:4","nodeType":"VariableDeclaration","scope":1316,"src":"370:45:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"typeName":{"id":1203,"keyType":{"id":1201,"name":"uint256","nodeType":"ElementaryTypeName","src":"378:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"370:26:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"valueType":{"id":1202,"name":"string","nodeType":"ElementaryTypeName","src":"389:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"visibility":"private"},{"baseFunctions":[317],"body":{"id":1262,"nodeType":"Block","src":"570:520:4","statements":[{"expression":{"arguments":[{"id":1214,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"595:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1213,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"580:14:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":1215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"580:23:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1216,"nodeType":"ExpressionStatement","src":"580:23:4"},{"assignments":[1218],"declarations":[{"constant":false,"id":1218,"mutability":"mutable","name":"_tokenURI","nameLocation":"628:9:4","nodeType":"VariableDeclaration","scope":1262,"src":"614:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1217,"name":"string","nodeType":"ElementaryTypeName","src":"614:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1222,"initialValue":{"baseExpression":{"id":1219,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"640:10:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":1221,"indexExpression":{"id":1220,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"651:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"640:19:4","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"VariableDeclarationStatement","src":"614:45:4"},{"assignments":[1224],"declarations":[{"constant":false,"id":1224,"mutability":"mutable","name":"base","nameLocation":"683:4:4","nodeType":"VariableDeclaration","scope":1262,"src":"669:18:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1223,"name":"string","nodeType":"ElementaryTypeName","src":"669:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1227,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1225,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":326,"src":"690:8:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":1226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"690:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"669:31:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1230,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"779:4:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1229,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"773:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1228,"name":"bytes","nodeType":"ElementaryTypeName","src":"773:5:4","typeDescriptions":{}}},"id":1231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"773:11:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"785:6:4","memberName":"length","nodeType":"MemberAccess","src":"773:18:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"795:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"773:23:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1238,"nodeType":"IfStatement","src":"769:70:4","trueBody":{"id":1237,"nodeType":"Block","src":"798:41:4","statements":[{"expression":{"id":1235,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1218,"src":"819:9:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1212,"id":1236,"nodeType":"Return","src":"812:16:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1241,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1218,"src":"947:9:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1240,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"941:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1239,"name":"bytes","nodeType":"ElementaryTypeName","src":"941:5:4","typeDescriptions":{}}},"id":1242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"941:16:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"958:6:4","memberName":"length","nodeType":"MemberAccess","src":"941:23:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"967:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"941:27:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1256,"nodeType":"IfStatement","src":"937:106:4","trueBody":{"id":1255,"nodeType":"Block","src":"970:73:4","statements":[{"expression":{"arguments":[{"arguments":[{"id":1250,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"1015:4:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1251,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1218,"src":"1021:9:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1248,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"998:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1249,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1002:12:4","memberName":"encodePacked","nodeType":"MemberAccess","src":"998:16:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"998:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1247,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"991:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1246,"name":"string","nodeType":"ElementaryTypeName","src":"991:6:4","typeDescriptions":{}}},"id":1253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"991:41:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1212,"id":1254,"nodeType":"Return","src":"984:48:4"}]}},{"expression":{"arguments":[{"id":1259,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"1075:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1257,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1060:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721URIStorage_$1316_$","typeString":"type(contract super ERC721URIStorage)"}},"id":1258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1066:8:4","memberName":"tokenURI","nodeType":"MemberAccess","referencedDeclaration":317,"src":"1060:14:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) view returns (string memory)"}},"id":1260,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1060:23:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1212,"id":1261,"nodeType":"Return","src":"1053:30:4"}]},"documentation":{"id":1205,"nodeType":"StructuredDocumentation","src":"422:55:4","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":1263,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"491:8:4","nodeType":"FunctionDefinition","overrides":{"id":1209,"nodeType":"OverrideSpecifier","overrides":[],"src":"537:8:4"},"parameters":{"id":1208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1207,"mutability":"mutable","name":"tokenId","nameLocation":"508:7:4","nodeType":"VariableDeclaration","scope":1263,"src":"500:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1206,"name":"uint256","nodeType":"ElementaryTypeName","src":"500:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"499:17:4"},"returnParameters":{"id":1212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1211,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1263,"src":"555:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1210,"name":"string","nodeType":"ElementaryTypeName","src":"555:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"554:15:4"},"scope":1316,"src":"482:608:4","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1284,"nodeType":"Block","src":"1318:133:4","statements":[{"expression":{"arguments":[{"arguments":[{"id":1273,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1266,"src":"1344:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1272,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"1336:7:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1336:16:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524337323155524953746f726167653a2055524920736574206f66206e6f6e6578697374656e7420746f6b656e","id":1275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1354:48:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4","typeString":"literal_string \"ERC721URIStorage: URI set of nonexistent token\""},"value":"ERC721URIStorage: URI set of nonexistent token"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4","typeString":"literal_string \"ERC721URIStorage: URI set of nonexistent token\""}],"id":1271,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1328:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1328:75:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1277,"nodeType":"ExpressionStatement","src":"1328:75:4"},{"expression":{"id":1282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1278,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"1413:10:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":1280,"indexExpression":{"id":1279,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1266,"src":"1424:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1413:19:4","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1281,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1268,"src":"1435:9:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1413:31:4","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1283,"nodeType":"ExpressionStatement","src":"1413:31:4"}]},"documentation":{"id":1264,"nodeType":"StructuredDocumentation","src":"1096:136:4","text":" @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n Requirements:\n - `tokenId` must exist."},"id":1285,"implemented":true,"kind":"function","modifiers":[],"name":"_setTokenURI","nameLocation":"1246:12:4","nodeType":"FunctionDefinition","parameters":{"id":1269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1266,"mutability":"mutable","name":"tokenId","nameLocation":"1267:7:4","nodeType":"VariableDeclaration","scope":1285,"src":"1259:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1265,"name":"uint256","nodeType":"ElementaryTypeName","src":"1259:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1268,"mutability":"mutable","name":"_tokenURI","nameLocation":"1290:9:4","nodeType":"VariableDeclaration","scope":1285,"src":"1276:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1267,"name":"string","nodeType":"ElementaryTypeName","src":"1276:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1258:42:4"},"returnParameters":{"id":1270,"nodeType":"ParameterList","parameters":[],"src":"1318:0:4"},"scope":1316,"src":"1237:214:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[780],"body":{"id":1314,"nodeType":"Block","src":"1727:142:4","statements":[{"expression":{"arguments":[{"id":1295,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"1749:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1292,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1737:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721URIStorage_$1316_$","typeString":"type(contract super ERC721URIStorage)"}},"id":1294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1743:5:4","memberName":"_burn","nodeType":"MemberAccess","referencedDeclaration":780,"src":"1737:11:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":1296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1737:20:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1297,"nodeType":"ExpressionStatement","src":"1737:20:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"baseExpression":{"id":1300,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"1778:10:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":1302,"indexExpression":{"id":1301,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"1789:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1778:19:4","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":1299,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1772:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1298,"name":"bytes","nodeType":"ElementaryTypeName","src":"1772:5:4","typeDescriptions":{}}},"id":1303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1772:26:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes storage pointer"}},"id":1304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1799:6:4","memberName":"length","nodeType":"MemberAccess","src":"1772:33:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1809:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1772:38:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1313,"nodeType":"IfStatement","src":"1768:95:4","trueBody":{"id":1312,"nodeType":"Block","src":"1812:51:4","statements":[{"expression":{"id":1310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"1826:26:4","subExpression":{"baseExpression":{"id":1307,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"1833:10:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":1309,"indexExpression":{"id":1308,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"1844:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1833:19:4","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1311,"nodeType":"ExpressionStatement","src":"1826:26:4"}]}}]},"documentation":{"id":1286,"nodeType":"StructuredDocumentation","src":"1457:207:4","text":" @dev See {ERC721-_burn}. This override additionally checks to see if a\n token-specific URI was set for the token, and if so, it deletes the token URI from\n the storage mapping."},"id":1315,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"1678:5:4","nodeType":"FunctionDefinition","overrides":{"id":1290,"nodeType":"OverrideSpecifier","overrides":[],"src":"1718:8:4"},"parameters":{"id":1289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1288,"mutability":"mutable","name":"tokenId","nameLocation":"1692:7:4","nodeType":"VariableDeclaration","scope":1315,"src":"1684:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1287,"name":"uint256","nodeType":"ElementaryTypeName","src":"1684:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1683:17:4"},"returnParameters":{"id":1291,"nodeType":"ParameterList","parameters":[],"src":"1727:0:4"},"scope":1316,"src":"1669:200:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1317,"src":"248:1623:4","usedErrors":[]}],"src":"128:1744:4"},"id":4},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","exportedSymbols":{"IERC165":[1980],"IERC721":[1173],"IERC721Metadata":[1343]},"id":1344,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1318,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:5"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":1319,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1344,"sourceUnit":1174,"src":"137:24:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1321,"name":"IERC721","nameLocations":["326:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":1173,"src":"326:7:5"},"id":1322,"nodeType":"InheritanceSpecifier","src":"326:7:5"}],"canonicalName":"IERC721Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":1320,"nodeType":"StructuredDocumentation","src":"163:133:5","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":1343,"linearizedBaseContracts":[1343,1173,1980],"name":"IERC721Metadata","nameLocation":"307:15:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1323,"nodeType":"StructuredDocumentation","src":"340:58:5","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":1328,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"412:4:5","nodeType":"FunctionDefinition","parameters":{"id":1324,"nodeType":"ParameterList","parameters":[],"src":"416:2:5"},"returnParameters":{"id":1327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1326,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1328,"src":"442:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1325,"name":"string","nodeType":"ElementaryTypeName","src":"442:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"441:15:5"},"scope":1343,"src":"403:54:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1329,"nodeType":"StructuredDocumentation","src":"463:60:5","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":1334,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"537:6:5","nodeType":"FunctionDefinition","parameters":{"id":1330,"nodeType":"ParameterList","parameters":[],"src":"543:2:5"},"returnParameters":{"id":1333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1332,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1334,"src":"569:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1331,"name":"string","nodeType":"ElementaryTypeName","src":"569:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"568:15:5"},"scope":1343,"src":"528:56:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1335,"nodeType":"StructuredDocumentation","src":"590:90:5","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":1342,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"694:8:5","nodeType":"FunctionDefinition","parameters":{"id":1338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1337,"mutability":"mutable","name":"tokenId","nameLocation":"711:7:5","nodeType":"VariableDeclaration","scope":1342,"src":"703:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1336,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"702:17:5"},"returnParameters":{"id":1341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1340,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1342,"src":"743:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1339,"name":"string","nodeType":"ElementaryTypeName","src":"743:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"742:15:5"},"scope":1343,"src":"685:73:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1344,"src":"297:463:5","usedErrors":[]}],"src":"112:649:5"},"id":5},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[1673]},"id":1674,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1345,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:6"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":1346,"nodeType":"StructuredDocumentation","src":"126:67:6","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1673,"linearizedBaseContracts":[1673],"name":"Address","nameLocation":"202:7:6","nodeType":"ContractDefinition","nodes":[{"body":{"id":1360,"nodeType":"Block","src":"1241:254:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1354,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1349,"src":"1465:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1473:4:6","memberName":"code","nodeType":"MemberAccess","src":"1465:12:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1478:6:6","memberName":"length","nodeType":"MemberAccess","src":"1465:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1487:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1465:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1353,"id":1359,"nodeType":"Return","src":"1458:30:6"}]},"documentation":{"id":1347,"nodeType":"StructuredDocumentation","src":"216:954:6","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1361,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1184:10:6","nodeType":"FunctionDefinition","parameters":{"id":1350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1349,"mutability":"mutable","name":"account","nameLocation":"1203:7:6","nodeType":"VariableDeclaration","scope":1361,"src":"1195:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1348,"name":"address","nodeType":"ElementaryTypeName","src":"1195:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1194:17:6"},"returnParameters":{"id":1353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1352,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1361,"src":"1235:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1351,"name":"bool","nodeType":"ElementaryTypeName","src":"1235:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1234:6:6"},"scope":1673,"src":"1175:320:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1394,"nodeType":"Block","src":"2483:241:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1372,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2509:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1673","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1673","typeString":"library Address"}],"id":1371,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2501:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1370,"name":"address","nodeType":"ElementaryTypeName","src":"2501:7:6","typeDescriptions":{}}},"id":1373,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2501:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2515:7:6","memberName":"balance","nodeType":"MemberAccess","src":"2501:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1375,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"2526:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2501:31:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2534:31:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1369,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2493:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1378,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2493:73:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1379,"nodeType":"ExpressionStatement","src":"2493:73:6"},{"assignments":[1381,null],"declarations":[{"constant":false,"id":1381,"mutability":"mutable","name":"success","nameLocation":"2583:7:6","nodeType":"VariableDeclaration","scope":1394,"src":"2578:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1380,"name":"bool","nodeType":"ElementaryTypeName","src":"2578:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1388,"initialValue":{"arguments":[{"hexValue":"","id":1386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2626:2:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1382,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"2596:9:6","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2606:4:6","memberName":"call","nodeType":"MemberAccess","src":"2596:14:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1384,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"2618:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2596:29:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2596:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2577:52:6"},{"expression":{"arguments":[{"id":1390,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"2647:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2656:60:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1389,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2639:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:78:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1393,"nodeType":"ExpressionStatement","src":"2639:78:6"}]},"documentation":{"id":1362,"nodeType":"StructuredDocumentation","src":"1501:906:6","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1395,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2421:9:6","nodeType":"FunctionDefinition","parameters":{"id":1367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1364,"mutability":"mutable","name":"recipient","nameLocation":"2447:9:6","nodeType":"VariableDeclaration","scope":1395,"src":"2431:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1363,"name":"address","nodeType":"ElementaryTypeName","src":"2431:15:6","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1366,"mutability":"mutable","name":"amount","nameLocation":"2466:6:6","nodeType":"VariableDeclaration","scope":1395,"src":"2458:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1365,"name":"uint256","nodeType":"ElementaryTypeName","src":"2458:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:43:6"},"returnParameters":{"id":1368,"nodeType":"ParameterList","parameters":[],"src":"2483:0:6"},"scope":1673,"src":"2412:312:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1412,"nodeType":"Block","src":"3555:96:6","statements":[{"expression":{"arguments":[{"id":1406,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1398,"src":"3594:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1407,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"3602:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3608:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3611:32:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1405,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1453,1497],"referencedDeclaration":1497,"src":"3572:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3572:72:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1404,"id":1411,"nodeType":"Return","src":"3565:79:6"}]},"documentation":{"id":1396,"nodeType":"StructuredDocumentation","src":"2730:731:6","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1413,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3475:12:6","nodeType":"FunctionDefinition","parameters":{"id":1401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1398,"mutability":"mutable","name":"target","nameLocation":"3496:6:6","nodeType":"VariableDeclaration","scope":1413,"src":"3488:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1397,"name":"address","nodeType":"ElementaryTypeName","src":"3488:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1400,"mutability":"mutable","name":"data","nameLocation":"3517:4:6","nodeType":"VariableDeclaration","scope":1413,"src":"3504:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1399,"name":"bytes","nodeType":"ElementaryTypeName","src":"3504:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3487:35:6"},"returnParameters":{"id":1404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1403,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1413,"src":"3541:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1402,"name":"bytes","nodeType":"ElementaryTypeName","src":"3541:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3540:14:6"},"scope":1673,"src":"3466:185:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1432,"nodeType":"Block","src":"4020:76:6","statements":[{"expression":{"arguments":[{"id":1426,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1416,"src":"4059:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1427,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"4067:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4073:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1429,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"4076:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1425,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1453,1497],"referencedDeclaration":1497,"src":"4037:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4037:52:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1424,"id":1431,"nodeType":"Return","src":"4030:59:6"}]},"documentation":{"id":1414,"nodeType":"StructuredDocumentation","src":"3657:211:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1433,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3882:12:6","nodeType":"FunctionDefinition","parameters":{"id":1421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1416,"mutability":"mutable","name":"target","nameLocation":"3912:6:6","nodeType":"VariableDeclaration","scope":1433,"src":"3904:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1415,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1418,"mutability":"mutable","name":"data","nameLocation":"3941:4:6","nodeType":"VariableDeclaration","scope":1433,"src":"3928:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1417,"name":"bytes","nodeType":"ElementaryTypeName","src":"3928:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1420,"mutability":"mutable","name":"errorMessage","nameLocation":"3969:12:6","nodeType":"VariableDeclaration","scope":1433,"src":"3955:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1419,"name":"string","nodeType":"ElementaryTypeName","src":"3955:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3894:93:6"},"returnParameters":{"id":1424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1423,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1433,"src":"4006:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1422,"name":"bytes","nodeType":"ElementaryTypeName","src":"4006:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4005:14:6"},"scope":1673,"src":"3873:223:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1452,"nodeType":"Block","src":"4601:111:6","statements":[{"expression":{"arguments":[{"id":1446,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1436,"src":"4640:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1447,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"4648:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1448,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1440,"src":"4654:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4661:43:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1445,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1453,1497],"referencedDeclaration":1497,"src":"4618:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4618:87:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1444,"id":1451,"nodeType":"Return","src":"4611:94:6"}]},"documentation":{"id":1434,"nodeType":"StructuredDocumentation","src":"4102:351:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1453,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4467:21:6","nodeType":"FunctionDefinition","parameters":{"id":1441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1436,"mutability":"mutable","name":"target","nameLocation":"4506:6:6","nodeType":"VariableDeclaration","scope":1453,"src":"4498:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1435,"name":"address","nodeType":"ElementaryTypeName","src":"4498:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1438,"mutability":"mutable","name":"data","nameLocation":"4535:4:6","nodeType":"VariableDeclaration","scope":1453,"src":"4522:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1437,"name":"bytes","nodeType":"ElementaryTypeName","src":"4522:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1440,"mutability":"mutable","name":"value","nameLocation":"4557:5:6","nodeType":"VariableDeclaration","scope":1453,"src":"4549:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1439,"name":"uint256","nodeType":"ElementaryTypeName","src":"4549:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4488:80:6"},"returnParameters":{"id":1444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1443,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1453,"src":"4587:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1442,"name":"bytes","nodeType":"ElementaryTypeName","src":"4587:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4586:14:6"},"scope":1673,"src":"4458:254:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1496,"nodeType":"Block","src":"5139:267:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1470,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5165:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1673","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1673","typeString":"library Address"}],"id":1469,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5157:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1468,"name":"address","nodeType":"ElementaryTypeName","src":"5157:7:6","typeDescriptions":{}}},"id":1471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5157:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5171:7:6","memberName":"balance","nodeType":"MemberAccess","src":"5157:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1473,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1460,"src":"5182:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:30:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5189:40:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1467,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5149:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5149:81:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1477,"nodeType":"ExpressionStatement","src":"5149:81:6"},{"assignments":[1479,1481],"declarations":[{"constant":false,"id":1479,"mutability":"mutable","name":"success","nameLocation":"5246:7:6","nodeType":"VariableDeclaration","scope":1496,"src":"5241:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1478,"name":"bool","nodeType":"ElementaryTypeName","src":"5241:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1481,"mutability":"mutable","name":"returndata","nameLocation":"5268:10:6","nodeType":"VariableDeclaration","scope":1496,"src":"5255:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1480,"name":"bytes","nodeType":"ElementaryTypeName","src":"5255:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1488,"initialValue":{"arguments":[{"id":1486,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"5308:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1482,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1456,"src":"5282:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5289:4:6","memberName":"call","nodeType":"MemberAccess","src":"5282:11:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1484,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1460,"src":"5301:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5282:25:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5282:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5240:73:6"},{"expression":{"arguments":[{"id":1490,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1456,"src":"5357:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1491,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1479,"src":"5365:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1492,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1481,"src":"5374:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1493,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"5386:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1489,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1628,"src":"5330:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5330:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1466,"id":1495,"nodeType":"Return","src":"5323:76:6"}]},"documentation":{"id":1454,"nodeType":"StructuredDocumentation","src":"4718:237:6","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1497,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4969:21:6","nodeType":"FunctionDefinition","parameters":{"id":1463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1456,"mutability":"mutable","name":"target","nameLocation":"5008:6:6","nodeType":"VariableDeclaration","scope":1497,"src":"5000:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1455,"name":"address","nodeType":"ElementaryTypeName","src":"5000:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1458,"mutability":"mutable","name":"data","nameLocation":"5037:4:6","nodeType":"VariableDeclaration","scope":1497,"src":"5024:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1457,"name":"bytes","nodeType":"ElementaryTypeName","src":"5024:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1460,"mutability":"mutable","name":"value","nameLocation":"5059:5:6","nodeType":"VariableDeclaration","scope":1497,"src":"5051:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1459,"name":"uint256","nodeType":"ElementaryTypeName","src":"5051:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1462,"mutability":"mutable","name":"errorMessage","nameLocation":"5088:12:6","nodeType":"VariableDeclaration","scope":1497,"src":"5074:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1461,"name":"string","nodeType":"ElementaryTypeName","src":"5074:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4990:116:6"},"returnParameters":{"id":1466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1465,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1497,"src":"5125:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1464,"name":"bytes","nodeType":"ElementaryTypeName","src":"5125:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5124:14:6"},"scope":1673,"src":"4960:446:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1513,"nodeType":"Block","src":"5683:97:6","statements":[{"expression":{"arguments":[{"id":1508,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1500,"src":"5719:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1509,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1502,"src":"5727:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5733:39:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1507,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1514,1543],"referencedDeclaration":1543,"src":"5700:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5700:73:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1506,"id":1512,"nodeType":"Return","src":"5693:80:6"}]},"documentation":{"id":1498,"nodeType":"StructuredDocumentation","src":"5412:166:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1514,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5592:18:6","nodeType":"FunctionDefinition","parameters":{"id":1503,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1500,"mutability":"mutable","name":"target","nameLocation":"5619:6:6","nodeType":"VariableDeclaration","scope":1514,"src":"5611:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1499,"name":"address","nodeType":"ElementaryTypeName","src":"5611:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1502,"mutability":"mutable","name":"data","nameLocation":"5640:4:6","nodeType":"VariableDeclaration","scope":1514,"src":"5627:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1501,"name":"bytes","nodeType":"ElementaryTypeName","src":"5627:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5610:35:6"},"returnParameters":{"id":1506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1505,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1514,"src":"5669:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1504,"name":"bytes","nodeType":"ElementaryTypeName","src":"5669:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5668:14:6"},"scope":1673,"src":"5583:197:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1542,"nodeType":"Block","src":"6122:168:6","statements":[{"assignments":[1527,1529],"declarations":[{"constant":false,"id":1527,"mutability":"mutable","name":"success","nameLocation":"6138:7:6","nodeType":"VariableDeclaration","scope":1542,"src":"6133:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1526,"name":"bool","nodeType":"ElementaryTypeName","src":"6133:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1529,"mutability":"mutable","name":"returndata","nameLocation":"6160:10:6","nodeType":"VariableDeclaration","scope":1542,"src":"6147:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1528,"name":"bytes","nodeType":"ElementaryTypeName","src":"6147:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1534,"initialValue":{"arguments":[{"id":1532,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1519,"src":"6192:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1530,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1517,"src":"6174:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6181:10:6","memberName":"staticcall","nodeType":"MemberAccess","src":"6174:17:6","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:23:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6132:65:6"},{"expression":{"arguments":[{"id":1536,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1517,"src":"6241:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1537,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1527,"src":"6249:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1538,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1529,"src":"6258:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1539,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"6270:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1535,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1628,"src":"6214:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6214:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1525,"id":1541,"nodeType":"Return","src":"6207:76:6"}]},"documentation":{"id":1515,"nodeType":"StructuredDocumentation","src":"5786:173:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1543,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5973:18:6","nodeType":"FunctionDefinition","parameters":{"id":1522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1517,"mutability":"mutable","name":"target","nameLocation":"6009:6:6","nodeType":"VariableDeclaration","scope":1543,"src":"6001:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1516,"name":"address","nodeType":"ElementaryTypeName","src":"6001:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1519,"mutability":"mutable","name":"data","nameLocation":"6038:4:6","nodeType":"VariableDeclaration","scope":1543,"src":"6025:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1518,"name":"bytes","nodeType":"ElementaryTypeName","src":"6025:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1521,"mutability":"mutable","name":"errorMessage","nameLocation":"6066:12:6","nodeType":"VariableDeclaration","scope":1543,"src":"6052:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1520,"name":"string","nodeType":"ElementaryTypeName","src":"6052:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5991:93:6"},"returnParameters":{"id":1525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1524,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1543,"src":"6108:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1523,"name":"bytes","nodeType":"ElementaryTypeName","src":"6108:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6107:14:6"},"scope":1673,"src":"5964:326:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1559,"nodeType":"Block","src":"6566:101:6","statements":[{"expression":{"arguments":[{"id":1554,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"6604:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1555,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1548,"src":"6612:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6618:41:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1553,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1560,1589],"referencedDeclaration":1589,"src":"6583:20:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6583:77:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1552,"id":1558,"nodeType":"Return","src":"6576:84:6"}]},"documentation":{"id":1544,"nodeType":"StructuredDocumentation","src":"6296:168:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1560,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6478:20:6","nodeType":"FunctionDefinition","parameters":{"id":1549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1546,"mutability":"mutable","name":"target","nameLocation":"6507:6:6","nodeType":"VariableDeclaration","scope":1560,"src":"6499:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1545,"name":"address","nodeType":"ElementaryTypeName","src":"6499:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1548,"mutability":"mutable","name":"data","nameLocation":"6528:4:6","nodeType":"VariableDeclaration","scope":1560,"src":"6515:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1547,"name":"bytes","nodeType":"ElementaryTypeName","src":"6515:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6498:35:6"},"returnParameters":{"id":1552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1551,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1560,"src":"6552:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1550,"name":"bytes","nodeType":"ElementaryTypeName","src":"6552:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6551:14:6"},"scope":1673,"src":"6469:198:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1588,"nodeType":"Block","src":"7008:170:6","statements":[{"assignments":[1573,1575],"declarations":[{"constant":false,"id":1573,"mutability":"mutable","name":"success","nameLocation":"7024:7:6","nodeType":"VariableDeclaration","scope":1588,"src":"7019:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1572,"name":"bool","nodeType":"ElementaryTypeName","src":"7019:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1575,"mutability":"mutable","name":"returndata","nameLocation":"7046:10:6","nodeType":"VariableDeclaration","scope":1588,"src":"7033:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1574,"name":"bytes","nodeType":"ElementaryTypeName","src":"7033:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1580,"initialValue":{"arguments":[{"id":1578,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1565,"src":"7080:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1576,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1563,"src":"7060:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7067:12:6","memberName":"delegatecall","nodeType":"MemberAccess","src":"7060:19:6","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7060:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7018:67:6"},{"expression":{"arguments":[{"id":1582,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1563,"src":"7129:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1583,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1573,"src":"7137:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1584,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1575,"src":"7146:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1585,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1567,"src":"7158:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1581,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1628,"src":"7102:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7102:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1571,"id":1587,"nodeType":"Return","src":"7095:76:6"}]},"documentation":{"id":1561,"nodeType":"StructuredDocumentation","src":"6673:175:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1589,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6862:20:6","nodeType":"FunctionDefinition","parameters":{"id":1568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1563,"mutability":"mutable","name":"target","nameLocation":"6900:6:6","nodeType":"VariableDeclaration","scope":1589,"src":"6892:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1562,"name":"address","nodeType":"ElementaryTypeName","src":"6892:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1565,"mutability":"mutable","name":"data","nameLocation":"6929:4:6","nodeType":"VariableDeclaration","scope":1589,"src":"6916:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1564,"name":"bytes","nodeType":"ElementaryTypeName","src":"6916:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1567,"mutability":"mutable","name":"errorMessage","nameLocation":"6957:12:6","nodeType":"VariableDeclaration","scope":1589,"src":"6943:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1566,"name":"string","nodeType":"ElementaryTypeName","src":"6943:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6882:93:6"},"returnParameters":{"id":1571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1570,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1589,"src":"6994:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1569,"name":"bytes","nodeType":"ElementaryTypeName","src":"6994:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6993:14:6"},"scope":1673,"src":"6853:325:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1627,"nodeType":"Block","src":"7660:434:6","statements":[{"condition":{"id":1603,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"7674:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1625,"nodeType":"Block","src":"8030:58:6","statements":[{"expression":{"arguments":[{"id":1621,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"8052:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1622,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"8064:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1620,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1672,"src":"8044:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8044:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1624,"nodeType":"ExpressionStatement","src":"8044:33:6"}]},"id":1626,"nodeType":"IfStatement","src":"7670:418:6","trueBody":{"id":1619,"nodeType":"Block","src":"7683:341:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1604,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"7701:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7712:6:6","memberName":"length","nodeType":"MemberAccess","src":"7701:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7722:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7701:22:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1616,"nodeType":"IfStatement","src":"7697:286:6","trueBody":{"id":1615,"nodeType":"Block","src":"7725:258:6","statements":[{"expression":{"arguments":[{"arguments":[{"id":1610,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1592,"src":"7927:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1609,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1361,"src":"7916:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7916:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7936:31:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1608,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7908:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1613,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7908:60:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1614,"nodeType":"ExpressionStatement","src":"7908:60:6"}]}},{"expression":{"id":1617,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"8003:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1602,"id":1618,"nodeType":"Return","src":"7996:17:6"}]}}]},"documentation":{"id":1590,"nodeType":"StructuredDocumentation","src":"7184:277:6","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1628,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7475:26:6","nodeType":"FunctionDefinition","parameters":{"id":1599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1592,"mutability":"mutable","name":"target","nameLocation":"7519:6:6","nodeType":"VariableDeclaration","scope":1628,"src":"7511:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1591,"name":"address","nodeType":"ElementaryTypeName","src":"7511:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1594,"mutability":"mutable","name":"success","nameLocation":"7540:7:6","nodeType":"VariableDeclaration","scope":1628,"src":"7535:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1593,"name":"bool","nodeType":"ElementaryTypeName","src":"7535:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1596,"mutability":"mutable","name":"returndata","nameLocation":"7570:10:6","nodeType":"VariableDeclaration","scope":1628,"src":"7557:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1595,"name":"bytes","nodeType":"ElementaryTypeName","src":"7557:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1598,"mutability":"mutable","name":"errorMessage","nameLocation":"7604:12:6","nodeType":"VariableDeclaration","scope":1628,"src":"7590:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1597,"name":"string","nodeType":"ElementaryTypeName","src":"7590:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7501:121:6"},"returnParameters":{"id":1602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1601,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1628,"src":"7646:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1600,"name":"bytes","nodeType":"ElementaryTypeName","src":"7646:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7645:14:6"},"scope":1673,"src":"7466:628:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1651,"nodeType":"Block","src":"8475:135:6","statements":[{"condition":{"id":1640,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1631,"src":"8489:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1649,"nodeType":"Block","src":"8546:58:6","statements":[{"expression":{"arguments":[{"id":1645,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1633,"src":"8568:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1646,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1635,"src":"8580:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1644,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1672,"src":"8560:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8560:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1648,"nodeType":"ExpressionStatement","src":"8560:33:6"}]},"id":1650,"nodeType":"IfStatement","src":"8485:119:6","trueBody":{"id":1643,"nodeType":"Block","src":"8498:42:6","statements":[{"expression":{"id":1641,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1633,"src":"8519:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1639,"id":1642,"nodeType":"Return","src":"8512:17:6"}]}}]},"documentation":{"id":1629,"nodeType":"StructuredDocumentation","src":"8100:210:6","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1652,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8324:16:6","nodeType":"FunctionDefinition","parameters":{"id":1636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1631,"mutability":"mutable","name":"success","nameLocation":"8355:7:6","nodeType":"VariableDeclaration","scope":1652,"src":"8350:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1630,"name":"bool","nodeType":"ElementaryTypeName","src":"8350:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1633,"mutability":"mutable","name":"returndata","nameLocation":"8385:10:6","nodeType":"VariableDeclaration","scope":1652,"src":"8372:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1632,"name":"bytes","nodeType":"ElementaryTypeName","src":"8372:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1635,"mutability":"mutable","name":"errorMessage","nameLocation":"8419:12:6","nodeType":"VariableDeclaration","scope":1652,"src":"8405:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1634,"name":"string","nodeType":"ElementaryTypeName","src":"8405:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8340:97:6"},"returnParameters":{"id":1639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1638,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1652,"src":"8461:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1637,"name":"bytes","nodeType":"ElementaryTypeName","src":"8461:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8460:14:6"},"scope":1673,"src":"8315:295:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1671,"nodeType":"Block","src":"8699:457:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1659,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1654,"src":"8775:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8786:6:6","memberName":"length","nodeType":"MemberAccess","src":"8775:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8795:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8775:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1669,"nodeType":"Block","src":"9105:45:6","statements":[{"expression":{"arguments":[{"id":1666,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"9126:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1665,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9119:6:6","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9119:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1668,"nodeType":"ExpressionStatement","src":"9119:20:6"}]},"id":1670,"nodeType":"IfStatement","src":"8771:379:6","trueBody":{"id":1664,"nodeType":"Block","src":"8798:301:6","statements":[{"AST":{"nodeType":"YulBlock","src":"8956:133:6","statements":[{"nodeType":"YulVariableDeclaration","src":"8974:40:6","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9003:10:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8997:5:6"},"nodeType":"YulFunctionCall","src":"8997:17:6"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8978:15:6","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9042:2:6","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9046:10:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9038:3:6"},"nodeType":"YulFunctionCall","src":"9038:19:6"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9059:15:6"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9031:6:6"},"nodeType":"YulFunctionCall","src":"9031:44:6"},"nodeType":"YulExpressionStatement","src":"9031:44:6"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1654,"isOffset":false,"isSlot":false,"src":"9003:10:6","valueSize":1},{"declaration":1654,"isOffset":false,"isSlot":false,"src":"9046:10:6","valueSize":1}],"id":1663,"nodeType":"InlineAssembly","src":"8947:142:6"}]}}]},"id":1672,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8625:7:6","nodeType":"FunctionDefinition","parameters":{"id":1657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1654,"mutability":"mutable","name":"returndata","nameLocation":"8646:10:6","nodeType":"VariableDeclaration","scope":1672,"src":"8633:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1653,"name":"bytes","nodeType":"ElementaryTypeName","src":"8633:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1656,"mutability":"mutable","name":"errorMessage","nameLocation":"8672:12:6","nodeType":"VariableDeclaration","scope":1672,"src":"8658:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1655,"name":"string","nodeType":"ElementaryTypeName","src":"8658:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8632:53:6"},"returnParameters":{"id":1658,"nodeType":"ParameterList","parameters":[],"src":"8699:0:6"},"scope":1673,"src":"8616:540:6","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1674,"src":"194:8964:6","usedErrors":[]}],"src":"101:9058:6"},"id":6},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1695]},"id":1696,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1675,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:7"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1676,"nodeType":"StructuredDocumentation","src":"111:496:7","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1695,"linearizedBaseContracts":[1695],"name":"Context","nameLocation":"626:7:7","nodeType":"ContractDefinition","nodes":[{"body":{"id":1684,"nodeType":"Block","src":"702:34:7","statements":[{"expression":{"expression":{"id":1681,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:7","memberName":"sender","nodeType":"MemberAccess","src":"719:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1680,"id":1683,"nodeType":"Return","src":"712:17:7"}]},"id":1685,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:7","nodeType":"FunctionDefinition","parameters":{"id":1677,"nodeType":"ParameterList","parameters":[],"src":"659:2:7"},"returnParameters":{"id":1680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1679,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1685,"src":"693:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1678,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:7"},"scope":1695,"src":"640:96:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1693,"nodeType":"Block","src":"809:32:7","statements":[{"expression":{"expression":{"id":1690,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:7","memberName":"data","nodeType":"MemberAccess","src":"826:8:7","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1689,"id":1692,"nodeType":"Return","src":"819:15:7"}]},"id":1694,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:7","nodeType":"FunctionDefinition","parameters":{"id":1686,"nodeType":"ParameterList","parameters":[],"src":"759:2:7"},"returnParameters":{"id":1689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1688,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1694,"src":"793:14:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1687,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:7"},"scope":1695,"src":"742:99:7","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1696,"src":"608:235:7","usedErrors":[]}],"src":"86:758:7"},"id":7},"@openzeppelin/contracts/utils/Counters.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Counters.sol","exportedSymbols":{"Counters":[1769]},"id":1770,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1697,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"87:23:8"},{"abstract":false,"baseContracts":[],"canonicalName":"Counters","contractDependencies":[],"contractKind":"library","documentation":{"id":1698,"nodeType":"StructuredDocumentation","src":"112:311:8","text":" @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"},"fullyImplemented":true,"id":1769,"linearizedBaseContracts":[1769],"name":"Counters","nameLocation":"432:8:8","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Counters.Counter","id":1701,"members":[{"constant":false,"id":1700,"mutability":"mutable","name":"_value","nameLocation":"794:6:8","nodeType":"VariableDeclaration","scope":1701,"src":"786:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1699,"name":"uint256","nodeType":"ElementaryTypeName","src":"786:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Counter","nameLocation":"454:7:8","nodeType":"StructDefinition","scope":1769,"src":"447:374:8","visibility":"public"},{"body":{"id":1712,"nodeType":"Block","src":"901:38:8","statements":[{"expression":{"expression":{"id":1709,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1704,"src":"918:7:8","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1701_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":1710,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"926:6:8","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1700,"src":"918:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1708,"id":1711,"nodeType":"Return","src":"911:21:8"}]},"id":1713,"implemented":true,"kind":"function","modifiers":[],"name":"current","nameLocation":"836:7:8","nodeType":"FunctionDefinition","parameters":{"id":1705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1704,"mutability":"mutable","name":"counter","nameLocation":"860:7:8","nodeType":"VariableDeclaration","scope":1713,"src":"844:23:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1701_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":1703,"nodeType":"UserDefinedTypeName","pathNode":{"id":1702,"name":"Counter","nameLocations":["844:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":1701,"src":"844:7:8"},"referencedDeclaration":1701,"src":"844:7:8","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1701_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"843:25:8"},"returnParameters":{"id":1708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1707,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1713,"src":"892:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1706,"name":"uint256","nodeType":"ElementaryTypeName","src":"892:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"891:9:8"},"scope":1769,"src":"827:112:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1726,"nodeType":"Block","src":"998:70:8","statements":[{"id":1725,"nodeType":"UncheckedBlock","src":"1008:54:8","statements":[{"expression":{"id":1723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1719,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"1032:7:8","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1701_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":1721,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1040:6:8","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1700,"src":"1032:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1050:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1032:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1724,"nodeType":"ExpressionStatement","src":"1032:19:8"}]}]},"id":1727,"implemented":true,"kind":"function","modifiers":[],"name":"increment","nameLocation":"954:9:8","nodeType":"FunctionDefinition","parameters":{"id":1717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1716,"mutability":"mutable","name":"counter","nameLocation":"980:7:8","nodeType":"VariableDeclaration","scope":1727,"src":"964:23:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1701_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":1715,"nodeType":"UserDefinedTypeName","pathNode":{"id":1714,"name":"Counter","nameLocations":["964:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":1701,"src":"964:7:8"},"referencedDeclaration":1701,"src":"964:7:8","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1701_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"963:25:8"},"returnParameters":{"id":1718,"nodeType":"ParameterList","parameters":[],"src":"998:0:8"},"scope":1769,"src":"945:123:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1754,"nodeType":"Block","src":"1127:176:8","statements":[{"assignments":[1734],"declarations":[{"constant":false,"id":1734,"mutability":"mutable","name":"value","nameLocation":"1145:5:8","nodeType":"VariableDeclaration","scope":1754,"src":"1137:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1733,"name":"uint256","nodeType":"ElementaryTypeName","src":"1137:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1737,"initialValue":{"expression":{"id":1735,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1730,"src":"1153:7:8","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1701_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":1736,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1161:6:8","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1700,"src":"1153:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1137:30:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1739,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1734,"src":"1185:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1193:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1185:9:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f756e7465723a2064656372656d656e74206f766572666c6f77","id":1742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1196:29:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""},"value":"Counter: decrement overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""}],"id":1738,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1177:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1743,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1177:49:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1744,"nodeType":"ExpressionStatement","src":"1177:49:8"},{"id":1753,"nodeType":"UncheckedBlock","src":"1236:61:8","statements":[{"expression":{"id":1751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1745,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1730,"src":"1260:7:8","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1701_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":1747,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1268:6:8","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1700,"src":"1260:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1748,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1734,"src":"1277:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1285:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1277:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1260:26:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1752,"nodeType":"ExpressionStatement","src":"1260:26:8"}]}]},"id":1755,"implemented":true,"kind":"function","modifiers":[],"name":"decrement","nameLocation":"1083:9:8","nodeType":"FunctionDefinition","parameters":{"id":1731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1730,"mutability":"mutable","name":"counter","nameLocation":"1109:7:8","nodeType":"VariableDeclaration","scope":1755,"src":"1093:23:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1701_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":1729,"nodeType":"UserDefinedTypeName","pathNode":{"id":1728,"name":"Counter","nameLocations":["1093:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":1701,"src":"1093:7:8"},"referencedDeclaration":1701,"src":"1093:7:8","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1701_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"1092:25:8"},"returnParameters":{"id":1732,"nodeType":"ParameterList","parameters":[],"src":"1127:0:8"},"scope":1769,"src":"1074:229:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1767,"nodeType":"Block","src":"1358:35:8","statements":[{"expression":{"id":1765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1761,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1758,"src":"1368:7:8","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1701_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":1763,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1376:6:8","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1700,"src":"1368:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1385:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1368:18:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1766,"nodeType":"ExpressionStatement","src":"1368:18:8"}]},"id":1768,"implemented":true,"kind":"function","modifiers":[],"name":"reset","nameLocation":"1318:5:8","nodeType":"FunctionDefinition","parameters":{"id":1759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1758,"mutability":"mutable","name":"counter","nameLocation":"1340:7:8","nodeType":"VariableDeclaration","scope":1768,"src":"1324:23:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1701_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":1757,"nodeType":"UserDefinedTypeName","pathNode":{"id":1756,"name":"Counter","nameLocations":["1324:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":1701,"src":"1324:7:8"},"referencedDeclaration":1701,"src":"1324:7:8","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1701_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"1323:25:8"},"returnParameters":{"id":1760,"nodeType":"ParameterList","parameters":[],"src":"1358:0:8"},"scope":1769,"src":"1309:84:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1770,"src":"424:971:8","usedErrors":[]}],"src":"87:1309:8"},"id":8},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[2845],"Strings":[1944]},"id":1945,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1771,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:9"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":1772,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1945,"sourceUnit":2846,"src":"126:25:9","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":1773,"nodeType":"StructuredDocumentation","src":"153:34:9","text":" @dev String operations."},"fullyImplemented":true,"id":1944,"linearizedBaseContracts":[1944],"name":"Strings","nameLocation":"196:7:9","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1776,"mutability":"constant","name":"_SYMBOLS","nameLocation":"235:8:9","nodeType":"VariableDeclaration","scope":1944,"src":"210:54:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1774,"name":"bytes16","nodeType":"ElementaryTypeName","src":"210:7:9","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"246:18:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1779,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"293:15:9","nodeType":"VariableDeclaration","scope":1944,"src":"270:43:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1777,"name":"uint8","nodeType":"ElementaryTypeName","src":"270:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"311:2:9","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1826,"nodeType":"Block","src":"486:625:9","statements":[{"id":1825,"nodeType":"UncheckedBlock","src":"496:609:9","statements":[{"assignments":[1788],"declarations":[{"constant":false,"id":1788,"mutability":"mutable","name":"length","nameLocation":"528:6:9","nodeType":"VariableDeclaration","scope":1825,"src":"520:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1787,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1795,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1791,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1782,"src":"548:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1789,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2845,"src":"537:4:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2845_$","typeString":"type(library Math)"}},"id":1790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"542:5:9","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2682,"src":"537:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"537:17:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"557:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"537:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"520:38:9"},{"assignments":[1797],"declarations":[{"constant":false,"id":1797,"mutability":"mutable","name":"buffer","nameLocation":"586:6:9","nodeType":"VariableDeclaration","scope":1825,"src":"572:20:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1796,"name":"string","nodeType":"ElementaryTypeName","src":"572:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1802,"initialValue":{"arguments":[{"id":1800,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1788,"src":"606:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1799,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"595:10:9","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1798,"name":"string","nodeType":"ElementaryTypeName","src":"599:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1801,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"595:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"572:41:9"},{"assignments":[1804],"declarations":[{"constant":false,"id":1804,"mutability":"mutable","name":"ptr","nameLocation":"635:3:9","nodeType":"VariableDeclaration","scope":1825,"src":"627:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1803,"name":"uint256","nodeType":"ElementaryTypeName","src":"627:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1805,"nodeType":"VariableDeclarationStatement","src":"627:11:9"},{"AST":{"nodeType":"YulBlock","src":"708:67:9","statements":[{"nodeType":"YulAssignment","src":"726:35:9","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"737:6:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"749:2:9","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"753:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"745:3:9"},"nodeType":"YulFunctionCall","src":"745:15:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"733:3:9"},"nodeType":"YulFunctionCall","src":"733:28:9"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"726:3:9"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1797,"isOffset":false,"isSlot":false,"src":"737:6:9","valueSize":1},{"declaration":1788,"isOffset":false,"isSlot":false,"src":"753:6:9","valueSize":1},{"declaration":1804,"isOffset":false,"isSlot":false,"src":"726:3:9","valueSize":1}],"id":1806,"nodeType":"InlineAssembly","src":"699:76:9"},{"body":{"id":1821,"nodeType":"Block","src":"801:267:9","statements":[{"expression":{"id":1809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"819:5:9","subExpression":{"id":1808,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1804,"src":"819:3:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1810,"nodeType":"ExpressionStatement","src":"819:5:9"},{"AST":{"nodeType":"YulBlock","src":"902:84:9","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"932:3:9"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"946:5:9"},{"kind":"number","nodeType":"YulLiteral","src":"953:2:9","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"942:3:9"},"nodeType":"YulFunctionCall","src":"942:14:9"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"958:8:9"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"937:4:9"},"nodeType":"YulFunctionCall","src":"937:30:9"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"924:7:9"},"nodeType":"YulFunctionCall","src":"924:44:9"},"nodeType":"YulExpressionStatement","src":"924:44:9"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1776,"isOffset":false,"isSlot":false,"src":"958:8:9","valueSize":1},{"declaration":1804,"isOffset":false,"isSlot":false,"src":"932:3:9","valueSize":1},{"declaration":1782,"isOffset":false,"isSlot":false,"src":"946:5:9","valueSize":1}],"id":1811,"nodeType":"InlineAssembly","src":"893:93:9"},{"expression":{"id":1814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1812,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1782,"src":"1003:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1012:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1003:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1815,"nodeType":"ExpressionStatement","src":"1003:11:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1816,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1782,"src":"1036:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1817,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1036:10:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1820,"nodeType":"IfStatement","src":"1032:21:9","trueBody":{"id":1819,"nodeType":"Break","src":"1048:5:9"}}]},"condition":{"hexValue":"74727565","id":1807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"795:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1822,"nodeType":"WhileStatement","src":"788:280:9"},{"expression":{"id":1823,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1797,"src":"1088:6:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1786,"id":1824,"nodeType":"Return","src":"1081:13:9"}]}]},"documentation":{"id":1780,"nodeType":"StructuredDocumentation","src":"320:90:9","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1827,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"424:8:9","nodeType":"FunctionDefinition","parameters":{"id":1783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1782,"mutability":"mutable","name":"value","nameLocation":"441:5:9","nodeType":"VariableDeclaration","scope":1827,"src":"433:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1781,"name":"uint256","nodeType":"ElementaryTypeName","src":"433:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"432:15:9"},"returnParameters":{"id":1786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1785,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1827,"src":"471:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1784,"name":"string","nodeType":"ElementaryTypeName","src":"471:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"470:15:9"},"scope":1944,"src":"415:696:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1846,"nodeType":"Block","src":"1290:100:9","statements":[{"id":1845,"nodeType":"UncheckedBlock","src":"1300:84:9","statements":[{"expression":{"arguments":[{"id":1836,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"1343:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1839,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"1362:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1837,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2845,"src":"1350:4:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2845_$","typeString":"type(library Math)"}},"id":1838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1355:6:9","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2805,"src":"1350:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1350:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1371:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1350:22:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1835,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1847,1923,1943],"referencedDeclaration":1923,"src":"1331:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1331:42:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1834,"id":1844,"nodeType":"Return","src":"1324:49:9"}]}]},"documentation":{"id":1828,"nodeType":"StructuredDocumentation","src":"1117:94:9","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1847,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1225:11:9","nodeType":"FunctionDefinition","parameters":{"id":1831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1830,"mutability":"mutable","name":"value","nameLocation":"1245:5:9","nodeType":"VariableDeclaration","scope":1847,"src":"1237:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1829,"name":"uint256","nodeType":"ElementaryTypeName","src":"1237:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1236:15:9"},"returnParameters":{"id":1834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1833,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1847,"src":"1275:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1832,"name":"string","nodeType":"ElementaryTypeName","src":"1275:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1274:15:9"},"scope":1944,"src":"1216:174:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1922,"nodeType":"Block","src":"1603:347:9","statements":[{"assignments":[1858],"declarations":[{"constant":false,"id":1858,"mutability":"mutable","name":"buffer","nameLocation":"1626:6:9","nodeType":"VariableDeclaration","scope":1922,"src":"1613:19:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1857,"name":"bytes","nodeType":"ElementaryTypeName","src":"1613:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1867,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1645:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1862,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1852,"src":"1649:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1645:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1658:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1645:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1860,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1635:9:9","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1859,"name":"bytes","nodeType":"ElementaryTypeName","src":"1639:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1635:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1613:47:9"},{"expression":{"id":1872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1868,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1858,"src":"1670:6:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1870,"indexExpression":{"hexValue":"30","id":1869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1677:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1670:9:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1871,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1682:3:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1670:15:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1873,"nodeType":"ExpressionStatement","src":"1670:15:9"},{"expression":{"id":1878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1874,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1858,"src":"1695:6:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1876,"indexExpression":{"hexValue":"31","id":1875,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1695:9:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1707:3:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1695:15:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1879,"nodeType":"ExpressionStatement","src":"1695:15:9"},{"body":{"id":1908,"nodeType":"Block","src":"1765:83:9","statements":[{"expression":{"id":1902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1894,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1858,"src":"1779:6:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1896,"indexExpression":{"id":1895,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1881,"src":"1786:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1779:9:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1897,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1776,"src":"1791:8:9","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1901,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1898,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1850,"src":"1800:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1808:3:9","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1800:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1791:21:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1779:33:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1903,"nodeType":"ExpressionStatement","src":"1779:33:9"},{"expression":{"id":1906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1904,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1850,"src":"1826:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1836:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1826:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1907,"nodeType":"ExpressionStatement","src":"1826:11:9"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1888,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1881,"src":"1753:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1757:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1753:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1909,"initializationExpression":{"assignments":[1881],"declarations":[{"constant":false,"id":1881,"mutability":"mutable","name":"i","nameLocation":"1733:1:9","nodeType":"VariableDeclaration","scope":1909,"src":"1725:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1880,"name":"uint256","nodeType":"ElementaryTypeName","src":"1725:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1887,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1737:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1883,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1852,"src":"1741:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1737:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1750:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1737:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1725:26:9"},"loopExpression":{"expression":{"id":1892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1760:3:9","subExpression":{"id":1891,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1881,"src":"1762:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1893,"nodeType":"ExpressionStatement","src":"1760:3:9"},"nodeType":"ForStatement","src":"1720:128:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1911,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1850,"src":"1865:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1874:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1865:10:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":1914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1877:34:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":1910,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1857:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1915,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1857:55:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1916,"nodeType":"ExpressionStatement","src":"1857:55:9"},{"expression":{"arguments":[{"id":1919,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1858,"src":"1936:6:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1918,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1929:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1917,"name":"string","nodeType":"ElementaryTypeName","src":"1929:6:9","typeDescriptions":{}}},"id":1920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1929:14:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1856,"id":1921,"nodeType":"Return","src":"1922:21:9"}]},"documentation":{"id":1848,"nodeType":"StructuredDocumentation","src":"1396:112:9","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1923,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1522:11:9","nodeType":"FunctionDefinition","parameters":{"id":1853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1850,"mutability":"mutable","name":"value","nameLocation":"1542:5:9","nodeType":"VariableDeclaration","scope":1923,"src":"1534:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1849,"name":"uint256","nodeType":"ElementaryTypeName","src":"1534:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1852,"mutability":"mutable","name":"length","nameLocation":"1557:6:9","nodeType":"VariableDeclaration","scope":1923,"src":"1549:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1851,"name":"uint256","nodeType":"ElementaryTypeName","src":"1549:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1533:31:9"},"returnParameters":{"id":1856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1855,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1923,"src":"1588:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1854,"name":"string","nodeType":"ElementaryTypeName","src":"1588:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1587:15:9"},"scope":1944,"src":"1513:437:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1942,"nodeType":"Block","src":"2175:76:9","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1936,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"2220:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1935,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2212:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1934,"name":"uint160","nodeType":"ElementaryTypeName","src":"2212:7:9","typeDescriptions":{}}},"id":1937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2212:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1933,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2204:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1932,"name":"uint256","nodeType":"ElementaryTypeName","src":"2204:7:9","typeDescriptions":{}}},"id":1938,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2204:22:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1939,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1779,"src":"2228:15:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1931,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1847,1923,1943],"referencedDeclaration":1923,"src":"2192:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2192:52:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1930,"id":1941,"nodeType":"Return","src":"2185:59:9"}]},"documentation":{"id":1924,"nodeType":"StructuredDocumentation","src":"1956:141:9","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":1943,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2111:11:9","nodeType":"FunctionDefinition","parameters":{"id":1927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1926,"mutability":"mutable","name":"addr","nameLocation":"2131:4:9","nodeType":"VariableDeclaration","scope":1943,"src":"2123:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1925,"name":"address","nodeType":"ElementaryTypeName","src":"2123:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2122:14:9"},"returnParameters":{"id":1930,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1929,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1943,"src":"2160:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1928,"name":"string","nodeType":"ElementaryTypeName","src":"2160:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2159:15:9"},"scope":1944,"src":"2102:149:9","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1945,"src":"188:2065:9","usedErrors":[]}],"src":"101:2153:9"},"id":9},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[1968],"IERC165":[1980]},"id":1969,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1946,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:10"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":1947,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1969,"sourceUnit":1981,"src":"124:23:10","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1949,"name":"IERC165","nameLocations":["754:7:10"],"nodeType":"IdentifierPath","referencedDeclaration":1980,"src":"754:7:10"},"id":1950,"nodeType":"InheritanceSpecifier","src":"754:7:10"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":1948,"nodeType":"StructuredDocumentation","src":"149:576:10","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":1968,"linearizedBaseContracts":[1968,1980],"name":"ERC165","nameLocation":"744:6:10","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[1979],"body":{"id":1966,"nodeType":"Block","src":"920:64:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1959,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"937:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1961,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1980,"src":"957:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$1980_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$1980_$","typeString":"type(contract IERC165)"}],"id":1960,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"952:4:10","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"952:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$1980","typeString":"type(contract IERC165)"}},"id":1963,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"966:11:10","memberName":"interfaceId","nodeType":"MemberAccess","src":"952:25:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"937:40:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1958,"id":1965,"nodeType":"Return","src":"930:47:10"}]},"documentation":{"id":1951,"nodeType":"StructuredDocumentation","src":"768:56:10","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1967,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"838:17:10","nodeType":"FunctionDefinition","overrides":{"id":1955,"nodeType":"OverrideSpecifier","overrides":[],"src":"896:8:10"},"parameters":{"id":1954,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1953,"mutability":"mutable","name":"interfaceId","nameLocation":"863:11:10","nodeType":"VariableDeclaration","scope":1967,"src":"856:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1952,"name":"bytes4","nodeType":"ElementaryTypeName","src":"856:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"855:20:10"},"returnParameters":{"id":1958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1957,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1967,"src":"914:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1956,"name":"bool","nodeType":"ElementaryTypeName","src":"914:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"913:6:10"},"scope":1968,"src":"829:155:10","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":1969,"src":"726:260:10","usedErrors":[]}],"src":"99:888:10"},"id":10},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[1980]},"id":1981,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1970,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:11"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":1971,"nodeType":"StructuredDocumentation","src":"125:279:11","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":1980,"linearizedBaseContracts":[1980],"name":"IERC165","nameLocation":"415:7:11","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1972,"nodeType":"StructuredDocumentation","src":"429:340:11","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":1979,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:11","nodeType":"FunctionDefinition","parameters":{"id":1975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1974,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:11","nodeType":"VariableDeclaration","scope":1979,"src":"801:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1973,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:11"},"returnParameters":{"id":1978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1977,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1979,"src":"844:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1976,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:11"},"scope":1980,"src":"774:76:11","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1981,"src":"405:447:11","usedErrors":[]}],"src":"100:753:11"},"id":11},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[2845]},"id":2846,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1982,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:12"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":1983,"nodeType":"StructuredDocumentation","src":"128:73:12","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2845,"linearizedBaseContracts":[2845],"name":"Math","nameLocation":"210:4:12","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":1987,"members":[{"id":1984,"name":"Down","nameLocation":"245:4:12","nodeType":"EnumValue","src":"245:4:12"},{"id":1985,"name":"Up","nameLocation":"287:2:12","nodeType":"EnumValue","src":"287:2:12"},{"id":1986,"name":"Zero","nameLocation":"318:4:12","nodeType":"EnumValue","src":"318:4:12"}],"name":"Rounding","nameLocation":"226:8:12","nodeType":"EnumDefinition","src":"221:122:12"},{"body":{"id":2004,"nodeType":"Block","src":"480:37:12","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1997,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"497:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1998,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"501:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2001,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"509:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:12","trueExpression":{"id":2000,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"505:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1996,"id":2003,"nodeType":"Return","src":"490:20:12"}]},"documentation":{"id":1988,"nodeType":"StructuredDocumentation","src":"349:59:12","text":" @dev Returns the largest of two numbers."},"id":2005,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:12","nodeType":"FunctionDefinition","parameters":{"id":1993,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1990,"mutability":"mutable","name":"a","nameLocation":"434:1:12","nodeType":"VariableDeclaration","scope":2005,"src":"426:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1989,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1992,"mutability":"mutable","name":"b","nameLocation":"445:1:12","nodeType":"VariableDeclaration","scope":2005,"src":"437:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1991,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:12"},"returnParameters":{"id":1996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1995,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2005,"src":"471:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1994,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:12"},"scope":2845,"src":"413:104:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2022,"nodeType":"Block","src":"655:37:12","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2015,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2008,"src":"672:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2016,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2010,"src":"676:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2019,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2010,"src":"684:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:12","trueExpression":{"id":2018,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2008,"src":"680:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2014,"id":2021,"nodeType":"Return","src":"665:20:12"}]},"documentation":{"id":2006,"nodeType":"StructuredDocumentation","src":"523:60:12","text":" @dev Returns the smallest of two numbers."},"id":2023,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:12","nodeType":"FunctionDefinition","parameters":{"id":2011,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2008,"mutability":"mutable","name":"a","nameLocation":"609:1:12","nodeType":"VariableDeclaration","scope":2023,"src":"601:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2007,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2010,"mutability":"mutable","name":"b","nameLocation":"620:1:12","nodeType":"VariableDeclaration","scope":2023,"src":"612:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2009,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:12"},"returnParameters":{"id":2014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2013,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2023,"src":"646:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2012,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:12"},"scope":2845,"src":"588:104:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2045,"nodeType":"Block","src":"876:82:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2033,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2026,"src":"931:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2034,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2028,"src":"935:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2036,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2037,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2026,"src":"941:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2038,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2028,"src":"945:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2040,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":2041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2032,"id":2044,"nodeType":"Return","src":"923:28:12"}]},"documentation":{"id":2024,"nodeType":"StructuredDocumentation","src":"698:102:12","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":2046,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:12","nodeType":"FunctionDefinition","parameters":{"id":2029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2026,"mutability":"mutable","name":"a","nameLocation":"830:1:12","nodeType":"VariableDeclaration","scope":2046,"src":"822:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2025,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2028,"mutability":"mutable","name":"b","nameLocation":"841:1:12","nodeType":"VariableDeclaration","scope":2046,"src":"833:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2027,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:12"},"returnParameters":{"id":2032,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2031,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2046,"src":"867:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2030,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:12"},"scope":2845,"src":"805:153:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2070,"nodeType":"Block","src":"1228:123:12","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2056,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2049,"src":"1316:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2060,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2049,"src":"1330:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2063,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2064,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2051,"src":"1339:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:12","trueExpression":{"hexValue":"30","id":2059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2055,"id":2069,"nodeType":"Return","src":"1309:35:12"}]},"documentation":{"id":2047,"nodeType":"StructuredDocumentation","src":"964:188:12","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":2071,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:12","nodeType":"FunctionDefinition","parameters":{"id":2052,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2049,"mutability":"mutable","name":"a","nameLocation":"1182:1:12","nodeType":"VariableDeclaration","scope":2071,"src":"1174:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2048,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2051,"mutability":"mutable","name":"b","nameLocation":"1193:1:12","nodeType":"VariableDeclaration","scope":2071,"src":"1185:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2050,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:12"},"returnParameters":{"id":2055,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2054,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2071,"src":"1219:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2053,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:12"},"scope":2845,"src":"1157:194:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2192,"nodeType":"Block","src":"1795:3797:12","statements":[{"id":2191,"nodeType":"UncheckedBlock","src":"1805:3781:12","statements":[{"assignments":[2084],"declarations":[{"constant":false,"id":2084,"mutability":"mutable","name":"prod0","nameLocation":"2134:5:12","nodeType":"VariableDeclaration","scope":2191,"src":"2126:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2083,"name":"uint256","nodeType":"ElementaryTypeName","src":"2126:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2085,"nodeType":"VariableDeclarationStatement","src":"2126:13:12"},{"assignments":[2087],"declarations":[{"constant":false,"id":2087,"mutability":"mutable","name":"prod1","nameLocation":"2206:5:12","nodeType":"VariableDeclaration","scope":2191,"src":"2198:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2086,"name":"uint256","nodeType":"ElementaryTypeName","src":"2198:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2088,"nodeType":"VariableDeclarationStatement","src":"2198:13:12"},{"AST":{"nodeType":"YulBlock","src":"2278:157:12","statements":[{"nodeType":"YulVariableDeclaration","src":"2296:30:12","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2313:1:12"},{"name":"y","nodeType":"YulIdentifier","src":"2316:1:12"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2323:1:12","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2319:3:12"},"nodeType":"YulFunctionCall","src":"2319:6:12"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2306:6:12"},"nodeType":"YulFunctionCall","src":"2306:20:12"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2300:2:12","type":""}]},{"nodeType":"YulAssignment","src":"2343:18:12","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2356:1:12"},{"name":"y","nodeType":"YulIdentifier","src":"2359:1:12"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2352:3:12"},"nodeType":"YulFunctionCall","src":"2352:9:12"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2343:5:12"}]},{"nodeType":"YulAssignment","src":"2378:43:12","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2395:2:12"},{"name":"prod0","nodeType":"YulIdentifier","src":"2399:5:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2391:3:12"},"nodeType":"YulFunctionCall","src":"2391:14:12"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2410:2:12"},{"name":"prod0","nodeType":"YulIdentifier","src":"2414:5:12"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2407:2:12"},"nodeType":"YulFunctionCall","src":"2407:13:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2387:3:12"},"nodeType":"YulFunctionCall","src":"2387:34:12"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2378:5:12"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2084,"isOffset":false,"isSlot":false,"src":"2343:5:12","valueSize":1},{"declaration":2084,"isOffset":false,"isSlot":false,"src":"2399:5:12","valueSize":1},{"declaration":2084,"isOffset":false,"isSlot":false,"src":"2414:5:12","valueSize":1},{"declaration":2087,"isOffset":false,"isSlot":false,"src":"2378:5:12","valueSize":1},{"declaration":2074,"isOffset":false,"isSlot":false,"src":"2313:1:12","valueSize":1},{"declaration":2074,"isOffset":false,"isSlot":false,"src":"2356:1:12","valueSize":1},{"declaration":2076,"isOffset":false,"isSlot":false,"src":"2316:1:12","valueSize":1},{"declaration":2076,"isOffset":false,"isSlot":false,"src":"2359:1:12","valueSize":1}],"id":2089,"nodeType":"InlineAssembly","src":"2269:166:12"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2090,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2087,"src":"2516:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2525:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2516:10:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2098,"nodeType":"IfStatement","src":"2512:75:12","trueBody":{"id":2097,"nodeType":"Block","src":"2528:59:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2093,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"2553:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2094,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"2561:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2553:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2082,"id":2096,"nodeType":"Return","src":"2546:26:12"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2100,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"2697:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2101,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2087,"src":"2711:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2697:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2099,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2689:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":2103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2689:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2104,"nodeType":"ExpressionStatement","src":"2689:28:12"},{"assignments":[2106],"declarations":[{"constant":false,"id":2106,"mutability":"mutable","name":"remainder","nameLocation":"2981:9:12","nodeType":"VariableDeclaration","scope":2191,"src":"2973:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2105,"name":"uint256","nodeType":"ElementaryTypeName","src":"2973:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2107,"nodeType":"VariableDeclarationStatement","src":"2973:17:12"},{"AST":{"nodeType":"YulBlock","src":"3013:291:12","statements":[{"nodeType":"YulAssignment","src":"3082:38:12","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3102:1:12"},{"name":"y","nodeType":"YulIdentifier","src":"3105:1:12"},{"name":"denominator","nodeType":"YulIdentifier","src":"3108:11:12"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3095:6:12"},"nodeType":"YulFunctionCall","src":"3095:25:12"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3082:9:12"}]},{"nodeType":"YulAssignment","src":"3202:41:12","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3215:5:12"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3225:9:12"},{"name":"prod0","nodeType":"YulIdentifier","src":"3236:5:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3222:2:12"},"nodeType":"YulFunctionCall","src":"3222:20:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3211:3:12"},"nodeType":"YulFunctionCall","src":"3211:32:12"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3202:5:12"}]},{"nodeType":"YulAssignment","src":"3260:30:12","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3273:5:12"},{"name":"remainder","nodeType":"YulIdentifier","src":"3280:9:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3269:3:12"},"nodeType":"YulFunctionCall","src":"3269:21:12"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3260:5:12"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2078,"isOffset":false,"isSlot":false,"src":"3108:11:12","valueSize":1},{"declaration":2084,"isOffset":false,"isSlot":false,"src":"3236:5:12","valueSize":1},{"declaration":2084,"isOffset":false,"isSlot":false,"src":"3260:5:12","valueSize":1},{"declaration":2084,"isOffset":false,"isSlot":false,"src":"3273:5:12","valueSize":1},{"declaration":2087,"isOffset":false,"isSlot":false,"src":"3202:5:12","valueSize":1},{"declaration":2087,"isOffset":false,"isSlot":false,"src":"3215:5:12","valueSize":1},{"declaration":2106,"isOffset":false,"isSlot":false,"src":"3082:9:12","valueSize":1},{"declaration":2106,"isOffset":false,"isSlot":false,"src":"3225:9:12","valueSize":1},{"declaration":2106,"isOffset":false,"isSlot":false,"src":"3280:9:12","valueSize":1},{"declaration":2074,"isOffset":false,"isSlot":false,"src":"3102:1:12","valueSize":1},{"declaration":2076,"isOffset":false,"isSlot":false,"src":"3105:1:12","valueSize":1}],"id":2108,"nodeType":"InlineAssembly","src":"3004:300:12"},{"assignments":[2110],"declarations":[{"constant":false,"id":2110,"mutability":"mutable","name":"twos","nameLocation":"3619:4:12","nodeType":"VariableDeclaration","scope":2191,"src":"3611:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2109,"name":"uint256","nodeType":"ElementaryTypeName","src":"3611:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2118,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2111,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"3626:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3641:12:12","subExpression":{"id":2112,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"3642:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3656:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3641:16:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2116,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3640:18:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3626:32:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3611:47:12"},{"AST":{"nodeType":"YulBlock","src":"3681:362:12","statements":[{"nodeType":"YulAssignment","src":"3746:37:12","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"3765:11:12"},{"name":"twos","nodeType":"YulIdentifier","src":"3778:4:12"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3761:3:12"},"nodeType":"YulFunctionCall","src":"3761:22:12"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"3746:11:12"}]},{"nodeType":"YulAssignment","src":"3850:25:12","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3863:5:12"},{"name":"twos","nodeType":"YulIdentifier","src":"3870:4:12"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3859:3:12"},"nodeType":"YulFunctionCall","src":"3859:16:12"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3850:5:12"}]},{"nodeType":"YulAssignment","src":"3990:39:12","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4010:1:12","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4013:4:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4006:3:12"},"nodeType":"YulFunctionCall","src":"4006:12:12"},{"name":"twos","nodeType":"YulIdentifier","src":"4020:4:12"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4002:3:12"},"nodeType":"YulFunctionCall","src":"4002:23:12"},{"kind":"number","nodeType":"YulLiteral","src":"4027:1:12","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3998:3:12"},"nodeType":"YulFunctionCall","src":"3998:31:12"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"3990:4:12"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2078,"isOffset":false,"isSlot":false,"src":"3746:11:12","valueSize":1},{"declaration":2078,"isOffset":false,"isSlot":false,"src":"3765:11:12","valueSize":1},{"declaration":2084,"isOffset":false,"isSlot":false,"src":"3850:5:12","valueSize":1},{"declaration":2084,"isOffset":false,"isSlot":false,"src":"3863:5:12","valueSize":1},{"declaration":2110,"isOffset":false,"isSlot":false,"src":"3778:4:12","valueSize":1},{"declaration":2110,"isOffset":false,"isSlot":false,"src":"3870:4:12","valueSize":1},{"declaration":2110,"isOffset":false,"isSlot":false,"src":"3990:4:12","valueSize":1},{"declaration":2110,"isOffset":false,"isSlot":false,"src":"4013:4:12","valueSize":1},{"declaration":2110,"isOffset":false,"isSlot":false,"src":"4020:4:12","valueSize":1}],"id":2119,"nodeType":"InlineAssembly","src":"3672:371:12"},{"expression":{"id":2124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2120,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"4109:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2121,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2087,"src":"4118:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2122,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2110,"src":"4126:4:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4118:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4109:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2125,"nodeType":"ExpressionStatement","src":"4109:21:12"},{"assignments":[2127],"declarations":[{"constant":false,"id":2127,"mutability":"mutable","name":"inverse","nameLocation":"4456:7:12","nodeType":"VariableDeclaration","scope":2191,"src":"4448:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2126,"name":"uint256","nodeType":"ElementaryTypeName","src":"4448:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2134,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":2128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4467:1:12","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2129,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"4471:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4467:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2131,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4466:17:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":2132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4486:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4466:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4448:39:12"},{"expression":{"id":2141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2135,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"4704:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4715:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2137,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"4719:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2138,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"4733:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4719:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4715:25:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4704:36:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2142,"nodeType":"ExpressionStatement","src":"4704:36:12"},{"expression":{"id":2149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2143,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"4773:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4784:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2145,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"4788:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2146,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"4802:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4788:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4784:25:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4773:36:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2150,"nodeType":"ExpressionStatement","src":"4773:36:12"},{"expression":{"id":2157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2151,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"4843:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4854:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2153,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"4858:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2154,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"4872:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4858:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4854:25:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4843:36:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2158,"nodeType":"ExpressionStatement","src":"4843:36:12"},{"expression":{"id":2165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2159,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"4913:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2160,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4924:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2161,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"4928:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2162,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"4942:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4928:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4924:25:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4913:36:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2166,"nodeType":"ExpressionStatement","src":"4913:36:12"},{"expression":{"id":2173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2167,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"4983:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4994:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2169,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"4998:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2170,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"5012:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4998:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4994:25:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4983:36:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2174,"nodeType":"ExpressionStatement","src":"4983:36:12"},{"expression":{"id":2181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2175,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"5054:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5065:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2177,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"5069:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2178,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"5083:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5069:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:25:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5054:36:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2182,"nodeType":"ExpressionStatement","src":"5054:36:12"},{"expression":{"id":2187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2183,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2081,"src":"5524:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2184,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"5533:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2185,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"5541:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5533:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5524:24:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2188,"nodeType":"ExpressionStatement","src":"5524:24:12"},{"expression":{"id":2189,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2081,"src":"5569:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2082,"id":2190,"nodeType":"Return","src":"5562:13:12"}]}]},"documentation":{"id":2072,"nodeType":"StructuredDocumentation","src":"1357:305:12","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":2193,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:12","nodeType":"FunctionDefinition","parameters":{"id":2079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2074,"mutability":"mutable","name":"x","nameLocation":"1700:1:12","nodeType":"VariableDeclaration","scope":2193,"src":"1692:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2073,"name":"uint256","nodeType":"ElementaryTypeName","src":"1692:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2076,"mutability":"mutable","name":"y","nameLocation":"1719:1:12","nodeType":"VariableDeclaration","scope":2193,"src":"1711:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2075,"name":"uint256","nodeType":"ElementaryTypeName","src":"1711:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2078,"mutability":"mutable","name":"denominator","nameLocation":"1738:11:12","nodeType":"VariableDeclaration","scope":2193,"src":"1730:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2077,"name":"uint256","nodeType":"ElementaryTypeName","src":"1730:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:73:12"},"returnParameters":{"id":2082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2081,"mutability":"mutable","name":"result","nameLocation":"1787:6:12","nodeType":"VariableDeclaration","scope":2193,"src":"1779:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2080,"name":"uint256","nodeType":"ElementaryTypeName","src":"1779:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1778:16:12"},"scope":2845,"src":"1667:3925:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2236,"nodeType":"Block","src":"5872:189:12","statements":[{"assignments":[2209],"declarations":[{"constant":false,"id":2209,"mutability":"mutable","name":"result","nameLocation":"5890:6:12","nodeType":"VariableDeclaration","scope":2236,"src":"5882:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2208,"name":"uint256","nodeType":"ElementaryTypeName","src":"5882:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2215,"initialValue":{"arguments":[{"id":2211,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2196,"src":"5906:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2212,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"5909:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2213,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2200,"src":"5912:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2210,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2193,2237],"referencedDeclaration":2193,"src":"5899:6:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5899:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5882:42:12"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1987","typeString":"enum Math.Rounding"},"id":2219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2216,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2203,"src":"5938:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1987","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2217,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1987,"src":"5950:8:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1987_$","typeString":"type(enum Math.Rounding)"}},"id":2218,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5959:2:12","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1985,"src":"5950:11:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1987","typeString":"enum Math.Rounding"}},"src":"5938:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2221,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2196,"src":"5972:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2222,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"5975:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2223,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2200,"src":"5978:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2220,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5965:6:12","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5965:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2225,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5993:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5965:29:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5938:56:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2233,"nodeType":"IfStatement","src":"5934:98:12","trueBody":{"id":2232,"nodeType":"Block","src":"5996:36:12","statements":[{"expression":{"id":2230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2228,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2209,"src":"6010:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6020:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6010:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2231,"nodeType":"ExpressionStatement","src":"6010:11:12"}]}},{"expression":{"id":2234,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2209,"src":"6048:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2207,"id":2235,"nodeType":"Return","src":"6041:13:12"}]},"documentation":{"id":2194,"nodeType":"StructuredDocumentation","src":"5598:121:12","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2237,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5733:6:12","nodeType":"FunctionDefinition","parameters":{"id":2204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2196,"mutability":"mutable","name":"x","nameLocation":"5757:1:12","nodeType":"VariableDeclaration","scope":2237,"src":"5749:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2195,"name":"uint256","nodeType":"ElementaryTypeName","src":"5749:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2198,"mutability":"mutable","name":"y","nameLocation":"5776:1:12","nodeType":"VariableDeclaration","scope":2237,"src":"5768:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2197,"name":"uint256","nodeType":"ElementaryTypeName","src":"5768:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2200,"mutability":"mutable","name":"denominator","nameLocation":"5795:11:12","nodeType":"VariableDeclaration","scope":2237,"src":"5787:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2199,"name":"uint256","nodeType":"ElementaryTypeName","src":"5787:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2203,"mutability":"mutable","name":"rounding","nameLocation":"5825:8:12","nodeType":"VariableDeclaration","scope":2237,"src":"5816:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1987","typeString":"enum Math.Rounding"},"typeName":{"id":2202,"nodeType":"UserDefinedTypeName","pathNode":{"id":2201,"name":"Rounding","nameLocations":["5816:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":1987,"src":"5816:8:12"},"referencedDeclaration":1987,"src":"5816:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1987","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"5739:100:12"},"returnParameters":{"id":2207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2206,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2237,"src":"5863:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2205,"name":"uint256","nodeType":"ElementaryTypeName","src":"5863:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5862:9:12"},"scope":2845,"src":"5724:337:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2348,"nodeType":"Block","src":"6337:1585:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2245,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"6351:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6356:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6351:6:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2251,"nodeType":"IfStatement","src":"6347:45:12","trueBody":{"id":2250,"nodeType":"Block","src":"6359:33:12","statements":[{"expression":{"hexValue":"30","id":2248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6380:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2244,"id":2249,"nodeType":"Return","src":"6373:8:12"}]}},{"assignments":[2253],"declarations":[{"constant":false,"id":2253,"mutability":"mutable","name":"result","nameLocation":"7079:6:12","nodeType":"VariableDeclaration","scope":2348,"src":"7071:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2252,"name":"uint256","nodeType":"ElementaryTypeName","src":"7071:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2262,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7088:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2256,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"7099:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2255,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2517,2553],"referencedDeclaration":2517,"src":"7094:4:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7094:7:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7105:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7094:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2260,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7093:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7088:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7071:36:12"},{"id":2347,"nodeType":"UncheckedBlock","src":"7508:408:12","statements":[{"expression":{"id":2272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2263,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"7532:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2264,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"7542:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2265,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"7551:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2266,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"7555:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7551:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7542:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2269,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7541:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7566:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7541:26:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7532:35:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2273,"nodeType":"ExpressionStatement","src":"7532:35:12"},{"expression":{"id":2283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2274,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"7581:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2275,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"7591:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2276,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"7600:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2277,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"7604:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7600:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7591:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2280,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7590:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7615:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7590:26:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7581:35:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2284,"nodeType":"ExpressionStatement","src":"7581:35:12"},{"expression":{"id":2294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2285,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"7630:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2286,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"7640:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2287,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"7649:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2288,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"7653:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7649:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7640:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2291,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7639:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7664:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7639:26:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7630:35:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2295,"nodeType":"ExpressionStatement","src":"7630:35:12"},{"expression":{"id":2305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2296,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"7679:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2297,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"7689:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2298,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"7698:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2299,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"7702:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7698:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7689:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2302,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7688:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7713:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7688:26:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7679:35:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2306,"nodeType":"ExpressionStatement","src":"7679:35:12"},{"expression":{"id":2316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2307,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"7728:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2308,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"7738:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2309,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"7747:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2310,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"7751:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7747:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7738:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2313,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7737:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7762:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7737:26:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7728:35:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2317,"nodeType":"ExpressionStatement","src":"7728:35:12"},{"expression":{"id":2327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2318,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"7777:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2319,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"7787:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2320,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"7796:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2321,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"7800:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7796:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7787:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2324,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7786:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7811:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7786:26:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7777:35:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2328,"nodeType":"ExpressionStatement","src":"7777:35:12"},{"expression":{"id":2338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2329,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"7826:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2330,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"7836:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2331,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"7845:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2332,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"7849:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7845:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7836:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2335,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7835:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7860:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7835:26:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7826:35:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2339,"nodeType":"ExpressionStatement","src":"7826:35:12"},{"expression":{"arguments":[{"id":2341,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"7886:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2342,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"7894:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2343,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"7898:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7894:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2340,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2023,"src":"7882:3:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7882:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2244,"id":2346,"nodeType":"Return","src":"7875:30:12"}]}]},"documentation":{"id":2238,"nodeType":"StructuredDocumentation","src":"6067:208:12","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2349,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6289:4:12","nodeType":"FunctionDefinition","parameters":{"id":2241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2240,"mutability":"mutable","name":"a","nameLocation":"6302:1:12","nodeType":"VariableDeclaration","scope":2349,"src":"6294:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2239,"name":"uint256","nodeType":"ElementaryTypeName","src":"6294:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6293:11:12"},"returnParameters":{"id":2244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2243,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2349,"src":"6328:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2242,"name":"uint256","nodeType":"ElementaryTypeName","src":"6328:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6327:9:12"},"scope":2845,"src":"6280:1642:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2384,"nodeType":"Block","src":"8098:161:12","statements":[{"id":2383,"nodeType":"UncheckedBlock","src":"8108:145:12","statements":[{"assignments":[2361],"declarations":[{"constant":false,"id":2361,"mutability":"mutable","name":"result","nameLocation":"8140:6:12","nodeType":"VariableDeclaration","scope":2383,"src":"8132:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2360,"name":"uint256","nodeType":"ElementaryTypeName","src":"8132:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2365,"initialValue":{"arguments":[{"id":2363,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2352,"src":"8154:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2362,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2349,2385],"referencedDeclaration":2349,"src":"8149:4:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2364,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8149:7:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8132:24:12"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2366,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2361,"src":"8177:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1987","typeString":"enum Math.Rounding"},"id":2370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2367,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2355,"src":"8187:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1987","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2368,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1987,"src":"8199:8:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1987_$","typeString":"type(enum Math.Rounding)"}},"id":2369,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8208:2:12","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1985,"src":"8199:11:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1987","typeString":"enum Math.Rounding"}},"src":"8187:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2371,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2361,"src":"8214:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2372,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2361,"src":"8223:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2374,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2352,"src":"8232:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8187:46:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8240:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8187:54:12","trueExpression":{"hexValue":"31","id":2377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8236:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2380,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8186:56:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8177:65:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2359,"id":2382,"nodeType":"Return","src":"8170:72:12"}]}]},"documentation":{"id":2350,"nodeType":"StructuredDocumentation","src":"7928:89:12","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2385,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8031:4:12","nodeType":"FunctionDefinition","parameters":{"id":2356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2352,"mutability":"mutable","name":"a","nameLocation":"8044:1:12","nodeType":"VariableDeclaration","scope":2385,"src":"8036:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2351,"name":"uint256","nodeType":"ElementaryTypeName","src":"8036:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2355,"mutability":"mutable","name":"rounding","nameLocation":"8056:8:12","nodeType":"VariableDeclaration","scope":2385,"src":"8047:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1987","typeString":"enum Math.Rounding"},"typeName":{"id":2354,"nodeType":"UserDefinedTypeName","pathNode":{"id":2353,"name":"Rounding","nameLocations":["8047:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":1987,"src":"8047:8:12"},"referencedDeclaration":1987,"src":"8047:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1987","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8035:30:12"},"returnParameters":{"id":2359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2358,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2385,"src":"8089:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2357,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8088:9:12"},"scope":2845,"src":"8022:237:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2516,"nodeType":"Block","src":"8444:922:12","statements":[{"assignments":[2394],"declarations":[{"constant":false,"id":2394,"mutability":"mutable","name":"result","nameLocation":"8462:6:12","nodeType":"VariableDeclaration","scope":2516,"src":"8454:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2393,"name":"uint256","nodeType":"ElementaryTypeName","src":"8454:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2396,"initialValue":{"hexValue":"30","id":2395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8471:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8454:18:12"},{"id":2513,"nodeType":"UncheckedBlock","src":"8482:855:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2397,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"8510:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8519:3:12","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8510:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8525:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8510:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2411,"nodeType":"IfStatement","src":"8506:99:12","trueBody":{"id":2410,"nodeType":"Block","src":"8528:77:12","statements":[{"expression":{"id":2404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2402,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"8546:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8556:3:12","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8546:13:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2405,"nodeType":"ExpressionStatement","src":"8546:13:12"},{"expression":{"id":2408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2406,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"8577:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8587:3:12","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8577:13:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2409,"nodeType":"ExpressionStatement","src":"8577:13:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2412,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"8622:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8631:2:12","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8622:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8636:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8622:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2426,"nodeType":"IfStatement","src":"8618:96:12","trueBody":{"id":2425,"nodeType":"Block","src":"8639:75:12","statements":[{"expression":{"id":2419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2417,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"8657:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8667:2:12","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8657:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2420,"nodeType":"ExpressionStatement","src":"8657:12:12"},{"expression":{"id":2423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2421,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"8687:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:2:12","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8687:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2424,"nodeType":"ExpressionStatement","src":"8687:12:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2427,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"8731:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8740:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8731:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8745:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8731:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2441,"nodeType":"IfStatement","src":"8727:96:12","trueBody":{"id":2440,"nodeType":"Block","src":"8748:75:12","statements":[{"expression":{"id":2434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2432,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"8766:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8776:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8766:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2435,"nodeType":"ExpressionStatement","src":"8766:12:12"},{"expression":{"id":2438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2436,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"8796:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8796:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2439,"nodeType":"ExpressionStatement","src":"8796:12:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2442,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"8840:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8849:2:12","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8840:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8840:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2456,"nodeType":"IfStatement","src":"8836:96:12","trueBody":{"id":2455,"nodeType":"Block","src":"8857:75:12","statements":[{"expression":{"id":2449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2447,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"8875:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8885:2:12","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8875:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2450,"nodeType":"ExpressionStatement","src":"8875:12:12"},{"expression":{"id":2453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2451,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"8905:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8915:2:12","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8905:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2454,"nodeType":"ExpressionStatement","src":"8905:12:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2457,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"8949:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:1:12","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8949:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8962:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8949:14:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2471,"nodeType":"IfStatement","src":"8945:93:12","trueBody":{"id":2470,"nodeType":"Block","src":"8965:73:12","statements":[{"expression":{"id":2464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2462,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"8983:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8993:1:12","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8983:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2465,"nodeType":"ExpressionStatement","src":"8983:11:12"},{"expression":{"id":2468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2466,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"9012:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2467,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9022:1:12","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9012:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2469,"nodeType":"ExpressionStatement","src":"9012:11:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2472,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"9055:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9064:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9055:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9068:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9055:14:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2486,"nodeType":"IfStatement","src":"9051:93:12","trueBody":{"id":2485,"nodeType":"Block","src":"9071:73:12","statements":[{"expression":{"id":2479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2477,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"9089:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9089:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2480,"nodeType":"ExpressionStatement","src":"9089:11:12"},{"expression":{"id":2483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2481,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"9118:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9128:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9118:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2484,"nodeType":"ExpressionStatement","src":"9118:11:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2487,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"9161:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9170:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9161:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9174:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9161:14:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2501,"nodeType":"IfStatement","src":"9157:93:12","trueBody":{"id":2500,"nodeType":"Block","src":"9177:73:12","statements":[{"expression":{"id":2494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2492,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"9195:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9205:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9195:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2495,"nodeType":"ExpressionStatement","src":"9195:11:12"},{"expression":{"id":2498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2496,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"9224:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2497,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9234:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9224:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2499,"nodeType":"ExpressionStatement","src":"9224:11:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2502,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"9267:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9276:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9267:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9280:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9267:14:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2512,"nodeType":"IfStatement","src":"9263:64:12","trueBody":{"id":2511,"nodeType":"Block","src":"9283:44:12","statements":[{"expression":{"id":2509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2507,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"9301:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9311:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9301:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2510,"nodeType":"ExpressionStatement","src":"9301:11:12"}]}}]},{"expression":{"id":2514,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"9353:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2392,"id":2515,"nodeType":"Return","src":"9346:13:12"}]},"documentation":{"id":2386,"nodeType":"StructuredDocumentation","src":"8265:113:12","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2517,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8392:4:12","nodeType":"FunctionDefinition","parameters":{"id":2389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2388,"mutability":"mutable","name":"value","nameLocation":"8405:5:12","nodeType":"VariableDeclaration","scope":2517,"src":"8397:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2387,"name":"uint256","nodeType":"ElementaryTypeName","src":"8397:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8396:15:12"},"returnParameters":{"id":2392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2391,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2517,"src":"8435:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2390,"name":"uint256","nodeType":"ElementaryTypeName","src":"8435:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8434:9:12"},"scope":2845,"src":"8383:983:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2552,"nodeType":"Block","src":"9599:165:12","statements":[{"id":2551,"nodeType":"UncheckedBlock","src":"9609:149:12","statements":[{"assignments":[2529],"declarations":[{"constant":false,"id":2529,"mutability":"mutable","name":"result","nameLocation":"9641:6:12","nodeType":"VariableDeclaration","scope":2551,"src":"9633:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2528,"name":"uint256","nodeType":"ElementaryTypeName","src":"9633:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2533,"initialValue":{"arguments":[{"id":2531,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2520,"src":"9655:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2530,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2517,2553],"referencedDeclaration":2517,"src":"9650:4:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2532,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9650:11:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9633:28:12"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2534,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2529,"src":"9682:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1987","typeString":"enum Math.Rounding"},"id":2538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2535,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2523,"src":"9692:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1987","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2536,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1987,"src":"9704:8:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1987_$","typeString":"type(enum Math.Rounding)"}},"id":2537,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9713:2:12","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1985,"src":"9704:11:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1987","typeString":"enum Math.Rounding"}},"src":"9692:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9719:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2540,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2529,"src":"9724:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2542,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2520,"src":"9733:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9692:46:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9745:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9692:54:12","trueExpression":{"hexValue":"31","id":2545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9741:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2548,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9691:56:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9682:65:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2527,"id":2550,"nodeType":"Return","src":"9675:72:12"}]}]},"documentation":{"id":2518,"nodeType":"StructuredDocumentation","src":"9372:142:12","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2553,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9528:4:12","nodeType":"FunctionDefinition","parameters":{"id":2524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2520,"mutability":"mutable","name":"value","nameLocation":"9541:5:12","nodeType":"VariableDeclaration","scope":2553,"src":"9533:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2519,"name":"uint256","nodeType":"ElementaryTypeName","src":"9533:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2523,"mutability":"mutable","name":"rounding","nameLocation":"9557:8:12","nodeType":"VariableDeclaration","scope":2553,"src":"9548:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1987","typeString":"enum Math.Rounding"},"typeName":{"id":2522,"nodeType":"UserDefinedTypeName","pathNode":{"id":2521,"name":"Rounding","nameLocations":["9548:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":1987,"src":"9548:8:12"},"referencedDeclaration":1987,"src":"9548:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1987","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9532:34:12"},"returnParameters":{"id":2527,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2526,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2553,"src":"9590:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2525,"name":"uint256","nodeType":"ElementaryTypeName","src":"9590:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9589:9:12"},"scope":2845,"src":"9519:245:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2681,"nodeType":"Block","src":"9951:828:12","statements":[{"assignments":[2562],"declarations":[{"constant":false,"id":2562,"mutability":"mutable","name":"result","nameLocation":"9969:6:12","nodeType":"VariableDeclaration","scope":2681,"src":"9961:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2561,"name":"uint256","nodeType":"ElementaryTypeName","src":"9961:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2564,"initialValue":{"hexValue":"30","id":2563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9978:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9961:18:12"},{"id":2678,"nodeType":"UncheckedBlock","src":"9989:761:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2565,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"10017:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2568,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10026:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10030:2:12","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10026:6:12","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10017:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2581,"nodeType":"IfStatement","src":"10013:99:12","trueBody":{"id":2580,"nodeType":"Block","src":"10034:78:12","statements":[{"expression":{"id":2574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2570,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"10052:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2573,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10061:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10065:2:12","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10061:6:12","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10052:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2575,"nodeType":"ExpressionStatement","src":"10052:15:12"},{"expression":{"id":2578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2576,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"10085:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10095:2:12","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10085:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2579,"nodeType":"ExpressionStatement","src":"10085:12:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2582,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"10129:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2585,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10138:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10142:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10138:6:12","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10129:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2598,"nodeType":"IfStatement","src":"10125:99:12","trueBody":{"id":2597,"nodeType":"Block","src":"10146:78:12","statements":[{"expression":{"id":2591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2587,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"10164:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2590,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10173:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10177:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10173:6:12","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10164:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2592,"nodeType":"ExpressionStatement","src":"10164:15:12"},{"expression":{"id":2595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2593,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"10197:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10207:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10197:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2596,"nodeType":"ExpressionStatement","src":"10197:12:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2599,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"10241:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2602,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2600,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10250:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10254:2:12","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10250:6:12","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10241:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2615,"nodeType":"IfStatement","src":"10237:99:12","trueBody":{"id":2614,"nodeType":"Block","src":"10258:78:12","statements":[{"expression":{"id":2608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2604,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"10276:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2607,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10285:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10289:2:12","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10285:6:12","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10276:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2609,"nodeType":"ExpressionStatement","src":"10276:15:12"},{"expression":{"id":2612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2610,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"10309:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:12","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10309:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2613,"nodeType":"ExpressionStatement","src":"10309:12:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2616,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"10353:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2619,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10362:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10366:1:12","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10362:5:12","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10353:14:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2632,"nodeType":"IfStatement","src":"10349:96:12","trueBody":{"id":2631,"nodeType":"Block","src":"10369:76:12","statements":[{"expression":{"id":2625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2621,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"10387:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2624,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10396:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10400:1:12","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10396:5:12","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10387:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2626,"nodeType":"ExpressionStatement","src":"10387:14:12"},{"expression":{"id":2629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2627,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"10419:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:1:12","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10419:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2630,"nodeType":"ExpressionStatement","src":"10419:11:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2633,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"10462:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2636,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10471:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10475:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10471:5:12","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10462:14:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2649,"nodeType":"IfStatement","src":"10458:96:12","trueBody":{"id":2648,"nodeType":"Block","src":"10478:76:12","statements":[{"expression":{"id":2642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2638,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"10496:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2641,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10505:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10509:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10505:5:12","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10496:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2643,"nodeType":"ExpressionStatement","src":"10496:14:12"},{"expression":{"id":2646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2644,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"10528:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10538:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10528:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2647,"nodeType":"ExpressionStatement","src":"10528:11:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2650,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"10571:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2653,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10580:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10584:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10580:5:12","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10571:14:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2666,"nodeType":"IfStatement","src":"10567:96:12","trueBody":{"id":2665,"nodeType":"Block","src":"10587:76:12","statements":[{"expression":{"id":2659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2655,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"10605:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2658,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10614:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10618:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10614:5:12","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10605:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2660,"nodeType":"ExpressionStatement","src":"10605:14:12"},{"expression":{"id":2663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2661,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"10637:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10647:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10637:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2664,"nodeType":"ExpressionStatement","src":"10637:11:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2667,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"10680:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2670,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10689:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10693:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10689:5:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10680:14:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2677,"nodeType":"IfStatement","src":"10676:64:12","trueBody":{"id":2676,"nodeType":"Block","src":"10696:44:12","statements":[{"expression":{"id":2674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2672,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"10714:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10724:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10714:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2675,"nodeType":"ExpressionStatement","src":"10714:11:12"}]}}]},{"expression":{"id":2679,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"10766:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2560,"id":2680,"nodeType":"Return","src":"10759:13:12"}]},"documentation":{"id":2554,"nodeType":"StructuredDocumentation","src":"9770:114:12","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2682,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9898:5:12","nodeType":"FunctionDefinition","parameters":{"id":2557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2556,"mutability":"mutable","name":"value","nameLocation":"9912:5:12","nodeType":"VariableDeclaration","scope":2682,"src":"9904:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2555,"name":"uint256","nodeType":"ElementaryTypeName","src":"9904:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9903:15:12"},"returnParameters":{"id":2560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2559,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2682,"src":"9942:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2558,"name":"uint256","nodeType":"ElementaryTypeName","src":"9942:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9941:9:12"},"scope":2845,"src":"9889:890:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2717,"nodeType":"Block","src":"11014:165:12","statements":[{"id":2716,"nodeType":"UncheckedBlock","src":"11024:149:12","statements":[{"assignments":[2694],"declarations":[{"constant":false,"id":2694,"mutability":"mutable","name":"result","nameLocation":"11056:6:12","nodeType":"VariableDeclaration","scope":2716,"src":"11048:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2693,"name":"uint256","nodeType":"ElementaryTypeName","src":"11048:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2698,"initialValue":{"arguments":[{"id":2696,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2685,"src":"11071:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2695,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2682,2718],"referencedDeclaration":2682,"src":"11065:5:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11065:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11048:29:12"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2699,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2694,"src":"11098:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1987","typeString":"enum Math.Rounding"},"id":2703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2700,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2688,"src":"11108:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1987","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2701,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1987,"src":"11120:8:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1987_$","typeString":"type(enum Math.Rounding)"}},"id":2702,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11129:2:12","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1985,"src":"11120:11:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1987","typeString":"enum Math.Rounding"}},"src":"11108:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11135:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2705,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2694,"src":"11139:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2707,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2685,"src":"11148:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:18:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11108:45:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11160:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11108:53:12","trueExpression":{"hexValue":"31","id":2710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11156:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2713,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11107:55:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11098:64:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2692,"id":2715,"nodeType":"Return","src":"11091:71:12"}]}]},"documentation":{"id":2683,"nodeType":"StructuredDocumentation","src":"10785:143:12","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2718,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10942:5:12","nodeType":"FunctionDefinition","parameters":{"id":2689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2685,"mutability":"mutable","name":"value","nameLocation":"10956:5:12","nodeType":"VariableDeclaration","scope":2718,"src":"10948:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2684,"name":"uint256","nodeType":"ElementaryTypeName","src":"10948:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2688,"mutability":"mutable","name":"rounding","nameLocation":"10972:8:12","nodeType":"VariableDeclaration","scope":2718,"src":"10963:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1987","typeString":"enum Math.Rounding"},"typeName":{"id":2687,"nodeType":"UserDefinedTypeName","pathNode":{"id":2686,"name":"Rounding","nameLocations":["10963:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":1987,"src":"10963:8:12"},"referencedDeclaration":1987,"src":"10963:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1987","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10947:34:12"},"returnParameters":{"id":2692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2691,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2718,"src":"11005:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2690,"name":"uint256","nodeType":"ElementaryTypeName","src":"11005:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11004:9:12"},"scope":2845,"src":"10933:246:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2804,"nodeType":"Block","src":"11493:600:12","statements":[{"assignments":[2727],"declarations":[{"constant":false,"id":2727,"mutability":"mutable","name":"result","nameLocation":"11511:6:12","nodeType":"VariableDeclaration","scope":2804,"src":"11503:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2726,"name":"uint256","nodeType":"ElementaryTypeName","src":"11503:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2729,"initialValue":{"hexValue":"30","id":2728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11520:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11503:18:12"},{"id":2801,"nodeType":"UncheckedBlock","src":"11531:533:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2730,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"11559:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11568:3:12","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11559:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11559:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2744,"nodeType":"IfStatement","src":"11555:98:12","trueBody":{"id":2743,"nodeType":"Block","src":"11577:76:12","statements":[{"expression":{"id":2737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2735,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"11595:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11605:3:12","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11595:13:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2738,"nodeType":"ExpressionStatement","src":"11595:13:12"},{"expression":{"id":2741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2739,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2727,"src":"11626:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11636:2:12","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11626:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2742,"nodeType":"ExpressionStatement","src":"11626:12:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2745,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"11670:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11679:2:12","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11670:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11684:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11670:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2759,"nodeType":"IfStatement","src":"11666:95:12","trueBody":{"id":2758,"nodeType":"Block","src":"11687:74:12","statements":[{"expression":{"id":2752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2750,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"11705:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11715:2:12","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11705:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2753,"nodeType":"ExpressionStatement","src":"11705:12:12"},{"expression":{"id":2756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2754,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2727,"src":"11735:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11745:1:12","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11735:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2757,"nodeType":"ExpressionStatement","src":"11735:11:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2760,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"11778:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2761,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11787:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11778:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11792:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11778:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2774,"nodeType":"IfStatement","src":"11774:95:12","trueBody":{"id":2773,"nodeType":"Block","src":"11795:74:12","statements":[{"expression":{"id":2767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2765,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"11813:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11823:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11813:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2768,"nodeType":"ExpressionStatement","src":"11813:12:12"},{"expression":{"id":2771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2769,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2727,"src":"11843:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11853:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11843:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2772,"nodeType":"ExpressionStatement","src":"11843:11:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2775,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"11886:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11895:2:12","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11886:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11900:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11886:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2789,"nodeType":"IfStatement","src":"11882:95:12","trueBody":{"id":2788,"nodeType":"Block","src":"11903:74:12","statements":[{"expression":{"id":2782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2780,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"11921:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2781,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11931:2:12","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11921:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2783,"nodeType":"ExpressionStatement","src":"11921:12:12"},{"expression":{"id":2786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2784,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2727,"src":"11951:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11961:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11951:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2787,"nodeType":"ExpressionStatement","src":"11951:11:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2790,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"11994:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12003:1:12","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11994:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12007:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11994:14:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2800,"nodeType":"IfStatement","src":"11990:64:12","trueBody":{"id":2799,"nodeType":"Block","src":"12010:44:12","statements":[{"expression":{"id":2797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2795,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2727,"src":"12028:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2796,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12028:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2798,"nodeType":"ExpressionStatement","src":"12028:11:12"}]}}]},{"expression":{"id":2802,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2727,"src":"12080:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2725,"id":2803,"nodeType":"Return","src":"12073:13:12"}]},"documentation":{"id":2719,"nodeType":"StructuredDocumentation","src":"11185:240:12","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2805,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11439:6:12","nodeType":"FunctionDefinition","parameters":{"id":2722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2721,"mutability":"mutable","name":"value","nameLocation":"11454:5:12","nodeType":"VariableDeclaration","scope":2805,"src":"11446:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2720,"name":"uint256","nodeType":"ElementaryTypeName","src":"11446:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11445:15:12"},"returnParameters":{"id":2725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2724,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2805,"src":"11484:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2723,"name":"uint256","nodeType":"ElementaryTypeName","src":"11484:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11483:9:12"},"scope":2845,"src":"11430:663:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2843,"nodeType":"Block","src":"12329:173:12","statements":[{"id":2842,"nodeType":"UncheckedBlock","src":"12339:157:12","statements":[{"assignments":[2817],"declarations":[{"constant":false,"id":2817,"mutability":"mutable","name":"result","nameLocation":"12371:6:12","nodeType":"VariableDeclaration","scope":2842,"src":"12363:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2816,"name":"uint256","nodeType":"ElementaryTypeName","src":"12363:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2821,"initialValue":{"arguments":[{"id":2819,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2808,"src":"12387:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2818,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2805,2844],"referencedDeclaration":2805,"src":"12380:6:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12380:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12363:30:12"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2822,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"12414:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1987","typeString":"enum Math.Rounding"},"id":2826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2823,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"12424:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1987","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2824,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1987,"src":"12436:8:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1987_$","typeString":"type(enum Math.Rounding)"}},"id":2825,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12445:2:12","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1985,"src":"12436:11:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1987","typeString":"enum Math.Rounding"}},"src":"12424:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12451:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2828,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"12457:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":2829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12466:1:12","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12457:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2831,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12456:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:17:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2833,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2808,"src":"12471:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12424:52:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12483:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12424:60:12","trueExpression":{"hexValue":"31","id":2836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12479:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2839,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12423:62:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12414:71:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2815,"id":2841,"nodeType":"Return","src":"12407:78:12"}]}]},"documentation":{"id":2806,"nodeType":"StructuredDocumentation","src":"12099:143:12","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2844,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12256:6:12","nodeType":"FunctionDefinition","parameters":{"id":2812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2808,"mutability":"mutable","name":"value","nameLocation":"12271:5:12","nodeType":"VariableDeclaration","scope":2844,"src":"12263:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2807,"name":"uint256","nodeType":"ElementaryTypeName","src":"12263:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2811,"mutability":"mutable","name":"rounding","nameLocation":"12287:8:12","nodeType":"VariableDeclaration","scope":2844,"src":"12278:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1987","typeString":"enum Math.Rounding"},"typeName":{"id":2810,"nodeType":"UserDefinedTypeName","pathNode":{"id":2809,"name":"Rounding","nameLocations":["12278:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":1987,"src":"12278:8:12"},"referencedDeclaration":1987,"src":"12278:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1987","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12262:34:12"},"returnParameters":{"id":2815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2814,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2844,"src":"12320:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2813,"name":"uint256","nodeType":"ElementaryTypeName","src":"12320:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12319:9:12"},"scope":2845,"src":"12247:255:12","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2846,"src":"202:12302:12","usedErrors":[]}],"src":"103:12402:12"},"id":12},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SafeMath.sol","exportedSymbols":{"SafeMath":[3157]},"id":3158,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2847,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"SafeMath","contractDependencies":[],"contractKind":"library","documentation":{"id":2848,"nodeType":"StructuredDocumentation","src":"285:196:13","text":" @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."},"fullyImplemented":true,"id":3157,"linearizedBaseContracts":[3157],"name":"SafeMath","nameLocation":"490:8:13","nodeType":"ContractDefinition","nodes":[{"body":{"id":2879,"nodeType":"Block","src":"717:140:13","statements":[{"id":2878,"nodeType":"UncheckedBlock","src":"727:124:13","statements":[{"assignments":[2861],"declarations":[{"constant":false,"id":2861,"mutability":"mutable","name":"c","nameLocation":"759:1:13","nodeType":"VariableDeclaration","scope":2878,"src":"751:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2860,"name":"uint256","nodeType":"ElementaryTypeName","src":"751:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2865,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2862,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2851,"src":"763:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2863,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2853,"src":"767:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"763:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"751:17:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2866,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2861,"src":"786:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2867,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2851,"src":"790:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"786:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2873,"nodeType":"IfStatement","src":"782:28:13","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"801:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2870,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"808:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2871,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"800:10:13","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2859,"id":2872,"nodeType":"Return","src":"793:17:13"}},{"expression":{"components":[{"hexValue":"74727565","id":2874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"832:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":2875,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2861,"src":"838:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2876,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"831:9:13","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2859,"id":2877,"nodeType":"Return","src":"824:16:13"}]}]},"documentation":{"id":2849,"nodeType":"StructuredDocumentation","src":"505:131:13","text":" @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":2880,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"650:6:13","nodeType":"FunctionDefinition","parameters":{"id":2854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2851,"mutability":"mutable","name":"a","nameLocation":"665:1:13","nodeType":"VariableDeclaration","scope":2880,"src":"657:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2850,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2853,"mutability":"mutable","name":"b","nameLocation":"676:1:13","nodeType":"VariableDeclaration","scope":2880,"src":"668:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2852,"name":"uint256","nodeType":"ElementaryTypeName","src":"668:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:22:13"},"returnParameters":{"id":2859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2856,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2880,"src":"702:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2855,"name":"bool","nodeType":"ElementaryTypeName","src":"702:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2858,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2880,"src":"708:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2857,"name":"uint256","nodeType":"ElementaryTypeName","src":"708:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"701:15:13"},"scope":3157,"src":"641:216:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2907,"nodeType":"Block","src":"1078:113:13","statements":[{"id":2906,"nodeType":"UncheckedBlock","src":"1088:97:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2892,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2885,"src":"1116:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2893,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2883,"src":"1120:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1116:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2899,"nodeType":"IfStatement","src":"1112:28:13","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1131:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1138:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2897,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1130:10:13","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2891,"id":2898,"nodeType":"Return","src":"1123:17:13"}},{"expression":{"components":[{"hexValue":"74727565","id":2900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1162:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2901,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2883,"src":"1168:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2902,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2885,"src":"1172:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1168:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2904,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1161:13:13","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2891,"id":2905,"nodeType":"Return","src":"1154:20:13"}]}]},"documentation":{"id":2881,"nodeType":"StructuredDocumentation","src":"863:134:13","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":2908,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"1011:6:13","nodeType":"FunctionDefinition","parameters":{"id":2886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2883,"mutability":"mutable","name":"a","nameLocation":"1026:1:13","nodeType":"VariableDeclaration","scope":2908,"src":"1018:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2882,"name":"uint256","nodeType":"ElementaryTypeName","src":"1018:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2885,"mutability":"mutable","name":"b","nameLocation":"1037:1:13","nodeType":"VariableDeclaration","scope":2908,"src":"1029:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2884,"name":"uint256","nodeType":"ElementaryTypeName","src":"1029:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1017:22:13"},"returnParameters":{"id":2891,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2888,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2908,"src":"1063:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2887,"name":"bool","nodeType":"ElementaryTypeName","src":"1063:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2890,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2908,"src":"1069:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2889,"name":"uint256","nodeType":"ElementaryTypeName","src":"1069:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1062:15:13"},"scope":3157,"src":"1002:189:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2949,"nodeType":"Block","src":"1415:417:13","statements":[{"id":2948,"nodeType":"UncheckedBlock","src":"1425:401:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2920,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2911,"src":"1683:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1688:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1683:6:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2927,"nodeType":"IfStatement","src":"1679:28:13","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":2923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1699:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":2924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1705:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2925,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1698:9:13","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2919,"id":2926,"nodeType":"Return","src":"1691:16:13"}},{"assignments":[2929],"declarations":[{"constant":false,"id":2929,"mutability":"mutable","name":"c","nameLocation":"1729:1:13","nodeType":"VariableDeclaration","scope":2948,"src":"1721:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2928,"name":"uint256","nodeType":"ElementaryTypeName","src":"1721:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2933,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2930,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2911,"src":"1733:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2931,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2913,"src":"1737:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1733:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1721:17:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2934,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2929,"src":"1756:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2935,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2911,"src":"1760:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1756:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2937,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2913,"src":"1765:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1756:10:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2943,"nodeType":"IfStatement","src":"1752:33:13","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1776:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2940,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1783:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2941,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1775:10:13","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2919,"id":2942,"nodeType":"Return","src":"1768:17:13"}},{"expression":{"components":[{"hexValue":"74727565","id":2944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1807:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":2945,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2929,"src":"1813:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2946,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1806:9:13","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2919,"id":2947,"nodeType":"Return","src":"1799:16:13"}]}]},"documentation":{"id":2909,"nodeType":"StructuredDocumentation","src":"1197:137:13","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":2950,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1348:6:13","nodeType":"FunctionDefinition","parameters":{"id":2914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2911,"mutability":"mutable","name":"a","nameLocation":"1363:1:13","nodeType":"VariableDeclaration","scope":2950,"src":"1355:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2910,"name":"uint256","nodeType":"ElementaryTypeName","src":"1355:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2913,"mutability":"mutable","name":"b","nameLocation":"1374:1:13","nodeType":"VariableDeclaration","scope":2950,"src":"1366:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2912,"name":"uint256","nodeType":"ElementaryTypeName","src":"1366:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1354:22:13"},"returnParameters":{"id":2919,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2916,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2950,"src":"1400:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2915,"name":"bool","nodeType":"ElementaryTypeName","src":"1400:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2918,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2950,"src":"1406:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2917,"name":"uint256","nodeType":"ElementaryTypeName","src":"1406:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1399:15:13"},"scope":3157,"src":"1339:493:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2977,"nodeType":"Block","src":"2057:114:13","statements":[{"id":2976,"nodeType":"UncheckedBlock","src":"2067:98:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2962,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2955,"src":"2095:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2100:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2095:6:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2969,"nodeType":"IfStatement","src":"2091:29:13","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2111:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2118:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2967,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2110:10:13","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2961,"id":2968,"nodeType":"Return","src":"2103:17:13"}},{"expression":{"components":[{"hexValue":"74727565","id":2970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2142:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2971,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"2148:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2972,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2955,"src":"2152:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2148:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2974,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2141:13:13","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2961,"id":2975,"nodeType":"Return","src":"2134:20:13"}]}]},"documentation":{"id":2951,"nodeType":"StructuredDocumentation","src":"1838:138:13","text":" @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":2978,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1990:6:13","nodeType":"FunctionDefinition","parameters":{"id":2956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2953,"mutability":"mutable","name":"a","nameLocation":"2005:1:13","nodeType":"VariableDeclaration","scope":2978,"src":"1997:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2952,"name":"uint256","nodeType":"ElementaryTypeName","src":"1997:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2955,"mutability":"mutable","name":"b","nameLocation":"2016:1:13","nodeType":"VariableDeclaration","scope":2978,"src":"2008:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2954,"name":"uint256","nodeType":"ElementaryTypeName","src":"2008:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1996:22:13"},"returnParameters":{"id":2961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2958,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2978,"src":"2042:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2957,"name":"bool","nodeType":"ElementaryTypeName","src":"2042:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2960,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2978,"src":"2048:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2959,"name":"uint256","nodeType":"ElementaryTypeName","src":"2048:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2041:15:13"},"scope":3157,"src":"1981:190:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3005,"nodeType":"Block","src":"2406:114:13","statements":[{"id":3004,"nodeType":"UncheckedBlock","src":"2416:98:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2990,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2983,"src":"2444:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2991,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2449:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2444:6:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2997,"nodeType":"IfStatement","src":"2440:29:13","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2993,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2460:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2467:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2995,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2459:10:13","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2989,"id":2996,"nodeType":"Return","src":"2452:17:13"}},{"expression":{"components":[{"hexValue":"74727565","id":2998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2491:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2999,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2981,"src":"2497:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":3000,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2983,"src":"2501:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2497:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3002,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2490:13:13","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2989,"id":3003,"nodeType":"Return","src":"2483:20:13"}]}]},"documentation":{"id":2979,"nodeType":"StructuredDocumentation","src":"2177:148:13","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":3006,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2339:6:13","nodeType":"FunctionDefinition","parameters":{"id":2984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2981,"mutability":"mutable","name":"a","nameLocation":"2354:1:13","nodeType":"VariableDeclaration","scope":3006,"src":"2346:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2980,"name":"uint256","nodeType":"ElementaryTypeName","src":"2346:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2983,"mutability":"mutable","name":"b","nameLocation":"2365:1:13","nodeType":"VariableDeclaration","scope":3006,"src":"2357:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2982,"name":"uint256","nodeType":"ElementaryTypeName","src":"2357:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2345:22:13"},"returnParameters":{"id":2989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2986,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3006,"src":"2391:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2985,"name":"bool","nodeType":"ElementaryTypeName","src":"2391:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2988,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3006,"src":"2397:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2987,"name":"uint256","nodeType":"ElementaryTypeName","src":"2397:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2390:15:13"},"scope":3157,"src":"2330:190:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3020,"nodeType":"Block","src":"2822:29:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3016,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3009,"src":"2839:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3017,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3011,"src":"2843:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2839:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3015,"id":3019,"nodeType":"Return","src":"2832:12:13"}]},"documentation":{"id":3007,"nodeType":"StructuredDocumentation","src":"2526:224:13","text":" @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."},"id":3021,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"2764:3:13","nodeType":"FunctionDefinition","parameters":{"id":3012,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3009,"mutability":"mutable","name":"a","nameLocation":"2776:1:13","nodeType":"VariableDeclaration","scope":3021,"src":"2768:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3008,"name":"uint256","nodeType":"ElementaryTypeName","src":"2768:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3011,"mutability":"mutable","name":"b","nameLocation":"2787:1:13","nodeType":"VariableDeclaration","scope":3021,"src":"2779:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3010,"name":"uint256","nodeType":"ElementaryTypeName","src":"2779:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2767:22:13"},"returnParameters":{"id":3015,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3014,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3021,"src":"2813:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3013,"name":"uint256","nodeType":"ElementaryTypeName","src":"2813:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2812:9:13"},"scope":3157,"src":"2755:96:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3035,"nodeType":"Block","src":"3189:29:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3031,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3024,"src":"3206:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3032,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3026,"src":"3210:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3206:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3030,"id":3034,"nodeType":"Return","src":"3199:12:13"}]},"documentation":{"id":3022,"nodeType":"StructuredDocumentation","src":"2857:260:13","text":" @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":3036,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"3131:3:13","nodeType":"FunctionDefinition","parameters":{"id":3027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3024,"mutability":"mutable","name":"a","nameLocation":"3143:1:13","nodeType":"VariableDeclaration","scope":3036,"src":"3135:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3023,"name":"uint256","nodeType":"ElementaryTypeName","src":"3135:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3026,"mutability":"mutable","name":"b","nameLocation":"3154:1:13","nodeType":"VariableDeclaration","scope":3036,"src":"3146:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3025,"name":"uint256","nodeType":"ElementaryTypeName","src":"3146:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3134:22:13"},"returnParameters":{"id":3030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3029,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3036,"src":"3180:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3028,"name":"uint256","nodeType":"ElementaryTypeName","src":"3180:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3179:9:13"},"scope":3157,"src":"3122:96:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3050,"nodeType":"Block","src":"3532:29:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3046,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3039,"src":"3549:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3047,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3041,"src":"3553:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3549:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3045,"id":3049,"nodeType":"Return","src":"3542:12:13"}]},"documentation":{"id":3037,"nodeType":"StructuredDocumentation","src":"3224:236:13","text":" @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."},"id":3051,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nameLocation":"3474:3:13","nodeType":"FunctionDefinition","parameters":{"id":3042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3039,"mutability":"mutable","name":"a","nameLocation":"3486:1:13","nodeType":"VariableDeclaration","scope":3051,"src":"3478:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3038,"name":"uint256","nodeType":"ElementaryTypeName","src":"3478:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3041,"mutability":"mutable","name":"b","nameLocation":"3497:1:13","nodeType":"VariableDeclaration","scope":3051,"src":"3489:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3040,"name":"uint256","nodeType":"ElementaryTypeName","src":"3489:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3477:22:13"},"returnParameters":{"id":3045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3044,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3051,"src":"3523:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3043,"name":"uint256","nodeType":"ElementaryTypeName","src":"3523:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3522:9:13"},"scope":3157,"src":"3465:96:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3065,"nodeType":"Block","src":"3917:29:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3061,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3054,"src":"3934:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3062,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3056,"src":"3938:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3934:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3060,"id":3064,"nodeType":"Return","src":"3927:12:13"}]},"documentation":{"id":3052,"nodeType":"StructuredDocumentation","src":"3567:278:13","text":" @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."},"id":3066,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"3859:3:13","nodeType":"FunctionDefinition","parameters":{"id":3057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3054,"mutability":"mutable","name":"a","nameLocation":"3871:1:13","nodeType":"VariableDeclaration","scope":3066,"src":"3863:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3053,"name":"uint256","nodeType":"ElementaryTypeName","src":"3863:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3056,"mutability":"mutable","name":"b","nameLocation":"3882:1:13","nodeType":"VariableDeclaration","scope":3066,"src":"3874:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3055,"name":"uint256","nodeType":"ElementaryTypeName","src":"3874:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3862:22:13"},"returnParameters":{"id":3060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3059,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3066,"src":"3908:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3058,"name":"uint256","nodeType":"ElementaryTypeName","src":"3908:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3907:9:13"},"scope":3157,"src":"3850:96:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3080,"nodeType":"Block","src":"4466:29:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3076,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3069,"src":"4483:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":3077,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3071,"src":"4487:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4483:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3075,"id":3079,"nodeType":"Return","src":"4476:12:13"}]},"documentation":{"id":3067,"nodeType":"StructuredDocumentation","src":"3952:442:13","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":3081,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"4408:3:13","nodeType":"FunctionDefinition","parameters":{"id":3072,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3069,"mutability":"mutable","name":"a","nameLocation":"4420:1:13","nodeType":"VariableDeclaration","scope":3081,"src":"4412:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3068,"name":"uint256","nodeType":"ElementaryTypeName","src":"4412:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3071,"mutability":"mutable","name":"b","nameLocation":"4431:1:13","nodeType":"VariableDeclaration","scope":3081,"src":"4423:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3070,"name":"uint256","nodeType":"ElementaryTypeName","src":"4423:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4411:22:13"},"returnParameters":{"id":3075,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3074,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3081,"src":"4457:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3073,"name":"uint256","nodeType":"ElementaryTypeName","src":"4457:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4456:9:13"},"scope":3157,"src":"4399:96:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3105,"nodeType":"Block","src":"5084:106:13","statements":[{"id":3104,"nodeType":"UncheckedBlock","src":"5094:90:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3094,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3086,"src":"5126:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3095,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3084,"src":"5131:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5126:6:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3097,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3088,"src":"5134:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3093,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5118:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5118:29:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3099,"nodeType":"ExpressionStatement","src":"5118:29:13"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3100,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3084,"src":"5168:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3101,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3086,"src":"5172:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5168:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3092,"id":3103,"nodeType":"Return","src":"5161:12:13"}]}]},"documentation":{"id":3082,"nodeType":"StructuredDocumentation","src":"4501:453:13","text":" @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":3106,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"4968:3:13","nodeType":"FunctionDefinition","parameters":{"id":3089,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3084,"mutability":"mutable","name":"a","nameLocation":"4989:1:13","nodeType":"VariableDeclaration","scope":3106,"src":"4981:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3083,"name":"uint256","nodeType":"ElementaryTypeName","src":"4981:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3086,"mutability":"mutable","name":"b","nameLocation":"5008:1:13","nodeType":"VariableDeclaration","scope":3106,"src":"5000:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3085,"name":"uint256","nodeType":"ElementaryTypeName","src":"5000:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3088,"mutability":"mutable","name":"errorMessage","nameLocation":"5033:12:13","nodeType":"VariableDeclaration","scope":3106,"src":"5019:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3087,"name":"string","nodeType":"ElementaryTypeName","src":"5019:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4971:80:13"},"returnParameters":{"id":3092,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3091,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3106,"src":"5075:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3090,"name":"uint256","nodeType":"ElementaryTypeName","src":"5075:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5074:9:13"},"scope":3157,"src":"4959:231:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3130,"nodeType":"Block","src":"5799:105:13","statements":[{"id":3129,"nodeType":"UncheckedBlock","src":"5809:89:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3119,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3111,"src":"5841:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5845:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5841:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3122,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3113,"src":"5848:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3118,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5833:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5833:28:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3124,"nodeType":"ExpressionStatement","src":"5833:28:13"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3125,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3109,"src":"5882:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3126,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3111,"src":"5886:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5882:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3117,"id":3128,"nodeType":"Return","src":"5875:12:13"}]}]},"documentation":{"id":3107,"nodeType":"StructuredDocumentation","src":"5196:473:13","text":" @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":3131,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"5683:3:13","nodeType":"FunctionDefinition","parameters":{"id":3114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3109,"mutability":"mutable","name":"a","nameLocation":"5704:1:13","nodeType":"VariableDeclaration","scope":3131,"src":"5696:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3108,"name":"uint256","nodeType":"ElementaryTypeName","src":"5696:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3111,"mutability":"mutable","name":"b","nameLocation":"5723:1:13","nodeType":"VariableDeclaration","scope":3131,"src":"5715:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3110,"name":"uint256","nodeType":"ElementaryTypeName","src":"5715:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3113,"mutability":"mutable","name":"errorMessage","nameLocation":"5748:12:13","nodeType":"VariableDeclaration","scope":3131,"src":"5734:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3112,"name":"string","nodeType":"ElementaryTypeName","src":"5734:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5686:80:13"},"returnParameters":{"id":3117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3116,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3131,"src":"5790:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3115,"name":"uint256","nodeType":"ElementaryTypeName","src":"5790:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5789:9:13"},"scope":3157,"src":"5674:230:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3155,"nodeType":"Block","src":"6675:105:13","statements":[{"id":3154,"nodeType":"UncheckedBlock","src":"6685:89:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3144,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3136,"src":"6717:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6721:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6717:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3147,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"6724:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3143,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6709:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6709:28:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3149,"nodeType":"ExpressionStatement","src":"6709:28:13"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3150,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3134,"src":"6758:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":3151,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3136,"src":"6762:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6758:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3142,"id":3153,"nodeType":"Return","src":"6751:12:13"}]}]},"documentation":{"id":3132,"nodeType":"StructuredDocumentation","src":"5910:635:13","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":3156,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"6559:3:13","nodeType":"FunctionDefinition","parameters":{"id":3139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3134,"mutability":"mutable","name":"a","nameLocation":"6580:1:13","nodeType":"VariableDeclaration","scope":3156,"src":"6572:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3133,"name":"uint256","nodeType":"ElementaryTypeName","src":"6572:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3136,"mutability":"mutable","name":"b","nameLocation":"6599:1:13","nodeType":"VariableDeclaration","scope":3156,"src":"6591:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3135,"name":"uint256","nodeType":"ElementaryTypeName","src":"6591:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3138,"mutability":"mutable","name":"errorMessage","nameLocation":"6624:12:13","nodeType":"VariableDeclaration","scope":3156,"src":"6610:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3137,"name":"string","nodeType":"ElementaryTypeName","src":"6610:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6562:80:13"},"returnParameters":{"id":3142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3141,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3156,"src":"6666:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3140,"name":"uint256","nodeType":"ElementaryTypeName","src":"6666:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6665:9:13"},"scope":3157,"src":"6550:230:13","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3158,"src":"482:6300:13","usedErrors":[]}],"src":"107:6676:13"},"id":13},"@openzeppelin/contracts/utils/structs/EnumerableMap.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/structs/EnumerableMap.sol","exportedSymbols":{"EnumerableMap":[4279],"EnumerableSet":[4892]},"id":4280,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3159,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"205:23:14"},{"absolutePath":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","file":"./EnumerableSet.sol","id":3160,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4280,"sourceUnit":4893,"src":"230:29:14","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"EnumerableMap","contractDependencies":[],"contractKind":"library","documentation":{"id":3161,"nodeType":"StructuredDocumentation","src":"261:1359:14","text":" @dev Library for managing an enumerable variant of Solidity's\n https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n type.\n Maps have the following properties:\n - Entries are added, removed, and checked for existence in constant time\n (O(1)).\n - Entries are enumerated in O(n). No guarantees are made on the ordering.\n ```\n contract Example {\n     // Add the library methods\n     using EnumerableMap for EnumerableMap.UintToAddressMap;\n     // Declare a set state variable\n     EnumerableMap.UintToAddressMap private myMap;\n }\n ```\n The following map types are supported:\n - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\n - `address -> uint256` (`AddressToUintMap`) since v4.6.0\n - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\n - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\n - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\n [WARNING]\n ====\n Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n unusable.\n See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\n array of EnumerableMap.\n ===="},"fullyImplemented":true,"id":4279,"linearizedBaseContracts":[4279],"name":"EnumerableMap","nameLocation":"1629:13:14","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3165,"libraryName":{"id":3162,"name":"EnumerableSet","nameLocations":["1655:13:14"],"nodeType":"IdentifierPath","referencedDeclaration":4892,"src":"1655:13:14"},"nodeType":"UsingForDirective","src":"1649:49:14","typeName":{"id":3164,"nodeType":"UserDefinedTypeName","pathNode":{"id":3163,"name":"EnumerableSet.Bytes32Set","nameLocations":["1673:13:14","1687:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":4484,"src":"1673:24:14"},"referencedDeclaration":4484,"src":"1673:24:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4484_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}}},{"canonicalName":"EnumerableMap.Bytes32ToBytes32Map","id":3173,"members":[{"constant":false,"id":3168,"mutability":"mutable","name":"_keys","nameLocation":"2251:5:14","nodeType":"VariableDeclaration","scope":3173,"src":"2226:30:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4484_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":3167,"nodeType":"UserDefinedTypeName","pathNode":{"id":3166,"name":"EnumerableSet.Bytes32Set","nameLocations":["2226:13:14","2240:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":4484,"src":"2226:24:14"},"referencedDeclaration":4484,"src":"2226:24:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4484_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":3172,"mutability":"mutable","name":"_values","nameLocation":"2294:7:14","nodeType":"VariableDeclaration","scope":3173,"src":"2266:35:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"},"typeName":{"id":3171,"keyType":{"id":3169,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2274:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2266:27:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"},"valueType":{"id":3170,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2285:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},"visibility":"internal"}],"name":"Bytes32ToBytes32Map","nameLocation":"2169:19:14","nodeType":"StructDefinition","scope":4279,"src":"2162:146:14","visibility":"public"},{"body":{"id":3200,"nodeType":"Block","src":"2663:76:14","statements":[{"expression":{"id":3192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3186,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3177,"src":"2673:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"}},"id":3189,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2677:7:14","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3172,"src":"2673:11:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"}},"id":3190,"indexExpression":{"id":3188,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3179,"src":"2685:3:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2673:16:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3191,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3181,"src":"2692:5:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2673:24:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3193,"nodeType":"ExpressionStatement","src":"2673:24:14"},{"expression":{"arguments":[{"id":3197,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3179,"src":"2728:3:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"expression":{"id":3194,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3177,"src":"2714:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"}},"id":3195,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2718:5:14","memberName":"_keys","nodeType":"MemberAccess","referencedDeclaration":3168,"src":"2714:9:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4484_storage","typeString":"struct EnumerableSet.Bytes32Set storage ref"}},"id":3196,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2724:3:14","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":4502,"src":"2714:13:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Bytes32Set_$4484_storage_ptr_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_Bytes32Set_$4484_storage_ptr_$","typeString":"function (struct EnumerableSet.Bytes32Set storage pointer,bytes32) returns (bool)"}},"id":3198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2714:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3185,"id":3199,"nodeType":"Return","src":"2707:25:14"}]},"documentation":{"id":3174,"nodeType":"StructuredDocumentation","src":"2314:216:14","text":" @dev Adds a key-value pair to a map, or updates the value for an existing\n key. O(1).\n Returns true if the key was added to the map, that is if it was not\n already present."},"id":3201,"implemented":true,"kind":"function","modifiers":[],"name":"set","nameLocation":"2544:3:14","nodeType":"FunctionDefinition","parameters":{"id":3182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3177,"mutability":"mutable","name":"map","nameLocation":"2585:3:14","nodeType":"VariableDeclaration","scope":3201,"src":"2557:31:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"},"typeName":{"id":3176,"nodeType":"UserDefinedTypeName","pathNode":{"id":3175,"name":"Bytes32ToBytes32Map","nameLocations":["2557:19:14"],"nodeType":"IdentifierPath","referencedDeclaration":3173,"src":"2557:19:14"},"referencedDeclaration":3173,"src":"2557:19:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"}},"visibility":"internal"},{"constant":false,"id":3179,"mutability":"mutable","name":"key","nameLocation":"2606:3:14","nodeType":"VariableDeclaration","scope":3201,"src":"2598:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3178,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2598:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3181,"mutability":"mutable","name":"value","nameLocation":"2627:5:14","nodeType":"VariableDeclaration","scope":3201,"src":"2619:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3180,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2619:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2547:91:14"},"returnParameters":{"id":3185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3184,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3201,"src":"2657:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3183,"name":"bool","nodeType":"ElementaryTypeName","src":"2657:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2656:6:14"},"scope":4279,"src":"2535:204:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3224,"nodeType":"Block","src":"2993:78:14","statements":[{"expression":{"id":3216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"3003:23:14","subExpression":{"baseExpression":{"expression":{"id":3212,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3205,"src":"3010:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"}},"id":3213,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3014:7:14","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3172,"src":"3010:11:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"}},"id":3215,"indexExpression":{"id":3214,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3207,"src":"3022:3:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3010:16:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3217,"nodeType":"ExpressionStatement","src":"3003:23:14"},{"expression":{"arguments":[{"id":3221,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3207,"src":"3060:3:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"expression":{"id":3218,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3205,"src":"3043:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"}},"id":3219,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3047:5:14","memberName":"_keys","nodeType":"MemberAccess","referencedDeclaration":3168,"src":"3043:9:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4484_storage","typeString":"struct EnumerableSet.Bytes32Set storage ref"}},"id":3220,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3053:6:14","memberName":"remove","nodeType":"MemberAccess","referencedDeclaration":4520,"src":"3043:16:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Bytes32Set_$4484_storage_ptr_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_Bytes32Set_$4484_storage_ptr_$","typeString":"function (struct EnumerableSet.Bytes32Set storage pointer,bytes32) returns (bool)"}},"id":3222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3043:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3211,"id":3223,"nodeType":"Return","src":"3036:28:14"}]},"documentation":{"id":3202,"nodeType":"StructuredDocumentation","src":"2745:157:14","text":" @dev Removes a key-value pair from a map. O(1).\n Returns true if the key was removed from the map, that is if it was present."},"id":3225,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"2916:6:14","nodeType":"FunctionDefinition","parameters":{"id":3208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3205,"mutability":"mutable","name":"map","nameLocation":"2951:3:14","nodeType":"VariableDeclaration","scope":3225,"src":"2923:31:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"},"typeName":{"id":3204,"nodeType":"UserDefinedTypeName","pathNode":{"id":3203,"name":"Bytes32ToBytes32Map","nameLocations":["2923:19:14"],"nodeType":"IdentifierPath","referencedDeclaration":3173,"src":"2923:19:14"},"referencedDeclaration":3173,"src":"2923:19:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"}},"visibility":"internal"},{"constant":false,"id":3207,"mutability":"mutable","name":"key","nameLocation":"2964:3:14","nodeType":"VariableDeclaration","scope":3225,"src":"2956:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3206,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2956:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2922:46:14"},"returnParameters":{"id":3211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3210,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3225,"src":"2987:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3209,"name":"bool","nodeType":"ElementaryTypeName","src":"2987:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2986:6:14"},"scope":4279,"src":"2907:164:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3242,"nodeType":"Block","src":"3243:47:14","statements":[{"expression":{"arguments":[{"id":3239,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3231,"src":"3279:3:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"expression":{"id":3236,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"3260:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"}},"id":3237,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3264:5:14","memberName":"_keys","nodeType":"MemberAccess","referencedDeclaration":3168,"src":"3260:9:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4484_storage","typeString":"struct EnumerableSet.Bytes32Set storage ref"}},"id":3238,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3270:8:14","memberName":"contains","nodeType":"MemberAccess","referencedDeclaration":4538,"src":"3260:18:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32Set_$4484_storage_ptr_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_Bytes32Set_$4484_storage_ptr_$","typeString":"function (struct EnumerableSet.Bytes32Set storage pointer,bytes32) view returns (bool)"}},"id":3240,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3260:23:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3235,"id":3241,"nodeType":"Return","src":"3253:30:14"}]},"documentation":{"id":3226,"nodeType":"StructuredDocumentation","src":"3077:68:14","text":" @dev Returns true if the key is in the map. O(1)."},"id":3243,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"3159:8:14","nodeType":"FunctionDefinition","parameters":{"id":3232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3229,"mutability":"mutable","name":"map","nameLocation":"3196:3:14","nodeType":"VariableDeclaration","scope":3243,"src":"3168:31:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"},"typeName":{"id":3228,"nodeType":"UserDefinedTypeName","pathNode":{"id":3227,"name":"Bytes32ToBytes32Map","nameLocations":["3168:19:14"],"nodeType":"IdentifierPath","referencedDeclaration":3173,"src":"3168:19:14"},"referencedDeclaration":3173,"src":"3168:19:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"}},"visibility":"internal"},{"constant":false,"id":3231,"mutability":"mutable","name":"key","nameLocation":"3209:3:14","nodeType":"VariableDeclaration","scope":3243,"src":"3201:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3230,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3201:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3167:46:14"},"returnParameters":{"id":3235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3234,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3243,"src":"3237:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3233,"name":"bool","nodeType":"ElementaryTypeName","src":"3237:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3236:6:14"},"scope":4279,"src":"3150:140:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3257,"nodeType":"Block","src":"3461:42:14","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":3252,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3247,"src":"3478:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"}},"id":3253,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3482:5:14","memberName":"_keys","nodeType":"MemberAccess","referencedDeclaration":3168,"src":"3478:9:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4484_storage","typeString":"struct EnumerableSet.Bytes32Set storage ref"}},"id":3254,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3488:6:14","memberName":"length","nodeType":"MemberAccess","referencedDeclaration":4553,"src":"3478:16:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32Set_$4484_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Bytes32Set_$4484_storage_ptr_$","typeString":"function (struct EnumerableSet.Bytes32Set storage pointer) view returns (uint256)"}},"id":3255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3478:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3251,"id":3256,"nodeType":"Return","src":"3471:25:14"}]},"documentation":{"id":3244,"nodeType":"StructuredDocumentation","src":"3296:79:14","text":" @dev Returns the number of key-value pairs in the map. O(1)."},"id":3258,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"3389:6:14","nodeType":"FunctionDefinition","parameters":{"id":3248,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3247,"mutability":"mutable","name":"map","nameLocation":"3424:3:14","nodeType":"VariableDeclaration","scope":3258,"src":"3396:31:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"},"typeName":{"id":3246,"nodeType":"UserDefinedTypeName","pathNode":{"id":3245,"name":"Bytes32ToBytes32Map","nameLocations":["3396:19:14"],"nodeType":"IdentifierPath","referencedDeclaration":3173,"src":"3396:19:14"},"referencedDeclaration":3173,"src":"3396:19:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"}},"visibility":"internal"}],"src":"3395:33:14"},"returnParameters":{"id":3251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3250,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3258,"src":"3452:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3249,"name":"uint256","nodeType":"ElementaryTypeName","src":"3452:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3451:9:14"},"scope":4279,"src":"3380:123:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3286,"nodeType":"Block","src":"3957:90:14","statements":[{"assignments":[3272],"declarations":[{"constant":false,"id":3272,"mutability":"mutable","name":"key","nameLocation":"3975:3:14","nodeType":"VariableDeclaration","scope":3286,"src":"3967:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3271,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3967:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3278,"initialValue":{"arguments":[{"id":3276,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"3994:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":3273,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"3981:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"}},"id":3274,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3985:5:14","memberName":"_keys","nodeType":"MemberAccess","referencedDeclaration":3168,"src":"3981:9:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4484_storage","typeString":"struct EnumerableSet.Bytes32Set storage ref"}},"id":3275,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3991:2:14","memberName":"at","nodeType":"MemberAccess","referencedDeclaration":4571,"src":"3981:12:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32Set_$4484_storage_ptr_$_t_uint256_$returns$_t_bytes32_$bound_to$_t_struct$_Bytes32Set_$4484_storage_ptr_$","typeString":"function (struct EnumerableSet.Bytes32Set storage pointer,uint256) view returns (bytes32)"}},"id":3277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3981:19:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3967:33:14"},{"expression":{"components":[{"id":3279,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"4018:3:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"expression":{"id":3280,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"4023:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"}},"id":3281,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4027:7:14","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3172,"src":"4023:11:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"}},"id":3283,"indexExpression":{"id":3282,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"4035:3:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4023:16:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3284,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4017:23:14","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_bytes32_$","typeString":"tuple(bytes32,bytes32)"}},"functionReturnParameters":3270,"id":3285,"nodeType":"Return","src":"4010:30:14"}]},"documentation":{"id":3259,"nodeType":"StructuredDocumentation","src":"3509:342:14","text":" @dev Returns the key-value pair stored at position `index` in the map. O(1).\n Note that there are no guarantees on the ordering of entries inside the\n array, and it may change when more entries are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":3287,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"3865:2:14","nodeType":"FunctionDefinition","parameters":{"id":3265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3262,"mutability":"mutable","name":"map","nameLocation":"3896:3:14","nodeType":"VariableDeclaration","scope":3287,"src":"3868:31:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"},"typeName":{"id":3261,"nodeType":"UserDefinedTypeName","pathNode":{"id":3260,"name":"Bytes32ToBytes32Map","nameLocations":["3868:19:14"],"nodeType":"IdentifierPath","referencedDeclaration":3173,"src":"3868:19:14"},"referencedDeclaration":3173,"src":"3868:19:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"}},"visibility":"internal"},{"constant":false,"id":3264,"mutability":"mutable","name":"index","nameLocation":"3909:5:14","nodeType":"VariableDeclaration","scope":3287,"src":"3901:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3263,"name":"uint256","nodeType":"ElementaryTypeName","src":"3901:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3867:48:14"},"returnParameters":{"id":3270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3267,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3287,"src":"3939:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3266,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3939:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3269,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3287,"src":"3948:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3268,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3948:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3938:18:14"},"scope":4279,"src":"3856:191:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3330,"nodeType":"Block","src":"4288:198:14","statements":[{"assignments":[3301],"declarations":[{"constant":false,"id":3301,"mutability":"mutable","name":"value","nameLocation":"4306:5:14","nodeType":"VariableDeclaration","scope":3330,"src":"4298:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3300,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4298:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3306,"initialValue":{"baseExpression":{"expression":{"id":3302,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3291,"src":"4314:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"}},"id":3303,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4318:7:14","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3172,"src":"4314:11:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"}},"id":3305,"indexExpression":{"id":3304,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"4326:3:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4314:16:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4298:32:14"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3307,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3301,"src":"4344:5:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4361:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3309,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4353:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3308,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4353:7:14","typeDescriptions":{}}},"id":3311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4353:10:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4344:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3328,"nodeType":"Block","src":"4435:45:14","statements":[{"expression":{"components":[{"hexValue":"74727565","id":3324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4457:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":3325,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3301,"src":"4463:5:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3326,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4456:13:14","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes32_$","typeString":"tuple(bool,bytes32)"}},"functionReturnParameters":3299,"id":3327,"nodeType":"Return","src":"4449:20:14"}]},"id":3329,"nodeType":"IfStatement","src":"4340:140:14","trueBody":{"id":3323,"nodeType":"Block","src":"4365:64:14","statements":[{"expression":{"components":[{"arguments":[{"id":3314,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3291,"src":"4396:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"}},{"id":3315,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"4401:3:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3313,"name":"contains","nodeType":"Identifier","overloadedDeclarations":[3243,3472,3685,3934,4156],"referencedDeclaration":3243,"src":"4387:8:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) view returns (bool)"}},"id":3316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4387:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"hexValue":"30","id":3319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4415:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3318,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4407:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3317,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4407:7:14","typeDescriptions":{}}},"id":3320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4407:10:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3321,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4386:32:14","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes32_$","typeString":"tuple(bool,bytes32)"}},"functionReturnParameters":3299,"id":3322,"nodeType":"Return","src":"4379:39:14"}]}}]},"documentation":{"id":3288,"nodeType":"StructuredDocumentation","src":"4053:130:14","text":" @dev Tries to returns the value associated with `key`. O(1).\n Does not revert if `key` is not in the map."},"id":3331,"implemented":true,"kind":"function","modifiers":[],"name":"tryGet","nameLocation":"4197:6:14","nodeType":"FunctionDefinition","parameters":{"id":3294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3291,"mutability":"mutable","name":"map","nameLocation":"4232:3:14","nodeType":"VariableDeclaration","scope":3331,"src":"4204:31:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"},"typeName":{"id":3290,"nodeType":"UserDefinedTypeName","pathNode":{"id":3289,"name":"Bytes32ToBytes32Map","nameLocations":["4204:19:14"],"nodeType":"IdentifierPath","referencedDeclaration":3173,"src":"4204:19:14"},"referencedDeclaration":3173,"src":"4204:19:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"}},"visibility":"internal"},{"constant":false,"id":3293,"mutability":"mutable","name":"key","nameLocation":"4245:3:14","nodeType":"VariableDeclaration","scope":3331,"src":"4237:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3292,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4237:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4203:46:14"},"returnParameters":{"id":3299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3296,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3331,"src":"4273:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3295,"name":"bool","nodeType":"ElementaryTypeName","src":"4273:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3298,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3331,"src":"4279:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3297,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4279:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4272:15:14"},"scope":4279,"src":"4188:298:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3363,"nodeType":"Block","src":"4728:156:14","statements":[{"assignments":[3343],"declarations":[{"constant":false,"id":3343,"mutability":"mutable","name":"value","nameLocation":"4746:5:14","nodeType":"VariableDeclaration","scope":3363,"src":"4738:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3342,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4738:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3348,"initialValue":{"baseExpression":{"expression":{"id":3344,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3335,"src":"4754:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"}},"id":3345,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4758:7:14","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3172,"src":"4754:11:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"}},"id":3347,"indexExpression":{"id":3346,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3337,"src":"4766:3:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4754:16:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4738:32:14"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3350,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3343,"src":"4788:5:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4797:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4788:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":3354,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3335,"src":"4811:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"}},{"id":3355,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3337,"src":"4816:3:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3353,"name":"contains","nodeType":"Identifier","overloadedDeclarations":[3243,3472,3685,3934,4156],"referencedDeclaration":3243,"src":"4802:8:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) view returns (bool)"}},"id":3356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4802:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4788:32:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"456e756d657261626c654d61703a206e6f6e6578697374656e74206b6579","id":3358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4822:32:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3551e30d3095fd81287b88f7139bb09818e34280e85ee821994ebaebbed7072","typeString":"literal_string \"EnumerableMap: nonexistent key\""},"value":"EnumerableMap: nonexistent key"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d3551e30d3095fd81287b88f7139bb09818e34280e85ee821994ebaebbed7072","typeString":"literal_string \"EnumerableMap: nonexistent key\""}],"id":3349,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4780:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4780:75:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3360,"nodeType":"ExpressionStatement","src":"4780:75:14"},{"expression":{"id":3361,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3343,"src":"4872:5:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3341,"id":3362,"nodeType":"Return","src":"4865:12:14"}]},"documentation":{"id":3332,"nodeType":"StructuredDocumentation","src":"4492:140:14","text":" @dev Returns the value associated with `key`. O(1).\n Requirements:\n - `key` must be in the map."},"id":3364,"implemented":true,"kind":"function","modifiers":[],"name":"get","nameLocation":"4646:3:14","nodeType":"FunctionDefinition","parameters":{"id":3338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3335,"mutability":"mutable","name":"map","nameLocation":"4678:3:14","nodeType":"VariableDeclaration","scope":3364,"src":"4650:31:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"},"typeName":{"id":3334,"nodeType":"UserDefinedTypeName","pathNode":{"id":3333,"name":"Bytes32ToBytes32Map","nameLocations":["4650:19:14"],"nodeType":"IdentifierPath","referencedDeclaration":3173,"src":"4650:19:14"},"referencedDeclaration":3173,"src":"4650:19:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"}},"visibility":"internal"},{"constant":false,"id":3337,"mutability":"mutable","name":"key","nameLocation":"4691:3:14","nodeType":"VariableDeclaration","scope":3364,"src":"4683:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3336,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4683:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4649:46:14"},"returnParameters":{"id":3341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3340,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3364,"src":"4719:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3339,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4719:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4718:9:14"},"scope":4279,"src":"4637:247:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3398,"nodeType":"Block","src":"5313:136:14","statements":[{"assignments":[3378],"declarations":[{"constant":false,"id":3378,"mutability":"mutable","name":"value","nameLocation":"5331:5:14","nodeType":"VariableDeclaration","scope":3398,"src":"5323:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5323:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3383,"initialValue":{"baseExpression":{"expression":{"id":3379,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3368,"src":"5339:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"}},"id":3380,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5343:7:14","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3172,"src":"5339:11:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"}},"id":3382,"indexExpression":{"id":3381,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3370,"src":"5351:3:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5339:16:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5323:32:14"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3385,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3378,"src":"5373:5:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5382:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5373:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":3389,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3368,"src":"5396:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"}},{"id":3390,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3370,"src":"5401:3:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3388,"name":"contains","nodeType":"Identifier","overloadedDeclarations":[3243,3472,3685,3934,4156],"referencedDeclaration":3243,"src":"5387:8:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) view returns (bool)"}},"id":3391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5387:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5373:32:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3393,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3372,"src":"5407:12:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3384,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5365:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5365:55:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3395,"nodeType":"ExpressionStatement","src":"5365:55:14"},{"expression":{"id":3396,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3378,"src":"5437:5:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3376,"id":3397,"nodeType":"Return","src":"5430:12:14"}]},"documentation":{"id":3365,"nodeType":"StructuredDocumentation","src":"4890:269:14","text":" @dev Same as {get}, with a custom error message when `key` is not in the map.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryGet}."},"id":3399,"implemented":true,"kind":"function","modifiers":[],"name":"get","nameLocation":"5173:3:14","nodeType":"FunctionDefinition","parameters":{"id":3373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3368,"mutability":"mutable","name":"map","nameLocation":"5214:3:14","nodeType":"VariableDeclaration","scope":3399,"src":"5186:31:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"},"typeName":{"id":3367,"nodeType":"UserDefinedTypeName","pathNode":{"id":3366,"name":"Bytes32ToBytes32Map","nameLocations":["5186:19:14"],"nodeType":"IdentifierPath","referencedDeclaration":3173,"src":"5186:19:14"},"referencedDeclaration":3173,"src":"5186:19:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"}},"visibility":"internal"},{"constant":false,"id":3370,"mutability":"mutable","name":"key","nameLocation":"5235:3:14","nodeType":"VariableDeclaration","scope":3399,"src":"5227:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3369,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5227:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3372,"mutability":"mutable","name":"errorMessage","nameLocation":"5262:12:14","nodeType":"VariableDeclaration","scope":3399,"src":"5248:26:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3371,"name":"string","nodeType":"ElementaryTypeName","src":"5248:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5176:104:14"},"returnParameters":{"id":3376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3375,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3399,"src":"5304:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3374,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5304:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5303:9:14"},"scope":4279,"src":"5164:285:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableMap.UintToUintMap","id":3403,"members":[{"constant":false,"id":3402,"mutability":"mutable","name":"_inner","nameLocation":"5528:6:14","nodeType":"VariableDeclaration","scope":3403,"src":"5508:26:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"},"typeName":{"id":3401,"nodeType":"UserDefinedTypeName","pathNode":{"id":3400,"name":"Bytes32ToBytes32Map","nameLocations":["5508:19:14"],"nodeType":"IdentifierPath","referencedDeclaration":3173,"src":"5508:19:14"},"referencedDeclaration":3173,"src":"5508:19:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"}},"visibility":"internal"}],"name":"UintToUintMap","nameLocation":"5484:13:14","nodeType":"StructDefinition","scope":4279,"src":"5477:64:14","visibility":"public"},{"body":{"id":3429,"nodeType":"Block","src":"5890:69:14","statements":[{"expression":{"arguments":[{"expression":{"id":3417,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3407,"src":"5911:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$3403_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap storage pointer"}},"id":3418,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5915:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3402,"src":"5911:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"id":3421,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3409,"src":"5931:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3420,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5923:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3419,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5923:7:14","typeDescriptions":{}}},"id":3422,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5923:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":3425,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3411,"src":"5945:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3424,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5937:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3423,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5937:7:14","typeDescriptions":{}}},"id":3426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5937:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3416,"name":"set","nodeType":"Identifier","overloadedDeclarations":[3201,3430,3643,3880,4120],"referencedDeclaration":3201,"src":"5907:3:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32,bytes32) returns (bool)"}},"id":3427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5907:45:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3415,"id":3428,"nodeType":"Return","src":"5900:52:14"}]},"documentation":{"id":3404,"nodeType":"StructuredDocumentation","src":"5547:216:14","text":" @dev Adds a key-value pair to a map, or updates the value for an existing\n key. O(1).\n Returns true if the key was added to the map, that is if it was not\n already present."},"id":3430,"implemented":true,"kind":"function","modifiers":[],"name":"set","nameLocation":"5777:3:14","nodeType":"FunctionDefinition","parameters":{"id":3412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3407,"mutability":"mutable","name":"map","nameLocation":"5812:3:14","nodeType":"VariableDeclaration","scope":3430,"src":"5790:25:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$3403_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"},"typeName":{"id":3406,"nodeType":"UserDefinedTypeName","pathNode":{"id":3405,"name":"UintToUintMap","nameLocations":["5790:13:14"],"nodeType":"IdentifierPath","referencedDeclaration":3403,"src":"5790:13:14"},"referencedDeclaration":3403,"src":"5790:13:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$3403_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"}},"visibility":"internal"},{"constant":false,"id":3409,"mutability":"mutable","name":"key","nameLocation":"5833:3:14","nodeType":"VariableDeclaration","scope":3430,"src":"5825:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3408,"name":"uint256","nodeType":"ElementaryTypeName","src":"5825:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3411,"mutability":"mutable","name":"value","nameLocation":"5854:5:14","nodeType":"VariableDeclaration","scope":3430,"src":"5846:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3410,"name":"uint256","nodeType":"ElementaryTypeName","src":"5846:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5780:85:14"},"returnParameters":{"id":3415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3414,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3430,"src":"5884:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3413,"name":"bool","nodeType":"ElementaryTypeName","src":"5884:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5883:6:14"},"scope":4279,"src":"5768:191:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3450,"nodeType":"Block","src":"6198:56:14","statements":[{"expression":{"arguments":[{"expression":{"id":3442,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3434,"src":"6222:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$3403_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap storage pointer"}},"id":3443,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6226:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3402,"src":"6222:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"id":3446,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3436,"src":"6242:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3445,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6234:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3444,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6234:7:14","typeDescriptions":{}}},"id":3447,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6234:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3441,"name":"remove","nodeType":"Identifier","overloadedDeclarations":[3225,3451,3664,3907,4138],"referencedDeclaration":3225,"src":"6215:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) returns (bool)"}},"id":3448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6215:32:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3440,"id":3449,"nodeType":"Return","src":"6208:39:14"}]},"documentation":{"id":3431,"nodeType":"StructuredDocumentation","src":"5965:148:14","text":" @dev Removes a value from a set. O(1).\n Returns true if the key was removed from the map, that is if it was present."},"id":3451,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"6127:6:14","nodeType":"FunctionDefinition","parameters":{"id":3437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3434,"mutability":"mutable","name":"map","nameLocation":"6156:3:14","nodeType":"VariableDeclaration","scope":3451,"src":"6134:25:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$3403_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"},"typeName":{"id":3433,"nodeType":"UserDefinedTypeName","pathNode":{"id":3432,"name":"UintToUintMap","nameLocations":["6134:13:14"],"nodeType":"IdentifierPath","referencedDeclaration":3403,"src":"6134:13:14"},"referencedDeclaration":3403,"src":"6134:13:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$3403_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"}},"visibility":"internal"},{"constant":false,"id":3436,"mutability":"mutable","name":"key","nameLocation":"6169:3:14","nodeType":"VariableDeclaration","scope":3451,"src":"6161:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3435,"name":"uint256","nodeType":"ElementaryTypeName","src":"6161:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6133:40:14"},"returnParameters":{"id":3440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3439,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3451,"src":"6192:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3438,"name":"bool","nodeType":"ElementaryTypeName","src":"6192:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6191:6:14"},"scope":4279,"src":"6118:136:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3471,"nodeType":"Block","src":"6420:58:14","statements":[{"expression":{"arguments":[{"expression":{"id":3463,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3455,"src":"6446:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$3403_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap storage pointer"}},"id":3464,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6450:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3402,"src":"6446:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"id":3467,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3457,"src":"6466:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3466,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6458:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3465,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6458:7:14","typeDescriptions":{}}},"id":3468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6458:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3462,"name":"contains","nodeType":"Identifier","overloadedDeclarations":[3243,3472,3685,3934,4156],"referencedDeclaration":3243,"src":"6437:8:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) view returns (bool)"}},"id":3469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6437:34:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3461,"id":3470,"nodeType":"Return","src":"6430:41:14"}]},"documentation":{"id":3452,"nodeType":"StructuredDocumentation","src":"6260:68:14","text":" @dev Returns true if the key is in the map. O(1)."},"id":3472,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"6342:8:14","nodeType":"FunctionDefinition","parameters":{"id":3458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3455,"mutability":"mutable","name":"map","nameLocation":"6373:3:14","nodeType":"VariableDeclaration","scope":3472,"src":"6351:25:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$3403_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"},"typeName":{"id":3454,"nodeType":"UserDefinedTypeName","pathNode":{"id":3453,"name":"UintToUintMap","nameLocations":["6351:13:14"],"nodeType":"IdentifierPath","referencedDeclaration":3403,"src":"6351:13:14"},"referencedDeclaration":3403,"src":"6351:13:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$3403_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"}},"visibility":"internal"},{"constant":false,"id":3457,"mutability":"mutable","name":"key","nameLocation":"6386:3:14","nodeType":"VariableDeclaration","scope":3472,"src":"6378:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3456,"name":"uint256","nodeType":"ElementaryTypeName","src":"6378:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6350:40:14"},"returnParameters":{"id":3461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3460,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3472,"src":"6414:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3459,"name":"bool","nodeType":"ElementaryTypeName","src":"6414:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6413:6:14"},"scope":4279,"src":"6333:145:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3486,"nodeType":"Block","src":"6636:42:14","statements":[{"expression":{"arguments":[{"expression":{"id":3482,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3476,"src":"6660:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$3403_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap storage pointer"}},"id":3483,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6664:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3402,"src":"6660:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}],"id":3481,"name":"length","nodeType":"Identifier","overloadedDeclarations":[3258,3487,3700,3949,4171],"referencedDeclaration":3258,"src":"6653:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer) view returns (uint256)"}},"id":3484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6653:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3480,"id":3485,"nodeType":"Return","src":"6646:25:14"}]},"documentation":{"id":3473,"nodeType":"StructuredDocumentation","src":"6484:72:14","text":" @dev Returns the number of elements in the map. O(1)."},"id":3487,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"6570:6:14","nodeType":"FunctionDefinition","parameters":{"id":3477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3476,"mutability":"mutable","name":"map","nameLocation":"6599:3:14","nodeType":"VariableDeclaration","scope":3487,"src":"6577:25:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$3403_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"},"typeName":{"id":3475,"nodeType":"UserDefinedTypeName","pathNode":{"id":3474,"name":"UintToUintMap","nameLocations":["6577:13:14"],"nodeType":"IdentifierPath","referencedDeclaration":3403,"src":"6577:13:14"},"referencedDeclaration":3403,"src":"6577:13:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$3403_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"}},"visibility":"internal"}],"src":"6576:27:14"},"returnParameters":{"id":3480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3479,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3487,"src":"6627:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3478,"name":"uint256","nodeType":"ElementaryTypeName","src":"6627:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6626:9:14"},"scope":4279,"src":"6561:117:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3520,"nodeType":"Block","src":"7110:116:14","statements":[{"assignments":[3501,3503],"declarations":[{"constant":false,"id":3501,"mutability":"mutable","name":"key","nameLocation":"7129:3:14","nodeType":"VariableDeclaration","scope":3520,"src":"7121:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3500,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7121:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3503,"mutability":"mutable","name":"value","nameLocation":"7142:5:14","nodeType":"VariableDeclaration","scope":3520,"src":"7134:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3502,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7134:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3509,"initialValue":{"arguments":[{"expression":{"id":3505,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3491,"src":"7154:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$3403_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap storage pointer"}},"id":3506,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7158:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3402,"src":"7154:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"id":3507,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3493,"src":"7166:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3504,"name":"at","nodeType":"Identifier","overloadedDeclarations":[3287,3521,3740,3989,4202],"referencedDeclaration":3287,"src":"7151:2:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_uint256_$returns$_t_bytes32_$_t_bytes32_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,uint256) view returns (bytes32,bytes32)"}},"id":3508,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7151:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_bytes32_$","typeString":"tuple(bytes32,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"7120:52:14"},{"expression":{"components":[{"arguments":[{"id":3512,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3501,"src":"7198:3:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3511,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7190:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3510,"name":"uint256","nodeType":"ElementaryTypeName","src":"7190:7:14","typeDescriptions":{}}},"id":3513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7190:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":3516,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3503,"src":"7212:5:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3515,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7204:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3514,"name":"uint256","nodeType":"ElementaryTypeName","src":"7204:7:14","typeDescriptions":{}}},"id":3517,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7204:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3518,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7189:30:14","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":3499,"id":3519,"nodeType":"Return","src":"7182:37:14"}]},"documentation":{"id":3488,"nodeType":"StructuredDocumentation","src":"6684:326:14","text":" @dev Returns the element stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":3521,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"7024:2:14","nodeType":"FunctionDefinition","parameters":{"id":3494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3491,"mutability":"mutable","name":"map","nameLocation":"7049:3:14","nodeType":"VariableDeclaration","scope":3521,"src":"7027:25:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$3403_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"},"typeName":{"id":3490,"nodeType":"UserDefinedTypeName","pathNode":{"id":3489,"name":"UintToUintMap","nameLocations":["7027:13:14"],"nodeType":"IdentifierPath","referencedDeclaration":3403,"src":"7027:13:14"},"referencedDeclaration":3403,"src":"7027:13:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$3403_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"}},"visibility":"internal"},{"constant":false,"id":3493,"mutability":"mutable","name":"index","nameLocation":"7062:5:14","nodeType":"VariableDeclaration","scope":3521,"src":"7054:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3492,"name":"uint256","nodeType":"ElementaryTypeName","src":"7054:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7026:42:14"},"returnParameters":{"id":3499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3496,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3521,"src":"7092:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3495,"name":"uint256","nodeType":"ElementaryTypeName","src":"7092:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3498,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3521,"src":"7101:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3497,"name":"uint256","nodeType":"ElementaryTypeName","src":"7101:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7091:18:14"},"scope":4279,"src":"7015:211:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3554,"nodeType":"Block","src":"7461:123:14","statements":[{"assignments":[3535,3537],"declarations":[{"constant":false,"id":3535,"mutability":"mutable","name":"success","nameLocation":"7477:7:14","nodeType":"VariableDeclaration","scope":3554,"src":"7472:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3534,"name":"bool","nodeType":"ElementaryTypeName","src":"7472:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3537,"mutability":"mutable","name":"value","nameLocation":"7494:5:14","nodeType":"VariableDeclaration","scope":3554,"src":"7486:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3536,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7486:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3546,"initialValue":{"arguments":[{"expression":{"id":3539,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3525,"src":"7510:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$3403_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap storage pointer"}},"id":3540,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7514:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3402,"src":"7510:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"id":3543,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3527,"src":"7530:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3542,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7522:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3541,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7522:7:14","typeDescriptions":{}}},"id":3544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7522:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3538,"name":"tryGet","nodeType":"Identifier","overloadedDeclarations":[3331,3555,3780,4029,4233],"referencedDeclaration":3331,"src":"7503:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_bytes32_$returns$_t_bool_$_t_bytes32_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) view returns (bool,bytes32)"}},"id":3545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7503:32:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes32_$","typeString":"tuple(bool,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"7471:64:14"},{"expression":{"components":[{"id":3547,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3535,"src":"7553:7:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"id":3550,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3537,"src":"7570:5:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3549,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7562:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3548,"name":"uint256","nodeType":"ElementaryTypeName","src":"7562:7:14","typeDescriptions":{}}},"id":3551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7562:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3552,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7552:25:14","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3533,"id":3553,"nodeType":"Return","src":"7545:32:14"}]},"documentation":{"id":3522,"nodeType":"StructuredDocumentation","src":"7232:130:14","text":" @dev Tries to returns the value associated with `key`. O(1).\n Does not revert if `key` is not in the map."},"id":3555,"implemented":true,"kind":"function","modifiers":[],"name":"tryGet","nameLocation":"7376:6:14","nodeType":"FunctionDefinition","parameters":{"id":3528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3525,"mutability":"mutable","name":"map","nameLocation":"7405:3:14","nodeType":"VariableDeclaration","scope":3555,"src":"7383:25:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$3403_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"},"typeName":{"id":3524,"nodeType":"UserDefinedTypeName","pathNode":{"id":3523,"name":"UintToUintMap","nameLocations":["7383:13:14"],"nodeType":"IdentifierPath","referencedDeclaration":3403,"src":"7383:13:14"},"referencedDeclaration":3403,"src":"7383:13:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$3403_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"}},"visibility":"internal"},{"constant":false,"id":3527,"mutability":"mutable","name":"key","nameLocation":"7418:3:14","nodeType":"VariableDeclaration","scope":3555,"src":"7410:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3526,"name":"uint256","nodeType":"ElementaryTypeName","src":"7410:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7382:40:14"},"returnParameters":{"id":3533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3530,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3555,"src":"7446:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3529,"name":"bool","nodeType":"ElementaryTypeName","src":"7446:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3532,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3555,"src":"7452:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3531,"name":"uint256","nodeType":"ElementaryTypeName","src":"7452:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7445:15:14"},"scope":4279,"src":"7367:217:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3578,"nodeType":"Block","src":"7820:62:14","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":3569,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"7849:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$3403_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap storage pointer"}},"id":3570,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7853:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3402,"src":"7849:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"id":3573,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3561,"src":"7869:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3572,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7861:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3571,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7861:7:14","typeDescriptions":{}}},"id":3574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7861:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3568,"name":"get","nodeType":"Identifier","overloadedDeclarations":[3364,3399,3579,3606,3810,3843,4059,4092,4254,4278],"referencedDeclaration":3364,"src":"7845:3:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) view returns (bytes32)"}},"id":3575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7845:29:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3567,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7837:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3566,"name":"uint256","nodeType":"ElementaryTypeName","src":"7837:7:14","typeDescriptions":{}}},"id":3576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7837:38:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3565,"id":3577,"nodeType":"Return","src":"7830:45:14"}]},"documentation":{"id":3556,"nodeType":"StructuredDocumentation","src":"7590:140:14","text":" @dev Returns the value associated with `key`. O(1).\n Requirements:\n - `key` must be in the map."},"id":3579,"implemented":true,"kind":"function","modifiers":[],"name":"get","nameLocation":"7744:3:14","nodeType":"FunctionDefinition","parameters":{"id":3562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3559,"mutability":"mutable","name":"map","nameLocation":"7770:3:14","nodeType":"VariableDeclaration","scope":3579,"src":"7748:25:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$3403_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"},"typeName":{"id":3558,"nodeType":"UserDefinedTypeName","pathNode":{"id":3557,"name":"UintToUintMap","nameLocations":["7748:13:14"],"nodeType":"IdentifierPath","referencedDeclaration":3403,"src":"7748:13:14"},"referencedDeclaration":3403,"src":"7748:13:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$3403_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"}},"visibility":"internal"},{"constant":false,"id":3561,"mutability":"mutable","name":"key","nameLocation":"7783:3:14","nodeType":"VariableDeclaration","scope":3579,"src":"7775:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3560,"name":"uint256","nodeType":"ElementaryTypeName","src":"7775:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7747:40:14"},"returnParameters":{"id":3565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3564,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3579,"src":"7811:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3563,"name":"uint256","nodeType":"ElementaryTypeName","src":"7811:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7810:9:14"},"scope":4279,"src":"7735:147:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3605,"nodeType":"Block","src":"8305:76:14","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":3595,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3583,"src":"8334:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$3403_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap storage pointer"}},"id":3596,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8338:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3402,"src":"8334:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"id":3599,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3585,"src":"8354:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3598,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8346:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3597,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8346:7:14","typeDescriptions":{}}},"id":3600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8346:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3601,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3587,"src":"8360:12:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3594,"name":"get","nodeType":"Identifier","overloadedDeclarations":[3364,3399,3579,3606,3810,3843,4059,4092,4254,4278],"referencedDeclaration":3399,"src":"8330:3:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_bytes32_$_t_string_memory_ptr_$returns$_t_bytes32_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32,string memory) view returns (bytes32)"}},"id":3602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8330:43:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3593,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8322:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3592,"name":"uint256","nodeType":"ElementaryTypeName","src":"8322:7:14","typeDescriptions":{}}},"id":3603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8322:52:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3591,"id":3604,"nodeType":"Return","src":"8315:59:14"}]},"documentation":{"id":3580,"nodeType":"StructuredDocumentation","src":"7888:269:14","text":" @dev Same as {get}, with a custom error message when `key` is not in the map.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryGet}."},"id":3606,"implemented":true,"kind":"function","modifiers":[],"name":"get","nameLocation":"8171:3:14","nodeType":"FunctionDefinition","parameters":{"id":3588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3583,"mutability":"mutable","name":"map","nameLocation":"8206:3:14","nodeType":"VariableDeclaration","scope":3606,"src":"8184:25:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$3403_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"},"typeName":{"id":3582,"nodeType":"UserDefinedTypeName","pathNode":{"id":3581,"name":"UintToUintMap","nameLocations":["8184:13:14"],"nodeType":"IdentifierPath","referencedDeclaration":3403,"src":"8184:13:14"},"referencedDeclaration":3403,"src":"8184:13:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$3403_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"}},"visibility":"internal"},{"constant":false,"id":3585,"mutability":"mutable","name":"key","nameLocation":"8227:3:14","nodeType":"VariableDeclaration","scope":3606,"src":"8219:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3584,"name":"uint256","nodeType":"ElementaryTypeName","src":"8219:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3587,"mutability":"mutable","name":"errorMessage","nameLocation":"8254:12:14","nodeType":"VariableDeclaration","scope":3606,"src":"8240:26:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3586,"name":"string","nodeType":"ElementaryTypeName","src":"8240:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8174:98:14"},"returnParameters":{"id":3591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3590,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3606,"src":"8296:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3589,"name":"uint256","nodeType":"ElementaryTypeName","src":"8296:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8295:9:14"},"scope":4279,"src":"8162:219:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableMap.UintToAddressMap","id":3610,"members":[{"constant":false,"id":3609,"mutability":"mutable","name":"_inner","nameLocation":"8466:6:14","nodeType":"VariableDeclaration","scope":3610,"src":"8446:26:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"},"typeName":{"id":3608,"nodeType":"UserDefinedTypeName","pathNode":{"id":3607,"name":"Bytes32ToBytes32Map","nameLocations":["8446:19:14"],"nodeType":"IdentifierPath","referencedDeclaration":3173,"src":"8446:19:14"},"referencedDeclaration":3173,"src":"8446:19:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"}},"visibility":"internal"}],"name":"UintToAddressMap","nameLocation":"8419:16:14","nodeType":"StructDefinition","scope":4279,"src":"8412:67:14","visibility":"public"},{"body":{"id":3642,"nodeType":"Block","src":"8831:87:14","statements":[{"expression":{"arguments":[{"expression":{"id":3624,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3614,"src":"8852:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$3610_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap storage pointer"}},"id":3625,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8856:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3609,"src":"8852:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"id":3628,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3616,"src":"8872:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3627,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8864:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3626,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8864:7:14","typeDescriptions":{}}},"id":3629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8864:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"arguments":[{"arguments":[{"id":3636,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3618,"src":"8902:5:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3635,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8894:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3634,"name":"uint160","nodeType":"ElementaryTypeName","src":"8894:7:14","typeDescriptions":{}}},"id":3637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8894:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3633,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8886:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3632,"name":"uint256","nodeType":"ElementaryTypeName","src":"8886:7:14","typeDescriptions":{}}},"id":3638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8886:23:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3631,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8878:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3630,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8878:7:14","typeDescriptions":{}}},"id":3639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8878:32:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3623,"name":"set","nodeType":"Identifier","overloadedDeclarations":[3201,3430,3643,3880,4120],"referencedDeclaration":3201,"src":"8848:3:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32,bytes32) returns (bool)"}},"id":3640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8848:63:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3622,"id":3641,"nodeType":"Return","src":"8841:70:14"}]},"documentation":{"id":3611,"nodeType":"StructuredDocumentation","src":"8485:216:14","text":" @dev Adds a key-value pair to a map, or updates the value for an existing\n key. O(1).\n Returns true if the key was added to the map, that is if it was not\n already present."},"id":3643,"implemented":true,"kind":"function","modifiers":[],"name":"set","nameLocation":"8715:3:14","nodeType":"FunctionDefinition","parameters":{"id":3619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3614,"mutability":"mutable","name":"map","nameLocation":"8753:3:14","nodeType":"VariableDeclaration","scope":3643,"src":"8728:28:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$3610_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"},"typeName":{"id":3613,"nodeType":"UserDefinedTypeName","pathNode":{"id":3612,"name":"UintToAddressMap","nameLocations":["8728:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":3610,"src":"8728:16:14"},"referencedDeclaration":3610,"src":"8728:16:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$3610_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"}},"visibility":"internal"},{"constant":false,"id":3616,"mutability":"mutable","name":"key","nameLocation":"8774:3:14","nodeType":"VariableDeclaration","scope":3643,"src":"8766:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3615,"name":"uint256","nodeType":"ElementaryTypeName","src":"8766:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3618,"mutability":"mutable","name":"value","nameLocation":"8795:5:14","nodeType":"VariableDeclaration","scope":3643,"src":"8787:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3617,"name":"address","nodeType":"ElementaryTypeName","src":"8787:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8718:88:14"},"returnParameters":{"id":3622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3621,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3643,"src":"8825:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3620,"name":"bool","nodeType":"ElementaryTypeName","src":"8825:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8824:6:14"},"scope":4279,"src":"8706:212:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3663,"nodeType":"Block","src":"9160:56:14","statements":[{"expression":{"arguments":[{"expression":{"id":3655,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3647,"src":"9184:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$3610_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap storage pointer"}},"id":3656,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9188:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3609,"src":"9184:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"id":3659,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3649,"src":"9204:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3658,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9196:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3657,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9196:7:14","typeDescriptions":{}}},"id":3660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9196:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3654,"name":"remove","nodeType":"Identifier","overloadedDeclarations":[3225,3451,3664,3907,4138],"referencedDeclaration":3225,"src":"9177:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) returns (bool)"}},"id":3661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9177:32:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3653,"id":3662,"nodeType":"Return","src":"9170:39:14"}]},"documentation":{"id":3644,"nodeType":"StructuredDocumentation","src":"8924:148:14","text":" @dev Removes a value from a set. O(1).\n Returns true if the key was removed from the map, that is if it was present."},"id":3664,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"9086:6:14","nodeType":"FunctionDefinition","parameters":{"id":3650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3647,"mutability":"mutable","name":"map","nameLocation":"9118:3:14","nodeType":"VariableDeclaration","scope":3664,"src":"9093:28:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$3610_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"},"typeName":{"id":3646,"nodeType":"UserDefinedTypeName","pathNode":{"id":3645,"name":"UintToAddressMap","nameLocations":["9093:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":3610,"src":"9093:16:14"},"referencedDeclaration":3610,"src":"9093:16:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$3610_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"}},"visibility":"internal"},{"constant":false,"id":3649,"mutability":"mutable","name":"key","nameLocation":"9131:3:14","nodeType":"VariableDeclaration","scope":3664,"src":"9123:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3648,"name":"uint256","nodeType":"ElementaryTypeName","src":"9123:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9092:43:14"},"returnParameters":{"id":3653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3652,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3664,"src":"9154:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3651,"name":"bool","nodeType":"ElementaryTypeName","src":"9154:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9153:6:14"},"scope":4279,"src":"9077:139:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3684,"nodeType":"Block","src":"9385:58:14","statements":[{"expression":{"arguments":[{"expression":{"id":3676,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3668,"src":"9411:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$3610_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap storage pointer"}},"id":3677,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9415:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3609,"src":"9411:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"id":3680,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3670,"src":"9431:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3679,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9423:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3678,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9423:7:14","typeDescriptions":{}}},"id":3681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9423:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3675,"name":"contains","nodeType":"Identifier","overloadedDeclarations":[3243,3472,3685,3934,4156],"referencedDeclaration":3243,"src":"9402:8:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) view returns (bool)"}},"id":3682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9402:34:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3674,"id":3683,"nodeType":"Return","src":"9395:41:14"}]},"documentation":{"id":3665,"nodeType":"StructuredDocumentation","src":"9222:68:14","text":" @dev Returns true if the key is in the map. O(1)."},"id":3685,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"9304:8:14","nodeType":"FunctionDefinition","parameters":{"id":3671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3668,"mutability":"mutable","name":"map","nameLocation":"9338:3:14","nodeType":"VariableDeclaration","scope":3685,"src":"9313:28:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$3610_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"},"typeName":{"id":3667,"nodeType":"UserDefinedTypeName","pathNode":{"id":3666,"name":"UintToAddressMap","nameLocations":["9313:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":3610,"src":"9313:16:14"},"referencedDeclaration":3610,"src":"9313:16:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$3610_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"}},"visibility":"internal"},{"constant":false,"id":3670,"mutability":"mutable","name":"key","nameLocation":"9351:3:14","nodeType":"VariableDeclaration","scope":3685,"src":"9343:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3669,"name":"uint256","nodeType":"ElementaryTypeName","src":"9343:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9312:43:14"},"returnParameters":{"id":3674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3673,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3685,"src":"9379:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3672,"name":"bool","nodeType":"ElementaryTypeName","src":"9379:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9378:6:14"},"scope":4279,"src":"9295:148:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3699,"nodeType":"Block","src":"9604:42:14","statements":[{"expression":{"arguments":[{"expression":{"id":3695,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3689,"src":"9628:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$3610_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap storage pointer"}},"id":3696,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9632:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3609,"src":"9628:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}],"id":3694,"name":"length","nodeType":"Identifier","overloadedDeclarations":[3258,3487,3700,3949,4171],"referencedDeclaration":3258,"src":"9621:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer) view returns (uint256)"}},"id":3697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9621:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3693,"id":3698,"nodeType":"Return","src":"9614:25:14"}]},"documentation":{"id":3686,"nodeType":"StructuredDocumentation","src":"9449:72:14","text":" @dev Returns the number of elements in the map. O(1)."},"id":3700,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"9535:6:14","nodeType":"FunctionDefinition","parameters":{"id":3690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3689,"mutability":"mutable","name":"map","nameLocation":"9567:3:14","nodeType":"VariableDeclaration","scope":3700,"src":"9542:28:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$3610_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"},"typeName":{"id":3688,"nodeType":"UserDefinedTypeName","pathNode":{"id":3687,"name":"UintToAddressMap","nameLocations":["9542:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":3610,"src":"9542:16:14"},"referencedDeclaration":3610,"src":"9542:16:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$3610_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"}},"visibility":"internal"}],"src":"9541:30:14"},"returnParameters":{"id":3693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3692,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3700,"src":"9595:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3691,"name":"uint256","nodeType":"ElementaryTypeName","src":"9595:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9594:9:14"},"scope":4279,"src":"9526:120:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3739,"nodeType":"Block","src":"10081:134:14","statements":[{"assignments":[3714,3716],"declarations":[{"constant":false,"id":3714,"mutability":"mutable","name":"key","nameLocation":"10100:3:14","nodeType":"VariableDeclaration","scope":3739,"src":"10092:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3713,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10092:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3716,"mutability":"mutable","name":"value","nameLocation":"10113:5:14","nodeType":"VariableDeclaration","scope":3739,"src":"10105:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3715,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10105:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3722,"initialValue":{"arguments":[{"expression":{"id":3718,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3704,"src":"10125:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$3610_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap storage pointer"}},"id":3719,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10129:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3609,"src":"10125:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"id":3720,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"10137:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3717,"name":"at","nodeType":"Identifier","overloadedDeclarations":[3287,3521,3740,3989,4202],"referencedDeclaration":3287,"src":"10122:2:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_uint256_$returns$_t_bytes32_$_t_bytes32_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,uint256) view returns (bytes32,bytes32)"}},"id":3721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10122:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_bytes32_$","typeString":"tuple(bytes32,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"10091:52:14"},{"expression":{"components":[{"arguments":[{"id":3725,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3714,"src":"10169:3:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3724,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10161:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3723,"name":"uint256","nodeType":"ElementaryTypeName","src":"10161:7:14","typeDescriptions":{}}},"id":3726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10161:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"arguments":[{"arguments":[{"id":3733,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3716,"src":"10199:5:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3732,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10191:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3731,"name":"uint256","nodeType":"ElementaryTypeName","src":"10191:7:14","typeDescriptions":{}}},"id":3734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10191:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3730,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10183:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3729,"name":"uint160","nodeType":"ElementaryTypeName","src":"10183:7:14","typeDescriptions":{}}},"id":3735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10183:23:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3728,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10175:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3727,"name":"address","nodeType":"ElementaryTypeName","src":"10175:7:14","typeDescriptions":{}}},"id":3736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10175:32:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3737,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10160:48:14","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_address_$","typeString":"tuple(uint256,address)"}},"functionReturnParameters":3712,"id":3738,"nodeType":"Return","src":"10153:55:14"}]},"documentation":{"id":3701,"nodeType":"StructuredDocumentation","src":"9652:326:14","text":" @dev Returns the element stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":3740,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"9992:2:14","nodeType":"FunctionDefinition","parameters":{"id":3707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3704,"mutability":"mutable","name":"map","nameLocation":"10020:3:14","nodeType":"VariableDeclaration","scope":3740,"src":"9995:28:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$3610_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"},"typeName":{"id":3703,"nodeType":"UserDefinedTypeName","pathNode":{"id":3702,"name":"UintToAddressMap","nameLocations":["9995:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":3610,"src":"9995:16:14"},"referencedDeclaration":3610,"src":"9995:16:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$3610_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"}},"visibility":"internal"},{"constant":false,"id":3706,"mutability":"mutable","name":"index","nameLocation":"10033:5:14","nodeType":"VariableDeclaration","scope":3740,"src":"10025:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3705,"name":"uint256","nodeType":"ElementaryTypeName","src":"10025:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9994:45:14"},"returnParameters":{"id":3712,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3709,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3740,"src":"10063:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3708,"name":"uint256","nodeType":"ElementaryTypeName","src":"10063:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3711,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3740,"src":"10072:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3710,"name":"address","nodeType":"ElementaryTypeName","src":"10072:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10062:18:14"},"scope":4279,"src":"9983:232:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3779,"nodeType":"Block","src":"10453:141:14","statements":[{"assignments":[3754,3756],"declarations":[{"constant":false,"id":3754,"mutability":"mutable","name":"success","nameLocation":"10469:7:14","nodeType":"VariableDeclaration","scope":3779,"src":"10464:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3753,"name":"bool","nodeType":"ElementaryTypeName","src":"10464:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3756,"mutability":"mutable","name":"value","nameLocation":"10486:5:14","nodeType":"VariableDeclaration","scope":3779,"src":"10478:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3755,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10478:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3765,"initialValue":{"arguments":[{"expression":{"id":3758,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3744,"src":"10502:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$3610_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap storage pointer"}},"id":3759,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10506:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3609,"src":"10502:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"id":3762,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3746,"src":"10522:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3761,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10514:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3760,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10514:7:14","typeDescriptions":{}}},"id":3763,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10514:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3757,"name":"tryGet","nodeType":"Identifier","overloadedDeclarations":[3331,3555,3780,4029,4233],"referencedDeclaration":3331,"src":"10495:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_bytes32_$returns$_t_bool_$_t_bytes32_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) view returns (bool,bytes32)"}},"id":3764,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10495:32:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes32_$","typeString":"tuple(bool,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"10463:64:14"},{"expression":{"components":[{"id":3766,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3754,"src":"10545:7:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"arguments":[{"arguments":[{"id":3773,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3756,"src":"10578:5:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3772,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10570:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3771,"name":"uint256","nodeType":"ElementaryTypeName","src":"10570:7:14","typeDescriptions":{}}},"id":3774,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10570:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3770,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10562:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3769,"name":"uint160","nodeType":"ElementaryTypeName","src":"10562:7:14","typeDescriptions":{}}},"id":3775,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10562:23:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3768,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10554:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3767,"name":"address","nodeType":"ElementaryTypeName","src":"10554:7:14","typeDescriptions":{}}},"id":3776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10554:32:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3777,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10544:43:14","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_address_$","typeString":"tuple(bool,address)"}},"functionReturnParameters":3752,"id":3778,"nodeType":"Return","src":"10537:50:14"}]},"documentation":{"id":3741,"nodeType":"StructuredDocumentation","src":"10221:130:14","text":" @dev Tries to returns the value associated with `key`. O(1).\n Does not revert if `key` is not in the map."},"id":3780,"implemented":true,"kind":"function","modifiers":[],"name":"tryGet","nameLocation":"10365:6:14","nodeType":"FunctionDefinition","parameters":{"id":3747,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3744,"mutability":"mutable","name":"map","nameLocation":"10397:3:14","nodeType":"VariableDeclaration","scope":3780,"src":"10372:28:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$3610_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"},"typeName":{"id":3743,"nodeType":"UserDefinedTypeName","pathNode":{"id":3742,"name":"UintToAddressMap","nameLocations":["10372:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":3610,"src":"10372:16:14"},"referencedDeclaration":3610,"src":"10372:16:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$3610_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"}},"visibility":"internal"},{"constant":false,"id":3746,"mutability":"mutable","name":"key","nameLocation":"10410:3:14","nodeType":"VariableDeclaration","scope":3780,"src":"10402:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3745,"name":"uint256","nodeType":"ElementaryTypeName","src":"10402:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10371:43:14"},"returnParameters":{"id":3752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3749,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3780,"src":"10438:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3748,"name":"bool","nodeType":"ElementaryTypeName","src":"10438:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3751,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3780,"src":"10444:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3750,"name":"address","nodeType":"ElementaryTypeName","src":"10444:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10437:15:14"},"scope":4279,"src":"10356:238:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3809,"nodeType":"Block","src":"10833:80:14","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":3798,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3784,"src":"10878:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$3610_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap storage pointer"}},"id":3799,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10882:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3609,"src":"10878:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"id":3802,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3786,"src":"10898:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3801,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10890:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3800,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10890:7:14","typeDescriptions":{}}},"id":3803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10890:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3797,"name":"get","nodeType":"Identifier","overloadedDeclarations":[3364,3399,3579,3606,3810,3843,4059,4092,4254,4278],"referencedDeclaration":3364,"src":"10874:3:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) view returns (bytes32)"}},"id":3804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10874:29:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3796,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10866:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3795,"name":"uint256","nodeType":"ElementaryTypeName","src":"10866:7:14","typeDescriptions":{}}},"id":3805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10866:38:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3794,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10858:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3793,"name":"uint160","nodeType":"ElementaryTypeName","src":"10858:7:14","typeDescriptions":{}}},"id":3806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10858:47:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3792,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10850:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3791,"name":"address","nodeType":"ElementaryTypeName","src":"10850:7:14","typeDescriptions":{}}},"id":3807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10850:56:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3790,"id":3808,"nodeType":"Return","src":"10843:63:14"}]},"documentation":{"id":3781,"nodeType":"StructuredDocumentation","src":"10600:140:14","text":" @dev Returns the value associated with `key`. O(1).\n Requirements:\n - `key` must be in the map."},"id":3810,"implemented":true,"kind":"function","modifiers":[],"name":"get","nameLocation":"10754:3:14","nodeType":"FunctionDefinition","parameters":{"id":3787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3784,"mutability":"mutable","name":"map","nameLocation":"10783:3:14","nodeType":"VariableDeclaration","scope":3810,"src":"10758:28:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$3610_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"},"typeName":{"id":3783,"nodeType":"UserDefinedTypeName","pathNode":{"id":3782,"name":"UintToAddressMap","nameLocations":["10758:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":3610,"src":"10758:16:14"},"referencedDeclaration":3610,"src":"10758:16:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$3610_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"}},"visibility":"internal"},{"constant":false,"id":3786,"mutability":"mutable","name":"key","nameLocation":"10796:3:14","nodeType":"VariableDeclaration","scope":3810,"src":"10788:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3785,"name":"uint256","nodeType":"ElementaryTypeName","src":"10788:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10757:43:14"},"returnParameters":{"id":3790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3789,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3810,"src":"10824:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3788,"name":"address","nodeType":"ElementaryTypeName","src":"10824:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10823:9:14"},"scope":4279,"src":"10745:168:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3842,"nodeType":"Block","src":"11339:94:14","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":3830,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3814,"src":"11384:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$3610_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap storage pointer"}},"id":3831,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11388:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3609,"src":"11384:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"id":3834,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3816,"src":"11404:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3833,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11396:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3832,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11396:7:14","typeDescriptions":{}}},"id":3835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11396:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3836,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3818,"src":"11410:12:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3829,"name":"get","nodeType":"Identifier","overloadedDeclarations":[3364,3399,3579,3606,3810,3843,4059,4092,4254,4278],"referencedDeclaration":3399,"src":"11380:3:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_bytes32_$_t_string_memory_ptr_$returns$_t_bytes32_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32,string memory) view returns (bytes32)"}},"id":3837,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11380:43:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3828,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11372:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3827,"name":"uint256","nodeType":"ElementaryTypeName","src":"11372:7:14","typeDescriptions":{}}},"id":3838,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11372:52:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3826,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11364:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3825,"name":"uint160","nodeType":"ElementaryTypeName","src":"11364:7:14","typeDescriptions":{}}},"id":3839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11364:61:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3824,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11356:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3823,"name":"address","nodeType":"ElementaryTypeName","src":"11356:7:14","typeDescriptions":{}}},"id":3840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11356:70:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3822,"id":3841,"nodeType":"Return","src":"11349:77:14"}]},"documentation":{"id":3811,"nodeType":"StructuredDocumentation","src":"10919:269:14","text":" @dev Same as {get}, with a custom error message when `key` is not in the map.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryGet}."},"id":3843,"implemented":true,"kind":"function","modifiers":[],"name":"get","nameLocation":"11202:3:14","nodeType":"FunctionDefinition","parameters":{"id":3819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3814,"mutability":"mutable","name":"map","nameLocation":"11240:3:14","nodeType":"VariableDeclaration","scope":3843,"src":"11215:28:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$3610_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"},"typeName":{"id":3813,"nodeType":"UserDefinedTypeName","pathNode":{"id":3812,"name":"UintToAddressMap","nameLocations":["11215:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":3610,"src":"11215:16:14"},"referencedDeclaration":3610,"src":"11215:16:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$3610_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"}},"visibility":"internal"},{"constant":false,"id":3816,"mutability":"mutable","name":"key","nameLocation":"11261:3:14","nodeType":"VariableDeclaration","scope":3843,"src":"11253:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3815,"name":"uint256","nodeType":"ElementaryTypeName","src":"11253:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3818,"mutability":"mutable","name":"errorMessage","nameLocation":"11288:12:14","nodeType":"VariableDeclaration","scope":3843,"src":"11274:26:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3817,"name":"string","nodeType":"ElementaryTypeName","src":"11274:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"11205:101:14"},"returnParameters":{"id":3822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3821,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3843,"src":"11330:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3820,"name":"address","nodeType":"ElementaryTypeName","src":"11330:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11329:9:14"},"scope":4279,"src":"11193:240:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableMap.AddressToUintMap","id":3847,"members":[{"constant":false,"id":3846,"mutability":"mutable","name":"_inner","nameLocation":"11518:6:14","nodeType":"VariableDeclaration","scope":3847,"src":"11498:26:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"},"typeName":{"id":3845,"nodeType":"UserDefinedTypeName","pathNode":{"id":3844,"name":"Bytes32ToBytes32Map","nameLocations":["11498:19:14"],"nodeType":"IdentifierPath","referencedDeclaration":3173,"src":"11498:19:14"},"referencedDeclaration":3173,"src":"11498:19:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"}},"visibility":"internal"}],"name":"AddressToUintMap","nameLocation":"11471:16:14","nodeType":"StructDefinition","scope":4279,"src":"11464:67:14","visibility":"public"},{"body":{"id":3879,"nodeType":"Block","src":"11883:87:14","statements":[{"expression":{"arguments":[{"expression":{"id":3861,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3851,"src":"11904:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap storage pointer"}},"id":3862,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11908:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3846,"src":"11904:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":3869,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3853,"src":"11940:3:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3868,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11932:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3867,"name":"uint160","nodeType":"ElementaryTypeName","src":"11932:7:14","typeDescriptions":{}}},"id":3870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11932:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3866,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11924:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3865,"name":"uint256","nodeType":"ElementaryTypeName","src":"11924:7:14","typeDescriptions":{}}},"id":3871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11924:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3864,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11916:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3863,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11916:7:14","typeDescriptions":{}}},"id":3872,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11916:30:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":3875,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3855,"src":"11956:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3874,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11948:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3873,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11948:7:14","typeDescriptions":{}}},"id":3876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11948:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3860,"name":"set","nodeType":"Identifier","overloadedDeclarations":[3201,3430,3643,3880,4120],"referencedDeclaration":3201,"src":"11900:3:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32,bytes32) returns (bool)"}},"id":3877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11900:63:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3859,"id":3878,"nodeType":"Return","src":"11893:70:14"}]},"documentation":{"id":3848,"nodeType":"StructuredDocumentation","src":"11537:216:14","text":" @dev Adds a key-value pair to a map, or updates the value for an existing\n key. O(1).\n Returns true if the key was added to the map, that is if it was not\n already present."},"id":3880,"implemented":true,"kind":"function","modifiers":[],"name":"set","nameLocation":"11767:3:14","nodeType":"FunctionDefinition","parameters":{"id":3856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3851,"mutability":"mutable","name":"map","nameLocation":"11805:3:14","nodeType":"VariableDeclaration","scope":3880,"src":"11780:28:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"},"typeName":{"id":3850,"nodeType":"UserDefinedTypeName","pathNode":{"id":3849,"name":"AddressToUintMap","nameLocations":["11780:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":3847,"src":"11780:16:14"},"referencedDeclaration":3847,"src":"11780:16:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"}},"visibility":"internal"},{"constant":false,"id":3853,"mutability":"mutable","name":"key","nameLocation":"11826:3:14","nodeType":"VariableDeclaration","scope":3880,"src":"11818:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3852,"name":"address","nodeType":"ElementaryTypeName","src":"11818:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3855,"mutability":"mutable","name":"value","nameLocation":"11847:5:14","nodeType":"VariableDeclaration","scope":3880,"src":"11839:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3854,"name":"uint256","nodeType":"ElementaryTypeName","src":"11839:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11770:88:14"},"returnParameters":{"id":3859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3858,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3880,"src":"11877:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3857,"name":"bool","nodeType":"ElementaryTypeName","src":"11877:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11876:6:14"},"scope":4279,"src":"11758:212:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3906,"nodeType":"Block","src":"12212:74:14","statements":[{"expression":{"arguments":[{"expression":{"id":3892,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3884,"src":"12236:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap storage pointer"}},"id":3893,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12240:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3846,"src":"12236:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":3900,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"12272:3:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3899,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12264:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3898,"name":"uint160","nodeType":"ElementaryTypeName","src":"12264:7:14","typeDescriptions":{}}},"id":3901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12264:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3897,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12256:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3896,"name":"uint256","nodeType":"ElementaryTypeName","src":"12256:7:14","typeDescriptions":{}}},"id":3902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12256:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3895,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12248:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3894,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12248:7:14","typeDescriptions":{}}},"id":3903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12248:30:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3891,"name":"remove","nodeType":"Identifier","overloadedDeclarations":[3225,3451,3664,3907,4138],"referencedDeclaration":3225,"src":"12229:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) returns (bool)"}},"id":3904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12229:50:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3890,"id":3905,"nodeType":"Return","src":"12222:57:14"}]},"documentation":{"id":3881,"nodeType":"StructuredDocumentation","src":"11976:148:14","text":" @dev Removes a value from a set. O(1).\n Returns true if the key was removed from the map, that is if it was present."},"id":3907,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"12138:6:14","nodeType":"FunctionDefinition","parameters":{"id":3887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3884,"mutability":"mutable","name":"map","nameLocation":"12170:3:14","nodeType":"VariableDeclaration","scope":3907,"src":"12145:28:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"},"typeName":{"id":3883,"nodeType":"UserDefinedTypeName","pathNode":{"id":3882,"name":"AddressToUintMap","nameLocations":["12145:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":3847,"src":"12145:16:14"},"referencedDeclaration":3847,"src":"12145:16:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"}},"visibility":"internal"},{"constant":false,"id":3886,"mutability":"mutable","name":"key","nameLocation":"12183:3:14","nodeType":"VariableDeclaration","scope":3907,"src":"12175:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3885,"name":"address","nodeType":"ElementaryTypeName","src":"12175:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12144:43:14"},"returnParameters":{"id":3890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3889,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3907,"src":"12206:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3888,"name":"bool","nodeType":"ElementaryTypeName","src":"12206:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12205:6:14"},"scope":4279,"src":"12129:157:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3933,"nodeType":"Block","src":"12455:76:14","statements":[{"expression":{"arguments":[{"expression":{"id":3919,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3911,"src":"12481:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap storage pointer"}},"id":3920,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12485:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3846,"src":"12481:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":3927,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3913,"src":"12517:3:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3926,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12509:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3925,"name":"uint160","nodeType":"ElementaryTypeName","src":"12509:7:14","typeDescriptions":{}}},"id":3928,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12509:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3924,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12501:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3923,"name":"uint256","nodeType":"ElementaryTypeName","src":"12501:7:14","typeDescriptions":{}}},"id":3929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12501:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3922,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12493:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3921,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12493:7:14","typeDescriptions":{}}},"id":3930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12493:30:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3918,"name":"contains","nodeType":"Identifier","overloadedDeclarations":[3243,3472,3685,3934,4156],"referencedDeclaration":3243,"src":"12472:8:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) view returns (bool)"}},"id":3931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12472:52:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3917,"id":3932,"nodeType":"Return","src":"12465:59:14"}]},"documentation":{"id":3908,"nodeType":"StructuredDocumentation","src":"12292:68:14","text":" @dev Returns true if the key is in the map. O(1)."},"id":3934,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"12374:8:14","nodeType":"FunctionDefinition","parameters":{"id":3914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3911,"mutability":"mutable","name":"map","nameLocation":"12408:3:14","nodeType":"VariableDeclaration","scope":3934,"src":"12383:28:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"},"typeName":{"id":3910,"nodeType":"UserDefinedTypeName","pathNode":{"id":3909,"name":"AddressToUintMap","nameLocations":["12383:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":3847,"src":"12383:16:14"},"referencedDeclaration":3847,"src":"12383:16:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"}},"visibility":"internal"},{"constant":false,"id":3913,"mutability":"mutable","name":"key","nameLocation":"12421:3:14","nodeType":"VariableDeclaration","scope":3934,"src":"12413:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3912,"name":"address","nodeType":"ElementaryTypeName","src":"12413:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12382:43:14"},"returnParameters":{"id":3917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3916,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3934,"src":"12449:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3915,"name":"bool","nodeType":"ElementaryTypeName","src":"12449:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12448:6:14"},"scope":4279,"src":"12365:166:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3948,"nodeType":"Block","src":"12692:42:14","statements":[{"expression":{"arguments":[{"expression":{"id":3944,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"12716:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap storage pointer"}},"id":3945,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12720:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3846,"src":"12716:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}],"id":3943,"name":"length","nodeType":"Identifier","overloadedDeclarations":[3258,3487,3700,3949,4171],"referencedDeclaration":3258,"src":"12709:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer) view returns (uint256)"}},"id":3946,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12709:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3942,"id":3947,"nodeType":"Return","src":"12702:25:14"}]},"documentation":{"id":3935,"nodeType":"StructuredDocumentation","src":"12537:72:14","text":" @dev Returns the number of elements in the map. O(1)."},"id":3949,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"12623:6:14","nodeType":"FunctionDefinition","parameters":{"id":3939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3938,"mutability":"mutable","name":"map","nameLocation":"12655:3:14","nodeType":"VariableDeclaration","scope":3949,"src":"12630:28:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"},"typeName":{"id":3937,"nodeType":"UserDefinedTypeName","pathNode":{"id":3936,"name":"AddressToUintMap","nameLocations":["12630:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":3847,"src":"12630:16:14"},"referencedDeclaration":3847,"src":"12630:16:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"}},"visibility":"internal"}],"src":"12629:30:14"},"returnParameters":{"id":3942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3941,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3949,"src":"12683:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3940,"name":"uint256","nodeType":"ElementaryTypeName","src":"12683:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12682:9:14"},"scope":4279,"src":"12614:120:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3988,"nodeType":"Block","src":"13169:134:14","statements":[{"assignments":[3963,3965],"declarations":[{"constant":false,"id":3963,"mutability":"mutable","name":"key","nameLocation":"13188:3:14","nodeType":"VariableDeclaration","scope":3988,"src":"13180:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3962,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13180:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3965,"mutability":"mutable","name":"value","nameLocation":"13201:5:14","nodeType":"VariableDeclaration","scope":3988,"src":"13193:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3964,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13193:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3971,"initialValue":{"arguments":[{"expression":{"id":3967,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3953,"src":"13213:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap storage pointer"}},"id":3968,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13217:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3846,"src":"13213:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"id":3969,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"13225:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3966,"name":"at","nodeType":"Identifier","overloadedDeclarations":[3287,3521,3740,3989,4202],"referencedDeclaration":3287,"src":"13210:2:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_uint256_$returns$_t_bytes32_$_t_bytes32_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,uint256) view returns (bytes32,bytes32)"}},"id":3970,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13210:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_bytes32_$","typeString":"tuple(bytes32,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"13179:52:14"},{"expression":{"components":[{"arguments":[{"arguments":[{"arguments":[{"id":3978,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3963,"src":"13273:3:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3977,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13265:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3976,"name":"uint256","nodeType":"ElementaryTypeName","src":"13265:7:14","typeDescriptions":{}}},"id":3979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13265:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3975,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13257:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3974,"name":"uint160","nodeType":"ElementaryTypeName","src":"13257:7:14","typeDescriptions":{}}},"id":3980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13257:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3973,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13249:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3972,"name":"address","nodeType":"ElementaryTypeName","src":"13249:7:14","typeDescriptions":{}}},"id":3981,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13249:30:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3984,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3965,"src":"13289:5:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3983,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13281:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3982,"name":"uint256","nodeType":"ElementaryTypeName","src":"13281:7:14","typeDescriptions":{}}},"id":3985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13281:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3986,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13248:48:14","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}},"functionReturnParameters":3961,"id":3987,"nodeType":"Return","src":"13241:55:14"}]},"documentation":{"id":3950,"nodeType":"StructuredDocumentation","src":"12740:326:14","text":" @dev Returns the element stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":3989,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"13080:2:14","nodeType":"FunctionDefinition","parameters":{"id":3956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3953,"mutability":"mutable","name":"map","nameLocation":"13108:3:14","nodeType":"VariableDeclaration","scope":3989,"src":"13083:28:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"},"typeName":{"id":3952,"nodeType":"UserDefinedTypeName","pathNode":{"id":3951,"name":"AddressToUintMap","nameLocations":["13083:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":3847,"src":"13083:16:14"},"referencedDeclaration":3847,"src":"13083:16:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"}},"visibility":"internal"},{"constant":false,"id":3955,"mutability":"mutable","name":"index","nameLocation":"13121:5:14","nodeType":"VariableDeclaration","scope":3989,"src":"13113:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3954,"name":"uint256","nodeType":"ElementaryTypeName","src":"13113:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13082:45:14"},"returnParameters":{"id":3961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3958,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3989,"src":"13151:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3957,"name":"address","nodeType":"ElementaryTypeName","src":"13151:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3960,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3989,"src":"13160:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3959,"name":"uint256","nodeType":"ElementaryTypeName","src":"13160:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13150:18:14"},"scope":4279,"src":"13071:232:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4028,"nodeType":"Block","src":"13541:141:14","statements":[{"assignments":[4003,4005],"declarations":[{"constant":false,"id":4003,"mutability":"mutable","name":"success","nameLocation":"13557:7:14","nodeType":"VariableDeclaration","scope":4028,"src":"13552:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4002,"name":"bool","nodeType":"ElementaryTypeName","src":"13552:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4005,"mutability":"mutable","name":"value","nameLocation":"13574:5:14","nodeType":"VariableDeclaration","scope":4028,"src":"13566:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4004,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13566:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4020,"initialValue":{"arguments":[{"expression":{"id":4007,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3993,"src":"13590:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap storage pointer"}},"id":4008,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13594:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3846,"src":"13590:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":4015,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3995,"src":"13626:3:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4014,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13618:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4013,"name":"uint160","nodeType":"ElementaryTypeName","src":"13618:7:14","typeDescriptions":{}}},"id":4016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13618:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4012,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13610:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4011,"name":"uint256","nodeType":"ElementaryTypeName","src":"13610:7:14","typeDescriptions":{}}},"id":4017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13610:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4010,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13602:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4009,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13602:7:14","typeDescriptions":{}}},"id":4018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13602:30:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4006,"name":"tryGet","nodeType":"Identifier","overloadedDeclarations":[3331,3555,3780,4029,4233],"referencedDeclaration":3331,"src":"13583:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_bytes32_$returns$_t_bool_$_t_bytes32_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) view returns (bool,bytes32)"}},"id":4019,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13583:50:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes32_$","typeString":"tuple(bool,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"13551:82:14"},{"expression":{"components":[{"id":4021,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4003,"src":"13651:7:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"id":4024,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4005,"src":"13668:5:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4023,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13660:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4022,"name":"uint256","nodeType":"ElementaryTypeName","src":"13660:7:14","typeDescriptions":{}}},"id":4025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13660:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4026,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13650:25:14","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":4001,"id":4027,"nodeType":"Return","src":"13643:32:14"}]},"documentation":{"id":3990,"nodeType":"StructuredDocumentation","src":"13309:130:14","text":" @dev Tries to returns the value associated with `key`. O(1).\n Does not revert if `key` is not in the map."},"id":4029,"implemented":true,"kind":"function","modifiers":[],"name":"tryGet","nameLocation":"13453:6:14","nodeType":"FunctionDefinition","parameters":{"id":3996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3993,"mutability":"mutable","name":"map","nameLocation":"13485:3:14","nodeType":"VariableDeclaration","scope":4029,"src":"13460:28:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"},"typeName":{"id":3992,"nodeType":"UserDefinedTypeName","pathNode":{"id":3991,"name":"AddressToUintMap","nameLocations":["13460:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":3847,"src":"13460:16:14"},"referencedDeclaration":3847,"src":"13460:16:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"}},"visibility":"internal"},{"constant":false,"id":3995,"mutability":"mutable","name":"key","nameLocation":"13498:3:14","nodeType":"VariableDeclaration","scope":4029,"src":"13490:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3994,"name":"address","nodeType":"ElementaryTypeName","src":"13490:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13459:43:14"},"returnParameters":{"id":4001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3998,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4029,"src":"13526:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3997,"name":"bool","nodeType":"ElementaryTypeName","src":"13526:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4000,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4029,"src":"13532:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3999,"name":"uint256","nodeType":"ElementaryTypeName","src":"13532:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13525:15:14"},"scope":4279,"src":"13444:238:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4058,"nodeType":"Block","src":"13921:80:14","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":4043,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4033,"src":"13950:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap storage pointer"}},"id":4044,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13954:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3846,"src":"13950:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":4051,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4035,"src":"13986:3:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4050,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13978:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4049,"name":"uint160","nodeType":"ElementaryTypeName","src":"13978:7:14","typeDescriptions":{}}},"id":4052,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13978:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4048,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13970:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4047,"name":"uint256","nodeType":"ElementaryTypeName","src":"13970:7:14","typeDescriptions":{}}},"id":4053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13970:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4046,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13962:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4045,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13962:7:14","typeDescriptions":{}}},"id":4054,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13962:30:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4042,"name":"get","nodeType":"Identifier","overloadedDeclarations":[3364,3399,3579,3606,3810,3843,4059,4092,4254,4278],"referencedDeclaration":3364,"src":"13946:3:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) view returns (bytes32)"}},"id":4055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13946:47:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4041,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13938:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4040,"name":"uint256","nodeType":"ElementaryTypeName","src":"13938:7:14","typeDescriptions":{}}},"id":4056,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13938:56:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4039,"id":4057,"nodeType":"Return","src":"13931:63:14"}]},"documentation":{"id":4030,"nodeType":"StructuredDocumentation","src":"13688:140:14","text":" @dev Returns the value associated with `key`. O(1).\n Requirements:\n - `key` must be in the map."},"id":4059,"implemented":true,"kind":"function","modifiers":[],"name":"get","nameLocation":"13842:3:14","nodeType":"FunctionDefinition","parameters":{"id":4036,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4033,"mutability":"mutable","name":"map","nameLocation":"13871:3:14","nodeType":"VariableDeclaration","scope":4059,"src":"13846:28:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"},"typeName":{"id":4032,"nodeType":"UserDefinedTypeName","pathNode":{"id":4031,"name":"AddressToUintMap","nameLocations":["13846:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":3847,"src":"13846:16:14"},"referencedDeclaration":3847,"src":"13846:16:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"}},"visibility":"internal"},{"constant":false,"id":4035,"mutability":"mutable","name":"key","nameLocation":"13884:3:14","nodeType":"VariableDeclaration","scope":4059,"src":"13876:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4034,"name":"address","nodeType":"ElementaryTypeName","src":"13876:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13845:43:14"},"returnParameters":{"id":4039,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4038,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4059,"src":"13912:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4037,"name":"uint256","nodeType":"ElementaryTypeName","src":"13912:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13911:9:14"},"scope":4279,"src":"13833:168:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4091,"nodeType":"Block","src":"14427:94:14","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":4075,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4063,"src":"14456:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap storage pointer"}},"id":4076,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14460:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3846,"src":"14456:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":4083,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4065,"src":"14492:3:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4082,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14484:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4081,"name":"uint160","nodeType":"ElementaryTypeName","src":"14484:7:14","typeDescriptions":{}}},"id":4084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14484:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4080,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14476:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4079,"name":"uint256","nodeType":"ElementaryTypeName","src":"14476:7:14","typeDescriptions":{}}},"id":4085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14476:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4078,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14468:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4077,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14468:7:14","typeDescriptions":{}}},"id":4086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14468:30:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4087,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4067,"src":"14500:12:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4074,"name":"get","nodeType":"Identifier","overloadedDeclarations":[3364,3399,3579,3606,3810,3843,4059,4092,4254,4278],"referencedDeclaration":3399,"src":"14452:3:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_bytes32_$_t_string_memory_ptr_$returns$_t_bytes32_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32,string memory) view returns (bytes32)"}},"id":4088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14452:61:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4073,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14444:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4072,"name":"uint256","nodeType":"ElementaryTypeName","src":"14444:7:14","typeDescriptions":{}}},"id":4089,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14444:70:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4071,"id":4090,"nodeType":"Return","src":"14437:77:14"}]},"documentation":{"id":4060,"nodeType":"StructuredDocumentation","src":"14007:269:14","text":" @dev Same as {get}, with a custom error message when `key` is not in the map.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryGet}."},"id":4092,"implemented":true,"kind":"function","modifiers":[],"name":"get","nameLocation":"14290:3:14","nodeType":"FunctionDefinition","parameters":{"id":4068,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4063,"mutability":"mutable","name":"map","nameLocation":"14328:3:14","nodeType":"VariableDeclaration","scope":4092,"src":"14303:28:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"},"typeName":{"id":4062,"nodeType":"UserDefinedTypeName","pathNode":{"id":4061,"name":"AddressToUintMap","nameLocations":["14303:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":3847,"src":"14303:16:14"},"referencedDeclaration":3847,"src":"14303:16:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"}},"visibility":"internal"},{"constant":false,"id":4065,"mutability":"mutable","name":"key","nameLocation":"14349:3:14","nodeType":"VariableDeclaration","scope":4092,"src":"14341:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4064,"name":"address","nodeType":"ElementaryTypeName","src":"14341:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4067,"mutability":"mutable","name":"errorMessage","nameLocation":"14376:12:14","nodeType":"VariableDeclaration","scope":4092,"src":"14362:26:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4066,"name":"string","nodeType":"ElementaryTypeName","src":"14362:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"14293:101:14"},"returnParameters":{"id":4071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4070,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4092,"src":"14418:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4069,"name":"uint256","nodeType":"ElementaryTypeName","src":"14418:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14417:9:14"},"scope":4279,"src":"14281:240:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableMap.Bytes32ToUintMap","id":4096,"members":[{"constant":false,"id":4095,"mutability":"mutable","name":"_inner","nameLocation":"14606:6:14","nodeType":"VariableDeclaration","scope":4096,"src":"14586:26:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"},"typeName":{"id":4094,"nodeType":"UserDefinedTypeName","pathNode":{"id":4093,"name":"Bytes32ToBytes32Map","nameLocations":["14586:19:14"],"nodeType":"IdentifierPath","referencedDeclaration":3173,"src":"14586:19:14"},"referencedDeclaration":3173,"src":"14586:19:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"}},"visibility":"internal"}],"name":"Bytes32ToUintMap","nameLocation":"14559:16:14","nodeType":"StructDefinition","scope":4279,"src":"14552:67:14","visibility":"public"},{"body":{"id":4119,"nodeType":"Block","src":"14971:60:14","statements":[{"expression":{"arguments":[{"expression":{"id":4110,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4100,"src":"14992:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$4096_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap storage pointer"}},"id":4111,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14996:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4095,"src":"14992:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"id":4112,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4102,"src":"15004:3:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":4115,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4104,"src":"15017:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4114,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15009:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4113,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15009:7:14","typeDescriptions":{}}},"id":4116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15009:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4109,"name":"set","nodeType":"Identifier","overloadedDeclarations":[3201,3430,3643,3880,4120],"referencedDeclaration":3201,"src":"14988:3:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32,bytes32) returns (bool)"}},"id":4117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14988:36:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4108,"id":4118,"nodeType":"Return","src":"14981:43:14"}]},"documentation":{"id":4097,"nodeType":"StructuredDocumentation","src":"14625:216:14","text":" @dev Adds a key-value pair to a map, or updates the value for an existing\n key. O(1).\n Returns true if the key was added to the map, that is if it was not\n already present."},"id":4120,"implemented":true,"kind":"function","modifiers":[],"name":"set","nameLocation":"14855:3:14","nodeType":"FunctionDefinition","parameters":{"id":4105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4100,"mutability":"mutable","name":"map","nameLocation":"14893:3:14","nodeType":"VariableDeclaration","scope":4120,"src":"14868:28:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$4096_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"},"typeName":{"id":4099,"nodeType":"UserDefinedTypeName","pathNode":{"id":4098,"name":"Bytes32ToUintMap","nameLocations":["14868:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":4096,"src":"14868:16:14"},"referencedDeclaration":4096,"src":"14868:16:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$4096_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"}},"visibility":"internal"},{"constant":false,"id":4102,"mutability":"mutable","name":"key","nameLocation":"14914:3:14","nodeType":"VariableDeclaration","scope":4120,"src":"14906:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4101,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14906:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4104,"mutability":"mutable","name":"value","nameLocation":"14935:5:14","nodeType":"VariableDeclaration","scope":4120,"src":"14927:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4103,"name":"uint256","nodeType":"ElementaryTypeName","src":"14927:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14858:88:14"},"returnParameters":{"id":4108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4107,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4120,"src":"14965:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4106,"name":"bool","nodeType":"ElementaryTypeName","src":"14965:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14964:6:14"},"scope":4279,"src":"14846:185:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4137,"nodeType":"Block","src":"15273:47:14","statements":[{"expression":{"arguments":[{"expression":{"id":4132,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4124,"src":"15297:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$4096_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap storage pointer"}},"id":4133,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15301:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4095,"src":"15297:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"id":4134,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4126,"src":"15309:3:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4131,"name":"remove","nodeType":"Identifier","overloadedDeclarations":[3225,3451,3664,3907,4138],"referencedDeclaration":3225,"src":"15290:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) returns (bool)"}},"id":4135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15290:23:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4130,"id":4136,"nodeType":"Return","src":"15283:30:14"}]},"documentation":{"id":4121,"nodeType":"StructuredDocumentation","src":"15037:148:14","text":" @dev Removes a value from a set. O(1).\n Returns true if the key was removed from the map, that is if it was present."},"id":4138,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"15199:6:14","nodeType":"FunctionDefinition","parameters":{"id":4127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4124,"mutability":"mutable","name":"map","nameLocation":"15231:3:14","nodeType":"VariableDeclaration","scope":4138,"src":"15206:28:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$4096_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"},"typeName":{"id":4123,"nodeType":"UserDefinedTypeName","pathNode":{"id":4122,"name":"Bytes32ToUintMap","nameLocations":["15206:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":4096,"src":"15206:16:14"},"referencedDeclaration":4096,"src":"15206:16:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$4096_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"}},"visibility":"internal"},{"constant":false,"id":4126,"mutability":"mutable","name":"key","nameLocation":"15244:3:14","nodeType":"VariableDeclaration","scope":4138,"src":"15236:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4125,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15236:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"15205:43:14"},"returnParameters":{"id":4130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4129,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4138,"src":"15267:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4128,"name":"bool","nodeType":"ElementaryTypeName","src":"15267:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15266:6:14"},"scope":4279,"src":"15190:130:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4155,"nodeType":"Block","src":"15489:49:14","statements":[{"expression":{"arguments":[{"expression":{"id":4150,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4142,"src":"15515:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$4096_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap storage pointer"}},"id":4151,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15519:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4095,"src":"15515:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"id":4152,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4144,"src":"15527:3:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4149,"name":"contains","nodeType":"Identifier","overloadedDeclarations":[3243,3472,3685,3934,4156],"referencedDeclaration":3243,"src":"15506:8:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) view returns (bool)"}},"id":4153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15506:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4148,"id":4154,"nodeType":"Return","src":"15499:32:14"}]},"documentation":{"id":4139,"nodeType":"StructuredDocumentation","src":"15326:68:14","text":" @dev Returns true if the key is in the map. O(1)."},"id":4156,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"15408:8:14","nodeType":"FunctionDefinition","parameters":{"id":4145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4142,"mutability":"mutable","name":"map","nameLocation":"15442:3:14","nodeType":"VariableDeclaration","scope":4156,"src":"15417:28:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$4096_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"},"typeName":{"id":4141,"nodeType":"UserDefinedTypeName","pathNode":{"id":4140,"name":"Bytes32ToUintMap","nameLocations":["15417:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":4096,"src":"15417:16:14"},"referencedDeclaration":4096,"src":"15417:16:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$4096_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"}},"visibility":"internal"},{"constant":false,"id":4144,"mutability":"mutable","name":"key","nameLocation":"15455:3:14","nodeType":"VariableDeclaration","scope":4156,"src":"15447:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4143,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15447:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"15416:43:14"},"returnParameters":{"id":4148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4147,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4156,"src":"15483:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4146,"name":"bool","nodeType":"ElementaryTypeName","src":"15483:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15482:6:14"},"scope":4279,"src":"15399:139:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4170,"nodeType":"Block","src":"15699:42:14","statements":[{"expression":{"arguments":[{"expression":{"id":4166,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4160,"src":"15723:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$4096_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap storage pointer"}},"id":4167,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15727:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4095,"src":"15723:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}],"id":4165,"name":"length","nodeType":"Identifier","overloadedDeclarations":[3258,3487,3700,3949,4171],"referencedDeclaration":3258,"src":"15716:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer) view returns (uint256)"}},"id":4168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15716:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4164,"id":4169,"nodeType":"Return","src":"15709:25:14"}]},"documentation":{"id":4157,"nodeType":"StructuredDocumentation","src":"15544:72:14","text":" @dev Returns the number of elements in the map. O(1)."},"id":4171,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"15630:6:14","nodeType":"FunctionDefinition","parameters":{"id":4161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4160,"mutability":"mutable","name":"map","nameLocation":"15662:3:14","nodeType":"VariableDeclaration","scope":4171,"src":"15637:28:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$4096_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"},"typeName":{"id":4159,"nodeType":"UserDefinedTypeName","pathNode":{"id":4158,"name":"Bytes32ToUintMap","nameLocations":["15637:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":4096,"src":"15637:16:14"},"referencedDeclaration":4096,"src":"15637:16:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$4096_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"}},"visibility":"internal"}],"src":"15636:30:14"},"returnParameters":{"id":4164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4163,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4171,"src":"15690:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4162,"name":"uint256","nodeType":"ElementaryTypeName","src":"15690:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15689:9:14"},"scope":4279,"src":"15621:120:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4201,"nodeType":"Block","src":"16176:107:14","statements":[{"assignments":[4185,4187],"declarations":[{"constant":false,"id":4185,"mutability":"mutable","name":"key","nameLocation":"16195:3:14","nodeType":"VariableDeclaration","scope":4201,"src":"16187:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4184,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16187:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4187,"mutability":"mutable","name":"value","nameLocation":"16208:5:14","nodeType":"VariableDeclaration","scope":4201,"src":"16200:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4186,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16200:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4193,"initialValue":{"arguments":[{"expression":{"id":4189,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4175,"src":"16220:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$4096_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap storage pointer"}},"id":4190,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16224:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4095,"src":"16220:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"id":4191,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4177,"src":"16232:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4188,"name":"at","nodeType":"Identifier","overloadedDeclarations":[3287,3521,3740,3989,4202],"referencedDeclaration":3287,"src":"16217:2:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_uint256_$returns$_t_bytes32_$_t_bytes32_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,uint256) view returns (bytes32,bytes32)"}},"id":4192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16217:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_bytes32_$","typeString":"tuple(bytes32,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"16186:52:14"},{"expression":{"components":[{"id":4194,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4185,"src":"16256:3:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":4197,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4187,"src":"16269:5:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4196,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16261:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4195,"name":"uint256","nodeType":"ElementaryTypeName","src":"16261:7:14","typeDescriptions":{}}},"id":4198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16261:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4199,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"16255:21:14","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_uint256_$","typeString":"tuple(bytes32,uint256)"}},"functionReturnParameters":4183,"id":4200,"nodeType":"Return","src":"16248:28:14"}]},"documentation":{"id":4172,"nodeType":"StructuredDocumentation","src":"15747:326:14","text":" @dev Returns the element stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":4202,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"16087:2:14","nodeType":"FunctionDefinition","parameters":{"id":4178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4175,"mutability":"mutable","name":"map","nameLocation":"16115:3:14","nodeType":"VariableDeclaration","scope":4202,"src":"16090:28:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$4096_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"},"typeName":{"id":4174,"nodeType":"UserDefinedTypeName","pathNode":{"id":4173,"name":"Bytes32ToUintMap","nameLocations":["16090:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":4096,"src":"16090:16:14"},"referencedDeclaration":4096,"src":"16090:16:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$4096_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"}},"visibility":"internal"},{"constant":false,"id":4177,"mutability":"mutable","name":"index","nameLocation":"16128:5:14","nodeType":"VariableDeclaration","scope":4202,"src":"16120:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4176,"name":"uint256","nodeType":"ElementaryTypeName","src":"16120:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16089:45:14"},"returnParameters":{"id":4183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4180,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4202,"src":"16158:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4179,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16158:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4182,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4202,"src":"16167:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4181,"name":"uint256","nodeType":"ElementaryTypeName","src":"16167:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16157:18:14"},"scope":4279,"src":"16078:205:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4232,"nodeType":"Block","src":"16521:114:14","statements":[{"assignments":[4216,4218],"declarations":[{"constant":false,"id":4216,"mutability":"mutable","name":"success","nameLocation":"16537:7:14","nodeType":"VariableDeclaration","scope":4232,"src":"16532:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4215,"name":"bool","nodeType":"ElementaryTypeName","src":"16532:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4218,"mutability":"mutable","name":"value","nameLocation":"16554:5:14","nodeType":"VariableDeclaration","scope":4232,"src":"16546:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4217,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16546:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4224,"initialValue":{"arguments":[{"expression":{"id":4220,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4206,"src":"16570:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$4096_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap storage pointer"}},"id":4221,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16574:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4095,"src":"16570:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"id":4222,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4208,"src":"16582:3:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4219,"name":"tryGet","nodeType":"Identifier","overloadedDeclarations":[3331,3555,3780,4029,4233],"referencedDeclaration":3331,"src":"16563:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_bytes32_$returns$_t_bool_$_t_bytes32_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) view returns (bool,bytes32)"}},"id":4223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16563:23:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes32_$","typeString":"tuple(bool,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"16531:55:14"},{"expression":{"components":[{"id":4225,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4216,"src":"16604:7:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"id":4228,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4218,"src":"16621:5:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4227,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16613:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4226,"name":"uint256","nodeType":"ElementaryTypeName","src":"16613:7:14","typeDescriptions":{}}},"id":4229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16613:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4230,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"16603:25:14","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":4214,"id":4231,"nodeType":"Return","src":"16596:32:14"}]},"documentation":{"id":4203,"nodeType":"StructuredDocumentation","src":"16289:130:14","text":" @dev Tries to returns the value associated with `key`. O(1).\n Does not revert if `key` is not in the map."},"id":4233,"implemented":true,"kind":"function","modifiers":[],"name":"tryGet","nameLocation":"16433:6:14","nodeType":"FunctionDefinition","parameters":{"id":4209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4206,"mutability":"mutable","name":"map","nameLocation":"16465:3:14","nodeType":"VariableDeclaration","scope":4233,"src":"16440:28:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$4096_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"},"typeName":{"id":4205,"nodeType":"UserDefinedTypeName","pathNode":{"id":4204,"name":"Bytes32ToUintMap","nameLocations":["16440:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":4096,"src":"16440:16:14"},"referencedDeclaration":4096,"src":"16440:16:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$4096_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"}},"visibility":"internal"},{"constant":false,"id":4208,"mutability":"mutable","name":"key","nameLocation":"16478:3:14","nodeType":"VariableDeclaration","scope":4233,"src":"16470:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4207,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16470:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"16439:43:14"},"returnParameters":{"id":4214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4211,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4233,"src":"16506:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4210,"name":"bool","nodeType":"ElementaryTypeName","src":"16506:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4213,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4233,"src":"16512:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4212,"name":"uint256","nodeType":"ElementaryTypeName","src":"16512:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16505:15:14"},"scope":4279,"src":"16424:211:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4253,"nodeType":"Block","src":"16874:53:14","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":4247,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4237,"src":"16903:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$4096_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap storage pointer"}},"id":4248,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16907:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4095,"src":"16903:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"id":4249,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4239,"src":"16915:3:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4246,"name":"get","nodeType":"Identifier","overloadedDeclarations":[3364,3399,3579,3606,3810,3843,4059,4092,4254,4278],"referencedDeclaration":3364,"src":"16899:3:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) view returns (bytes32)"}},"id":4250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16899:20:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4245,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16891:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4244,"name":"uint256","nodeType":"ElementaryTypeName","src":"16891:7:14","typeDescriptions":{}}},"id":4251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16891:29:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4243,"id":4252,"nodeType":"Return","src":"16884:36:14"}]},"documentation":{"id":4234,"nodeType":"StructuredDocumentation","src":"16641:140:14","text":" @dev Returns the value associated with `key`. O(1).\n Requirements:\n - `key` must be in the map."},"id":4254,"implemented":true,"kind":"function","modifiers":[],"name":"get","nameLocation":"16795:3:14","nodeType":"FunctionDefinition","parameters":{"id":4240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4237,"mutability":"mutable","name":"map","nameLocation":"16824:3:14","nodeType":"VariableDeclaration","scope":4254,"src":"16799:28:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$4096_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"},"typeName":{"id":4236,"nodeType":"UserDefinedTypeName","pathNode":{"id":4235,"name":"Bytes32ToUintMap","nameLocations":["16799:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":4096,"src":"16799:16:14"},"referencedDeclaration":4096,"src":"16799:16:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$4096_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"}},"visibility":"internal"},{"constant":false,"id":4239,"mutability":"mutable","name":"key","nameLocation":"16837:3:14","nodeType":"VariableDeclaration","scope":4254,"src":"16829:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4238,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16829:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"16798:43:14"},"returnParameters":{"id":4243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4242,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4254,"src":"16865:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4241,"name":"uint256","nodeType":"ElementaryTypeName","src":"16865:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16864:9:14"},"scope":4279,"src":"16786:141:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4277,"nodeType":"Block","src":"17353:67:14","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":4270,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4258,"src":"17382:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$4096_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap storage pointer"}},"id":4271,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17386:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4095,"src":"17382:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"id":4272,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4260,"src":"17394:3:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4273,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4262,"src":"17399:12:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$3173_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4269,"name":"get","nodeType":"Identifier","overloadedDeclarations":[3364,3399,3579,3606,3810,3843,4059,4092,4254,4278],"referencedDeclaration":3399,"src":"17378:3:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$3173_storage_ptr_$_t_bytes32_$_t_string_memory_ptr_$returns$_t_bytes32_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32,string memory) view returns (bytes32)"}},"id":4274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17378:34:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4268,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17370:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4267,"name":"uint256","nodeType":"ElementaryTypeName","src":"17370:7:14","typeDescriptions":{}}},"id":4275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17370:43:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4266,"id":4276,"nodeType":"Return","src":"17363:50:14"}]},"documentation":{"id":4255,"nodeType":"StructuredDocumentation","src":"16933:269:14","text":" @dev Same as {get}, with a custom error message when `key` is not in the map.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryGet}."},"id":4278,"implemented":true,"kind":"function","modifiers":[],"name":"get","nameLocation":"17216:3:14","nodeType":"FunctionDefinition","parameters":{"id":4263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4258,"mutability":"mutable","name":"map","nameLocation":"17254:3:14","nodeType":"VariableDeclaration","scope":4278,"src":"17229:28:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$4096_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"},"typeName":{"id":4257,"nodeType":"UserDefinedTypeName","pathNode":{"id":4256,"name":"Bytes32ToUintMap","nameLocations":["17229:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":4096,"src":"17229:16:14"},"referencedDeclaration":4096,"src":"17229:16:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$4096_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"}},"visibility":"internal"},{"constant":false,"id":4260,"mutability":"mutable","name":"key","nameLocation":"17275:3:14","nodeType":"VariableDeclaration","scope":4278,"src":"17267:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4259,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17267:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4262,"mutability":"mutable","name":"errorMessage","nameLocation":"17302:12:14","nodeType":"VariableDeclaration","scope":4278,"src":"17288:26:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4261,"name":"string","nodeType":"ElementaryTypeName","src":"17288:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"17219:101:14"},"returnParameters":{"id":4266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4265,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4278,"src":"17344:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4264,"name":"uint256","nodeType":"ElementaryTypeName","src":"17344:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17343:9:14"},"scope":4279,"src":"17207:213:14","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":4280,"src":"1621:15801:14","usedErrors":[]}],"src":"205:17218:14"},"id":14},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","exportedSymbols":{"EnumerableSet":[4892]},"id":4893,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4281,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"205:23:15"},{"abstract":false,"baseContracts":[],"canonicalName":"EnumerableSet","contractDependencies":[],"contractKind":"library","documentation":{"id":4282,"nodeType":"StructuredDocumentation","src":"230:1090:15","text":" @dev Library for managing\n https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n types.\n Sets have the following properties:\n - Elements are added, removed, and checked for existence in constant time\n (O(1)).\n - Elements are enumerated in O(n). No guarantees are made on the ordering.\n ```\n contract Example {\n     // Add the library methods\n     using EnumerableSet for EnumerableSet.AddressSet;\n     // Declare a set state variable\n     EnumerableSet.AddressSet private mySet;\n }\n ```\n As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n and `uint256` (`UintSet`) are supported.\n [WARNING]\n ====\n Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n unusable.\n See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n array of EnumerableSet.\n ===="},"fullyImplemented":true,"id":4892,"linearizedBaseContracts":[4892],"name":"EnumerableSet","nameLocation":"1329:13:15","nodeType":"ContractDefinition","nodes":[{"canonicalName":"EnumerableSet.Set","id":4290,"members":[{"constant":false,"id":4285,"mutability":"mutable","name":"_values","nameLocation":"1853:7:15","nodeType":"VariableDeclaration","scope":4290,"src":"1843:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4283,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1843:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4284,"nodeType":"ArrayTypeName","src":"1843:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":4289,"mutability":"mutable","name":"_indexes","nameLocation":"2021:8:15","nodeType":"VariableDeclaration","scope":4290,"src":"1993:36:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":4288,"keyType":{"id":4286,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2001:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1993:27:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueType":{"id":4287,"name":"uint256","nodeType":"ElementaryTypeName","src":"2012:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"}],"name":"Set","nameLocation":"1796:3:15","nodeType":"StructDefinition","scope":4892,"src":"1789:247:15","visibility":"public"},{"body":{"id":4331,"nodeType":"Block","src":"2275:335:15","statements":[{"condition":{"id":4305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2289:22:15","subExpression":{"arguments":[{"id":4302,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294,"src":"2300:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},{"id":4303,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4296,"src":"2305:5:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4301,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4435,"src":"2290:9:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4290_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":4304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2290:21:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4329,"nodeType":"Block","src":"2567:37:15","statements":[{"expression":{"hexValue":"66616c7365","id":4327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2588:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":4300,"id":4328,"nodeType":"Return","src":"2581:12:15"}]},"id":4330,"nodeType":"IfStatement","src":"2285:319:15","trueBody":{"id":4326,"nodeType":"Block","src":"2313:248:15","statements":[{"expression":{"arguments":[{"id":4311,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4296,"src":"2344:5:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"expression":{"id":4306,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294,"src":"2327:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4309,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2331:7:15","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4285,"src":"2327:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2339:4:15","memberName":"push","nodeType":"MemberAccess","src":"2327:16:15","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$_t_bytes32_$returns$__$bound_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer,bytes32)"}},"id":4312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2327:23:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4313,"nodeType":"ExpressionStatement","src":"2327:23:15"},{"expression":{"id":4322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":4314,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294,"src":"2485:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4317,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2489:8:15","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":4289,"src":"2485:12:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4318,"indexExpression":{"id":4316,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4296,"src":"2498:5:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2485:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":4319,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294,"src":"2507:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4320,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2511:7:15","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4285,"src":"2507:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2519:6:15","memberName":"length","nodeType":"MemberAccess","src":"2507:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2485:40:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4323,"nodeType":"ExpressionStatement","src":"2485:40:15"},{"expression":{"hexValue":"74727565","id":4324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2546:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4300,"id":4325,"nodeType":"Return","src":"2539:11:15"}]}}]},"documentation":{"id":4291,"nodeType":"StructuredDocumentation","src":"2042:159:15","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":4332,"implemented":true,"kind":"function","modifiers":[],"name":"_add","nameLocation":"2215:4:15","nodeType":"FunctionDefinition","parameters":{"id":4297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4294,"mutability":"mutable","name":"set","nameLocation":"2232:3:15","nodeType":"VariableDeclaration","scope":4332,"src":"2220:15:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4293,"nodeType":"UserDefinedTypeName","pathNode":{"id":4292,"name":"Set","nameLocations":["2220:3:15"],"nodeType":"IdentifierPath","referencedDeclaration":4290,"src":"2220:3:15"},"referencedDeclaration":4290,"src":"2220:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":4296,"mutability":"mutable","name":"value","nameLocation":"2245:5:15","nodeType":"VariableDeclaration","scope":4332,"src":"2237:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4295,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2237:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2219:32:15"},"returnParameters":{"id":4300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4299,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4332,"src":"2269:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4298,"name":"bool","nodeType":"ElementaryTypeName","src":"2269:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2268:6:15"},"scope":4892,"src":"2206:404:15","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4415,"nodeType":"Block","src":"2850:1316:15","statements":[{"assignments":[4344],"declarations":[{"constant":false,"id":4344,"mutability":"mutable","name":"valueIndex","nameLocation":"2968:10:15","nodeType":"VariableDeclaration","scope":4415,"src":"2960:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4343,"name":"uint256","nodeType":"ElementaryTypeName","src":"2960:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4349,"initialValue":{"baseExpression":{"expression":{"id":4345,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4336,"src":"2981:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4346,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2985:8:15","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":4289,"src":"2981:12:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4348,"indexExpression":{"id":4347,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4338,"src":"2994:5:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2981:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2960:40:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4350,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4344,"src":"3015:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3029:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3015:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4413,"nodeType":"Block","src":"4123:37:15","statements":[{"expression":{"hexValue":"66616c7365","id":4411,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4144:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":4342,"id":4412,"nodeType":"Return","src":"4137:12:15"}]},"id":4414,"nodeType":"IfStatement","src":"3011:1149:15","trueBody":{"id":4410,"nodeType":"Block","src":"3032:1085:15","statements":[{"assignments":[4354],"declarations":[{"constant":false,"id":4354,"mutability":"mutable","name":"toDeleteIndex","nameLocation":"3392:13:15","nodeType":"VariableDeclaration","scope":4410,"src":"3384:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4353,"name":"uint256","nodeType":"ElementaryTypeName","src":"3384:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4358,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4355,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4344,"src":"3408:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3421:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3408:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3384:38:15"},{"assignments":[4360],"declarations":[{"constant":false,"id":4360,"mutability":"mutable","name":"lastIndex","nameLocation":"3444:9:15","nodeType":"VariableDeclaration","scope":4410,"src":"3436:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4359,"name":"uint256","nodeType":"ElementaryTypeName","src":"3436:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4366,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":4361,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4336,"src":"3456:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4362,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3460:7:15","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4285,"src":"3456:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3468:6:15","memberName":"length","nodeType":"MemberAccess","src":"3456:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3477:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3456:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3436:42:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4367,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"3497:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4368,"name":"toDeleteIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4354,"src":"3510:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3497:26:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4394,"nodeType":"IfStatement","src":"3493:398:15","trueBody":{"id":4393,"nodeType":"Block","src":"3525:366:15","statements":[{"assignments":[4371],"declarations":[{"constant":false,"id":4371,"mutability":"mutable","name":"lastValue","nameLocation":"3551:9:15","nodeType":"VariableDeclaration","scope":4393,"src":"3543:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4370,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3543:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4376,"initialValue":{"baseExpression":{"expression":{"id":4372,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4336,"src":"3563:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4373,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3567:7:15","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4285,"src":"3563:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4375,"indexExpression":{"id":4374,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"3575:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3563:22:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3543:42:15"},{"expression":{"id":4383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":4377,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4336,"src":"3685:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4380,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3689:7:15","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4285,"src":"3685:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4381,"indexExpression":{"id":4379,"name":"toDeleteIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4354,"src":"3697:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3685:26:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4382,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4371,"src":"3714:9:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3685:38:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4384,"nodeType":"ExpressionStatement","src":"3685:38:15"},{"expression":{"id":4391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":4385,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4336,"src":"3797:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4388,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3801:8:15","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":4289,"src":"3797:12:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4389,"indexExpression":{"id":4387,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4371,"src":"3810:9:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3797:23:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4390,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4344,"src":"3823:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3797:36:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4392,"nodeType":"ExpressionStatement","src":"3797:36:15"}]}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":4395,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4336,"src":"3969:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4398,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3973:7:15","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4285,"src":"3969:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3981:3:15","memberName":"pop","nodeType":"MemberAccess","src":"3969:15:15","typeDescriptions":{"typeIdentifier":"t_function_arraypop_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$returns$__$bound_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer)"}},"id":4400,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3969:17:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4401,"nodeType":"ExpressionStatement","src":"3969:17:15"},{"expression":{"id":4406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"4054:26:15","subExpression":{"baseExpression":{"expression":{"id":4402,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4336,"src":"4061:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4403,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4065:8:15","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":4289,"src":"4061:12:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4405,"indexExpression":{"id":4404,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4338,"src":"4074:5:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4061:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4407,"nodeType":"ExpressionStatement","src":"4054:26:15"},{"expression":{"hexValue":"74727565","id":4408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4102:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4342,"id":4409,"nodeType":"Return","src":"4095:11:15"}]}}]},"documentation":{"id":4333,"nodeType":"StructuredDocumentation","src":"2616:157:15","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":4416,"implemented":true,"kind":"function","modifiers":[],"name":"_remove","nameLocation":"2787:7:15","nodeType":"FunctionDefinition","parameters":{"id":4339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4336,"mutability":"mutable","name":"set","nameLocation":"2807:3:15","nodeType":"VariableDeclaration","scope":4416,"src":"2795:15:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4335,"nodeType":"UserDefinedTypeName","pathNode":{"id":4334,"name":"Set","nameLocations":["2795:3:15"],"nodeType":"IdentifierPath","referencedDeclaration":4290,"src":"2795:3:15"},"referencedDeclaration":4290,"src":"2795:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":4338,"mutability":"mutable","name":"value","nameLocation":"2820:5:15","nodeType":"VariableDeclaration","scope":4416,"src":"2812:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4337,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2812:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2794:32:15"},"returnParameters":{"id":4342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4341,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4416,"src":"2844:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4340,"name":"bool","nodeType":"ElementaryTypeName","src":"2844:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2843:6:15"},"scope":4892,"src":"2778:1388:15","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4434,"nodeType":"Block","src":"4326:48:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":4427,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4420,"src":"4343:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4428,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4347:8:15","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":4289,"src":"4343:12:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4430,"indexExpression":{"id":4429,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4422,"src":"4356:5:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4343:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4366:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4343:24:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4426,"id":4433,"nodeType":"Return","src":"4336:31:15"}]},"documentation":{"id":4417,"nodeType":"StructuredDocumentation","src":"4172:70:15","text":" @dev Returns true if the value is in the set. O(1)."},"id":4435,"implemented":true,"kind":"function","modifiers":[],"name":"_contains","nameLocation":"4256:9:15","nodeType":"FunctionDefinition","parameters":{"id":4423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4420,"mutability":"mutable","name":"set","nameLocation":"4278:3:15","nodeType":"VariableDeclaration","scope":4435,"src":"4266:15:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4419,"nodeType":"UserDefinedTypeName","pathNode":{"id":4418,"name":"Set","nameLocations":["4266:3:15"],"nodeType":"IdentifierPath","referencedDeclaration":4290,"src":"4266:3:15"},"referencedDeclaration":4290,"src":"4266:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":4422,"mutability":"mutable","name":"value","nameLocation":"4291:5:15","nodeType":"VariableDeclaration","scope":4435,"src":"4283:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4421,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4283:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4265:32:15"},"returnParameters":{"id":4426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4425,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4435,"src":"4320:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4424,"name":"bool","nodeType":"ElementaryTypeName","src":"4320:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4319:6:15"},"scope":4892,"src":"4247:127:15","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":4448,"nodeType":"Block","src":"4520:42:15","statements":[{"expression":{"expression":{"expression":{"id":4444,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4439,"src":"4537:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4445,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4541:7:15","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4285,"src":"4537:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4549:6:15","memberName":"length","nodeType":"MemberAccess","src":"4537:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4443,"id":4447,"nodeType":"Return","src":"4530:25:15"}]},"documentation":{"id":4436,"nodeType":"StructuredDocumentation","src":"4380:70:15","text":" @dev Returns the number of values on the set. O(1)."},"id":4449,"implemented":true,"kind":"function","modifiers":[],"name":"_length","nameLocation":"4464:7:15","nodeType":"FunctionDefinition","parameters":{"id":4440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4439,"mutability":"mutable","name":"set","nameLocation":"4484:3:15","nodeType":"VariableDeclaration","scope":4449,"src":"4472:15:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4438,"nodeType":"UserDefinedTypeName","pathNode":{"id":4437,"name":"Set","nameLocations":["4472:3:15"],"nodeType":"IdentifierPath","referencedDeclaration":4290,"src":"4472:3:15"},"referencedDeclaration":4290,"src":"4472:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"src":"4471:17:15"},"returnParameters":{"id":4443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4442,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4449,"src":"4511:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4441,"name":"uint256","nodeType":"ElementaryTypeName","src":"4511:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4510:9:15"},"scope":4892,"src":"4455:107:15","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":4465,"nodeType":"Block","src":"4980:42:15","statements":[{"expression":{"baseExpression":{"expression":{"id":4460,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4453,"src":"4997:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4461,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5001:7:15","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4285,"src":"4997:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4463,"indexExpression":{"id":4462,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4455,"src":"5009:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4997:18:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4459,"id":4464,"nodeType":"Return","src":"4990:25:15"}]},"documentation":{"id":4450,"nodeType":"StructuredDocumentation","src":"4568:331:15","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":4466,"implemented":true,"kind":"function","modifiers":[],"name":"_at","nameLocation":"4913:3:15","nodeType":"FunctionDefinition","parameters":{"id":4456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4453,"mutability":"mutable","name":"set","nameLocation":"4929:3:15","nodeType":"VariableDeclaration","scope":4466,"src":"4917:15:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4452,"nodeType":"UserDefinedTypeName","pathNode":{"id":4451,"name":"Set","nameLocations":["4917:3:15"],"nodeType":"IdentifierPath","referencedDeclaration":4290,"src":"4917:3:15"},"referencedDeclaration":4290,"src":"4917:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":4455,"mutability":"mutable","name":"index","nameLocation":"4942:5:15","nodeType":"VariableDeclaration","scope":4466,"src":"4934:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4454,"name":"uint256","nodeType":"ElementaryTypeName","src":"4934:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4916:32:15"},"returnParameters":{"id":4459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4458,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4466,"src":"4971:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4457,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4971:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4970:9:15"},"scope":4892,"src":"4904:118:15","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":4479,"nodeType":"Block","src":"5636:35:15","statements":[{"expression":{"expression":{"id":4476,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4470,"src":"5653:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4477,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5657:7:15","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4285,"src":"5653:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"functionReturnParameters":4475,"id":4478,"nodeType":"Return","src":"5646:18:15"}]},"documentation":{"id":4467,"nodeType":"StructuredDocumentation","src":"5028:529:15","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":4480,"implemented":true,"kind":"function","modifiers":[],"name":"_values","nameLocation":"5571:7:15","nodeType":"FunctionDefinition","parameters":{"id":4471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4470,"mutability":"mutable","name":"set","nameLocation":"5591:3:15","nodeType":"VariableDeclaration","scope":4480,"src":"5579:15:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4469,"nodeType":"UserDefinedTypeName","pathNode":{"id":4468,"name":"Set","nameLocations":["5579:3:15"],"nodeType":"IdentifierPath","referencedDeclaration":4290,"src":"5579:3:15"},"referencedDeclaration":4290,"src":"5579:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"src":"5578:17:15"},"returnParameters":{"id":4475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4474,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4480,"src":"5618:16:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4472,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5618:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4473,"nodeType":"ArrayTypeName","src":"5618:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"5617:18:15"},"scope":4892,"src":"5562:109:15","stateMutability":"view","virtual":false,"visibility":"private"},{"canonicalName":"EnumerableSet.Bytes32Set","id":4484,"members":[{"constant":false,"id":4483,"mutability":"mutable","name":"_inner","nameLocation":"5728:6:15","nodeType":"VariableDeclaration","scope":4484,"src":"5724:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4482,"nodeType":"UserDefinedTypeName","pathNode":{"id":4481,"name":"Set","nameLocations":["5724:3:15"],"nodeType":"IdentifierPath","referencedDeclaration":4290,"src":"5724:3:15"},"referencedDeclaration":4290,"src":"5724:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"Bytes32Set","nameLocation":"5703:10:15","nodeType":"StructDefinition","scope":4892,"src":"5696:45:15","visibility":"public"},{"body":{"id":4501,"nodeType":"Block","src":"5987:47:15","statements":[{"expression":{"arguments":[{"expression":{"id":4496,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4488,"src":"6009:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4484_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":4497,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6013:6:15","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4483,"src":"6009:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":4498,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4490,"src":"6021:5:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4495,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4332,"src":"6004:4:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$4290_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":4499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6004:23:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4494,"id":4500,"nodeType":"Return","src":"5997:30:15"}]},"documentation":{"id":4485,"nodeType":"StructuredDocumentation","src":"5747:159:15","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":4502,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"5920:3:15","nodeType":"FunctionDefinition","parameters":{"id":4491,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4488,"mutability":"mutable","name":"set","nameLocation":"5943:3:15","nodeType":"VariableDeclaration","scope":4502,"src":"5924:22:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4484_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":4487,"nodeType":"UserDefinedTypeName","pathNode":{"id":4486,"name":"Bytes32Set","nameLocations":["5924:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":4484,"src":"5924:10:15"},"referencedDeclaration":4484,"src":"5924:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4484_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":4490,"mutability":"mutable","name":"value","nameLocation":"5956:5:15","nodeType":"VariableDeclaration","scope":4502,"src":"5948:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4489,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5948:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5923:39:15"},"returnParameters":{"id":4494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4493,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4502,"src":"5981:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4492,"name":"bool","nodeType":"ElementaryTypeName","src":"5981:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5980:6:15"},"scope":4892,"src":"5911:123:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4519,"nodeType":"Block","src":"6281:50:15","statements":[{"expression":{"arguments":[{"expression":{"id":4514,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4506,"src":"6306:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4484_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":4515,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6310:6:15","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4483,"src":"6306:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":4516,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4508,"src":"6318:5:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4513,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4416,"src":"6298:7:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$4290_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":4517,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6298:26:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4512,"id":4518,"nodeType":"Return","src":"6291:33:15"}]},"documentation":{"id":4503,"nodeType":"StructuredDocumentation","src":"6040:157:15","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":4520,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"6211:6:15","nodeType":"FunctionDefinition","parameters":{"id":4509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4506,"mutability":"mutable","name":"set","nameLocation":"6237:3:15","nodeType":"VariableDeclaration","scope":4520,"src":"6218:22:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4484_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":4505,"nodeType":"UserDefinedTypeName","pathNode":{"id":4504,"name":"Bytes32Set","nameLocations":["6218:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":4484,"src":"6218:10:15"},"referencedDeclaration":4484,"src":"6218:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4484_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":4508,"mutability":"mutable","name":"value","nameLocation":"6250:5:15","nodeType":"VariableDeclaration","scope":4520,"src":"6242:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4507,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6242:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6217:39:15"},"returnParameters":{"id":4512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4511,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4520,"src":"6275:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4510,"name":"bool","nodeType":"ElementaryTypeName","src":"6275:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6274:6:15"},"scope":4892,"src":"6202:129:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4537,"nodeType":"Block","src":"6498:52:15","statements":[{"expression":{"arguments":[{"expression":{"id":4532,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4524,"src":"6525:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4484_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":4533,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6529:6:15","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4483,"src":"6525:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":4534,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4526,"src":"6537:5:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4531,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4435,"src":"6515:9:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4290_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":4535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6515:28:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4530,"id":4536,"nodeType":"Return","src":"6508:35:15"}]},"documentation":{"id":4521,"nodeType":"StructuredDocumentation","src":"6337:70:15","text":" @dev Returns true if the value is in the set. O(1)."},"id":4538,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"6421:8:15","nodeType":"FunctionDefinition","parameters":{"id":4527,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4524,"mutability":"mutable","name":"set","nameLocation":"6449:3:15","nodeType":"VariableDeclaration","scope":4538,"src":"6430:22:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4484_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":4523,"nodeType":"UserDefinedTypeName","pathNode":{"id":4522,"name":"Bytes32Set","nameLocations":["6430:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":4484,"src":"6430:10:15"},"referencedDeclaration":4484,"src":"6430:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4484_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":4526,"mutability":"mutable","name":"value","nameLocation":"6462:5:15","nodeType":"VariableDeclaration","scope":4538,"src":"6454:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4525,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6454:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6429:39:15"},"returnParameters":{"id":4530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4529,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4538,"src":"6492:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4528,"name":"bool","nodeType":"ElementaryTypeName","src":"6492:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6491:6:15"},"scope":4892,"src":"6412:138:15","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4552,"nodeType":"Block","src":"6703:43:15","statements":[{"expression":{"arguments":[{"expression":{"id":4548,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4542,"src":"6728:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4484_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":4549,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6732:6:15","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4483,"src":"6728:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":4547,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4449,"src":"6720:7:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4290_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":4550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6720:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4546,"id":4551,"nodeType":"Return","src":"6713:26:15"}]},"documentation":{"id":4539,"nodeType":"StructuredDocumentation","src":"6556:70:15","text":" @dev Returns the number of values in the set. O(1)."},"id":4553,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"6640:6:15","nodeType":"FunctionDefinition","parameters":{"id":4543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4542,"mutability":"mutable","name":"set","nameLocation":"6666:3:15","nodeType":"VariableDeclaration","scope":4553,"src":"6647:22:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4484_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":4541,"nodeType":"UserDefinedTypeName","pathNode":{"id":4540,"name":"Bytes32Set","nameLocations":["6647:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":4484,"src":"6647:10:15"},"referencedDeclaration":4484,"src":"6647:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4484_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"}],"src":"6646:24:15"},"returnParameters":{"id":4546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4545,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4553,"src":"6694:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4544,"name":"uint256","nodeType":"ElementaryTypeName","src":"6694:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6693:9:15"},"scope":4892,"src":"6631:115:15","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4570,"nodeType":"Block","src":"7171:46:15","statements":[{"expression":{"arguments":[{"expression":{"id":4565,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4557,"src":"7192:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4484_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":4566,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7196:6:15","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4483,"src":"7192:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":4567,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4559,"src":"7204:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4564,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4466,"src":"7188:3:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4290_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":4568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7188:22:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4563,"id":4569,"nodeType":"Return","src":"7181:29:15"}]},"documentation":{"id":4554,"nodeType":"StructuredDocumentation","src":"6752:331:15","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":4571,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"7097:2:15","nodeType":"FunctionDefinition","parameters":{"id":4560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4557,"mutability":"mutable","name":"set","nameLocation":"7119:3:15","nodeType":"VariableDeclaration","scope":4571,"src":"7100:22:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4484_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":4556,"nodeType":"UserDefinedTypeName","pathNode":{"id":4555,"name":"Bytes32Set","nameLocations":["7100:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":4484,"src":"7100:10:15"},"referencedDeclaration":4484,"src":"7100:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4484_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":4559,"mutability":"mutable","name":"index","nameLocation":"7132:5:15","nodeType":"VariableDeclaration","scope":4571,"src":"7124:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4558,"name":"uint256","nodeType":"ElementaryTypeName","src":"7124:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7099:39:15"},"returnParameters":{"id":4563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4562,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4571,"src":"7162:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4561,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7162:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7161:9:15"},"scope":4892,"src":"7088:129:15","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4600,"nodeType":"Block","src":"7838:219:15","statements":[{"assignments":[4585],"declarations":[{"constant":false,"id":4585,"mutability":"mutable","name":"store","nameLocation":"7865:5:15","nodeType":"VariableDeclaration","scope":4600,"src":"7848:22:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4583,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7848:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4584,"nodeType":"ArrayTypeName","src":"7848:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":4590,"initialValue":{"arguments":[{"expression":{"id":4587,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4575,"src":"7881:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4484_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":4588,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7885:6:15","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4483,"src":"7881:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":4586,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4480,"src":"7873:7:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4290_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":4589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7873:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7848:44:15"},{"assignments":[4595],"declarations":[{"constant":false,"id":4595,"mutability":"mutable","name":"result","nameLocation":"7919:6:15","nodeType":"VariableDeclaration","scope":4600,"src":"7902:23:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4593,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7902:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4594,"nodeType":"ArrayTypeName","src":"7902:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":4596,"nodeType":"VariableDeclarationStatement","src":"7902:23:15"},{"AST":{"nodeType":"YulBlock","src":"7988:39:15","statements":[{"nodeType":"YulAssignment","src":"8002:15:15","value":{"name":"store","nodeType":"YulIdentifier","src":"8012:5:15"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"8002:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":4595,"isOffset":false,"isSlot":false,"src":"8002:6:15","valueSize":1},{"declaration":4585,"isOffset":false,"isSlot":false,"src":"8012:5:15","valueSize":1}],"id":4597,"nodeType":"InlineAssembly","src":"7979:48:15"},{"expression":{"id":4598,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4595,"src":"8044:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"functionReturnParameters":4580,"id":4599,"nodeType":"Return","src":"8037:13:15"}]},"documentation":{"id":4572,"nodeType":"StructuredDocumentation","src":"7223:529:15","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":4601,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"7766:6:15","nodeType":"FunctionDefinition","parameters":{"id":4576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4575,"mutability":"mutable","name":"set","nameLocation":"7792:3:15","nodeType":"VariableDeclaration","scope":4601,"src":"7773:22:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4484_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":4574,"nodeType":"UserDefinedTypeName","pathNode":{"id":4573,"name":"Bytes32Set","nameLocations":["7773:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":4484,"src":"7773:10:15"},"referencedDeclaration":4484,"src":"7773:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4484_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"}],"src":"7772:24:15"},"returnParameters":{"id":4580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4579,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4601,"src":"7820:16:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4577,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7820:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4578,"nodeType":"ArrayTypeName","src":"7820:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"7819:18:15"},"scope":4892,"src":"7757:300:15","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSet.AddressSet","id":4605,"members":[{"constant":false,"id":4604,"mutability":"mutable","name":"_inner","nameLocation":"8114:6:15","nodeType":"VariableDeclaration","scope":4605,"src":"8110:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4603,"nodeType":"UserDefinedTypeName","pathNode":{"id":4602,"name":"Set","nameLocations":["8110:3:15"],"nodeType":"IdentifierPath","referencedDeclaration":4290,"src":"8110:3:15"},"referencedDeclaration":4290,"src":"8110:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"AddressSet","nameLocation":"8089:10:15","nodeType":"StructDefinition","scope":4892,"src":"8082:45:15","visibility":"public"},{"body":{"id":4631,"nodeType":"Block","src":"8373:74:15","statements":[{"expression":{"arguments":[{"expression":{"id":4617,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4609,"src":"8395:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4605_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":4618,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8399:6:15","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4604,"src":"8395:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":4625,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4611,"src":"8431:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4624,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8423:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4623,"name":"uint160","nodeType":"ElementaryTypeName","src":"8423:7:15","typeDescriptions":{}}},"id":4626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8423:14:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4622,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8415:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4621,"name":"uint256","nodeType":"ElementaryTypeName","src":"8415:7:15","typeDescriptions":{}}},"id":4627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8415:23:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4620,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8407:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4619,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8407:7:15","typeDescriptions":{}}},"id":4628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8407:32:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4616,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4332,"src":"8390:4:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$4290_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":4629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8390:50:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4615,"id":4630,"nodeType":"Return","src":"8383:57:15"}]},"documentation":{"id":4606,"nodeType":"StructuredDocumentation","src":"8133:159:15","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":4632,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"8306:3:15","nodeType":"FunctionDefinition","parameters":{"id":4612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4609,"mutability":"mutable","name":"set","nameLocation":"8329:3:15","nodeType":"VariableDeclaration","scope":4632,"src":"8310:22:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4605_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":4608,"nodeType":"UserDefinedTypeName","pathNode":{"id":4607,"name":"AddressSet","nameLocations":["8310:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":4605,"src":"8310:10:15"},"referencedDeclaration":4605,"src":"8310:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4605_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":4611,"mutability":"mutable","name":"value","nameLocation":"8342:5:15","nodeType":"VariableDeclaration","scope":4632,"src":"8334:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4610,"name":"address","nodeType":"ElementaryTypeName","src":"8334:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8309:39:15"},"returnParameters":{"id":4615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4614,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4632,"src":"8367:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4613,"name":"bool","nodeType":"ElementaryTypeName","src":"8367:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8366:6:15"},"scope":4892,"src":"8297:150:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4658,"nodeType":"Block","src":"8694:77:15","statements":[{"expression":{"arguments":[{"expression":{"id":4644,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4636,"src":"8719:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4605_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":4645,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8723:6:15","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4604,"src":"8719:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":4652,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4638,"src":"8755:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4651,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8747:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4650,"name":"uint160","nodeType":"ElementaryTypeName","src":"8747:7:15","typeDescriptions":{}}},"id":4653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8747:14:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4649,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8739:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4648,"name":"uint256","nodeType":"ElementaryTypeName","src":"8739:7:15","typeDescriptions":{}}},"id":4654,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8739:23:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4647,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8731:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4646,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8731:7:15","typeDescriptions":{}}},"id":4655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8731:32:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4643,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4416,"src":"8711:7:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$4290_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":4656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8711:53:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4642,"id":4657,"nodeType":"Return","src":"8704:60:15"}]},"documentation":{"id":4633,"nodeType":"StructuredDocumentation","src":"8453:157:15","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":4659,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"8624:6:15","nodeType":"FunctionDefinition","parameters":{"id":4639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4636,"mutability":"mutable","name":"set","nameLocation":"8650:3:15","nodeType":"VariableDeclaration","scope":4659,"src":"8631:22:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4605_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":4635,"nodeType":"UserDefinedTypeName","pathNode":{"id":4634,"name":"AddressSet","nameLocations":["8631:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":4605,"src":"8631:10:15"},"referencedDeclaration":4605,"src":"8631:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4605_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":4638,"mutability":"mutable","name":"value","nameLocation":"8663:5:15","nodeType":"VariableDeclaration","scope":4659,"src":"8655:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4637,"name":"address","nodeType":"ElementaryTypeName","src":"8655:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8630:39:15"},"returnParameters":{"id":4642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4641,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4659,"src":"8688:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4640,"name":"bool","nodeType":"ElementaryTypeName","src":"8688:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8687:6:15"},"scope":4892,"src":"8615:156:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4685,"nodeType":"Block","src":"8938:79:15","statements":[{"expression":{"arguments":[{"expression":{"id":4671,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4663,"src":"8965:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4605_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":4672,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8969:6:15","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4604,"src":"8965:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":4679,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4665,"src":"9001:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4678,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8993:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4677,"name":"uint160","nodeType":"ElementaryTypeName","src":"8993:7:15","typeDescriptions":{}}},"id":4680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8993:14:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4676,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8985:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4675,"name":"uint256","nodeType":"ElementaryTypeName","src":"8985:7:15","typeDescriptions":{}}},"id":4681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8985:23:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4674,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8977:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4673,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8977:7:15","typeDescriptions":{}}},"id":4682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8977:32:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4670,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4435,"src":"8955:9:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4290_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":4683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8955:55:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4669,"id":4684,"nodeType":"Return","src":"8948:62:15"}]},"documentation":{"id":4660,"nodeType":"StructuredDocumentation","src":"8777:70:15","text":" @dev Returns true if the value is in the set. O(1)."},"id":4686,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"8861:8:15","nodeType":"FunctionDefinition","parameters":{"id":4666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4663,"mutability":"mutable","name":"set","nameLocation":"8889:3:15","nodeType":"VariableDeclaration","scope":4686,"src":"8870:22:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4605_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":4662,"nodeType":"UserDefinedTypeName","pathNode":{"id":4661,"name":"AddressSet","nameLocations":["8870:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":4605,"src":"8870:10:15"},"referencedDeclaration":4605,"src":"8870:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4605_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":4665,"mutability":"mutable","name":"value","nameLocation":"8902:5:15","nodeType":"VariableDeclaration","scope":4686,"src":"8894:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4664,"name":"address","nodeType":"ElementaryTypeName","src":"8894:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8869:39:15"},"returnParameters":{"id":4669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4668,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4686,"src":"8932:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4667,"name":"bool","nodeType":"ElementaryTypeName","src":"8932:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8931:6:15"},"scope":4892,"src":"8852:165:15","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4700,"nodeType":"Block","src":"9170:43:15","statements":[{"expression":{"arguments":[{"expression":{"id":4696,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4690,"src":"9195:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4605_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":4697,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9199:6:15","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4604,"src":"9195:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":4695,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4449,"src":"9187:7:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4290_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":4698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9187:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4694,"id":4699,"nodeType":"Return","src":"9180:26:15"}]},"documentation":{"id":4687,"nodeType":"StructuredDocumentation","src":"9023:70:15","text":" @dev Returns the number of values in the set. O(1)."},"id":4701,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"9107:6:15","nodeType":"FunctionDefinition","parameters":{"id":4691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4690,"mutability":"mutable","name":"set","nameLocation":"9133:3:15","nodeType":"VariableDeclaration","scope":4701,"src":"9114:22:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4605_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":4689,"nodeType":"UserDefinedTypeName","pathNode":{"id":4688,"name":"AddressSet","nameLocations":["9114:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":4605,"src":"9114:10:15"},"referencedDeclaration":4605,"src":"9114:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4605_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"}],"src":"9113:24:15"},"returnParameters":{"id":4694,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4693,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4701,"src":"9161:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4692,"name":"uint256","nodeType":"ElementaryTypeName","src":"9161:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9160:9:15"},"scope":4892,"src":"9098:115:15","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4727,"nodeType":"Block","src":"9638:73:15","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":4719,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4705,"src":"9683:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4605_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":4720,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9687:6:15","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4604,"src":"9683:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":4721,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4707,"src":"9695:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4718,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4466,"src":"9679:3:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4290_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":4722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9679:22:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4717,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9671:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4716,"name":"uint256","nodeType":"ElementaryTypeName","src":"9671:7:15","typeDescriptions":{}}},"id":4723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9671:31:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4715,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9663:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4714,"name":"uint160","nodeType":"ElementaryTypeName","src":"9663:7:15","typeDescriptions":{}}},"id":4724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9663:40:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4713,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9655:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4712,"name":"address","nodeType":"ElementaryTypeName","src":"9655:7:15","typeDescriptions":{}}},"id":4725,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9655:49:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4711,"id":4726,"nodeType":"Return","src":"9648:56:15"}]},"documentation":{"id":4702,"nodeType":"StructuredDocumentation","src":"9219:331:15","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":4728,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"9564:2:15","nodeType":"FunctionDefinition","parameters":{"id":4708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4705,"mutability":"mutable","name":"set","nameLocation":"9586:3:15","nodeType":"VariableDeclaration","scope":4728,"src":"9567:22:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4605_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":4704,"nodeType":"UserDefinedTypeName","pathNode":{"id":4703,"name":"AddressSet","nameLocations":["9567:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":4605,"src":"9567:10:15"},"referencedDeclaration":4605,"src":"9567:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4605_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":4707,"mutability":"mutable","name":"index","nameLocation":"9599:5:15","nodeType":"VariableDeclaration","scope":4728,"src":"9591:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4706,"name":"uint256","nodeType":"ElementaryTypeName","src":"9591:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9566:39:15"},"returnParameters":{"id":4711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4710,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4728,"src":"9629:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4709,"name":"address","nodeType":"ElementaryTypeName","src":"9629:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9628:9:15"},"scope":4892,"src":"9555:156:15","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4757,"nodeType":"Block","src":"10332:219:15","statements":[{"assignments":[4742],"declarations":[{"constant":false,"id":4742,"mutability":"mutable","name":"store","nameLocation":"10359:5:15","nodeType":"VariableDeclaration","scope":4757,"src":"10342:22:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4740,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10342:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4741,"nodeType":"ArrayTypeName","src":"10342:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":4747,"initialValue":{"arguments":[{"expression":{"id":4744,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4732,"src":"10375:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4605_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":4745,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10379:6:15","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4604,"src":"10375:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":4743,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4480,"src":"10367:7:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4290_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":4746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10367:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"10342:44:15"},{"assignments":[4752],"declarations":[{"constant":false,"id":4752,"mutability":"mutable","name":"result","nameLocation":"10413:6:15","nodeType":"VariableDeclaration","scope":4757,"src":"10396:23:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4750,"name":"address","nodeType":"ElementaryTypeName","src":"10396:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4751,"nodeType":"ArrayTypeName","src":"10396:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":4753,"nodeType":"VariableDeclarationStatement","src":"10396:23:15"},{"AST":{"nodeType":"YulBlock","src":"10482:39:15","statements":[{"nodeType":"YulAssignment","src":"10496:15:15","value":{"name":"store","nodeType":"YulIdentifier","src":"10506:5:15"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"10496:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":4752,"isOffset":false,"isSlot":false,"src":"10496:6:15","valueSize":1},{"declaration":4742,"isOffset":false,"isSlot":false,"src":"10506:5:15","valueSize":1}],"id":4754,"nodeType":"InlineAssembly","src":"10473:48:15"},{"expression":{"id":4755,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4752,"src":"10538:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":4737,"id":4756,"nodeType":"Return","src":"10531:13:15"}]},"documentation":{"id":4729,"nodeType":"StructuredDocumentation","src":"9717:529:15","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":4758,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"10260:6:15","nodeType":"FunctionDefinition","parameters":{"id":4733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4732,"mutability":"mutable","name":"set","nameLocation":"10286:3:15","nodeType":"VariableDeclaration","scope":4758,"src":"10267:22:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4605_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":4731,"nodeType":"UserDefinedTypeName","pathNode":{"id":4730,"name":"AddressSet","nameLocations":["10267:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":4605,"src":"10267:10:15"},"referencedDeclaration":4605,"src":"10267:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4605_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"}],"src":"10266:24:15"},"returnParameters":{"id":4737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4736,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4758,"src":"10314:16:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4734,"name":"address","nodeType":"ElementaryTypeName","src":"10314:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4735,"nodeType":"ArrayTypeName","src":"10314:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"10313:18:15"},"scope":4892,"src":"10251:300:15","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSet.UintSet","id":4762,"members":[{"constant":false,"id":4761,"mutability":"mutable","name":"_inner","nameLocation":"10602:6:15","nodeType":"VariableDeclaration","scope":4762,"src":"10598:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4760,"nodeType":"UserDefinedTypeName","pathNode":{"id":4759,"name":"Set","nameLocations":["10598:3:15"],"nodeType":"IdentifierPath","referencedDeclaration":4290,"src":"10598:3:15"},"referencedDeclaration":4290,"src":"10598:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"UintSet","nameLocation":"10580:7:15","nodeType":"StructDefinition","scope":4892,"src":"10573:42:15","visibility":"public"},{"body":{"id":4782,"nodeType":"Block","src":"10858:56:15","statements":[{"expression":{"arguments":[{"expression":{"id":4774,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4766,"src":"10880:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4762_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":4775,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10884:6:15","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4761,"src":"10880:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":4778,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4768,"src":"10900:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4777,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10892:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4776,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10892:7:15","typeDescriptions":{}}},"id":4779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10892:14:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4773,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4332,"src":"10875:4:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$4290_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":4780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10875:32:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4772,"id":4781,"nodeType":"Return","src":"10868:39:15"}]},"documentation":{"id":4763,"nodeType":"StructuredDocumentation","src":"10621:159:15","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":4783,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"10794:3:15","nodeType":"FunctionDefinition","parameters":{"id":4769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4766,"mutability":"mutable","name":"set","nameLocation":"10814:3:15","nodeType":"VariableDeclaration","scope":4783,"src":"10798:19:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4762_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":4765,"nodeType":"UserDefinedTypeName","pathNode":{"id":4764,"name":"UintSet","nameLocations":["10798:7:15"],"nodeType":"IdentifierPath","referencedDeclaration":4762,"src":"10798:7:15"},"referencedDeclaration":4762,"src":"10798:7:15","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4762_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":4768,"mutability":"mutable","name":"value","nameLocation":"10827:5:15","nodeType":"VariableDeclaration","scope":4783,"src":"10819:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4767,"name":"uint256","nodeType":"ElementaryTypeName","src":"10819:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10797:36:15"},"returnParameters":{"id":4772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4771,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4783,"src":"10852:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4770,"name":"bool","nodeType":"ElementaryTypeName","src":"10852:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10851:6:15"},"scope":4892,"src":"10785:129:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4803,"nodeType":"Block","src":"11158:59:15","statements":[{"expression":{"arguments":[{"expression":{"id":4795,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4787,"src":"11183:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4762_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":4796,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11187:6:15","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4761,"src":"11183:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":4799,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4789,"src":"11203:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4798,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11195:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4797,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11195:7:15","typeDescriptions":{}}},"id":4800,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11195:14:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4794,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4416,"src":"11175:7:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$4290_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":4801,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11175:35:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4793,"id":4802,"nodeType":"Return","src":"11168:42:15"}]},"documentation":{"id":4784,"nodeType":"StructuredDocumentation","src":"10920:157:15","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":4804,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"11091:6:15","nodeType":"FunctionDefinition","parameters":{"id":4790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4787,"mutability":"mutable","name":"set","nameLocation":"11114:3:15","nodeType":"VariableDeclaration","scope":4804,"src":"11098:19:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4762_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":4786,"nodeType":"UserDefinedTypeName","pathNode":{"id":4785,"name":"UintSet","nameLocations":["11098:7:15"],"nodeType":"IdentifierPath","referencedDeclaration":4762,"src":"11098:7:15"},"referencedDeclaration":4762,"src":"11098:7:15","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4762_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":4789,"mutability":"mutable","name":"value","nameLocation":"11127:5:15","nodeType":"VariableDeclaration","scope":4804,"src":"11119:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4788,"name":"uint256","nodeType":"ElementaryTypeName","src":"11119:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11097:36:15"},"returnParameters":{"id":4793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4792,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4804,"src":"11152:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4791,"name":"bool","nodeType":"ElementaryTypeName","src":"11152:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11151:6:15"},"scope":4892,"src":"11082:135:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4824,"nodeType":"Block","src":"11381:61:15","statements":[{"expression":{"arguments":[{"expression":{"id":4816,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4808,"src":"11408:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4762_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":4817,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11412:6:15","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4761,"src":"11408:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":4820,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4810,"src":"11428:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4819,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11420:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4818,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11420:7:15","typeDescriptions":{}}},"id":4821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11420:14:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4815,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4435,"src":"11398:9:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4290_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":4822,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11398:37:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4814,"id":4823,"nodeType":"Return","src":"11391:44:15"}]},"documentation":{"id":4805,"nodeType":"StructuredDocumentation","src":"11223:70:15","text":" @dev Returns true if the value is in the set. O(1)."},"id":4825,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"11307:8:15","nodeType":"FunctionDefinition","parameters":{"id":4811,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4808,"mutability":"mutable","name":"set","nameLocation":"11332:3:15","nodeType":"VariableDeclaration","scope":4825,"src":"11316:19:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4762_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":4807,"nodeType":"UserDefinedTypeName","pathNode":{"id":4806,"name":"UintSet","nameLocations":["11316:7:15"],"nodeType":"IdentifierPath","referencedDeclaration":4762,"src":"11316:7:15"},"referencedDeclaration":4762,"src":"11316:7:15","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4762_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":4810,"mutability":"mutable","name":"value","nameLocation":"11345:5:15","nodeType":"VariableDeclaration","scope":4825,"src":"11337:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4809,"name":"uint256","nodeType":"ElementaryTypeName","src":"11337:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11315:36:15"},"returnParameters":{"id":4814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4813,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4825,"src":"11375:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4812,"name":"bool","nodeType":"ElementaryTypeName","src":"11375:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11374:6:15"},"scope":4892,"src":"11298:144:15","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4839,"nodeType":"Block","src":"11592:43:15","statements":[{"expression":{"arguments":[{"expression":{"id":4835,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4829,"src":"11617:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4762_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":4836,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11621:6:15","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4761,"src":"11617:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":4834,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4449,"src":"11609:7:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4290_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":4837,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11609:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4833,"id":4838,"nodeType":"Return","src":"11602:26:15"}]},"documentation":{"id":4826,"nodeType":"StructuredDocumentation","src":"11448:70:15","text":" @dev Returns the number of values in the set. O(1)."},"id":4840,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"11532:6:15","nodeType":"FunctionDefinition","parameters":{"id":4830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4829,"mutability":"mutable","name":"set","nameLocation":"11555:3:15","nodeType":"VariableDeclaration","scope":4840,"src":"11539:19:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4762_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":4828,"nodeType":"UserDefinedTypeName","pathNode":{"id":4827,"name":"UintSet","nameLocations":["11539:7:15"],"nodeType":"IdentifierPath","referencedDeclaration":4762,"src":"11539:7:15"},"referencedDeclaration":4762,"src":"11539:7:15","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4762_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"}],"src":"11538:21:15"},"returnParameters":{"id":4833,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4832,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4840,"src":"11583:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4831,"name":"uint256","nodeType":"ElementaryTypeName","src":"11583:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11582:9:15"},"scope":4892,"src":"11523:112:15","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4860,"nodeType":"Block","src":"12057:55:15","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":4854,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4844,"src":"12086:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4762_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":4855,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12090:6:15","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4761,"src":"12086:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":4856,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4846,"src":"12098:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4853,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4466,"src":"12082:3:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4290_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":4857,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12082:22:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4852,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12074:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4851,"name":"uint256","nodeType":"ElementaryTypeName","src":"12074:7:15","typeDescriptions":{}}},"id":4858,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12074:31:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4850,"id":4859,"nodeType":"Return","src":"12067:38:15"}]},"documentation":{"id":4841,"nodeType":"StructuredDocumentation","src":"11641:331:15","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":4861,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"11986:2:15","nodeType":"FunctionDefinition","parameters":{"id":4847,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4844,"mutability":"mutable","name":"set","nameLocation":"12005:3:15","nodeType":"VariableDeclaration","scope":4861,"src":"11989:19:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4762_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":4843,"nodeType":"UserDefinedTypeName","pathNode":{"id":4842,"name":"UintSet","nameLocations":["11989:7:15"],"nodeType":"IdentifierPath","referencedDeclaration":4762,"src":"11989:7:15"},"referencedDeclaration":4762,"src":"11989:7:15","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4762_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":4846,"mutability":"mutable","name":"index","nameLocation":"12018:5:15","nodeType":"VariableDeclaration","scope":4861,"src":"12010:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4845,"name":"uint256","nodeType":"ElementaryTypeName","src":"12010:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11988:36:15"},"returnParameters":{"id":4850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4849,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4861,"src":"12048:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4848,"name":"uint256","nodeType":"ElementaryTypeName","src":"12048:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12047:9:15"},"scope":4892,"src":"11977:135:15","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4890,"nodeType":"Block","src":"12730:219:15","statements":[{"assignments":[4875],"declarations":[{"constant":false,"id":4875,"mutability":"mutable","name":"store","nameLocation":"12757:5:15","nodeType":"VariableDeclaration","scope":4890,"src":"12740:22:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4873,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12740:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4874,"nodeType":"ArrayTypeName","src":"12740:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":4880,"initialValue":{"arguments":[{"expression":{"id":4877,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4865,"src":"12773:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4762_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":4878,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12777:6:15","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4761,"src":"12773:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4290_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":4876,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4480,"src":"12765:7:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4290_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":4879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12765:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"12740:44:15"},{"assignments":[4885],"declarations":[{"constant":false,"id":4885,"mutability":"mutable","name":"result","nameLocation":"12811:6:15","nodeType":"VariableDeclaration","scope":4890,"src":"12794:23:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4883,"name":"uint256","nodeType":"ElementaryTypeName","src":"12794:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4884,"nodeType":"ArrayTypeName","src":"12794:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":4886,"nodeType":"VariableDeclarationStatement","src":"12794:23:15"},{"AST":{"nodeType":"YulBlock","src":"12880:39:15","statements":[{"nodeType":"YulAssignment","src":"12894:15:15","value":{"name":"store","nodeType":"YulIdentifier","src":"12904:5:15"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"12894:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":4885,"isOffset":false,"isSlot":false,"src":"12894:6:15","valueSize":1},{"declaration":4875,"isOffset":false,"isSlot":false,"src":"12904:5:15","valueSize":1}],"id":4887,"nodeType":"InlineAssembly","src":"12871:48:15"},{"expression":{"id":4888,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4885,"src":"12936:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":4870,"id":4889,"nodeType":"Return","src":"12929:13:15"}]},"documentation":{"id":4862,"nodeType":"StructuredDocumentation","src":"12118:529:15","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":4891,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"12661:6:15","nodeType":"FunctionDefinition","parameters":{"id":4866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4865,"mutability":"mutable","name":"set","nameLocation":"12684:3:15","nodeType":"VariableDeclaration","scope":4891,"src":"12668:19:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4762_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":4864,"nodeType":"UserDefinedTypeName","pathNode":{"id":4863,"name":"UintSet","nameLocations":["12668:7:15"],"nodeType":"IdentifierPath","referencedDeclaration":4762,"src":"12668:7:15"},"referencedDeclaration":4762,"src":"12668:7:15","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4762_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"}],"src":"12667:21:15"},"returnParameters":{"id":4870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4869,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4891,"src":"12712:16:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4867,"name":"uint256","nodeType":"ElementaryTypeName","src":"12712:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4868,"nodeType":"ArrayTypeName","src":"12712:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"12711:18:15"},"scope":4892,"src":"12652:297:15","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":4893,"src":"1321:11630:15","usedErrors":[]}],"src":"205:12747:15"},"id":15},"contracts/Marketplace.sol":{"ast":{"absolutePath":"contracts/Marketplace.sol","exportedSymbols":{"Address":[1673],"Context":[1695],"Counters":[1769],"ERC165":[1968],"ERC721":[1057],"ERC721URIStorage":[1316],"EnumerableMap":[4279],"EnumerableSet":[4892],"IERC165":[1980],"IERC721":[1173],"IERC721Metadata":[1343],"IERC721Receiver":[1191],"Marketplace":[5733],"Math":[2845],"Ownable":[112],"Pixel4te":[6006],"SafeMath":[3157],"Strings":[1944]},"id":5734,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":4894,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"39:23:16"},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeMath.sol","file":"@openzeppelin/contracts/utils/math/SafeMath.sol","id":4895,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5734,"sourceUnit":3158,"src":"64:57:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","file":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","id":4896,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5734,"sourceUnit":4893,"src":"122:65:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/structs/EnumerableMap.sol","file":"@openzeppelin/contracts/utils/structs/EnumerableMap.sol","id":4897,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5734,"sourceUnit":4280,"src":"188:65:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/Pixel4te.sol","file":"./Pixel4te.sol","id":4898,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5734,"sourceUnit":6007,"src":"255:24:16","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Marketplace","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5733,"linearizedBaseContracts":[5733],"name":"Marketplace","nameLocation":"290:11:16","nodeType":"ContractDefinition","nodes":[{"global":false,"id":4901,"libraryName":{"id":4899,"name":"SafeMath","nameLocations":["314:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":3157,"src":"314:8:16"},"nodeType":"UsingForDirective","src":"308:27:16","typeName":{"id":4900,"name":"uint256","nodeType":"ElementaryTypeName","src":"327:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"global":false,"id":4905,"libraryName":{"id":4902,"name":"EnumerableSet","nameLocations":["346:13:16"],"nodeType":"IdentifierPath","referencedDeclaration":4892,"src":"346:13:16"},"nodeType":"UsingForDirective","src":"340:46:16","typeName":{"id":4904,"nodeType":"UserDefinedTypeName","pathNode":{"id":4903,"name":"EnumerableSet.UintSet","nameLocations":["364:13:16","378:7:16"],"nodeType":"IdentifierPath","referencedDeclaration":4762,"src":"364:21:16"},"referencedDeclaration":4762,"src":"364:21:16","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4762_storage_ptr","typeString":"struct EnumerableSet.UintSet"}}},{"global":false,"id":4909,"libraryName":{"id":4906,"name":"EnumerableMap","nameLocations":["397:13:16"],"nodeType":"IdentifierPath","referencedDeclaration":4279,"src":"397:13:16"},"nodeType":"UsingForDirective","src":"391:55:16","typeName":{"id":4908,"nodeType":"UserDefinedTypeName","pathNode":{"id":4907,"name":"EnumerableMap.AddressToUintMap","nameLocations":["415:13:16","429:16:16"],"nodeType":"IdentifierPath","referencedDeclaration":3847,"src":"415:30:16"},"referencedDeclaration":3847,"src":"415:30:16","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"}}},{"canonicalName":"Marketplace.NFT","id":4918,"members":[{"constant":false,"id":4911,"mutability":"mutable","name":"seller","nameLocation":"527:6:16","nodeType":"VariableDeclaration","scope":4918,"src":"519:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4910,"name":"address","nodeType":"ElementaryTypeName","src":"519:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4913,"mutability":"mutable","name":"tokenId","nameLocation":"551:7:16","nodeType":"VariableDeclaration","scope":4918,"src":"543:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4912,"name":"uint256","nodeType":"ElementaryTypeName","src":"543:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4915,"mutability":"mutable","name":"price","nameLocation":"576:5:16","nodeType":"VariableDeclaration","scope":4918,"src":"568:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4914,"name":"uint256","nodeType":"ElementaryTypeName","src":"568:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4917,"mutability":"mutable","name":"buyer","nameLocation":"599:5:16","nodeType":"VariableDeclaration","scope":4918,"src":"591:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4916,"name":"address","nodeType":"ElementaryTypeName","src":"591:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"NFT","nameLocation":"505:3:16","nodeType":"StructDefinition","scope":5733,"src":"498:113:16","visibility":"public"},{"canonicalName":"Marketplace.Offer","id":4923,"members":[{"constant":false,"id":4920,"mutability":"mutable","name":"offerer","nameLocation":"647:7:16","nodeType":"VariableDeclaration","scope":4923,"src":"639:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4919,"name":"address","nodeType":"ElementaryTypeName","src":"639:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4922,"mutability":"mutable","name":"value","nameLocation":"672:5:16","nodeType":"VariableDeclaration","scope":4923,"src":"664:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4921,"name":"uint256","nodeType":"ElementaryTypeName","src":"664:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Offer","nameLocation":"623:5:16","nodeType":"StructDefinition","scope":5733,"src":"616:68:16","visibility":"public"},{"constant":false,"functionSelector":"265aa621","id":4928,"mutability":"mutable","name":"nfts","nameLocation":"792:4:16","nodeType":"VariableDeclaration","scope":5733,"src":"761:35:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$4918_storage_$","typeString":"mapping(uint256 => struct Marketplace.NFT)"},"typeName":{"id":4927,"keyType":{"id":4924,"name":"uint256","nodeType":"ElementaryTypeName","src":"769:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"761:23:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$4918_storage_$","typeString":"mapping(uint256 => struct Marketplace.NFT)"},"valueType":{"id":4926,"nodeType":"UserDefinedTypeName","pathNode":{"id":4925,"name":"NFT","nameLocations":["780:3:16"],"nodeType":"IdentifierPath","referencedDeclaration":4918,"src":"780:3:16"},"referencedDeclaration":4918,"src":"780:3:16","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$4918_storage_ptr","typeString":"struct Marketplace.NFT"}}},"visibility":"public"},{"constant":false,"id":4933,"mutability":"mutable","name":"sellerToNfts","nameLocation":"919:12:16","nodeType":"VariableDeclaration","scope":5733,"src":"869:62:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UintSet_$4762_storage_$","typeString":"mapping(address => struct EnumerableSet.UintSet)"},"typeName":{"id":4932,"keyType":{"id":4929,"name":"address","nodeType":"ElementaryTypeName","src":"877:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"869:41:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UintSet_$4762_storage_$","typeString":"mapping(address => struct EnumerableSet.UintSet)"},"valueType":{"id":4931,"nodeType":"UserDefinedTypeName","pathNode":{"id":4930,"name":"EnumerableSet.UintSet","nameLocations":["888:13:16","902:7:16"],"nodeType":"IdentifierPath","referencedDeclaration":4762,"src":"888:21:16"},"referencedDeclaration":4762,"src":"888:21:16","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4762_storage_ptr","typeString":"struct EnumerableSet.UintSet"}}},"visibility":"private"},{"constant":false,"id":4938,"mutability":"mutable","name":"pendingOffers","nameLocation":"997:13:16","nodeType":"VariableDeclaration","scope":5733,"src":"938:72:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_AddressToUintMap_$3847_storage_$","typeString":"mapping(uint256 => struct EnumerableMap.AddressToUintMap)"},"typeName":{"id":4937,"keyType":{"id":4934,"name":"uint256","nodeType":"ElementaryTypeName","src":"946:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"938:50:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_AddressToUintMap_$3847_storage_$","typeString":"mapping(uint256 => struct EnumerableMap.AddressToUintMap)"},"valueType":{"id":4936,"nodeType":"UserDefinedTypeName","pathNode":{"id":4935,"name":"EnumerableMap.AddressToUintMap","nameLocations":["957:13:16","971:16:16"],"nodeType":"IdentifierPath","referencedDeclaration":3847,"src":"957:30:16"},"referencedDeclaration":3847,"src":"957:30:16","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"}}},"visibility":"private"},{"anonymous":false,"eventSelector":"5f9c03de076f5063cd3ebcfe8ef7aa8af378e4b35a83c77ba9777e97083879a2","id":4946,"name":"NFTListed","nameLocation":"1038:9:16","nodeType":"EventDefinition","parameters":{"id":4945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4940,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"1064:7:16","nodeType":"VariableDeclaration","scope":4946,"src":"1048:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4939,"name":"uint256","nodeType":"ElementaryTypeName","src":"1048:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4942,"indexed":true,"mutability":"mutable","name":"seller","nameLocation":"1089:6:16","nodeType":"VariableDeclaration","scope":4946,"src":"1073:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4941,"name":"address","nodeType":"ElementaryTypeName","src":"1073:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4944,"indexed":false,"mutability":"mutable","name":"price","nameLocation":"1105:5:16","nodeType":"VariableDeclaration","scope":4946,"src":"1097:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4943,"name":"uint256","nodeType":"ElementaryTypeName","src":"1097:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1047:64:16"},"src":"1032:80:16"},{"anonymous":false,"eventSelector":"2847cfe8afe8bcd9ac540f0259739697ea019f65d44c8e76c8796b8ce52f7c31","id":4952,"name":"NFTPriceUpdated","nameLocation":"1123:15:16","nodeType":"EventDefinition","parameters":{"id":4951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4948,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"1155:7:16","nodeType":"VariableDeclaration","scope":4952,"src":"1139:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4947,"name":"uint256","nodeType":"ElementaryTypeName","src":"1139:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4950,"indexed":false,"mutability":"mutable","name":"price","nameLocation":"1172:5:16","nodeType":"VariableDeclaration","scope":4952,"src":"1164:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4949,"name":"uint256","nodeType":"ElementaryTypeName","src":"1164:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1138:40:16"},"src":"1117:62:16"},{"anonymous":false,"eventSelector":"bdf1e76c2ba2a5c85b93bf78678a4a3b06d63b18422612dac8d7d5249ed46714","id":4960,"name":"OfferMade","nameLocation":"1190:9:16","nodeType":"EventDefinition","parameters":{"id":4959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4954,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"1216:7:16","nodeType":"VariableDeclaration","scope":4960,"src":"1200:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4953,"name":"uint256","nodeType":"ElementaryTypeName","src":"1200:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4956,"indexed":true,"mutability":"mutable","name":"offerer","nameLocation":"1241:7:16","nodeType":"VariableDeclaration","scope":4960,"src":"1225:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4955,"name":"address","nodeType":"ElementaryTypeName","src":"1225:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4958,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"1258:5:16","nodeType":"VariableDeclaration","scope":4960,"src":"1250:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4957,"name":"uint256","nodeType":"ElementaryTypeName","src":"1250:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1199:65:16"},"src":"1184:81:16"},{"anonymous":false,"eventSelector":"67ba49958f8b7a80047dfa2bdad61ca2b10d970a32898c2f345a7b20079ba037","id":4968,"name":"PurchaseMade","nameLocation":"1276:12:16","nodeType":"EventDefinition","parameters":{"id":4967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4962,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"1305:7:16","nodeType":"VariableDeclaration","scope":4968,"src":"1289:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4961,"name":"uint256","nodeType":"ElementaryTypeName","src":"1289:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4964,"indexed":false,"mutability":"mutable","name":"price","nameLocation":"1322:5:16","nodeType":"VariableDeclaration","scope":4968,"src":"1314:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4963,"name":"uint256","nodeType":"ElementaryTypeName","src":"1314:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4966,"indexed":true,"mutability":"mutable","name":"buyer","nameLocation":"1345:5:16","nodeType":"VariableDeclaration","scope":4968,"src":"1329:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4965,"name":"address","nodeType":"ElementaryTypeName","src":"1329:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1288:63:16"},"src":"1270:82:16"},{"anonymous":false,"eventSelector":"5b8046420884c4698df446ee47bb3971db3b7f1f959ff4f04a70b32b28732841","id":4972,"name":"NFTRemoved","nameLocation":"1363:10:16","nodeType":"EventDefinition","parameters":{"id":4971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4970,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"1390:7:16","nodeType":"VariableDeclaration","scope":4972,"src":"1374:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4969,"name":"uint256","nodeType":"ElementaryTypeName","src":"1374:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1373:25:16"},"src":"1357:42:16"},{"constant":false,"id":4974,"mutability":"mutable","name":"owner","nameLocation":"1445:5:16","nodeType":"VariableDeclaration","scope":5733,"src":"1437:13:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4973,"name":"address","nodeType":"ElementaryTypeName","src":"1437:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4977,"mutability":"mutable","name":"pixel4teContract","nameLocation":"1516:16:16","nodeType":"VariableDeclaration","scope":5733,"src":"1499:33:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_Pixel4te_$6006","typeString":"contract Pixel4te"},"typeName":{"id":4976,"nodeType":"UserDefinedTypeName","pathNode":{"id":4975,"name":"Pixel4te","nameLocations":["1499:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":6006,"src":"1499:8:16"},"referencedDeclaration":6006,"src":"1499:8:16","typeDescriptions":{"typeIdentifier":"t_contract$_Pixel4te_$6006","typeString":"contract Pixel4te"}},"visibility":"private"},{"body":{"id":4993,"nodeType":"Block","src":"1589:84:16","statements":[{"expression":{"id":4985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4982,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4974,"src":"1599:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":4983,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1607:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1611:6:16","memberName":"sender","nodeType":"MemberAccess","src":"1607:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1599:18:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4986,"nodeType":"ExpressionStatement","src":"1599:18:16"},{"expression":{"id":4991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4987,"name":"pixel4teContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"1627:16:16","typeDescriptions":{"typeIdentifier":"t_contract$_Pixel4te_$6006","typeString":"contract Pixel4te"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4989,"name":"collection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4979,"src":"1655:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4988,"name":"Pixel4te","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6006,"src":"1646:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Pixel4te_$6006_$","typeString":"type(contract Pixel4te)"}},"id":4990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1646:20:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Pixel4te_$6006","typeString":"contract Pixel4te"}},"src":"1627:39:16","typeDescriptions":{"typeIdentifier":"t_contract$_Pixel4te_$6006","typeString":"contract Pixel4te"}},"id":4992,"nodeType":"ExpressionStatement","src":"1627:39:16"}]},"id":4994,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4980,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4979,"mutability":"mutable","name":"collection","nameLocation":"1577:10:16","nodeType":"VariableDeclaration","scope":4994,"src":"1569:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4978,"name":"address","nodeType":"ElementaryTypeName","src":"1569:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1568:20:16"},"returnParameters":{"id":4981,"nodeType":"ParameterList","parameters":[],"src":"1589:0:16"},"scope":5733,"src":"1557:116:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5014,"nodeType":"Block","src":"1744:121:16","statements":[{"clauses":[{"block":{"id":5007,"nodeType":"Block","src":"1791:30:16","statements":[{"expression":{"hexValue":"74727565","id":5005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1808:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":5000,"id":5006,"nodeType":"Return","src":"1801:11:16"}]},"errorName":"","id":5008,"nodeType":"TryCatchClause","src":"1791:30:16"},{"block":{"id":5011,"nodeType":"Block","src":"1828:31:16","statements":[{"expression":{"hexValue":"66616c7365","id":5009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1845:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":5000,"id":5010,"nodeType":"Return","src":"1838:12:16"}]},"errorName":"","id":5012,"nodeType":"TryCatchClause","src":"1822:37:16"}],"externalCall":{"arguments":[{"id":5003,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4996,"src":"1781:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5001,"name":"pixel4teContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"1756:16:16","typeDescriptions":{"typeIdentifier":"t_contract$_Pixel4te_$6006","typeString":"contract Pixel4te"}},"id":5002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1773:7:16","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"1756:24:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view external returns (address)"}},"id":5004,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1756:34:16","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5013,"nodeType":"TryStatement","src":"1752:107:16"}]},"id":5015,"implemented":true,"kind":"function","modifiers":[],"name":"_isValidNFT","nameLocation":"1688:11:16","nodeType":"FunctionDefinition","parameters":{"id":4997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4996,"mutability":"mutable","name":"_tokenId","nameLocation":"1705:8:16","nodeType":"VariableDeclaration","scope":5015,"src":"1700:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4995,"name":"uint","nodeType":"ElementaryTypeName","src":"1700:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1699:15:16"},"returnParameters":{"id":5000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4999,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5015,"src":"1738:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4998,"name":"bool","nodeType":"ElementaryTypeName","src":"1738:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1737:6:16"},"scope":5733,"src":"1679:186:16","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5081,"nodeType":"Block","src":"1989:742:16","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5023,"name":"_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5019,"src":"2007:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2016:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2007:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"50726963652063616e6e6f74206265207a65726f","id":5026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2019:22:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_72dc2a71c7e1de2c7b012d07a11f8199d268b42d946f22dcef81102d123f1ba2","typeString":"literal_string \"Price cannot be zero\""},"value":"Price cannot be zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_72dc2a71c7e1de2c7b012d07a11f8199d268b42d946f22dcef81102d123f1ba2","typeString":"literal_string \"Price cannot be zero\""}],"id":5022,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1999:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5027,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1999:43:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5028,"nodeType":"ExpressionStatement","src":"1999:43:16"},{"expression":{"arguments":[{"arguments":[{"id":5031,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5017,"src":"2072:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5030,"name":"_isValidNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5015,"src":"2060:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":5032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2060:21:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c6964204e4654","id":5033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2083:13:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_7364dcc3d92c60ce85034c76325bc369e6f9c986a5158a7471ba75ccb0b8ebe4","typeString":"literal_string \"Invalid NFT\""},"value":"Invalid NFT"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7364dcc3d92c60ce85034c76325bc369e6f9c986a5158a7471ba75ccb0b8ebe4","typeString":"literal_string \"Invalid NFT\""}],"id":5029,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2052:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5034,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2052:45:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5035,"nodeType":"ExpressionStatement","src":"2052:45:16"},{"assignments":[5037],"declarations":[{"constant":false,"id":5037,"mutability":"mutable","name":"_owner","nameLocation":"2220:6:16","nodeType":"VariableDeclaration","scope":5081,"src":"2212:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5036,"name":"address","nodeType":"ElementaryTypeName","src":"2212:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5042,"initialValue":{"arguments":[{"id":5040,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5017,"src":"2254:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5038,"name":"pixel4teContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"2229:16:16","typeDescriptions":{"typeIdentifier":"t_contract$_Pixel4te_$6006","typeString":"contract Pixel4te"}},"id":5039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2246:7:16","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"2229:24:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view external returns (address)"}},"id":5041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2229:34:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2212:51:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5044,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5037,"src":"2281:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5045,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2291:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2295:6:16","memberName":"sender","nodeType":"MemberAccess","src":"2291:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2281:20:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f7420746865204e4654206f776e6572","id":5048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2303:19:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_f40c7207b10e481e650faa5f8682df109c855977b906bbdb8a3725f64e1c28fd","typeString":"literal_string \"Not the NFT owner\""},"value":"Not the NFT owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f40c7207b10e481e650faa5f8682df109c855977b906bbdb8a3725f64e1c28fd","typeString":"literal_string \"Not the NFT owner\""}],"id":5043,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2273:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2273:50:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5050,"nodeType":"ExpressionStatement","src":"2273:50:16"},{"expression":{"id":5064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5051,"name":"nfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"2378:4:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$4918_storage_$","typeString":"mapping(uint256 => struct Marketplace.NFT storage ref)"}},"id":5053,"indexExpression":{"id":5052,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5017,"src":"2383:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2378:14:16","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$4918_storage","typeString":"struct Marketplace.NFT storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":5055,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2421:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2425:6:16","memberName":"sender","nodeType":"MemberAccess","src":"2421:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5057,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5017,"src":"2454:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5058,"name":"_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5019,"src":"2483:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":5061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2518:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5060,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2510:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5059,"name":"address","nodeType":"ElementaryTypeName","src":"2510:7:16","typeDescriptions":{}}},"id":5062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2510:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5054,"name":"NFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4918,"src":"2395:3:16","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_NFT_$4918_storage_ptr_$","typeString":"type(struct Marketplace.NFT storage pointer)"}},"id":5063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2413:6:16","2445:7:16","2476:5:16","2503:5:16"],"names":["seller","tokenId","price","buyer"],"nodeType":"FunctionCall","src":"2395:136:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$4918_memory_ptr","typeString":"struct Marketplace.NFT memory"}},"src":"2378:153:16","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$4918_storage","typeString":"struct Marketplace.NFT storage ref"}},"id":5065,"nodeType":"ExpressionStatement","src":"2378:153:16"},{"expression":{"arguments":[{"id":5071,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5017,"src":"2620:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":5066,"name":"sellerToNfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4933,"src":"2591:12:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UintSet_$4762_storage_$","typeString":"mapping(address => struct EnumerableSet.UintSet storage ref)"}},"id":5069,"indexExpression":{"expression":{"id":5067,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2604:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2608:6:16","memberName":"sender","nodeType":"MemberAccess","src":"2604:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2591:24:16","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4762_storage","typeString":"struct EnumerableSet.UintSet storage ref"}},"id":5070,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2616:3:16","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":4783,"src":"2591:28:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_UintSet_$4762_storage_ptr_$_t_uint256_$returns$_t_bool_$bound_to$_t_struct$_UintSet_$4762_storage_ptr_$","typeString":"function (struct EnumerableSet.UintSet storage pointer,uint256) returns (bool)"}},"id":5072,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2591:38:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5073,"nodeType":"ExpressionStatement","src":"2591:38:16"},{"eventCall":{"arguments":[{"id":5075,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5017,"src":"2695:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5076,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2705:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2709:6:16","memberName":"sender","nodeType":"MemberAccess","src":"2705:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5078,"name":"_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5019,"src":"2717:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5074,"name":"NFTListed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4946,"src":"2685:9:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$returns$__$","typeString":"function (uint256,address,uint256)"}},"id":5079,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2685:39:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5080,"nodeType":"EmitStatement","src":"2680:44:16"}]},"functionSelector":"94383f14","id":5082,"implemented":true,"kind":"function","modifiers":[],"name":"listNFT","nameLocation":"1938:7:16","nodeType":"FunctionDefinition","parameters":{"id":5020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5017,"mutability":"mutable","name":"_tokenId","nameLocation":"1954:8:16","nodeType":"VariableDeclaration","scope":5082,"src":"1946:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5016,"name":"uint256","nodeType":"ElementaryTypeName","src":"1946:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5019,"mutability":"mutable","name":"_price","nameLocation":"1972:6:16","nodeType":"VariableDeclaration","scope":5082,"src":"1964:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5018,"name":"uint256","nodeType":"ElementaryTypeName","src":"1964:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1945:34:16"},"returnParameters":{"id":5021,"nodeType":"ParameterList","parameters":[],"src":"1989:0:16"},"scope":5733,"src":"1929:802:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5115,"nodeType":"Block","src":"2787:200:16","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":5088,"name":"nfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"2803:4:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$4918_storage_$","typeString":"mapping(uint256 => struct Marketplace.NFT storage ref)"}},"id":5090,"indexExpression":{"id":5089,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"2808:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2803:14:16","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$4918_storage","typeString":"struct Marketplace.NFT storage ref"}},"id":5091,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2818:6:16","memberName":"seller","nodeType":"MemberAccess","referencedDeclaration":4911,"src":"2803:21:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5092,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2828:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2832:6:16","memberName":"sender","nodeType":"MemberAccess","src":"2828:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2803:35:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f6e6c792073656c6c65722063616e2072656d6f7665204e4654","id":5095,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2840:28:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_66efb3d77f56c50e528cf51150e96ac96115e7d8e881287a7840a6d610a3d797","typeString":"literal_string \"Only seller can remove NFT\""},"value":"Only seller can remove NFT"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_66efb3d77f56c50e528cf51150e96ac96115e7d8e881287a7840a6d610a3d797","typeString":"literal_string \"Only seller can remove NFT\""}],"id":5087,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2795:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5096,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2795:74:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5097,"nodeType":"ExpressionStatement","src":"2795:74:16"},{"expression":{"arguments":[{"id":5103,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"2909:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":5098,"name":"sellerToNfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4933,"src":"2877:12:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UintSet_$4762_storage_$","typeString":"mapping(address => struct EnumerableSet.UintSet storage ref)"}},"id":5101,"indexExpression":{"expression":{"id":5099,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2890:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2894:6:16","memberName":"sender","nodeType":"MemberAccess","src":"2890:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2877:24:16","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4762_storage","typeString":"struct EnumerableSet.UintSet storage ref"}},"id":5102,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2902:6:16","memberName":"remove","nodeType":"MemberAccess","referencedDeclaration":4804,"src":"2877:31:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_UintSet_$4762_storage_ptr_$_t_uint256_$returns$_t_bool_$bound_to$_t_struct$_UintSet_$4762_storage_ptr_$","typeString":"function (struct EnumerableSet.UintSet storage pointer,uint256) returns (bool)"}},"id":5104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2877:41:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5105,"nodeType":"ExpressionStatement","src":"2877:41:16"},{"expression":{"id":5109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"2926:21:16","subExpression":{"baseExpression":{"id":5106,"name":"nfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"2933:4:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$4918_storage_$","typeString":"mapping(uint256 => struct Marketplace.NFT storage ref)"}},"id":5108,"indexExpression":{"id":5107,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"2938:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2933:14:16","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$4918_storage","typeString":"struct Marketplace.NFT storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5110,"nodeType":"ExpressionStatement","src":"2926:21:16"},{"eventCall":{"arguments":[{"id":5112,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"2971:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5111,"name":"NFTRemoved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4972,"src":"2960:10:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2960:20:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5114,"nodeType":"EmitStatement","src":"2955:25:16"}]},"functionSelector":"ee4739cb","id":5116,"implemented":true,"kind":"function","modifiers":[],"name":"removeNFT","nameLocation":"2750:9:16","nodeType":"FunctionDefinition","parameters":{"id":5085,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5084,"mutability":"mutable","name":"_tokenId","nameLocation":"2768:8:16","nodeType":"VariableDeclaration","scope":5116,"src":"2760:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5083,"name":"uint256","nodeType":"ElementaryTypeName","src":"2760:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2759:18:16"},"returnParameters":{"id":5086,"nodeType":"ParameterList","parameters":[],"src":"2787:0:16"},"scope":5733,"src":"2741:246:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5153,"nodeType":"Block","src":"3112:338:16","statements":[{"expression":{"arguments":[{"arguments":[{"id":5125,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5118,"src":"3142:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5124,"name":"isNFTListed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5732,"src":"3130:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":5126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3130:21:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e465420646f6573206e6f74206578697374","id":5127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3153:20:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_e403a9d7ffdeca555e754beaddbd9e6f34f997c24c017ab0a30199bbea954853","typeString":"literal_string \"NFT does not exist\""},"value":"NFT does not exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e403a9d7ffdeca555e754beaddbd9e6f34f997c24c017ab0a30199bbea954853","typeString":"literal_string \"NFT does not exist\""}],"id":5123,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3122:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3122:52:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5129,"nodeType":"ExpressionStatement","src":"3122:52:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5131,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3192:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3196:6:16","memberName":"sender","nodeType":"MemberAccess","src":"3192:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"baseExpression":{"id":5133,"name":"nfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"3206:4:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$4918_storage_$","typeString":"mapping(uint256 => struct Marketplace.NFT storage ref)"}},"id":5135,"indexExpression":{"id":5134,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5118,"src":"3211:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3206:14:16","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$4918_storage","typeString":"struct Marketplace.NFT storage ref"}},"id":5136,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3221:6:16","memberName":"seller","nodeType":"MemberAccess","referencedDeclaration":4911,"src":"3206:21:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3192:35:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f6e6c79204e46542073656c6c65722063616e2075706461746520746865207072696365","id":5138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3229:38:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_4644ba2f6590daae55292d0a205104b061ee5d5463ede6bc016df2dbb9750633","typeString":"literal_string \"Only NFT seller can update the price\""},"value":"Only NFT seller can update the price"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4644ba2f6590daae55292d0a205104b061ee5d5463ede6bc016df2dbb9750633","typeString":"literal_string \"Only NFT seller can update the price\""}],"id":5130,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3184:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3184:84:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5140,"nodeType":"ExpressionStatement","src":"3184:84:16"},{"expression":{"id":5146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":5141,"name":"nfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"3319:4:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$4918_storage_$","typeString":"mapping(uint256 => struct Marketplace.NFT storage ref)"}},"id":5143,"indexExpression":{"id":5142,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5118,"src":"3324:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3319:14:16","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$4918_storage","typeString":"struct Marketplace.NFT storage ref"}},"id":5144,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3334:5:16","memberName":"price","nodeType":"MemberAccess","referencedDeclaration":4915,"src":"3319:20:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5145,"name":"_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5120,"src":"3342:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3319:29:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5147,"nodeType":"ExpressionStatement","src":"3319:29:16"},{"eventCall":{"arguments":[{"id":5149,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5118,"src":"3426:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5150,"name":"_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5120,"src":"3436:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5148,"name":"NFTPriceUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4952,"src":"3410:15:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":5151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3410:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5152,"nodeType":"EmitStatement","src":"3405:38:16"}]},"functionSelector":"4ac0123d","id":5154,"implemented":true,"kind":"function","modifiers":[],"name":"updateNFTPrice","nameLocation":"3054:14:16","nodeType":"FunctionDefinition","parameters":{"id":5121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5118,"mutability":"mutable","name":"_tokenId","nameLocation":"3077:8:16","nodeType":"VariableDeclaration","scope":5154,"src":"3069:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5117,"name":"uint256","nodeType":"ElementaryTypeName","src":"3069:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5120,"mutability":"mutable","name":"_price","nameLocation":"3095:6:16","nodeType":"VariableDeclaration","scope":5154,"src":"3087:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5119,"name":"uint256","nodeType":"ElementaryTypeName","src":"3087:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3068:34:16"},"returnParameters":{"id":5122,"nodeType":"ParameterList","parameters":[],"src":"3112:0:16"},"scope":5733,"src":"3045:405:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5246,"nodeType":"Block","src":"3535:1010:16","statements":[{"assignments":[5162],"declarations":[{"constant":false,"id":5162,"mutability":"mutable","name":"royaltiesPercent","nameLocation":"3551:16:16","nodeType":"VariableDeclaration","scope":5246,"src":"3543:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5161,"name":"uint256","nodeType":"ElementaryTypeName","src":"3543:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5167,"initialValue":{"arguments":[{"id":5165,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5156,"src":"3607:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5163,"name":"pixel4teContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"3570:16:16","typeDescriptions":{"typeIdentifier":"t_contract$_Pixel4te_$6006","typeString":"contract Pixel4te"}},"id":5164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3587:19:16","memberName":"getRoyaltiesPercent","nodeType":"MemberAccess","referencedDeclaration":6005,"src":"3570:36:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view external returns (uint256)"}},"id":5166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3570:46:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3543:73:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5169,"name":"royaltiesPercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5162,"src":"3661:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3680:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3661:20:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"526f79616c746965732070657263656e74206d7573742062652067726561746572207468616e207a65726f2e","id":5172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3683:46:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_312b0199b87785955ef2954637425f623c976afcee89dbd6ddbe087e5a185a62","typeString":"literal_string \"Royalties percent must be greater than zero.\""},"value":"Royalties percent must be greater than zero."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_312b0199b87785955ef2954637425f623c976afcee89dbd6ddbe087e5a185a62","typeString":"literal_string \"Royalties percent must be greater than zero.\""}],"id":5168,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3653:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3653:77:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5174,"nodeType":"ExpressionStatement","src":"3653:77:16"},{"assignments":[5176],"declarations":[{"constant":false,"id":5176,"mutability":"mutable","name":"royaltiesOwner","nameLocation":"3746:14:16","nodeType":"VariableDeclaration","scope":5246,"src":"3738:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5175,"name":"address","nodeType":"ElementaryTypeName","src":"3738:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5181,"initialValue":{"arguments":[{"id":5179,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5156,"src":"3790:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5177,"name":"pixel4teContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"3763:16:16","typeDescriptions":{"typeIdentifier":"t_contract$_Pixel4te_$6006","typeString":"contract Pixel4te"}},"id":5178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3780:9:16","memberName":"getMinter","nodeType":"MemberAccess","referencedDeclaration":5969,"src":"3763:26:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view external returns (address)"}},"id":5180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3763:36:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3738:61:16"},{"assignments":[5183],"declarations":[{"constant":false,"id":5183,"mutability":"mutable","name":"royalties","nameLocation":"3848:9:16","nodeType":"VariableDeclaration","scope":5246,"src":"3840:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5182,"name":"uint256","nodeType":"ElementaryTypeName","src":"3840:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5188,"initialValue":{"arguments":[{"id":5186,"name":"royaltiesPercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5162,"src":"3871:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5184,"name":"_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5158,"src":"3860:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3867:3:16","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":3051,"src":"3860:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3860:28:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3840:48:16"},{"assignments":[5190],"declarations":[{"constant":false,"id":5190,"mutability":"mutable","name":"seller","nameLocation":"3934:6:16","nodeType":"VariableDeclaration","scope":5246,"src":"3918:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":5189,"name":"address","nodeType":"ElementaryTypeName","src":"3918:15:16","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"id":5198,"initialValue":{"arguments":[{"expression":{"baseExpression":{"id":5193,"name":"nfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"3951:4:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$4918_storage_$","typeString":"mapping(uint256 => struct Marketplace.NFT storage ref)"}},"id":5195,"indexExpression":{"id":5194,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5156,"src":"3956:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3951:14:16","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$4918_storage","typeString":"struct Marketplace.NFT storage ref"}},"id":5196,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3966:6:16","memberName":"seller","nodeType":"MemberAccess","referencedDeclaration":4911,"src":"3951:21:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5192,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3943:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":5191,"name":"address","nodeType":"ElementaryTypeName","src":"3943:8:16","stateMutability":"payable","typeDescriptions":{}}},"id":5197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3943:30:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"3918:55:16"},{"expression":{"arguments":[{"arguments":[{"id":5204,"name":"royalties","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5183,"src":"4059:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5202,"name":"_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5158,"src":"4048:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4055:3:16","memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":3036,"src":"4048:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4048:21:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5199,"name":"seller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5190,"src":"4032:6:16","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":5201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4039:8:16","memberName":"transfer","nodeType":"MemberAccess","src":"4032:15:16","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4032:38:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5207,"nodeType":"ExpressionStatement","src":"4032:38:16"},{"expression":{"arguments":[{"id":5213,"name":"royalties","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5183,"src":"4175:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5210,"name":"royaltiesOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5176,"src":"4150:14:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5209,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4142:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":5208,"name":"address","nodeType":"ElementaryTypeName","src":"4142:8:16","stateMutability":"payable","typeDescriptions":{}}},"id":5211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4142:23:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":5212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4166:8:16","memberName":"transfer","nodeType":"MemberAccess","src":"4142:32:16","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4142:43:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5215,"nodeType":"ExpressionStatement","src":"4142:43:16"},{"expression":{"arguments":[{"expression":{"baseExpression":{"id":5219,"name":"nfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"4270:4:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$4918_storage_$","typeString":"mapping(uint256 => struct Marketplace.NFT storage ref)"}},"id":5221,"indexExpression":{"id":5220,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5156,"src":"4275:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4270:14:16","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$4918_storage","typeString":"struct Marketplace.NFT storage ref"}},"id":5222,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4285:6:16","memberName":"seller","nodeType":"MemberAccess","referencedDeclaration":4911,"src":"4270:21:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5223,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4293:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4297:6:16","memberName":"sender","nodeType":"MemberAccess","src":"4293:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":5225,"name":"nfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"4305:4:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$4918_storage_$","typeString":"mapping(uint256 => struct Marketplace.NFT storage ref)"}},"id":5227,"indexExpression":{"id":5226,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5156,"src":"4310:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4305:14:16","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$4918_storage","typeString":"struct Marketplace.NFT storage ref"}},"id":5228,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4320:7:16","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":4913,"src":"4305:22:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5216,"name":"pixel4teContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"4236:16:16","typeDescriptions":{"typeIdentifier":"t_contract$_Pixel4te_$6006","typeString":"contract Pixel4te"}},"id":5218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4253:16:16","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":468,"src":"4236:33:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) external"}},"id":5229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4236:92:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5230,"nodeType":"ExpressionStatement","src":"4236:92:16"},{"expression":{"arguments":[{"id":5238,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5156,"src":"4413:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":5231,"name":"sellerToNfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4933,"src":"4370:12:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UintSet_$4762_storage_$","typeString":"mapping(address => struct EnumerableSet.UintSet storage ref)"}},"id":5236,"indexExpression":{"expression":{"baseExpression":{"id":5232,"name":"nfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"4383:4:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$4918_storage_$","typeString":"mapping(uint256 => struct Marketplace.NFT storage ref)"}},"id":5234,"indexExpression":{"id":5233,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5156,"src":"4388:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4383:14:16","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$4918_storage","typeString":"struct Marketplace.NFT storage ref"}},"id":5235,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4398:6:16","memberName":"seller","nodeType":"MemberAccess","referencedDeclaration":4911,"src":"4383:21:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4370:35:16","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4762_storage","typeString":"struct EnumerableSet.UintSet storage ref"}},"id":5237,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4406:6:16","memberName":"remove","nodeType":"MemberAccess","referencedDeclaration":4804,"src":"4370:42:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_UintSet_$4762_storage_ptr_$_t_uint256_$returns$_t_bool_$bound_to$_t_struct$_UintSet_$4762_storage_ptr_$","typeString":"function (struct EnumerableSet.UintSet storage pointer,uint256) returns (bool)"}},"id":5239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4370:52:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5240,"nodeType":"ExpressionStatement","src":"4370:52:16"},{"expression":{"id":5244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"4478:21:16","subExpression":{"baseExpression":{"id":5241,"name":"nfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"4485:4:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$4918_storage_$","typeString":"mapping(uint256 => struct Marketplace.NFT storage ref)"}},"id":5243,"indexExpression":{"id":5242,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5156,"src":"4490:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4485:14:16","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$4918_storage","typeString":"struct Marketplace.NFT storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5245,"nodeType":"ExpressionStatement","src":"4478:21:16"}]},"id":5247,"implemented":true,"kind":"function","modifiers":[],"name":"_processSaleAndTransferNFT","nameLocation":"3465:26:16","nodeType":"FunctionDefinition","parameters":{"id":5159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5156,"mutability":"mutable","name":"_tokenId","nameLocation":"3500:8:16","nodeType":"VariableDeclaration","scope":5247,"src":"3492:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5155,"name":"uint256","nodeType":"ElementaryTypeName","src":"3492:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5158,"mutability":"mutable","name":"_price","nameLocation":"3518:6:16","nodeType":"VariableDeclaration","scope":5247,"src":"3510:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5157,"name":"uint256","nodeType":"ElementaryTypeName","src":"3510:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3491:34:16"},"returnParameters":{"id":5160,"nodeType":"ParameterList","parameters":[],"src":"3535:0:16"},"scope":5733,"src":"3456:1089:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5402,"nodeType":"Block","src":"4654:1602:16","statements":[{"expression":{"arguments":[{"arguments":[{"id":5254,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5249,"src":"4684:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5253,"name":"isNFTListed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5732,"src":"4672:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":5255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4672:21:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e465420646f6573206e6f74206578697374","id":5256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4695:20:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_e403a9d7ffdeca555e754beaddbd9e6f34f997c24c017ab0a30199bbea954853","typeString":"literal_string \"NFT does not exist\""},"value":"NFT does not exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e403a9d7ffdeca555e754beaddbd9e6f34f997c24c017ab0a30199bbea954853","typeString":"literal_string \"NFT does not exist\""}],"id":5252,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4664:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4664:52:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5258,"nodeType":"ExpressionStatement","src":"4664:52:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5260,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4734:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4738:6:16","memberName":"sender","nodeType":"MemberAccess","src":"4734:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"baseExpression":{"id":5262,"name":"nfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"4748:4:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$4918_storage_$","typeString":"mapping(uint256 => struct Marketplace.NFT storage ref)"}},"id":5264,"indexExpression":{"id":5263,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5249,"src":"4753:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4748:14:16","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$4918_storage","typeString":"struct Marketplace.NFT storage ref"}},"id":5265,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4763:6:16","memberName":"seller","nodeType":"MemberAccess","referencedDeclaration":4911,"src":"4748:21:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4734:35:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53656c6c65722063616e6e6f74206d616b6520616e206f6666657220666f72207468656972206f776e204e4654","id":5267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4771:47:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_aabd344684bfafe82e0b208091da4b5f9f71692af2dbd0f198d76e52a4b871ba","typeString":"literal_string \"Seller cannot make an offer for their own NFT\""},"value":"Seller cannot make an offer for their own NFT"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_aabd344684bfafe82e0b208091da4b5f9f71692af2dbd0f198d76e52a4b871ba","typeString":"literal_string \"Seller cannot make an offer for their own NFT\""}],"id":5259,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4726:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4726:93:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5269,"nodeType":"ExpressionStatement","src":"4726:93:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5271,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4837:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4841:5:16","memberName":"value","nodeType":"MemberAccess","src":"4837:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4849:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4837:13:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f666665722076616c7565206d7573742062652067726561746572207468616e207a65726f","id":5275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4852:39:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_443b992b59a0be2f5f76238cb514531da1e5dcec7228eacdf8d76be549bc2aec","typeString":"literal_string \"Offer value must be greater than zero\""},"value":"Offer value must be greater than zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_443b992b59a0be2f5f76238cb514531da1e5dcec7228eacdf8d76be549bc2aec","typeString":"literal_string \"Offer value must be greater than zero\""}],"id":5270,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4829:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4829:63:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5277,"nodeType":"ExpressionStatement","src":"4829:63:16"},{"condition":{"arguments":[{"expression":{"id":5282,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4940:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4944:6:16","memberName":"sender","nodeType":"MemberAccess","src":"4940:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":5278,"name":"pendingOffers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4938,"src":"4907:13:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_AddressToUintMap_$3847_storage_$","typeString":"mapping(uint256 => struct EnumerableMap.AddressToUintMap storage ref)"}},"id":5280,"indexExpression":{"id":5279,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5249,"src":"4921:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4907:23:16","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage","typeString":"struct EnumerableMap.AddressToUintMap storage ref"}},"id":5281,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4931:8:16","memberName":"contains","nodeType":"MemberAccess","referencedDeclaration":3934,"src":"4907:32:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressToUintMap_$3847_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressToUintMap_$3847_storage_ptr_$","typeString":"function (struct EnumerableMap.AddressToUintMap storage pointer,address) view returns (bool)"}},"id":5284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4907:44:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5400,"nodeType":"Block","src":"5642:608:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5346,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5658:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5662:5:16","memberName":"value","nodeType":"MemberAccess","src":"5658:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"baseExpression":{"id":5348,"name":"nfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"5671:4:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$4918_storage_$","typeString":"mapping(uint256 => struct Marketplace.NFT storage ref)"}},"id":5350,"indexExpression":{"id":5349,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5249,"src":"5676:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5671:14:16","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$4918_storage","typeString":"struct Marketplace.NFT storage ref"}},"id":5351,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5686:5:16","memberName":"price","nodeType":"MemberAccess","referencedDeclaration":4915,"src":"5671:20:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5658:33:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5398,"nodeType":"Block","src":"6032:208:16","statements":[{"expression":{"arguments":[{"expression":{"id":5384,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6143:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6147:6:16","memberName":"sender","nodeType":"MemberAccess","src":"6143:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5386,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6155:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6159:5:16","memberName":"value","nodeType":"MemberAccess","src":"6155:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":5380,"name":"pendingOffers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4938,"src":"6115:13:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_AddressToUintMap_$3847_storage_$","typeString":"mapping(uint256 => struct EnumerableMap.AddressToUintMap storage ref)"}},"id":5382,"indexExpression":{"id":5381,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5249,"src":"6129:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6115:23:16","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage","typeString":"struct EnumerableMap.AddressToUintMap storage ref"}},"id":5383,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6139:3:16","memberName":"set","nodeType":"MemberAccess","referencedDeclaration":3880,"src":"6115:27:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressToUintMap_$3847_storage_ptr_$_t_address_$_t_uint256_$returns$_t_bool_$bound_to$_t_struct$_AddressToUintMap_$3847_storage_ptr_$","typeString":"function (struct EnumerableMap.AddressToUintMap storage pointer,address,uint256) returns (bool)"}},"id":5388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6115:50:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5389,"nodeType":"ExpressionStatement","src":"6115:50:16"},{"eventCall":{"arguments":[{"id":5391,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5249,"src":"6194:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5392,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6204:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6208:6:16","memberName":"sender","nodeType":"MemberAccess","src":"6204:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5394,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6216:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6220:5:16","memberName":"value","nodeType":"MemberAccess","src":"6216:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5390,"name":"OfferMade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4960,"src":"6184:9:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$returns$__$","typeString":"function (uint256,address,uint256)"}},"id":5396,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6184:42:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5397,"nodeType":"EmitStatement","src":"6179:47:16"}]},"id":5399,"nodeType":"IfStatement","src":"5654:586:16","trueBody":{"id":5379,"nodeType":"Block","src":"5693:333:16","statements":[{"expression":{"id":5359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":5353,"name":"nfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"5762:4:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$4918_storage_$","typeString":"mapping(uint256 => struct Marketplace.NFT storage ref)"}},"id":5355,"indexExpression":{"id":5354,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5249,"src":"5767:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5762:14:16","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$4918_storage","typeString":"struct Marketplace.NFT storage ref"}},"id":5356,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5777:5:16","memberName":"buyer","nodeType":"MemberAccess","referencedDeclaration":4917,"src":"5762:20:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":5357,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5785:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5789:6:16","memberName":"sender","nodeType":"MemberAccess","src":"5785:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5762:33:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5360,"nodeType":"ExpressionStatement","src":"5762:33:16"},{"expression":{"arguments":[{"id":5362,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5249,"src":"5871:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"baseExpression":{"id":5363,"name":"nfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"5881:4:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$4918_storage_$","typeString":"mapping(uint256 => struct Marketplace.NFT storage ref)"}},"id":5365,"indexExpression":{"id":5364,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5249,"src":"5886:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5881:14:16","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$4918_storage","typeString":"struct Marketplace.NFT storage ref"}},"id":5366,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5896:5:16","memberName":"price","nodeType":"MemberAccess","referencedDeclaration":4915,"src":"5881:20:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5361,"name":"_processSaleAndTransferNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5247,"src":"5844:26:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":5367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5844:58:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5368,"nodeType":"ExpressionStatement","src":"5844:58:16"},{"eventCall":{"arguments":[{"id":5370,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5249,"src":"5935:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"baseExpression":{"id":5371,"name":"nfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"5945:4:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$4918_storage_$","typeString":"mapping(uint256 => struct Marketplace.NFT storage ref)"}},"id":5373,"indexExpression":{"id":5372,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5249,"src":"5950:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5945:14:16","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$4918_storage","typeString":"struct Marketplace.NFT storage ref"}},"id":5374,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5960:5:16","memberName":"price","nodeType":"MemberAccess","referencedDeclaration":4915,"src":"5945:20:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5375,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5967:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5971:6:16","memberName":"sender","nodeType":"MemberAccess","src":"5967:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5369,"name":"PurchaseMade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4968,"src":"5922:12:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,uint256,address)"}},"id":5377,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5922:56:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5378,"nodeType":"EmitStatement","src":"5917:61:16"}]}}]},"id":5401,"nodeType":"IfStatement","src":"4903:1347:16","trueBody":{"id":5345,"nodeType":"Block","src":"4953:683:16","statements":[{"assignments":[5286],"declarations":[{"constant":false,"id":5286,"mutability":"mutable","name":"existingOffer","nameLocation":"4970:13:16","nodeType":"VariableDeclaration","scope":5345,"src":"4965:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5285,"name":"uint","nodeType":"ElementaryTypeName","src":"4965:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5294,"initialValue":{"arguments":[{"expression":{"id":5291,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5014:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5018:6:16","memberName":"sender","nodeType":"MemberAccess","src":"5014:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":5287,"name":"pendingOffers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4938,"src":"4986:13:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_AddressToUintMap_$3847_storage_$","typeString":"mapping(uint256 => struct EnumerableMap.AddressToUintMap storage ref)"}},"id":5289,"indexExpression":{"id":5288,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5249,"src":"5000:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4986:23:16","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage","typeString":"struct EnumerableMap.AddressToUintMap storage ref"}},"id":5290,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5010:3:16","memberName":"get","nodeType":"MemberAccess","referencedDeclaration":4059,"src":"4986:27:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressToUintMap_$3847_storage_ptr_$_t_address_$returns$_t_uint256_$bound_to$_t_struct$_AddressToUintMap_$3847_storage_ptr_$","typeString":"function (struct EnumerableMap.AddressToUintMap storage pointer,address) view returns (uint256)"}},"id":5293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4986:39:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4965:60:16"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5295,"name":"existingOffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5286,"src":"5041:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5057:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5041:17:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5298,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5062:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5066:5:16","memberName":"value","nodeType":"MemberAccess","src":"5062:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":5300,"name":"existingOffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5286,"src":"5074:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5062:25:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5041:46:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5343,"nodeType":"Block","src":"5471:155:16","statements":[{"expression":{"arguments":[{"hexValue":"4f666665722076616c7565206d75737420626520686967686572207468616e206578697374696e67206f66666572","id":5340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5564:48:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_f066f1574dfd3ce03c2b17be94d4dbc07de2ef28c113bef4cc264c53bab61096","typeString":"literal_string \"Offer value must be higher than existing offer\""},"value":"Offer value must be higher than existing offer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_f066f1574dfd3ce03c2b17be94d4dbc07de2ef28c113bef4cc264c53bab61096","typeString":"literal_string \"Offer value must be higher than existing offer\""}],"id":5339,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"5557:6:16","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":5341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5557:56:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5342,"nodeType":"ExpressionStatement","src":"5557:56:16"}]},"id":5344,"nodeType":"IfStatement","src":"5037:589:16","trueBody":{"id":5338,"nodeType":"Block","src":"5089:376:16","statements":[{"assignments":[5304],"declarations":[{"constant":false,"id":5304,"mutability":"mutable","name":"refundAmount","nameLocation":"5166:12:16","nodeType":"VariableDeclaration","scope":5338,"src":"5158:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5303,"name":"uint256","nodeType":"ElementaryTypeName","src":"5158:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5306,"initialValue":{"id":5305,"name":"existingOffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5286,"src":"5181:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5158:36:16"},{"expression":{"id":5310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5307,"name":"existingOffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5286,"src":"5208:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":5308,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5224:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5228:5:16","memberName":"value","nodeType":"MemberAccess","src":"5224:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5208:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5311,"nodeType":"ExpressionStatement","src":"5208:25:16"},{"expression":{"arguments":[{"expression":{"id":5316,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5275:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5279:6:16","memberName":"sender","nodeType":"MemberAccess","src":"5275:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5318,"name":"existingOffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5286,"src":"5287:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":5312,"name":"pendingOffers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4938,"src":"5247:13:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_AddressToUintMap_$3847_storage_$","typeString":"mapping(uint256 => struct EnumerableMap.AddressToUintMap storage ref)"}},"id":5314,"indexExpression":{"id":5313,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5249,"src":"5261:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5247:23:16","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage","typeString":"struct EnumerableMap.AddressToUintMap storage ref"}},"id":5315,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5271:3:16","memberName":"set","nodeType":"MemberAccess","referencedDeclaration":3880,"src":"5247:27:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressToUintMap_$3847_storage_ptr_$_t_address_$_t_uint256_$returns$_t_bool_$bound_to$_t_struct$_AddressToUintMap_$3847_storage_ptr_$","typeString":"function (struct EnumerableMap.AddressToUintMap storage pointer,address,uint256) returns (bool)"}},"id":5319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5247:54:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5320,"nodeType":"ExpressionStatement","src":"5247:54:16"},{"expression":{"arguments":[{"id":5327,"name":"refundAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5304,"src":"5344:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":5323,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5323:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5327:6:16","memberName":"sender","nodeType":"MemberAccess","src":"5323:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5322,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5315:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":5321,"name":"address","nodeType":"ElementaryTypeName","src":"5315:8:16","stateMutability":"payable","typeDescriptions":{}}},"id":5325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5315:19:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":5326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5335:8:16","memberName":"transfer","nodeType":"MemberAccess","src":"5315:28:16","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5315:42:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5329,"nodeType":"ExpressionStatement","src":"5315:42:16"},{"eventCall":{"arguments":[{"id":5331,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5249,"src":"5419:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5332,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5429:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5433:6:16","memberName":"sender","nodeType":"MemberAccess","src":"5429:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5334,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5441:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5445:5:16","memberName":"value","nodeType":"MemberAccess","src":"5441:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5330,"name":"OfferMade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4960,"src":"5409:9:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$returns$__$","typeString":"function (uint256,address,uint256)"}},"id":5336,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5409:42:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5337,"nodeType":"EmitStatement","src":"5404:47:16"}]}}]}}]},"functionSelector":"9a2f6474","id":5403,"implemented":true,"kind":"function","modifiers":[],"name":"makeOffer","nameLocation":"4609:9:16","nodeType":"FunctionDefinition","parameters":{"id":5250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5249,"mutability":"mutable","name":"_tokenId","nameLocation":"4627:8:16","nodeType":"VariableDeclaration","scope":5403,"src":"4619:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5248,"name":"uint256","nodeType":"ElementaryTypeName","src":"4619:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4618:18:16"},"returnParameters":{"id":5251,"nodeType":"ParameterList","parameters":[],"src":"4654:0:16"},"scope":5733,"src":"4600:1656:16","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":5469,"nodeType":"Block","src":"6326:558:16","statements":[{"expression":{"arguments":[{"arguments":[{"id":5412,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5405,"src":"6356:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5411,"name":"isNFTListed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5732,"src":"6344:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":5413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6344:21:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e465420646f6573206e6f74206578697374","id":5414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6367:20:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_e403a9d7ffdeca555e754beaddbd9e6f34f997c24c017ab0a30199bbea954853","typeString":"literal_string \"NFT does not exist\""},"value":"NFT does not exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e403a9d7ffdeca555e754beaddbd9e6f34f997c24c017ab0a30199bbea954853","typeString":"literal_string \"NFT does not exist\""}],"id":5410,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6336:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6336:52:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5416,"nodeType":"ExpressionStatement","src":"6336:52:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5418,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6406:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6410:6:16","memberName":"sender","nodeType":"MemberAccess","src":"6406:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"baseExpression":{"id":5420,"name":"nfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"6420:4:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$4918_storage_$","typeString":"mapping(uint256 => struct Marketplace.NFT storage ref)"}},"id":5422,"indexExpression":{"id":5421,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5405,"src":"6425:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6420:14:16","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$4918_storage","typeString":"struct Marketplace.NFT storage ref"}},"id":5423,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6435:6:16","memberName":"seller","nodeType":"MemberAccess","referencedDeclaration":4911,"src":"6420:21:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6406:35:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f6e6c79207468652073656c6c65722063616e2061636365707420616e206f66666572","id":5425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6443:37:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_b4af62525507167bc201a4d46c4e79b26426b7dba8b54811c0e9dfc1b03c2837","typeString":"literal_string \"Only the seller can accept an offer\""},"value":"Only the seller can accept an offer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b4af62525507167bc201a4d46c4e79b26426b7dba8b54811c0e9dfc1b03c2837","typeString":"literal_string \"Only the seller can accept an offer\""}],"id":5417,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6398:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6398:83:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5427,"nodeType":"ExpressionStatement","src":"6398:83:16"},{"expression":{"arguments":[{"arguments":[{"id":5433,"name":"_buyer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5407,"src":"6532:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":5429,"name":"pendingOffers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4938,"src":"6499:13:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_AddressToUintMap_$3847_storage_$","typeString":"mapping(uint256 => struct EnumerableMap.AddressToUintMap storage ref)"}},"id":5431,"indexExpression":{"id":5430,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5405,"src":"6513:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6499:23:16","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage","typeString":"struct EnumerableMap.AddressToUintMap storage ref"}},"id":5432,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6523:8:16","memberName":"contains","nodeType":"MemberAccess","referencedDeclaration":3934,"src":"6499:32:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressToUintMap_$3847_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressToUintMap_$3847_storage_ptr_$","typeString":"function (struct EnumerableMap.AddressToUintMap storage pointer,address) view returns (bool)"}},"id":5434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6499:40:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546865726520617265206e6f2070656e64696e67206f666665727320666f722074686973204e4654","id":5435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6541:42:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_86d9a97fc78e44082cead82c4fb35239cc53982c716c0c9912aab7d6d8bddb44","typeString":"literal_string \"There are no pending offers for this NFT\""},"value":"There are no pending offers for this NFT"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_86d9a97fc78e44082cead82c4fb35239cc53982c716c0c9912aab7d6d8bddb44","typeString":"literal_string \"There are no pending offers for this NFT\""}],"id":5428,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6491:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6491:93:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5437,"nodeType":"ExpressionStatement","src":"6491:93:16"},{"expression":{"id":5443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":5438,"name":"nfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"6595:4:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$4918_storage_$","typeString":"mapping(uint256 => struct Marketplace.NFT storage ref)"}},"id":5440,"indexExpression":{"id":5439,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5405,"src":"6600:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6595:14:16","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$4918_storage","typeString":"struct Marketplace.NFT storage ref"}},"id":5441,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6610:5:16","memberName":"buyer","nodeType":"MemberAccess","referencedDeclaration":4917,"src":"6595:20:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5442,"name":"_buyer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5407,"src":"6618:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6595:29:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5444,"nodeType":"ExpressionStatement","src":"6595:29:16"},{"expression":{"arguments":[{"id":5449,"name":"_buyer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5407,"src":"6699:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":5445,"name":"pendingOffers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4938,"src":"6668:13:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_AddressToUintMap_$3847_storage_$","typeString":"mapping(uint256 => struct EnumerableMap.AddressToUintMap storage ref)"}},"id":5447,"indexExpression":{"id":5446,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5405,"src":"6682:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6668:23:16","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage","typeString":"struct EnumerableMap.AddressToUintMap storage ref"}},"id":5448,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6692:6:16","memberName":"remove","nodeType":"MemberAccess","referencedDeclaration":3907,"src":"6668:30:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressToUintMap_$3847_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressToUintMap_$3847_storage_ptr_$","typeString":"function (struct EnumerableMap.AddressToUintMap storage pointer,address) returns (bool)"}},"id":5450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6668:38:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5451,"nodeType":"ExpressionStatement","src":"6668:38:16"},{"expression":{"arguments":[{"id":5453,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5405,"src":"6743:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"baseExpression":{"id":5454,"name":"nfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"6753:4:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$4918_storage_$","typeString":"mapping(uint256 => struct Marketplace.NFT storage ref)"}},"id":5456,"indexExpression":{"id":5455,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5405,"src":"6758:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6753:14:16","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$4918_storage","typeString":"struct Marketplace.NFT storage ref"}},"id":5457,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6768:5:16","memberName":"price","nodeType":"MemberAccess","referencedDeclaration":4915,"src":"6753:20:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5452,"name":"_processSaleAndTransferNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5247,"src":"6716:26:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":5458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6716:58:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5459,"nodeType":"ExpressionStatement","src":"6716:58:16"},{"eventCall":{"arguments":[{"id":5461,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5405,"src":"6803:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"baseExpression":{"id":5462,"name":"nfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"6813:4:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$4918_storage_$","typeString":"mapping(uint256 => struct Marketplace.NFT storage ref)"}},"id":5464,"indexExpression":{"id":5463,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5405,"src":"6818:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6813:14:16","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$4918_storage","typeString":"struct Marketplace.NFT storage ref"}},"id":5465,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6828:5:16","memberName":"price","nodeType":"MemberAccess","referencedDeclaration":4915,"src":"6813:20:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5466,"name":"_buyer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5407,"src":"6835:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5460,"name":"PurchaseMade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4968,"src":"6790:12:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,uint256,address)"}},"id":5467,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6790:52:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5468,"nodeType":"EmitStatement","src":"6785:57:16"}]},"functionSelector":"918d407d","id":5470,"implemented":true,"kind":"function","modifiers":[],"name":"acceptOffer","nameLocation":"6271:11:16","nodeType":"FunctionDefinition","parameters":{"id":5408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5405,"mutability":"mutable","name":"_tokenId","nameLocation":"6291:8:16","nodeType":"VariableDeclaration","scope":5470,"src":"6283:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5404,"name":"uint256","nodeType":"ElementaryTypeName","src":"6283:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5407,"mutability":"mutable","name":"_buyer","nameLocation":"6309:6:16","nodeType":"VariableDeclaration","scope":5470,"src":"6301:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5406,"name":"address","nodeType":"ElementaryTypeName","src":"6301:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6282:34:16"},"returnParameters":{"id":5409,"nodeType":"ParameterList","parameters":[],"src":"6326:0:16"},"scope":5733,"src":"6262:622:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5520,"nodeType":"Block","src":"6938:350:16","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":5480,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6987:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6991:6:16","memberName":"sender","nodeType":"MemberAccess","src":"6987:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":5476,"name":"pendingOffers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4938,"src":"6954:13:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_AddressToUintMap_$3847_storage_$","typeString":"mapping(uint256 => struct EnumerableMap.AddressToUintMap storage ref)"}},"id":5478,"indexExpression":{"id":5477,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5472,"src":"6968:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6954:23:16","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage","typeString":"struct EnumerableMap.AddressToUintMap storage ref"}},"id":5479,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6978:8:16","memberName":"contains","nodeType":"MemberAccess","referencedDeclaration":3934,"src":"6954:32:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressToUintMap_$3847_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressToUintMap_$3847_storage_ptr_$","typeString":"function (struct EnumerableMap.AddressToUintMap storage pointer,address) view returns (bool)"}},"id":5482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6954:44:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546865726520617265206e6f2070656e64696e67206f666665727320666f722074686973204e4654","id":5483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7000:42:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_86d9a97fc78e44082cead82c4fb35239cc53982c716c0c9912aab7d6d8bddb44","typeString":"literal_string \"There are no pending offers for this NFT\""},"value":"There are no pending offers for this NFT"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_86d9a97fc78e44082cead82c4fb35239cc53982c716c0c9912aab7d6d8bddb44","typeString":"literal_string \"There are no pending offers for this NFT\""}],"id":5475,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6946:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6946:97:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5485,"nodeType":"ExpressionStatement","src":"6946:97:16"},{"assignments":[5487],"declarations":[{"constant":false,"id":5487,"mutability":"mutable","name":"offerValue","nameLocation":"7059:10:16","nodeType":"VariableDeclaration","scope":5520,"src":"7051:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5486,"name":"uint256","nodeType":"ElementaryTypeName","src":"7051:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5495,"initialValue":{"arguments":[{"expression":{"id":5492,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7100:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7104:6:16","memberName":"sender","nodeType":"MemberAccess","src":"7100:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":5488,"name":"pendingOffers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4938,"src":"7072:13:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_AddressToUintMap_$3847_storage_$","typeString":"mapping(uint256 => struct EnumerableMap.AddressToUintMap storage ref)"}},"id":5490,"indexExpression":{"id":5489,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5472,"src":"7086:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7072:23:16","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage","typeString":"struct EnumerableMap.AddressToUintMap storage ref"}},"id":5491,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7096:3:16","memberName":"get","nodeType":"MemberAccess","referencedDeclaration":4059,"src":"7072:27:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressToUintMap_$3847_storage_ptr_$_t_address_$returns$_t_uint256_$bound_to$_t_struct$_AddressToUintMap_$3847_storage_ptr_$","typeString":"function (struct EnumerableMap.AddressToUintMap storage pointer,address) view returns (uint256)"}},"id":5494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7072:39:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7051:60:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5497,"name":"offerValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5487,"src":"7127:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7140:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7127:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f666665722076616c7565206d7573742062652067726561746572207468616e207a65726f","id":5500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7143:39:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_443b992b59a0be2f5f76238cb514531da1e5dcec7228eacdf8d76be549bc2aec","typeString":"literal_string \"Offer value must be greater than zero\""},"value":"Offer value must be greater than zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_443b992b59a0be2f5f76238cb514531da1e5dcec7228eacdf8d76be549bc2aec","typeString":"literal_string \"Offer value must be greater than zero\""}],"id":5496,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7119:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7119:64:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5502,"nodeType":"ExpressionStatement","src":"7119:64:16"},{"expression":{"arguments":[{"expression":{"id":5507,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7222:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7226:6:16","memberName":"sender","nodeType":"MemberAccess","src":"7222:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":5503,"name":"pendingOffers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4938,"src":"7191:13:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_AddressToUintMap_$3847_storage_$","typeString":"mapping(uint256 => struct EnumerableMap.AddressToUintMap storage ref)"}},"id":5505,"indexExpression":{"id":5504,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5472,"src":"7205:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7191:23:16","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage","typeString":"struct EnumerableMap.AddressToUintMap storage ref"}},"id":5506,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7215:6:16","memberName":"remove","nodeType":"MemberAccess","referencedDeclaration":3907,"src":"7191:30:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressToUintMap_$3847_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressToUintMap_$3847_storage_ptr_$","typeString":"function (struct EnumerableMap.AddressToUintMap storage pointer,address) returns (bool)"}},"id":5509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7191:42:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5510,"nodeType":"ExpressionStatement","src":"7191:42:16"},{"expression":{"arguments":[{"id":5517,"name":"offerValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5487,"src":"7270:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":5513,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7249:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7253:6:16","memberName":"sender","nodeType":"MemberAccess","src":"7249:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5512,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7241:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":5511,"name":"address","nodeType":"ElementaryTypeName","src":"7241:8:16","stateMutability":"payable","typeDescriptions":{}}},"id":5515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7241:19:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":5516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7261:8:16","memberName":"transfer","nodeType":"MemberAccess","src":"7241:28:16","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5518,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7241:40:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5519,"nodeType":"ExpressionStatement","src":"7241:40:16"}]},"functionSelector":"ef706adf","id":5521,"implemented":true,"kind":"function","modifiers":[],"name":"cancelOffer","nameLocation":"6899:11:16","nodeType":"FunctionDefinition","parameters":{"id":5473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5472,"mutability":"mutable","name":"_tokenId","nameLocation":"6919:8:16","nodeType":"VariableDeclaration","scope":5521,"src":"6911:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5471,"name":"uint256","nodeType":"ElementaryTypeName","src":"6911:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6910:18:16"},"returnParameters":{"id":5474,"nodeType":"ParameterList","parameters":[],"src":"6938:0:16"},"scope":5733,"src":"6890:398:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5581,"nodeType":"Block","src":"7402:486:16","statements":[{"expression":{"arguments":[{"arguments":[{"id":5528,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5523,"src":"7432:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5527,"name":"isNFTListed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5732,"src":"7420:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":5529,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7420:21:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e465420646f6573206e6f74206578697374","id":5530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7443:20:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_e403a9d7ffdeca555e754beaddbd9e6f34f997c24c017ab0a30199bbea954853","typeString":"literal_string \"NFT does not exist\""},"value":"NFT does not exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e403a9d7ffdeca555e754beaddbd9e6f34f997c24c017ab0a30199bbea954853","typeString":"literal_string \"NFT does not exist\""}],"id":5526,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7412:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7412:52:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5532,"nodeType":"ExpressionStatement","src":"7412:52:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5534,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7482:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7486:6:16","memberName":"sender","nodeType":"MemberAccess","src":"7482:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"baseExpression":{"id":5536,"name":"nfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"7496:4:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$4918_storage_$","typeString":"mapping(uint256 => struct Marketplace.NFT storage ref)"}},"id":5538,"indexExpression":{"id":5537,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5523,"src":"7501:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7496:14:16","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$4918_storage","typeString":"struct Marketplace.NFT storage ref"}},"id":5539,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7511:6:16","memberName":"seller","nodeType":"MemberAccess","referencedDeclaration":4911,"src":"7496:21:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7482:35:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53656c6c65722063616e6e6f7420627579207468656972206f776e204e4654","id":5541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7519:33:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_f015a052e3954aae4dde9ba7252d65d9b5488f1447a293d1575e62e90e025978","typeString":"literal_string \"Seller cannot buy their own NFT\""},"value":"Seller cannot buy their own NFT"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f015a052e3954aae4dde9ba7252d65d9b5488f1447a293d1575e62e90e025978","typeString":"literal_string \"Seller cannot buy their own NFT\""}],"id":5533,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7474:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7474:79:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5543,"nodeType":"ExpressionStatement","src":"7474:79:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5545,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7571:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7575:5:16","memberName":"value","nodeType":"MemberAccess","src":"7571:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"baseExpression":{"id":5547,"name":"nfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"7584:4:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$4918_storage_$","typeString":"mapping(uint256 => struct Marketplace.NFT storage ref)"}},"id":5549,"indexExpression":{"id":5548,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5523,"src":"7589:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7584:14:16","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$4918_storage","typeString":"struct Marketplace.NFT storage ref"}},"id":5550,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7599:5:16","memberName":"price","nodeType":"MemberAccess","referencedDeclaration":4915,"src":"7584:20:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7571:33:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e742066756e6473","id":5552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7606:20:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_63452317cb6d597bef833f023ed2962a84dbd24c571e27629ed1e3056d6cfd8d","typeString":"literal_string \"Insufficient funds\""},"value":"Insufficient funds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_63452317cb6d597bef833f023ed2962a84dbd24c571e27629ed1e3056d6cfd8d","typeString":"literal_string \"Insufficient funds\""}],"id":5544,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7563:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7563:64:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5554,"nodeType":"ExpressionStatement","src":"7563:64:16"},{"expression":{"id":5561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":5555,"name":"nfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"7638:4:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$4918_storage_$","typeString":"mapping(uint256 => struct Marketplace.NFT storage ref)"}},"id":5557,"indexExpression":{"id":5556,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5523,"src":"7643:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7638:14:16","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$4918_storage","typeString":"struct Marketplace.NFT storage ref"}},"id":5558,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7653:5:16","memberName":"buyer","nodeType":"MemberAccess","referencedDeclaration":4917,"src":"7638:20:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":5559,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7661:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7665:6:16","memberName":"sender","nodeType":"MemberAccess","src":"7661:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7638:33:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5562,"nodeType":"ExpressionStatement","src":"7638:33:16"},{"expression":{"arguments":[{"id":5564,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5523,"src":"7743:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"baseExpression":{"id":5565,"name":"nfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"7753:4:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$4918_storage_$","typeString":"mapping(uint256 => struct Marketplace.NFT storage ref)"}},"id":5567,"indexExpression":{"id":5566,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5523,"src":"7758:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7753:14:16","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$4918_storage","typeString":"struct Marketplace.NFT storage ref"}},"id":5568,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7768:5:16","memberName":"price","nodeType":"MemberAccess","referencedDeclaration":4915,"src":"7753:20:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5563,"name":"_processSaleAndTransferNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5247,"src":"7716:26:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":5569,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7716:58:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5570,"nodeType":"ExpressionStatement","src":"7716:58:16"},{"eventCall":{"arguments":[{"id":5572,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5523,"src":"7803:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"baseExpression":{"id":5573,"name":"nfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"7813:4:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$4918_storage_$","typeString":"mapping(uint256 => struct Marketplace.NFT storage ref)"}},"id":5575,"indexExpression":{"id":5574,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5523,"src":"7818:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7813:14:16","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$4918_storage","typeString":"struct Marketplace.NFT storage ref"}},"id":5576,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7828:5:16","memberName":"price","nodeType":"MemberAccess","referencedDeclaration":4915,"src":"7813:20:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5577,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7835:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7839:6:16","memberName":"sender","nodeType":"MemberAccess","src":"7835:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5571,"name":"PurchaseMade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4968,"src":"7790:12:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,uint256,address)"}},"id":5579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7790:56:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5580,"nodeType":"EmitStatement","src":"7785:61:16"}]},"functionSelector":"51ed8288","id":5582,"implemented":true,"kind":"function","modifiers":[],"name":"buyNFT","nameLocation":"7360:6:16","nodeType":"FunctionDefinition","parameters":{"id":5524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5523,"mutability":"mutable","name":"_tokenId","nameLocation":"7375:8:16","nodeType":"VariableDeclaration","scope":5582,"src":"7367:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5522,"name":"uint256","nodeType":"ElementaryTypeName","src":"7367:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7366:18:16"},"returnParameters":{"id":5525,"nodeType":"ParameterList","parameters":[],"src":"7402:0:16"},"scope":5733,"src":"7351:537:16","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":5645,"nodeType":"Block","src":"7977:335:16","statements":[{"assignments":[5595],"declarations":[{"constant":false,"id":5595,"mutability":"mutable","name":"offers","nameLocation":"8002:6:16","nodeType":"VariableDeclaration","scope":5645,"src":"7987:21:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr","typeString":"struct Marketplace.Offer[]"},"typeName":{"baseType":{"id":5593,"nodeType":"UserDefinedTypeName","pathNode":{"id":5592,"name":"Offer","nameLocations":["7987:5:16"],"nodeType":"IdentifierPath","referencedDeclaration":4923,"src":"7987:5:16"},"referencedDeclaration":4923,"src":"7987:5:16","typeDescriptions":{"typeIdentifier":"t_struct$_Offer_$4923_storage_ptr","typeString":"struct Marketplace.Offer"}},"id":5594,"nodeType":"ArrayTypeName","src":"7987:7:16","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Offer_$4923_storage_$dyn_storage_ptr","typeString":"struct Marketplace.Offer[]"}},"visibility":"internal"}],"id":5606,"initialValue":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":5600,"name":"pendingOffers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4938,"src":"8023:13:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_AddressToUintMap_$3847_storage_$","typeString":"mapping(uint256 => struct EnumerableMap.AddressToUintMap storage ref)"}},"id":5602,"indexExpression":{"id":5601,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5584,"src":"8037:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8023:23:16","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage","typeString":"struct EnumerableMap.AddressToUintMap storage ref"}},"id":5603,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8047:6:16","memberName":"length","nodeType":"MemberAccess","referencedDeclaration":3949,"src":"8023:30:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressToUintMap_$3847_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_AddressToUintMap_$3847_storage_ptr_$","typeString":"function (struct EnumerableMap.AddressToUintMap storage pointer) view returns (uint256)"}},"id":5604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8023:32:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5599,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"8011:11:16","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct Marketplace.Offer memory[] memory)"},"typeName":{"baseType":{"id":5597,"nodeType":"UserDefinedTypeName","pathNode":{"id":5596,"name":"Offer","nameLocations":["8015:5:16"],"nodeType":"IdentifierPath","referencedDeclaration":4923,"src":"8015:5:16"},"referencedDeclaration":4923,"src":"8015:5:16","typeDescriptions":{"typeIdentifier":"t_struct$_Offer_$4923_storage_ptr","typeString":"struct Marketplace.Offer"}},"id":5598,"nodeType":"ArrayTypeName","src":"8015:7:16","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Offer_$4923_storage_$dyn_storage_ptr","typeString":"struct Marketplace.Offer[]"}}},"id":5605,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8011:45:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr","typeString":"struct Marketplace.Offer memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7987:69:16"},{"body":{"id":5641,"nodeType":"Block","src":"8129:154:16","statements":[{"assignments":[5622,5624],"declarations":[{"constant":false,"id":5622,"mutability":"mutable","name":"offerer","nameLocation":"8152:7:16","nodeType":"VariableDeclaration","scope":5641,"src":"8144:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5621,"name":"address","nodeType":"ElementaryTypeName","src":"8144:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5624,"mutability":"mutable","name":"value","nameLocation":"8169:5:16","nodeType":"VariableDeclaration","scope":5641,"src":"8161:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5623,"name":"uint256","nodeType":"ElementaryTypeName","src":"8161:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5631,"initialValue":{"arguments":[{"id":5629,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5608,"src":"8205:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":5625,"name":"pendingOffers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4938,"src":"8178:13:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_AddressToUintMap_$3847_storage_$","typeString":"mapping(uint256 => struct EnumerableMap.AddressToUintMap storage ref)"}},"id":5627,"indexExpression":{"id":5626,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5584,"src":"8192:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8178:23:16","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage","typeString":"struct EnumerableMap.AddressToUintMap storage ref"}},"id":5628,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8202:2:16","memberName":"at","nodeType":"MemberAccess","referencedDeclaration":3989,"src":"8178:26:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressToUintMap_$3847_storage_ptr_$_t_uint256_$returns$_t_address_$_t_uint256_$bound_to$_t_struct$_AddressToUintMap_$3847_storage_ptr_$","typeString":"function (struct EnumerableMap.AddressToUintMap storage pointer,uint256) view returns (address,uint256)"}},"id":5630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8178:29:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"8143:64:16"},{"expression":{"id":5639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5632,"name":"offers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5595,"src":"8221:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr","typeString":"struct Marketplace.Offer memory[] memory"}},"id":5634,"indexExpression":{"id":5633,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5608,"src":"8228:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8221:9:16","typeDescriptions":{"typeIdentifier":"t_struct$_Offer_$4923_memory_ptr","typeString":"struct Marketplace.Offer memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5636,"name":"offerer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5622,"src":"8249:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5637,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5624,"src":"8265:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5635,"name":"Offer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4923,"src":"8233:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Offer_$4923_storage_ptr_$","typeString":"type(struct Marketplace.Offer storage pointer)"}},"id":5638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["8240:7:16","8258:5:16"],"names":["offerer","value"],"nodeType":"FunctionCall","src":"8233:39:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Offer_$4923_memory_ptr","typeString":"struct Marketplace.Offer memory"}},"src":"8221:51:16","typeDescriptions":{"typeIdentifier":"t_struct$_Offer_$4923_memory_ptr","typeString":"struct Marketplace.Offer memory"}},"id":5640,"nodeType":"ExpressionStatement","src":"8221:51:16"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5611,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5608,"src":"8086:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":5612,"name":"pendingOffers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4938,"src":"8090:13:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_AddressToUintMap_$3847_storage_$","typeString":"mapping(uint256 => struct EnumerableMap.AddressToUintMap storage ref)"}},"id":5614,"indexExpression":{"id":5613,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5584,"src":"8104:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8090:23:16","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$3847_storage","typeString":"struct EnumerableMap.AddressToUintMap storage ref"}},"id":5615,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8114:6:16","memberName":"length","nodeType":"MemberAccess","referencedDeclaration":3949,"src":"8090:30:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressToUintMap_$3847_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_AddressToUintMap_$3847_storage_ptr_$","typeString":"function (struct EnumerableMap.AddressToUintMap storage pointer) view returns (uint256)"}},"id":5616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8090:32:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8086:36:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5642,"initializationExpression":{"assignments":[5608],"declarations":[{"constant":false,"id":5608,"mutability":"mutable","name":"i","nameLocation":"8079:1:16","nodeType":"VariableDeclaration","scope":5642,"src":"8071:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5607,"name":"uint256","nodeType":"ElementaryTypeName","src":"8071:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5610,"initialValue":{"hexValue":"30","id":5609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8083:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8071:13:16"},"loopExpression":{"expression":{"id":5619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8124:3:16","subExpression":{"id":5618,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5608,"src":"8124:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5620,"nodeType":"ExpressionStatement","src":"8124:3:16"},"nodeType":"ForStatement","src":"8066:217:16"},{"expression":{"id":5643,"name":"offers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5595,"src":"8299:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr","typeString":"struct Marketplace.Offer memory[] memory"}},"functionReturnParameters":5590,"id":5644,"nodeType":"Return","src":"8292:13:16"}]},"functionSelector":"50dc1867","id":5646,"implemented":true,"kind":"function","modifiers":[],"name":"getPendingOffers","nameLocation":"7903:16:16","nodeType":"FunctionDefinition","parameters":{"id":5585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5584,"mutability":"mutable","name":"_tokenId","nameLocation":"7928:8:16","nodeType":"VariableDeclaration","scope":5646,"src":"7920:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5583,"name":"uint256","nodeType":"ElementaryTypeName","src":"7920:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7919:18:16"},"returnParameters":{"id":5590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5589,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5646,"src":"7961:14:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr","typeString":"struct Marketplace.Offer[]"},"typeName":{"baseType":{"id":5587,"nodeType":"UserDefinedTypeName","pathNode":{"id":5586,"name":"Offer","nameLocations":["7961:5:16"],"nodeType":"IdentifierPath","referencedDeclaration":4923,"src":"7961:5:16"},"referencedDeclaration":4923,"src":"7961:5:16","typeDescriptions":{"typeIdentifier":"t_struct$_Offer_$4923_storage_ptr","typeString":"struct Marketplace.Offer"}},"id":5588,"nodeType":"ArrayTypeName","src":"7961:7:16","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Offer_$4923_storage_$dyn_storage_ptr","typeString":"struct Marketplace.Offer[]"}},"visibility":"internal"}],"src":"7960:16:16"},"scope":5733,"src":"7894:418:16","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5698,"nodeType":"Block","src":"8401:235:16","statements":[{"assignments":[5658],"declarations":[{"constant":false,"id":5658,"mutability":"mutable","name":"result","nameLocation":"8426:6:16","nodeType":"VariableDeclaration","scope":5698,"src":"8409:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5656,"name":"uint256","nodeType":"ElementaryTypeName","src":"8409:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5657,"nodeType":"ArrayTypeName","src":"8409:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":5668,"initialValue":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":5662,"name":"sellerToNfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4933,"src":"8449:12:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UintSet_$4762_storage_$","typeString":"mapping(address => struct EnumerableSet.UintSet storage ref)"}},"id":5664,"indexExpression":{"id":5663,"name":"_seller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5648,"src":"8462:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8449:21:16","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4762_storage","typeString":"struct EnumerableSet.UintSet storage ref"}},"id":5665,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8471:6:16","memberName":"length","nodeType":"MemberAccess","referencedDeclaration":4840,"src":"8449:28:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_UintSet_$4762_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_UintSet_$4762_storage_ptr_$","typeString":"function (struct EnumerableSet.UintSet storage pointer) view returns (uint256)"}},"id":5666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8449:30:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5661,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"8435:13:16","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":5659,"name":"uint256","nodeType":"ElementaryTypeName","src":"8439:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5660,"nodeType":"ArrayTypeName","src":"8439:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":5667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8435:45:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"8409:71:16"},{"body":{"id":5694,"nodeType":"Block","src":"8549:60:16","statements":[{"expression":{"id":5692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5683,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5658,"src":"8561:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5685,"indexExpression":{"id":5684,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5670,"src":"8568:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8561:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5690,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5670,"src":"8598:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":5686,"name":"sellerToNfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4933,"src":"8573:12:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UintSet_$4762_storage_$","typeString":"mapping(address => struct EnumerableSet.UintSet storage ref)"}},"id":5688,"indexExpression":{"id":5687,"name":"_seller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5648,"src":"8586:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8573:21:16","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4762_storage","typeString":"struct EnumerableSet.UintSet storage ref"}},"id":5689,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8595:2:16","memberName":"at","nodeType":"MemberAccess","referencedDeclaration":4861,"src":"8573:24:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_UintSet_$4762_storage_ptr_$_t_uint256_$returns$_t_uint256_$bound_to$_t_struct$_UintSet_$4762_storage_ptr_$","typeString":"function (struct EnumerableSet.UintSet storage pointer,uint256) view returns (uint256)"}},"id":5691,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8573:27:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8561:39:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5693,"nodeType":"ExpressionStatement","src":"8561:39:16"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5673,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5670,"src":"8508:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":5674,"name":"sellerToNfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4933,"src":"8512:12:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UintSet_$4762_storage_$","typeString":"mapping(address => struct EnumerableSet.UintSet storage ref)"}},"id":5676,"indexExpression":{"id":5675,"name":"_seller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5648,"src":"8525:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8512:21:16","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4762_storage","typeString":"struct EnumerableSet.UintSet storage ref"}},"id":5677,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8534:6:16","memberName":"length","nodeType":"MemberAccess","referencedDeclaration":4840,"src":"8512:28:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_UintSet_$4762_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_UintSet_$4762_storage_ptr_$","typeString":"function (struct EnumerableSet.UintSet storage pointer) view returns (uint256)"}},"id":5678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8512:30:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8508:34:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5695,"initializationExpression":{"assignments":[5670],"declarations":[{"constant":false,"id":5670,"mutability":"mutable","name":"i","nameLocation":"8501:1:16","nodeType":"VariableDeclaration","scope":5695,"src":"8493:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5669,"name":"uint256","nodeType":"ElementaryTypeName","src":"8493:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5672,"initialValue":{"hexValue":"30","id":5671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8505:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8493:13:16"},"loopExpression":{"expression":{"id":5681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8544:3:16","subExpression":{"id":5680,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5670,"src":"8544:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5682,"nodeType":"ExpressionStatement","src":"8544:3:16"},"nodeType":"ForStatement","src":"8488:121:16"},{"expression":{"id":5696,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5658,"src":"8623:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":5653,"id":5697,"nodeType":"Return","src":"8616:13:16"}]},"functionSelector":"09de4e06","id":5699,"implemented":true,"kind":"function","modifiers":[],"name":"getNFTsBySeller","nameLocation":"8327:15:16","nodeType":"FunctionDefinition","parameters":{"id":5649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5648,"mutability":"mutable","name":"_seller","nameLocation":"8351:7:16","nodeType":"VariableDeclaration","scope":5699,"src":"8343:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5647,"name":"address","nodeType":"ElementaryTypeName","src":"8343:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8342:17:16"},"returnParameters":{"id":5653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5652,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5699,"src":"8383:16:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5650,"name":"uint256","nodeType":"ElementaryTypeName","src":"8383:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5651,"nodeType":"ArrayTypeName","src":"8383:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"8382:18:16"},"scope":5733,"src":"8318:318:16","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5716,"nodeType":"Block","src":"8713:70:16","statements":[{"expression":{"condition":{"arguments":[{"id":5707,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5701,"src":"8740:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5706,"name":"isNFTListed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5732,"src":"8728:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":5708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8728:21:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":5713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8775:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":5714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8728:48:16","trueExpression":{"expression":{"baseExpression":{"id":5709,"name":"nfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"8752:4:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$4918_storage_$","typeString":"mapping(uint256 => struct Marketplace.NFT storage ref)"}},"id":5711,"indexExpression":{"id":5710,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5701,"src":"8757:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8752:14:16","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$4918_storage","typeString":"struct Marketplace.NFT storage ref"}},"id":5712,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8767:5:16","memberName":"price","nodeType":"MemberAccess","referencedDeclaration":4915,"src":"8752:20:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5705,"id":5715,"nodeType":"Return","src":"8721:55:16"}]},"functionSelector":"92976179","id":5717,"implemented":true,"kind":"function","modifiers":[],"name":"getNFTPrice","nameLocation":"8651:11:16","nodeType":"FunctionDefinition","parameters":{"id":5702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5701,"mutability":"mutable","name":"_tokenId","nameLocation":"8671:8:16","nodeType":"VariableDeclaration","scope":5717,"src":"8663:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5700,"name":"uint256","nodeType":"ElementaryTypeName","src":"8663:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8662:18:16"},"returnParameters":{"id":5705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5704,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5717,"src":"8704:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5703,"name":"uint256","nodeType":"ElementaryTypeName","src":"8704:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8703:9:16"},"scope":5733,"src":"8642:141:16","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5731,"nodeType":"Block","src":"8857:48:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":5724,"name":"nfts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"8872:4:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$4918_storage_$","typeString":"mapping(uint256 => struct Marketplace.NFT storage ref)"}},"id":5726,"indexExpression":{"id":5725,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5719,"src":"8877:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8872:14:16","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$4918_storage","typeString":"struct Marketplace.NFT storage ref"}},"id":5727,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8887:7:16","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":4913,"src":"8872:22:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8897:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8872:26:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5723,"id":5730,"nodeType":"Return","src":"8865:33:16"}]},"id":5732,"implemented":true,"kind":"function","modifiers":[],"name":"isNFTListed","nameLocation":"8798:11:16","nodeType":"FunctionDefinition","parameters":{"id":5720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5719,"mutability":"mutable","name":"_tokenId","nameLocation":"8818:8:16","nodeType":"VariableDeclaration","scope":5732,"src":"8810:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5718,"name":"uint256","nodeType":"ElementaryTypeName","src":"8810:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8809:18:16"},"returnParameters":{"id":5723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5722,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5732,"src":"8851:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5721,"name":"bool","nodeType":"ElementaryTypeName","src":"8851:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8850:6:16"},"scope":5733,"src":"8789:116:16","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":5734,"src":"281:8627:16","usedErrors":[]}],"src":"39:8870:16"},"id":16},"contracts/Pixel4te.sol":{"ast":{"absolutePath":"contracts/Pixel4te.sol","exportedSymbols":{"Address":[1673],"Context":[1695],"Counters":[1769],"ERC165":[1968],"ERC721":[1057],"ERC721URIStorage":[1316],"IERC165":[1980],"IERC721":[1173],"IERC721Metadata":[1343],"IERC721Receiver":[1191],"Math":[2845],"Ownable":[112],"Pixel4te":[6006],"Strings":[1944]},"id":6007,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":5735,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"39:23:17"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","file":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","id":5736,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6007,"sourceUnit":1317,"src":"64:78:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Counters.sol","file":"@openzeppelin/contracts/utils/Counters.sol","id":5737,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6007,"sourceUnit":1770,"src":"143:52:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":5738,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6007,"sourceUnit":113,"src":"196:52:17","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5739,"name":"ERC721URIStorage","nameLocations":["271:16:17"],"nodeType":"IdentifierPath","referencedDeclaration":1316,"src":"271:16:17"},"id":5740,"nodeType":"InheritanceSpecifier","src":"271:16:17"},{"baseName":{"id":5741,"name":"Ownable","nameLocations":["289:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":112,"src":"289:7:17"},"id":5742,"nodeType":"InheritanceSpecifier","src":"289:7:17"}],"canonicalName":"Pixel4te","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":6006,"linearizedBaseContracts":[6006,112,1316,1057,1343,1173,1968,1980,1695],"name":"Pixel4te","nameLocation":"259:8:17","nodeType":"ContractDefinition","nodes":[{"global":false,"id":5746,"libraryName":{"id":5743,"name":"Counters","nameLocations":["309:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":1769,"src":"309:8:17"},"nodeType":"UsingForDirective","src":"303:36:17","typeName":{"id":5745,"nodeType":"UserDefinedTypeName","pathNode":{"id":5744,"name":"Counters.Counter","nameLocations":["322:8:17","331:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":1701,"src":"322:16:17"},"referencedDeclaration":1701,"src":"322:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1701_storage_ptr","typeString":"struct Counters.Counter"}}},{"constant":false,"id":5749,"mutability":"mutable","name":"_tokenIds","nameLocation":"369:9:17","nodeType":"VariableDeclaration","scope":6006,"src":"344:34:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1701_storage","typeString":"struct Counters.Counter"},"typeName":{"id":5748,"nodeType":"UserDefinedTypeName","pathNode":{"id":5747,"name":"Counters.Counter","nameLocations":["344:8:17","353:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":1701,"src":"344:16:17"},"referencedDeclaration":1701,"src":"344:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1701_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"private"},{"constant":false,"id":5753,"mutability":"mutable","name":"_mintedBy","nameLocation":"420:9:17","nodeType":"VariableDeclaration","scope":6006,"src":"384:45:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":5752,"keyType":{"id":5750,"name":"uint256","nodeType":"ElementaryTypeName","src":"392:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"384:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":5751,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":5757,"mutability":"mutable","name":"_royaltiesPercent","nameLocation":"471:17:17","nodeType":"VariableDeclaration","scope":6006,"src":"435:53:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":5756,"keyType":{"id":5754,"name":"uint256","nodeType":"ElementaryTypeName","src":"443:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"435:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueType":{"id":5755,"name":"uint256","nodeType":"ElementaryTypeName","src":"454:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"functionSelector":"13966db5","id":5759,"mutability":"mutable","name":"mintFee","nameLocation":"510:7:17","nodeType":"VariableDeclaration","scope":6006,"src":"495:22:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5758,"name":"uint256","nodeType":"ElementaryTypeName","src":"495:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"body":{"id":5770,"nodeType":"Block","src":"564:80:17","statements":[{"expression":{"id":5768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5766,"name":"mintFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5759,"src":"574:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"302e3031","id":5767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"584:10:17","subdenomination":"ether","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"value":"0.01"},"src":"574:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5769,"nodeType":"ExpressionStatement","src":"574:20:17"}]},"id":5771,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"506978656c347465","id":5762,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"545:10:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_c02199754524e93dc89622f4d24030251c7ad31f88d1602e307b0f081faac7e3","typeString":"literal_string \"Pixel4te\""},"value":"Pixel4te"},{"hexValue":"504958","id":5763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"557:5:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_270d34d9d3e1eb33598b8572863650caff25e5f6a9163f1ef11f061bde28d658","typeString":"literal_string \"PIX\""},"value":"PIX"}],"id":5764,"kind":"baseConstructorSpecifier","modifierName":{"id":5761,"name":"ERC721","nameLocations":["538:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":1057,"src":"538:6:17"},"nodeType":"ModifierInvocation","src":"538:25:17"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5760,"nodeType":"ParameterList","parameters":[],"src":"535:2:17"},"returnParameters":{"id":5765,"nodeType":"ParameterList","parameters":[],"src":"564:0:17"},"scope":6006,"src":"524:120:17","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5836,"nodeType":"Block","src":"791:546:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5783,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"809:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"813:5:17","memberName":"value","nodeType":"MemberAccess","src":"809:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5785,"name":"mintFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5759,"src":"822:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"809:20:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e74207061796d656e74","id":5787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"831:22:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_8d1b93b434e468e73514a2449ae955e822f73dcdf924bb4553be247ebca8755e","typeString":"literal_string \"Insufficient payment\""},"value":"Insufficient payment"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8d1b93b434e468e73514a2449ae955e822f73dcdf924bb4553be247ebca8755e","typeString":"literal_string \"Insufficient payment\""}],"id":5782,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"801:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"801:53:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5789,"nodeType":"ExpressionStatement","src":"801:53:17"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5790,"name":"_tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"902:9:17","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1701_storage","typeString":"struct Counters.Counter storage ref"}},"id":5792,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"912:9:17","memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":1727,"src":"902:19:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$1701_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$1701_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer)"}},"id":5793,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"902:21:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5794,"nodeType":"ExpressionStatement","src":"902:21:17"},{"assignments":[5796],"declarations":[{"constant":false,"id":5796,"mutability":"mutable","name":"newItemId","nameLocation":"942:9:17","nodeType":"VariableDeclaration","scope":5836,"src":"934:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5795,"name":"uint256","nodeType":"ElementaryTypeName","src":"934:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5800,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5797,"name":"_tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"954:9:17","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1701_storage","typeString":"struct Counters.Counter storage ref"}},"id":5798,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"964:7:17","memberName":"current","nodeType":"MemberAccess","referencedDeclaration":1713,"src":"954:17:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$1701_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$1701_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer) view returns (uint256)"}},"id":5799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"954:19:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"934:39:17"},{"expression":{"arguments":[{"id":5802,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5773,"src":"989:2:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5803,"name":"newItemId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5796,"src":"993:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5801,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"983:5:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":5804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"983:20:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5805,"nodeType":"ExpressionStatement","src":"983:20:17"},{"expression":{"arguments":[{"id":5807,"name":"newItemId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5796,"src":"1026:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5808,"name":"tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5777,"src":"1037:8:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5806,"name":"_setTokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1285,"src":"1013:12:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":5809,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1013:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5810,"nodeType":"ExpressionStatement","src":"1013:33:17"},{"expression":{"id":5816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5811,"name":"_mintedBy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5753,"src":"1056:9:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":5813,"indexExpression":{"id":5812,"name":"newItemId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5796,"src":"1066:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1056:20:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":5814,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1079:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1083:6:17","memberName":"sender","nodeType":"MemberAccess","src":"1079:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1056:33:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5817,"nodeType":"ExpressionStatement","src":"1056:33:17"},{"expression":{"id":5822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5818,"name":"_royaltiesPercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5757,"src":"1151:17:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5820,"indexExpression":{"id":5819,"name":"newItemId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5796,"src":"1169:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1151:28:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5821,"name":"royaltiesPercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5775,"src":"1182:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1151:47:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5823,"nodeType":"ExpressionStatement","src":"1151:47:17"},{"expression":{"arguments":[{"expression":{"id":5830,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1293:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1297:5:17","memberName":"value","nodeType":"MemberAccess","src":"1293:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":5826,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"1275:5:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1275:7:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5825,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1267:8:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":5824,"name":"address","nodeType":"ElementaryTypeName","src":"1267:8:17","stateMutability":"payable","typeDescriptions":{}}},"id":5828,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1267:16:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":5829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1284:8:17","memberName":"transfer","nodeType":"MemberAccess","src":"1267:25:17","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5832,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1267:36:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5833,"nodeType":"ExpressionStatement","src":"1267:36:17"},{"expression":{"id":5834,"name":"newItemId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5796,"src":"1321:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5781,"id":5835,"nodeType":"Return","src":"1314:16:17"}]},"functionSelector":"8337afdc","id":5837,"implemented":true,"kind":"function","modifiers":[],"name":"mintItem","nameLocation":"659:8:17","nodeType":"FunctionDefinition","parameters":{"id":5778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5773,"mutability":"mutable","name":"to","nameLocation":"676:2:17","nodeType":"VariableDeclaration","scope":5837,"src":"668:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5772,"name":"address","nodeType":"ElementaryTypeName","src":"668:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5775,"mutability":"mutable","name":"royaltiesPercent","nameLocation":"688:16:17","nodeType":"VariableDeclaration","scope":5837,"src":"680:24:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5774,"name":"uint256","nodeType":"ElementaryTypeName","src":"680:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5777,"mutability":"mutable","name":"tokenURI","nameLocation":"720:8:17","nodeType":"VariableDeclaration","scope":5837,"src":"706:22:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5776,"name":"string","nodeType":"ElementaryTypeName","src":"706:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"667:62:17"},"returnParameters":{"id":5781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5780,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5837,"src":"778:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5779,"name":"uint256","nodeType":"ElementaryTypeName","src":"778:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"777:9:17"},"scope":6006,"src":"650:687:17","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":5863,"nodeType":"Block","src":"1414:150:17","statements":[{"assignments":[5845],"declarations":[{"constant":false,"id":5845,"mutability":"mutable","name":"itemOwner","nameLocation":"1432:9:17","nodeType":"VariableDeclaration","scope":5863,"src":"1424:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5844,"name":"address","nodeType":"ElementaryTypeName","src":"1424:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5849,"initialValue":{"arguments":[{"id":5847,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5839,"src":"1452:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5846,"name":"ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"1444:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":5848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1444:16:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1424:36:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5851,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1478:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1482:6:17","memberName":"sender","nodeType":"MemberAccess","src":"1478:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5853,"name":"itemOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5845,"src":"1492:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1478:23:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"554e415554484f52495a4544","id":5855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1503:14:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_269df367cd41cace5897a935d0e0858fe4543b5619d45e09af6b124c1bb3d528","typeString":"literal_string \"UNAUTHORIZED\""},"value":"UNAUTHORIZED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_269df367cd41cace5897a935d0e0858fe4543b5619d45e09af6b124c1bb3d528","typeString":"literal_string \"UNAUTHORIZED\""}],"id":5850,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1470:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1470:48:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5857,"nodeType":"ExpressionStatement","src":"1470:48:17"},{"expression":{"arguments":[{"id":5859,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5839,"src":"1541:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5860,"name":"newURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5841,"src":"1550:6:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5858,"name":"_setTokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1285,"src":"1528:12:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":5861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1528:29:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5862,"nodeType":"ExpressionStatement","src":"1528:29:17"}]},"functionSelector":"862440e2","id":5864,"implemented":true,"kind":"function","modifiers":[],"name":"setURI","nameLocation":"1352:6:17","nodeType":"FunctionDefinition","parameters":{"id":5842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5839,"mutability":"mutable","name":"tokenId","nameLocation":"1364:7:17","nodeType":"VariableDeclaration","scope":5864,"src":"1359:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5838,"name":"uint","nodeType":"ElementaryTypeName","src":"1359:4:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5841,"mutability":"mutable","name":"newURI","nameLocation":"1387:6:17","nodeType":"VariableDeclaration","scope":5864,"src":"1373:20:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5840,"name":"string","nodeType":"ElementaryTypeName","src":"1373:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1358:36:17"},"returnParameters":{"id":5843,"nodeType":"ParameterList","parameters":[],"src":"1414:0:17"},"scope":6006,"src":"1343:221:17","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5873,"nodeType":"Block","src":"1651:43:17","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5869,"name":"_tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"1668:9:17","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1701_storage","typeString":"struct Counters.Counter storage ref"}},"id":5870,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1678:7:17","memberName":"current","nodeType":"MemberAccess","referencedDeclaration":1713,"src":"1668:17:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$1701_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$1701_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer) view returns (uint256)"}},"id":5871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1668:19:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5868,"id":5872,"nodeType":"Return","src":"1661:26:17"}]},"functionSelector":"fdf2d21e","id":5874,"implemented":true,"kind":"function","modifiers":[],"name":"currentItem","nameLocation":"1579:11:17","nodeType":"FunctionDefinition","parameters":{"id":5865,"nodeType":"ParameterList","parameters":[],"src":"1590:2:17"},"returnParameters":{"id":5868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5867,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5874,"src":"1638:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5866,"name":"uint256","nodeType":"ElementaryTypeName","src":"1638:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1637:9:17"},"scope":6006,"src":"1570:124:17","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5944,"nodeType":"Block","src":"1771:362:17","statements":[{"assignments":[5883],"declarations":[{"constant":false,"id":5883,"mutability":"mutable","name":"balance","nameLocation":"1794:7:17","nodeType":"VariableDeclaration","scope":5944,"src":"1786:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5882,"name":"uint256","nodeType":"ElementaryTypeName","src":"1786:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5887,"initialValue":{"arguments":[{"id":5885,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5876,"src":"1814:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5884,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":230,"src":"1804:9:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":5886,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1804:16:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1786:34:17"},{"assignments":[5892],"declarations":[{"constant":false,"id":5892,"mutability":"mutable","name":"items","nameLocation":"1845:5:17","nodeType":"VariableDeclaration","scope":5944,"src":"1828:22:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5890,"name":"uint256","nodeType":"ElementaryTypeName","src":"1828:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5891,"nodeType":"ArrayTypeName","src":"1828:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":5898,"initialValue":{"arguments":[{"id":5896,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5883,"src":"1867:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5895,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1853:13:17","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":5893,"name":"uint256","nodeType":"ElementaryTypeName","src":"1857:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5894,"nodeType":"ArrayTypeName","src":"1857:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":5897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1853:22:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"1828:47:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5899,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5883,"src":"1887:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":5902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1906:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5901,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1898:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5900,"name":"uint256","nodeType":"ElementaryTypeName","src":"1898:7:17","typeDescriptions":{}}},"id":5903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1898:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1887:21:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5908,"nodeType":"IfStatement","src":"1883:58:17","trueBody":{"id":5907,"nodeType":"Block","src":"1910:31:17","statements":[{"expression":{"id":5905,"name":"items","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5892,"src":"1927:5:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":5881,"id":5906,"nodeType":"Return","src":"1920:12:17"}]}},{"assignments":[5910],"declarations":[{"constant":false,"id":5910,"mutability":"mutable","name":"j","nameLocation":"1956:1:17","nodeType":"VariableDeclaration","scope":5944,"src":"1948:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5909,"name":"uint256","nodeType":"ElementaryTypeName","src":"1948:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5912,"initialValue":{"hexValue":"30","id":5911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1960:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1948:13:17"},{"body":{"id":5940,"nodeType":"Block","src":"2014:93:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5925,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5914,"src":"2036:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5924,"name":"ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"2028:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":5926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2028:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5927,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5876,"src":"2042:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2028:19:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5939,"nodeType":"IfStatement","src":"2024:75:17","trueBody":{"id":5938,"nodeType":"Block","src":"2049:50:17","statements":[{"expression":{"id":5933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5929,"name":"items","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5892,"src":"2061:5:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5931,"indexExpression":{"id":5930,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5910,"src":"2067:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2061:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5932,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5914,"src":"2072:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2061:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5934,"nodeType":"ExpressionStatement","src":"2061:12:17"},{"expression":{"id":5936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2085:3:17","subExpression":{"id":5935,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5910,"src":"2085:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5937,"nodeType":"ExpressionStatement","src":"2085:3:17"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5917,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5914,"src":"1989:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5918,"name":"currentItem","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5874,"src":"1994:11:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":5919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1994:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1989:18:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5941,"initializationExpression":{"assignments":[5914],"declarations":[{"constant":false,"id":5914,"mutability":"mutable","name":"i","nameLocation":"1982:1:17","nodeType":"VariableDeclaration","scope":5941,"src":"1974:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5913,"name":"uint256","nodeType":"ElementaryTypeName","src":"1974:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5916,"initialValue":{"hexValue":"31","id":5915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1986:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"VariableDeclarationStatement","src":"1974:13:17"},"loopExpression":{"expression":{"id":5922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2009:3:17","subExpression":{"id":5921,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5914,"src":"2009:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5923,"nodeType":"ExpressionStatement","src":"2009:3:17"},"nodeType":"ForStatement","src":"1969:138:17"},{"expression":{"id":5942,"name":"items","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5892,"src":"2121:5:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":5881,"id":5943,"nodeType":"Return","src":"2114:12:17"}]},"functionSelector":"7231a876","id":5945,"implemented":true,"kind":"function","modifiers":[],"name":"itemsOf","nameLocation":"1709:7:17","nodeType":"FunctionDefinition","parameters":{"id":5877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5876,"mutability":"mutable","name":"owner","nameLocation":"1725:5:17","nodeType":"VariableDeclaration","scope":5945,"src":"1717:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5875,"name":"address","nodeType":"ElementaryTypeName","src":"1717:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1716:15:17"},"returnParameters":{"id":5881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5880,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5945,"src":"1753:16:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5878,"name":"uint256","nodeType":"ElementaryTypeName","src":"1753:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5879,"nodeType":"ArrayTypeName","src":"1753:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1752:18:17"},"scope":6006,"src":"1700:433:17","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5956,"nodeType":"Block","src":"2195:33:17","statements":[{"expression":{"id":5954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5952,"name":"mintFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5759,"src":"2205:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5953,"name":"newFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5947,"src":"2215:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2205:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5955,"nodeType":"ExpressionStatement","src":"2205:16:17"}]},"functionSelector":"207e6161","id":5957,"implemented":true,"kind":"function","modifiers":[{"id":5950,"kind":"modifierInvocation","modifierName":{"id":5949,"name":"onlyOwner","nameLocations":["2185:9:17"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2185:9:17"},"nodeType":"ModifierInvocation","src":"2185:9:17"}],"name":"mintFeeUpdate","nameLocation":"2148:13:17","nodeType":"FunctionDefinition","parameters":{"id":5948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5947,"mutability":"mutable","name":"newFee","nameLocation":"2170:6:17","nodeType":"VariableDeclaration","scope":5957,"src":"2162:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5946,"name":"uint256","nodeType":"ElementaryTypeName","src":"2162:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2161:16:17"},"returnParameters":{"id":5951,"nodeType":"ParameterList","parameters":[],"src":"2195:0:17"},"scope":6006,"src":"2139:89:17","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5968,"nodeType":"Block","src":"2300:42:17","statements":[{"expression":{"baseExpression":{"id":5964,"name":"_mintedBy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5753,"src":"2317:9:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":5966,"indexExpression":{"id":5965,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5959,"src":"2327:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2317:18:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5963,"id":5967,"nodeType":"Return","src":"2310:25:17"}]},"functionSelector":"5b7121f8","id":5969,"implemented":true,"kind":"function","modifiers":[],"name":"getMinter","nameLocation":"2243:9:17","nodeType":"FunctionDefinition","parameters":{"id":5960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5959,"mutability":"mutable","name":"tokenId","nameLocation":"2261:7:17","nodeType":"VariableDeclaration","scope":5969,"src":"2253:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5958,"name":"uint256","nodeType":"ElementaryTypeName","src":"2253:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2252:17:17"},"returnParameters":{"id":5963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5962,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5969,"src":"2291:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5961,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2290:9:17"},"scope":6006,"src":"2234:108:17","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5992,"nodeType":"Block","src":"2418:120:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5977,"name":"_mintedBy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5753,"src":"2436:9:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":5979,"indexExpression":{"id":5978,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5971,"src":"2446:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2436:18:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5980,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2458:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2462:6:17","memberName":"sender","nodeType":"MemberAccess","src":"2458:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2436:32:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e617574686f72697a6564","id":5983,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2470:14:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_1b2638459828301e8cd6c7c02856073bacf975379e0867f689bb14feacb780c5","typeString":"literal_string \"Unauthorized\""},"value":"Unauthorized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1b2638459828301e8cd6c7c02856073bacf975379e0867f689bb14feacb780c5","typeString":"literal_string \"Unauthorized\""}],"id":5976,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2428:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2428:57:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5985,"nodeType":"ExpressionStatement","src":"2428:57:17"},{"expression":{"id":5990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5986,"name":"_royaltiesPercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5757,"src":"2495:17:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5988,"indexExpression":{"id":5987,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5971,"src":"2513:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2495:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5989,"name":"percent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5973,"src":"2524:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2495:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5991,"nodeType":"ExpressionStatement","src":"2495:36:17"}]},"functionSelector":"889576e9","id":5993,"implemented":true,"kind":"function","modifiers":[],"name":"setRoyaltiesPercent","nameLocation":"2357:19:17","nodeType":"FunctionDefinition","parameters":{"id":5974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5971,"mutability":"mutable","name":"tokenId","nameLocation":"2385:7:17","nodeType":"VariableDeclaration","scope":5993,"src":"2377:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5970,"name":"uint256","nodeType":"ElementaryTypeName","src":"2377:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5973,"mutability":"mutable","name":"percent","nameLocation":"2402:7:17","nodeType":"VariableDeclaration","scope":5993,"src":"2394:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5972,"name":"uint256","nodeType":"ElementaryTypeName","src":"2394:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2376:34:17"},"returnParameters":{"id":5975,"nodeType":"ParameterList","parameters":[],"src":"2418:0:17"},"scope":6006,"src":"2348:190:17","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6004,"nodeType":"Block","src":"2620:50:17","statements":[{"expression":{"baseExpression":{"id":6000,"name":"_royaltiesPercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5757,"src":"2637:17:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":6002,"indexExpression":{"id":6001,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5995,"src":"2655:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2637:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5999,"id":6003,"nodeType":"Return","src":"2630:33:17"}]},"functionSelector":"9a22d0ea","id":6005,"implemented":true,"kind":"function","modifiers":[],"name":"getRoyaltiesPercent","nameLocation":"2553:19:17","nodeType":"FunctionDefinition","parameters":{"id":5996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5995,"mutability":"mutable","name":"tokenId","nameLocation":"2581:7:17","nodeType":"VariableDeclaration","scope":6005,"src":"2573:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5994,"name":"uint256","nodeType":"ElementaryTypeName","src":"2573:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2572:17:17"},"returnParameters":{"id":5999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5998,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6005,"src":"2611:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5997,"name":"uint256","nodeType":"ElementaryTypeName","src":"2611:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2610:9:17"},"scope":6006,"src":"2544:126:17","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":6007,"src":"250:2422:17","usedErrors":[]}],"src":"39:2634:17"},"id":17}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ERC721":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"constructor":{"details":"Initializes the contract by setting a `name` and a `symbol` to the token collection."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_175":{"entryPoint":null,"id":175,"parameterSlots":2,"returnSlots":0},"abi_decode_available_length_t_string_memory_ptr_fromMemory":{"entryPoint":376,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_string_memory_ptr_fromMemory":{"entryPoint":451,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":502,"id":null,"parameterSlots":2,"returnSlots":2},"allocate_memory":{"entryPoint":247,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":99,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":278,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":746,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":635,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":1067,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_uint256":{"entryPoint":882,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":1028,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":902,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":1222,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":332,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":767,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":693,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":1192,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":193,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":892,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":1160,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x22":{"entryPoint":646,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":146,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":942,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":119,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":124,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":114,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":109,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":129,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":783,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":1147,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":1000,"id":null,"parameterSlots":2,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":796,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":952,"id":null,"parameterSlots":3,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":995,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:8574:18","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:18","statements":[{"nodeType":"YulAssignment","src":"57:19:18","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:18","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:18"},"nodeType":"YulFunctionCall","src":"67:9:18"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:18"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:18","type":""}],"src":"7:75:18"},{"body":{"nodeType":"YulBlock","src":"177:28:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:18"},"nodeType":"YulFunctionCall","src":"187:12:18"},"nodeType":"YulExpressionStatement","src":"187:12:18"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:18"},{"body":{"nodeType":"YulBlock","src":"300:28:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:18"},"nodeType":"YulFunctionCall","src":"310:12:18"},"nodeType":"YulExpressionStatement","src":"310:12:18"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:18"},{"body":{"nodeType":"YulBlock","src":"423:28:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"440:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"443:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"433:6:18"},"nodeType":"YulFunctionCall","src":"433:12:18"},"nodeType":"YulExpressionStatement","src":"433:12:18"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"334:117:18"},{"body":{"nodeType":"YulBlock","src":"546:28:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"563:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"566:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"556:6:18"},"nodeType":"YulFunctionCall","src":"556:12:18"},"nodeType":"YulExpressionStatement","src":"556:12:18"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"457:117:18"},{"body":{"nodeType":"YulBlock","src":"628:54:18","statements":[{"nodeType":"YulAssignment","src":"638:38:18","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"656:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"663:2:18","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"652:3:18"},"nodeType":"YulFunctionCall","src":"652:14:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"672:2:18","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"668:3:18"},"nodeType":"YulFunctionCall","src":"668:7:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"648:3:18"},"nodeType":"YulFunctionCall","src":"648:28:18"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"638:6:18"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"611:5:18","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"621:6:18","type":""}],"src":"580:102:18"},{"body":{"nodeType":"YulBlock","src":"716:152:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"733:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"736:77:18","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"726:6:18"},"nodeType":"YulFunctionCall","src":"726:88:18"},"nodeType":"YulExpressionStatement","src":"726:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"830:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"833:4:18","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"823:6:18"},"nodeType":"YulFunctionCall","src":"823:15:18"},"nodeType":"YulExpressionStatement","src":"823:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"854:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"857:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"847:6:18"},"nodeType":"YulFunctionCall","src":"847:15:18"},"nodeType":"YulExpressionStatement","src":"847:15:18"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"688:180:18"},{"body":{"nodeType":"YulBlock","src":"917:238:18","statements":[{"nodeType":"YulVariableDeclaration","src":"927:58:18","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"949:6:18"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"979:4:18"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"957:21:18"},"nodeType":"YulFunctionCall","src":"957:27:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"945:3:18"},"nodeType":"YulFunctionCall","src":"945:40:18"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"931:10:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"1096:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1098:16:18"},"nodeType":"YulFunctionCall","src":"1098:18:18"},"nodeType":"YulExpressionStatement","src":"1098:18:18"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1039:10:18"},{"kind":"number","nodeType":"YulLiteral","src":"1051:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1036:2:18"},"nodeType":"YulFunctionCall","src":"1036:34:18"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1075:10:18"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1087:6:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1072:2:18"},"nodeType":"YulFunctionCall","src":"1072:22:18"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1033:2:18"},"nodeType":"YulFunctionCall","src":"1033:62:18"},"nodeType":"YulIf","src":"1030:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1134:2:18","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1138:10:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1127:6:18"},"nodeType":"YulFunctionCall","src":"1127:22:18"},"nodeType":"YulExpressionStatement","src":"1127:22:18"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"903:6:18","type":""},{"name":"size","nodeType":"YulTypedName","src":"911:4:18","type":""}],"src":"874:281:18"},{"body":{"nodeType":"YulBlock","src":"1202:88:18","statements":[{"nodeType":"YulAssignment","src":"1212:30:18","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1222:18:18"},"nodeType":"YulFunctionCall","src":"1222:20:18"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1212:6:18"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1271:6:18"},{"name":"size","nodeType":"YulIdentifier","src":"1279:4:18"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1251:19:18"},"nodeType":"YulFunctionCall","src":"1251:33:18"},"nodeType":"YulExpressionStatement","src":"1251:33:18"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1186:4:18","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1195:6:18","type":""}],"src":"1161:129:18"},{"body":{"nodeType":"YulBlock","src":"1363:241:18","statements":[{"body":{"nodeType":"YulBlock","src":"1468:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1470:16:18"},"nodeType":"YulFunctionCall","src":"1470:18:18"},"nodeType":"YulExpressionStatement","src":"1470:18:18"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1440:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"1448:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1437:2:18"},"nodeType":"YulFunctionCall","src":"1437:30:18"},"nodeType":"YulIf","src":"1434:56:18"},{"nodeType":"YulAssignment","src":"1500:37:18","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1530:6:18"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1508:21:18"},"nodeType":"YulFunctionCall","src":"1508:29:18"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1500:4:18"}]},{"nodeType":"YulAssignment","src":"1574:23:18","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1586:4:18"},{"kind":"number","nodeType":"YulLiteral","src":"1592:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1582:3:18"},"nodeType":"YulFunctionCall","src":"1582:15:18"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1574:4:18"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1347:6:18","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1358:4:18","type":""}],"src":"1296:308:18"},{"body":{"nodeType":"YulBlock","src":"1672:184:18","statements":[{"nodeType":"YulVariableDeclaration","src":"1682:10:18","value":{"kind":"number","nodeType":"YulLiteral","src":"1691:1:18","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1686:1:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"1751:63:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1776:3:18"},{"name":"i","nodeType":"YulIdentifier","src":"1781:1:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1772:3:18"},"nodeType":"YulFunctionCall","src":"1772:11:18"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1795:3:18"},{"name":"i","nodeType":"YulIdentifier","src":"1800:1:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1791:3:18"},"nodeType":"YulFunctionCall","src":"1791:11:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1785:5:18"},"nodeType":"YulFunctionCall","src":"1785:18:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1765:6:18"},"nodeType":"YulFunctionCall","src":"1765:39:18"},"nodeType":"YulExpressionStatement","src":"1765:39:18"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1712:1:18"},{"name":"length","nodeType":"YulIdentifier","src":"1715:6:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1709:2:18"},"nodeType":"YulFunctionCall","src":"1709:13:18"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1723:19:18","statements":[{"nodeType":"YulAssignment","src":"1725:15:18","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1734:1:18"},{"kind":"number","nodeType":"YulLiteral","src":"1737:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1730:3:18"},"nodeType":"YulFunctionCall","src":"1730:10:18"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1725:1:18"}]}]},"pre":{"nodeType":"YulBlock","src":"1705:3:18","statements":[]},"src":"1701:113:18"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1834:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"1839:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1830:3:18"},"nodeType":"YulFunctionCall","src":"1830:16:18"},{"kind":"number","nodeType":"YulLiteral","src":"1848:1:18","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1823:6:18"},"nodeType":"YulFunctionCall","src":"1823:27:18"},"nodeType":"YulExpressionStatement","src":"1823:27:18"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1654:3:18","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1659:3:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"1664:6:18","type":""}],"src":"1610:246:18"},{"body":{"nodeType":"YulBlock","src":"1957:339:18","statements":[{"nodeType":"YulAssignment","src":"1967:75:18","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2034:6:18"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"1992:41:18"},"nodeType":"YulFunctionCall","src":"1992:49:18"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"1976:15:18"},"nodeType":"YulFunctionCall","src":"1976:66:18"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1967:5:18"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2058:5:18"},{"name":"length","nodeType":"YulIdentifier","src":"2065:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2051:6:18"},"nodeType":"YulFunctionCall","src":"2051:21:18"},"nodeType":"YulExpressionStatement","src":"2051:21:18"},{"nodeType":"YulVariableDeclaration","src":"2081:27:18","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2096:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"2103:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2092:3:18"},"nodeType":"YulFunctionCall","src":"2092:16:18"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2085:3:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"2146:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"2148:77:18"},"nodeType":"YulFunctionCall","src":"2148:79:18"},"nodeType":"YulExpressionStatement","src":"2148:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2127:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"2132:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2123:3:18"},"nodeType":"YulFunctionCall","src":"2123:16:18"},{"name":"end","nodeType":"YulIdentifier","src":"2141:3:18"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2120:2:18"},"nodeType":"YulFunctionCall","src":"2120:25:18"},"nodeType":"YulIf","src":"2117:112:18"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2273:3:18"},{"name":"dst","nodeType":"YulIdentifier","src":"2278:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"2283:6:18"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"2238:34:18"},"nodeType":"YulFunctionCall","src":"2238:52:18"},"nodeType":"YulExpressionStatement","src":"2238:52:18"}]},"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1930:3:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"1935:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"1943:3:18","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1951:5:18","type":""}],"src":"1862:434:18"},{"body":{"nodeType":"YulBlock","src":"2389:282:18","statements":[{"body":{"nodeType":"YulBlock","src":"2438:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"2440:77:18"},"nodeType":"YulFunctionCall","src":"2440:79:18"},"nodeType":"YulExpressionStatement","src":"2440:79:18"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2417:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"2425:4:18","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2413:3:18"},"nodeType":"YulFunctionCall","src":"2413:17:18"},{"name":"end","nodeType":"YulIdentifier","src":"2432:3:18"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2409:3:18"},"nodeType":"YulFunctionCall","src":"2409:27:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2402:6:18"},"nodeType":"YulFunctionCall","src":"2402:35:18"},"nodeType":"YulIf","src":"2399:122:18"},{"nodeType":"YulVariableDeclaration","src":"2530:27:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2550:6:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2544:5:18"},"nodeType":"YulFunctionCall","src":"2544:13:18"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2534:6:18","type":""}]},{"nodeType":"YulAssignment","src":"2566:99:18","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2638:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"2646:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2634:3:18"},"nodeType":"YulFunctionCall","src":"2634:17:18"},{"name":"length","nodeType":"YulIdentifier","src":"2653:6:18"},{"name":"end","nodeType":"YulIdentifier","src":"2661:3:18"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"2575:58:18"},"nodeType":"YulFunctionCall","src":"2575:90:18"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2566:5:18"}]}]},"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2367:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"2375:3:18","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2383:5:18","type":""}],"src":"2316:355:18"},{"body":{"nodeType":"YulBlock","src":"2791:739:18","statements":[{"body":{"nodeType":"YulBlock","src":"2837:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2839:77:18"},"nodeType":"YulFunctionCall","src":"2839:79:18"},"nodeType":"YulExpressionStatement","src":"2839:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2812:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"2821:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2808:3:18"},"nodeType":"YulFunctionCall","src":"2808:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"2833:2:18","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2804:3:18"},"nodeType":"YulFunctionCall","src":"2804:32:18"},"nodeType":"YulIf","src":"2801:119:18"},{"nodeType":"YulBlock","src":"2930:291:18","statements":[{"nodeType":"YulVariableDeclaration","src":"2945:38:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2969:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"2980:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2965:3:18"},"nodeType":"YulFunctionCall","src":"2965:17:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2959:5:18"},"nodeType":"YulFunctionCall","src":"2959:24:18"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2949:6:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"3030:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3032:77:18"},"nodeType":"YulFunctionCall","src":"3032:79:18"},"nodeType":"YulExpressionStatement","src":"3032:79:18"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3002:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"3010:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2999:2:18"},"nodeType":"YulFunctionCall","src":"2999:30:18"},"nodeType":"YulIf","src":"2996:117:18"},{"nodeType":"YulAssignment","src":"3127:84:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3183:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"3194:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3179:3:18"},"nodeType":"YulFunctionCall","src":"3179:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3203:7:18"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3137:41:18"},"nodeType":"YulFunctionCall","src":"3137:74:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3127:6:18"}]}]},{"nodeType":"YulBlock","src":"3231:292:18","statements":[{"nodeType":"YulVariableDeclaration","src":"3246:39:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3270:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"3281:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3266:3:18"},"nodeType":"YulFunctionCall","src":"3266:18:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3260:5:18"},"nodeType":"YulFunctionCall","src":"3260:25:18"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3250:6:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"3332:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3334:77:18"},"nodeType":"YulFunctionCall","src":"3334:79:18"},"nodeType":"YulExpressionStatement","src":"3334:79:18"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3304:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"3312:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3301:2:18"},"nodeType":"YulFunctionCall","src":"3301:30:18"},"nodeType":"YulIf","src":"3298:117:18"},{"nodeType":"YulAssignment","src":"3429:84:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3485:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"3496:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3481:3:18"},"nodeType":"YulFunctionCall","src":"3481:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3505:7:18"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3439:41:18"},"nodeType":"YulFunctionCall","src":"3439:74:18"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3429:6:18"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2753:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2764:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2776:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2784:6:18","type":""}],"src":"2677:853:18"},{"body":{"nodeType":"YulBlock","src":"3595:40:18","statements":[{"nodeType":"YulAssignment","src":"3606:22:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3622:5:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3616:5:18"},"nodeType":"YulFunctionCall","src":"3616:12:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3606:6:18"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3578:5:18","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"3588:6:18","type":""}],"src":"3536:99:18"},{"body":{"nodeType":"YulBlock","src":"3669:152:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3686:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3689:77:18","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3679:6:18"},"nodeType":"YulFunctionCall","src":"3679:88:18"},"nodeType":"YulExpressionStatement","src":"3679:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3783:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3786:4:18","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3776:6:18"},"nodeType":"YulFunctionCall","src":"3776:15:18"},"nodeType":"YulExpressionStatement","src":"3776:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3807:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3810:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3800:6:18"},"nodeType":"YulFunctionCall","src":"3800:15:18"},"nodeType":"YulExpressionStatement","src":"3800:15:18"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"3641:180:18"},{"body":{"nodeType":"YulBlock","src":"3878:269:18","statements":[{"nodeType":"YulAssignment","src":"3888:22:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3902:4:18"},{"kind":"number","nodeType":"YulLiteral","src":"3908:1:18","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3898:3:18"},"nodeType":"YulFunctionCall","src":"3898:12:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3888:6:18"}]},{"nodeType":"YulVariableDeclaration","src":"3919:38:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3949:4:18"},{"kind":"number","nodeType":"YulLiteral","src":"3955:1:18","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3945:3:18"},"nodeType":"YulFunctionCall","src":"3945:12:18"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"3923:18:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"3996:51:18","statements":[{"nodeType":"YulAssignment","src":"4010:27:18","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4024:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"4032:4:18","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4020:3:18"},"nodeType":"YulFunctionCall","src":"4020:17:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4010:6:18"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"3976:18:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3969:6:18"},"nodeType":"YulFunctionCall","src":"3969:26:18"},"nodeType":"YulIf","src":"3966:81:18"},{"body":{"nodeType":"YulBlock","src":"4099:42:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"4113:16:18"},"nodeType":"YulFunctionCall","src":"4113:18:18"},"nodeType":"YulExpressionStatement","src":"4113:18:18"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4063:18:18"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4086:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"4094:2:18","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4083:2:18"},"nodeType":"YulFunctionCall","src":"4083:14:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4060:2:18"},"nodeType":"YulFunctionCall","src":"4060:38:18"},"nodeType":"YulIf","src":"4057:84:18"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3862:4:18","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"3871:6:18","type":""}],"src":"3827:320:18"},{"body":{"nodeType":"YulBlock","src":"4207:87:18","statements":[{"nodeType":"YulAssignment","src":"4217:11:18","value":{"name":"ptr","nodeType":"YulIdentifier","src":"4225:3:18"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"4217:4:18"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4245:1:18","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"4248:3:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4238:6:18"},"nodeType":"YulFunctionCall","src":"4238:14:18"},"nodeType":"YulExpressionStatement","src":"4238:14:18"},{"nodeType":"YulAssignment","src":"4261:26:18","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4279:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4282:4:18","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"4269:9:18"},"nodeType":"YulFunctionCall","src":"4269:18:18"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"4261:4:18"}]}]},"name":"array_dataslot_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"4194:3:18","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"4202:4:18","type":""}],"src":"4153:141:18"},{"body":{"nodeType":"YulBlock","src":"4344:49:18","statements":[{"nodeType":"YulAssignment","src":"4354:33:18","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4372:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"4379:2:18","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4368:3:18"},"nodeType":"YulFunctionCall","src":"4368:14:18"},{"kind":"number","nodeType":"YulLiteral","src":"4384:2:18","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4364:3:18"},"nodeType":"YulFunctionCall","src":"4364:23:18"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"4354:6:18"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4327:5:18","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"4337:6:18","type":""}],"src":"4300:93:18"},{"body":{"nodeType":"YulBlock","src":"4452:54:18","statements":[{"nodeType":"YulAssignment","src":"4462:37:18","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"4487:4:18"},{"name":"value","nodeType":"YulIdentifier","src":"4493:5:18"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4483:3:18"},"nodeType":"YulFunctionCall","src":"4483:16:18"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"4462:8:18"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"4427:4:18","type":""},{"name":"value","nodeType":"YulTypedName","src":"4433:5:18","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"4443:8:18","type":""}],"src":"4399:107:18"},{"body":{"nodeType":"YulBlock","src":"4588:317:18","statements":[{"nodeType":"YulVariableDeclaration","src":"4598:35:18","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"4619:10:18"},{"kind":"number","nodeType":"YulLiteral","src":"4631:1:18","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4615:3:18"},"nodeType":"YulFunctionCall","src":"4615:18:18"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"4602:9:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4642:109:18","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"4673:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"4684:66:18","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"4654:18:18"},"nodeType":"YulFunctionCall","src":"4654:97:18"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"4646:4:18","type":""}]},{"nodeType":"YulAssignment","src":"4760:51:18","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"4791:9:18"},{"name":"toInsert","nodeType":"YulIdentifier","src":"4802:8:18"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"4772:18:18"},"nodeType":"YulFunctionCall","src":"4772:39:18"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"4760:8:18"}]},{"nodeType":"YulAssignment","src":"4820:30:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4833:5:18"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"4844:4:18"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4840:3:18"},"nodeType":"YulFunctionCall","src":"4840:9:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4829:3:18"},"nodeType":"YulFunctionCall","src":"4829:21:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4820:5:18"}]},{"nodeType":"YulAssignment","src":"4859:40:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4872:5:18"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"4883:8:18"},{"name":"mask","nodeType":"YulIdentifier","src":"4893:4:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4879:3:18"},"nodeType":"YulFunctionCall","src":"4879:19:18"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4869:2:18"},"nodeType":"YulFunctionCall","src":"4869:30:18"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"4859:6:18"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4549:5:18","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"4556:10:18","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"4568:8:18","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"4581:6:18","type":""}],"src":"4512:393:18"},{"body":{"nodeType":"YulBlock","src":"4956:32:18","statements":[{"nodeType":"YulAssignment","src":"4966:16:18","value":{"name":"value","nodeType":"YulIdentifier","src":"4977:5:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4966:7:18"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4938:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4948:7:18","type":""}],"src":"4911:77:18"},{"body":{"nodeType":"YulBlock","src":"5026:28:18","statements":[{"nodeType":"YulAssignment","src":"5036:12:18","value":{"name":"value","nodeType":"YulIdentifier","src":"5043:5:18"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"5036:3:18"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5012:5:18","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"5022:3:18","type":""}],"src":"4994:60:18"},{"body":{"nodeType":"YulBlock","src":"5120:82:18","statements":[{"nodeType":"YulAssignment","src":"5130:66:18","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5188:5:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5170:17:18"},"nodeType":"YulFunctionCall","src":"5170:24:18"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"5161:8:18"},"nodeType":"YulFunctionCall","src":"5161:34:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5143:17:18"},"nodeType":"YulFunctionCall","src":"5143:53:18"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"5130:9:18"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5100:5:18","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"5110:9:18","type":""}],"src":"5060:142:18"},{"body":{"nodeType":"YulBlock","src":"5255:28:18","statements":[{"nodeType":"YulAssignment","src":"5265:12:18","value":{"name":"value","nodeType":"YulIdentifier","src":"5272:5:18"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"5265:3:18"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5241:5:18","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"5251:3:18","type":""}],"src":"5208:75:18"},{"body":{"nodeType":"YulBlock","src":"5365:193:18","statements":[{"nodeType":"YulVariableDeclaration","src":"5375:63:18","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"5430:7:18"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"5399:30:18"},"nodeType":"YulFunctionCall","src":"5399:39:18"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"5379:16:18","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5454:4:18"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5494:4:18"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"5488:5:18"},"nodeType":"YulFunctionCall","src":"5488:11:18"},{"name":"offset","nodeType":"YulIdentifier","src":"5501:6:18"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"5533:16:18"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"5509:23:18"},"nodeType":"YulFunctionCall","src":"5509:41:18"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"5460:27:18"},"nodeType":"YulFunctionCall","src":"5460:91:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"5447:6:18"},"nodeType":"YulFunctionCall","src":"5447:105:18"},"nodeType":"YulExpressionStatement","src":"5447:105:18"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"5342:4:18","type":""},{"name":"offset","nodeType":"YulTypedName","src":"5348:6:18","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"5356:7:18","type":""}],"src":"5289:269:18"},{"body":{"nodeType":"YulBlock","src":"5613:24:18","statements":[{"nodeType":"YulAssignment","src":"5623:8:18","value":{"kind":"number","nodeType":"YulLiteral","src":"5630:1:18","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"5623:3:18"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"5609:3:18","type":""}],"src":"5564:73:18"},{"body":{"nodeType":"YulBlock","src":"5696:136:18","statements":[{"nodeType":"YulVariableDeclaration","src":"5706:46:18","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"5720:30:18"},"nodeType":"YulFunctionCall","src":"5720:32:18"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"5710:6:18","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5805:4:18"},{"name":"offset","nodeType":"YulIdentifier","src":"5811:6:18"},{"name":"zero_0","nodeType":"YulIdentifier","src":"5819:6:18"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"5761:43:18"},"nodeType":"YulFunctionCall","src":"5761:65:18"},"nodeType":"YulExpressionStatement","src":"5761:65:18"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"5682:4:18","type":""},{"name":"offset","nodeType":"YulTypedName","src":"5688:6:18","type":""}],"src":"5643:189:18"},{"body":{"nodeType":"YulBlock","src":"5888:136:18","statements":[{"body":{"nodeType":"YulBlock","src":"5955:63:18","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"5999:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"6006:1:18","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"5969:29:18"},"nodeType":"YulFunctionCall","src":"5969:39:18"},"nodeType":"YulExpressionStatement","src":"5969:39:18"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"5908:5:18"},{"name":"end","nodeType":"YulIdentifier","src":"5915:3:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5905:2:18"},"nodeType":"YulFunctionCall","src":"5905:14:18"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5920:26:18","statements":[{"nodeType":"YulAssignment","src":"5922:22:18","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"5935:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"5942:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5931:3:18"},"nodeType":"YulFunctionCall","src":"5931:13:18"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"5922:5:18"}]}]},"pre":{"nodeType":"YulBlock","src":"5902:2:18","statements":[]},"src":"5898:120:18"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"5876:5:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"5883:3:18","type":""}],"src":"5838:186:18"},{"body":{"nodeType":"YulBlock","src":"6109:464:18","statements":[{"body":{"nodeType":"YulBlock","src":"6135:431:18","statements":[{"nodeType":"YulVariableDeclaration","src":"6149:54:18","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"6197:5:18"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"6165:31:18"},"nodeType":"YulFunctionCall","src":"6165:38:18"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"6153:8:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6216:63:18","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"6239:8:18"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"6267:10:18"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"6249:17:18"},"nodeType":"YulFunctionCall","src":"6249:29:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6235:3:18"},"nodeType":"YulFunctionCall","src":"6235:44:18"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"6220:11:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"6436:27:18","statements":[{"nodeType":"YulAssignment","src":"6438:23:18","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"6453:8:18"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"6438:11:18"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"6420:10:18"},{"kind":"number","nodeType":"YulLiteral","src":"6432:2:18","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6417:2:18"},"nodeType":"YulFunctionCall","src":"6417:18:18"},"nodeType":"YulIf","src":"6414:49:18"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"6505:11:18"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"6522:8:18"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"6550:3:18"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"6532:17:18"},"nodeType":"YulFunctionCall","src":"6532:22:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6518:3:18"},"nodeType":"YulFunctionCall","src":"6518:37:18"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"6476:28:18"},"nodeType":"YulFunctionCall","src":"6476:80:18"},"nodeType":"YulExpressionStatement","src":"6476:80:18"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"6126:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"6131:2:18","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6123:2:18"},"nodeType":"YulFunctionCall","src":"6123:11:18"},"nodeType":"YulIf","src":"6120:446:18"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"6085:5:18","type":""},{"name":"len","nodeType":"YulTypedName","src":"6092:3:18","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"6097:10:18","type":""}],"src":"6030:543:18"},{"body":{"nodeType":"YulBlock","src":"6642:54:18","statements":[{"nodeType":"YulAssignment","src":"6652:37:18","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"6677:4:18"},{"name":"value","nodeType":"YulIdentifier","src":"6683:5:18"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6673:3:18"},"nodeType":"YulFunctionCall","src":"6673:16:18"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"6652:8:18"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"6617:4:18","type":""},{"name":"value","nodeType":"YulTypedName","src":"6623:5:18","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"6633:8:18","type":""}],"src":"6579:117:18"},{"body":{"nodeType":"YulBlock","src":"6753:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"6763:68:18","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6812:1:18","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"6815:5:18"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6808:3:18"},"nodeType":"YulFunctionCall","src":"6808:13:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6827:1:18","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6823:3:18"},"nodeType":"YulFunctionCall","src":"6823:6:18"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"6779:28:18"},"nodeType":"YulFunctionCall","src":"6779:51:18"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6775:3:18"},"nodeType":"YulFunctionCall","src":"6775:56:18"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"6767:4:18","type":""}]},{"nodeType":"YulAssignment","src":"6840:25:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6854:4:18"},{"name":"mask","nodeType":"YulIdentifier","src":"6860:4:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6850:3:18"},"nodeType":"YulFunctionCall","src":"6850:15:18"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"6840:6:18"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"6730:4:18","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"6736:5:18","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"6746:6:18","type":""}],"src":"6702:169:18"},{"body":{"nodeType":"YulBlock","src":"6957:214:18","statements":[{"nodeType":"YulAssignment","src":"7090:37:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7117:4:18"},{"name":"len","nodeType":"YulIdentifier","src":"7123:3:18"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"7098:18:18"},"nodeType":"YulFunctionCall","src":"7098:29:18"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"7090:4:18"}]},{"nodeType":"YulAssignment","src":"7136:29:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7147:4:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7157:1:18","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"7160:3:18"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7153:3:18"},"nodeType":"YulFunctionCall","src":"7153:11:18"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7144:2:18"},"nodeType":"YulFunctionCall","src":"7144:21:18"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"7136:4:18"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"6938:4:18","type":""},{"name":"len","nodeType":"YulTypedName","src":"6944:3:18","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"6952:4:18","type":""}],"src":"6876:295:18"},{"body":{"nodeType":"YulBlock","src":"7268:1303:18","statements":[{"nodeType":"YulVariableDeclaration","src":"7279:51:18","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7326:3:18"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"7293:32:18"},"nodeType":"YulFunctionCall","src":"7293:37:18"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"7283:6:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"7415:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7417:16:18"},"nodeType":"YulFunctionCall","src":"7417:18:18"},"nodeType":"YulExpressionStatement","src":"7417:18:18"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"7387:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"7395:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7384:2:18"},"nodeType":"YulFunctionCall","src":"7384:30:18"},"nodeType":"YulIf","src":"7381:56:18"},{"nodeType":"YulVariableDeclaration","src":"7447:52:18","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"7493:4:18"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"7487:5:18"},"nodeType":"YulFunctionCall","src":"7487:11:18"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"7461:25:18"},"nodeType":"YulFunctionCall","src":"7461:38:18"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"7451:6:18","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"7592:4:18"},{"name":"oldLen","nodeType":"YulIdentifier","src":"7598:6:18"},{"name":"newLen","nodeType":"YulIdentifier","src":"7606:6:18"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulIdentifier","src":"7546:45:18"},"nodeType":"YulFunctionCall","src":"7546:67:18"},"nodeType":"YulExpressionStatement","src":"7546:67:18"},{"nodeType":"YulVariableDeclaration","src":"7623:18:18","value":{"kind":"number","nodeType":"YulLiteral","src":"7640:1:18","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"7627:9:18","type":""}]},{"nodeType":"YulAssignment","src":"7651:17:18","value":{"kind":"number","nodeType":"YulLiteral","src":"7664:4:18","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"7651:9:18"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"7715:611:18","statements":[{"nodeType":"YulVariableDeclaration","src":"7729:37:18","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"7748:6:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7760:4:18","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7756:3:18"},"nodeType":"YulFunctionCall","src":"7756:9:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7744:3:18"},"nodeType":"YulFunctionCall","src":"7744:22:18"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"7733:7:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7780:51:18","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"7826:4:18"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"7794:31:18"},"nodeType":"YulFunctionCall","src":"7794:37:18"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"7784:6:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7844:10:18","value":{"kind":"number","nodeType":"YulLiteral","src":"7853:1:18","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7848:1:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"7912:163:18","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"7937:6:18"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7955:3:18"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"7960:9:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7951:3:18"},"nodeType":"YulFunctionCall","src":"7951:19:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7945:5:18"},"nodeType":"YulFunctionCall","src":"7945:26:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"7930:6:18"},"nodeType":"YulFunctionCall","src":"7930:42:18"},"nodeType":"YulExpressionStatement","src":"7930:42:18"},{"nodeType":"YulAssignment","src":"7989:24:18","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"8003:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"8011:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7999:3:18"},"nodeType":"YulFunctionCall","src":"7999:14:18"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"7989:6:18"}]},{"nodeType":"YulAssignment","src":"8030:31:18","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"8047:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"8058:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8043:3:18"},"nodeType":"YulFunctionCall","src":"8043:18:18"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"8030:9:18"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7878:1:18"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"7881:7:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7875:2:18"},"nodeType":"YulFunctionCall","src":"7875:14:18"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7890:21:18","statements":[{"nodeType":"YulAssignment","src":"7892:17:18","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7901:1:18"},{"kind":"number","nodeType":"YulLiteral","src":"7904:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7897:3:18"},"nodeType":"YulFunctionCall","src":"7897:12:18"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"7892:1:18"}]}]},"pre":{"nodeType":"YulBlock","src":"7871:3:18","statements":[]},"src":"7867:208:18"},{"body":{"nodeType":"YulBlock","src":"8111:156:18","statements":[{"nodeType":"YulVariableDeclaration","src":"8129:43:18","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8156:3:18"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"8161:9:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8152:3:18"},"nodeType":"YulFunctionCall","src":"8152:19:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8146:5:18"},"nodeType":"YulFunctionCall","src":"8146:26:18"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"8133:9:18","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"8196:6:18"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"8223:9:18"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"8238:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"8246:4:18","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8234:3:18"},"nodeType":"YulFunctionCall","src":"8234:17:18"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"8204:18:18"},"nodeType":"YulFunctionCall","src":"8204:48:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8189:6:18"},"nodeType":"YulFunctionCall","src":"8189:64:18"},"nodeType":"YulExpressionStatement","src":"8189:64:18"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"8094:7:18"},{"name":"newLen","nodeType":"YulIdentifier","src":"8103:6:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8091:2:18"},"nodeType":"YulFunctionCall","src":"8091:19:18"},"nodeType":"YulIf","src":"8088:179:18"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"8287:4:18"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"8301:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"8309:1:18","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8297:3:18"},"nodeType":"YulFunctionCall","src":"8297:14:18"},{"kind":"number","nodeType":"YulLiteral","src":"8313:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8293:3:18"},"nodeType":"YulFunctionCall","src":"8293:22:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8280:6:18"},"nodeType":"YulFunctionCall","src":"8280:36:18"},"nodeType":"YulExpressionStatement","src":"8280:36:18"}]},"nodeType":"YulCase","src":"7708:618:18","value":{"kind":"number","nodeType":"YulLiteral","src":"7713:1:18","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"8343:222:18","statements":[{"nodeType":"YulVariableDeclaration","src":"8357:14:18","value":{"kind":"number","nodeType":"YulLiteral","src":"8370:1:18","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"8361:5:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"8394:67:18","statements":[{"nodeType":"YulAssignment","src":"8412:35:18","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8431:3:18"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"8436:9:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8427:3:18"},"nodeType":"YulFunctionCall","src":"8427:19:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8421:5:18"},"nodeType":"YulFunctionCall","src":"8421:26:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"8412:5:18"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"8387:6:18"},"nodeType":"YulIf","src":"8384:77:18"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"8481:4:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8540:5:18"},{"name":"newLen","nodeType":"YulIdentifier","src":"8547:6:18"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"8487:52:18"},"nodeType":"YulFunctionCall","src":"8487:67:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8474:6:18"},"nodeType":"YulFunctionCall","src":"8474:81:18"},"nodeType":"YulExpressionStatement","src":"8474:81:18"}]},"nodeType":"YulCase","src":"8335:230:18","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"7688:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"7696:2:18","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7685:2:18"},"nodeType":"YulFunctionCall","src":"7685:14:18"},"nodeType":"YulSwitch","src":"7678:887:18"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"7257:4:18","type":""},{"name":"src","nodeType":"YulTypedName","src":"7263:3:18","type":""}],"src":"7176:1395:18"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n}\n","id":18,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b5060405162002894380380620028948339818101604052810190620000379190620001f6565b8160009081620000489190620004c6565b5080600190816200005a9190620004c6565b505050620005ad565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620000cc8262000081565b810181811067ffffffffffffffff82111715620000ee57620000ed62000092565b5b80604052505050565b60006200010362000063565b9050620001118282620000c1565b919050565b600067ffffffffffffffff82111562000134576200013362000092565b5b6200013f8262000081565b9050602081019050919050565b60005b838110156200016c5780820151818401526020810190506200014f565b60008484015250505050565b60006200018f620001898462000116565b620000f7565b905082815260208101848484011115620001ae57620001ad6200007c565b5b620001bb8482856200014c565b509392505050565b600082601f830112620001db57620001da62000077565b5b8151620001ed84826020860162000178565b91505092915050565b6000806040838503121562000210576200020f6200006d565b5b600083015167ffffffffffffffff81111562000231576200023062000072565b5b6200023f85828601620001c3565b925050602083015167ffffffffffffffff81111562000263576200026262000072565b5b6200027185828601620001c3565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620002ce57607f821691505b602082108103620002e457620002e362000286565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200034e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200030f565b6200035a86836200030f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003a7620003a16200039b8462000372565b6200037c565b62000372565b9050919050565b6000819050919050565b620003c38362000386565b620003db620003d282620003ae565b8484546200031c565b825550505050565b600090565b620003f2620003e3565b620003ff818484620003b8565b505050565b5b8181101562000427576200041b600082620003e8565b60018101905062000405565b5050565b601f82111562000476576200044081620002ea565b6200044b84620002ff565b810160208510156200045b578190505b620004736200046a85620002ff565b83018262000404565b50505b505050565b600082821c905092915050565b60006200049b600019846008026200047b565b1980831691505092915050565b6000620004b6838362000488565b9150826002028217905092915050565b620004d1826200027b565b67ffffffffffffffff811115620004ed57620004ec62000092565b5b620004f98254620002b5565b620005068282856200042b565b600060209050601f8311600181146200053e576000841562000529578287015190505b620005358582620004a8565b865550620005a5565b601f1984166200054e86620002ea565b60005b82811015620005785784890151825560018201915060208501945060208101905062000551565b8683101562000598578489015162000594601f89168262000488565b8355505b6001600288020188555050505b505050505050565b6122d780620005bd6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb46514610224578063b88d4fde14610240578063c87b56dd1461025c578063e985e9c51461028c576100cf565b80636352211e146101a657806370a08231146101d657806395d89b4114610206576100cf565b806301ffc9a7146100d457806306fdde0314610104578063081812fc14610122578063095ea7b31461015257806323b872dd1461016e57806342842e0e1461018a575b600080fd5b6100ee60048036038101906100e99190611614565b6102bc565b6040516100fb919061165c565b60405180910390f35b61010c61039e565b6040516101199190611707565b60405180910390f35b61013c6004803603810190610137919061175f565b610430565b60405161014991906117cd565b60405180910390f35b61016c60048036038101906101679190611814565b610476565b005b61018860048036038101906101839190611854565b61058d565b005b6101a4600480360381019061019f9190611854565b6105ed565b005b6101c060048036038101906101bb919061175f565b61060d565b6040516101cd91906117cd565b60405180910390f35b6101f060048036038101906101eb91906118a7565b610693565b6040516101fd91906118e3565b60405180910390f35b61020e61074a565b60405161021b9190611707565b60405180910390f35b61023e6004803603810190610239919061192a565b6107dc565b005b61025a60048036038101906102559190611a9f565b6107f2565b005b6102766004803603810190610271919061175f565b610854565b6040516102839190611707565b60405180910390f35b6102a660048036038101906102a19190611b22565b6108bc565b6040516102b3919061165c565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061038757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610397575061039682610950565b5b9050919050565b6060600080546103ad90611b91565b80601f01602080910402602001604051908101604052809291908181526020018280546103d990611b91565b80156104265780601f106103fb57610100808354040283529160200191610426565b820191906000526020600020905b81548152906001019060200180831161040957829003601f168201915b5050505050905090565b600061043b826109ba565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104818261060d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036104f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e890611c34565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610510610a05565b73ffffffffffffffffffffffffffffffffffffffff16148061053f575061053e81610539610a05565b6108bc565b5b61057e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057590611cc6565b60405180910390fd5b6105888383610a0d565b505050565b61059e610598610a05565b82610ac6565b6105dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d490611d58565b60405180910390fd5b6105e8838383610b5b565b505050565b610608838383604051806020016040528060008152506107f2565b505050565b60008061061983610e54565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361068a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068190611dc4565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610703576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fa90611e56565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461075990611b91565b80601f016020809104026020016040519081016040528092919081815260200182805461078590611b91565b80156107d25780601f106107a7576101008083540402835291602001916107d2565b820191906000526020600020905b8154815290600101906020018083116107b557829003601f168201915b5050505050905090565b6107ee6107e7610a05565b8383610e91565b5050565b6108036107fd610a05565b83610ac6565b610842576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083990611d58565b60405180910390fd5b61084e84848484610ffd565b50505050565b606061085f826109ba565b6000610869611059565b9050600081511161088957604051806020016040528060008152506108b4565b8061089384611070565b6040516020016108a4929190611eb2565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6109c38161113e565b610a02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f990611dc4565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610a808361060d565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610ad28361060d565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610b145750610b1381856108bc565b5b80610b5257508373ffffffffffffffffffffffffffffffffffffffff16610b3a84610430565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610b7b8261060d565b73ffffffffffffffffffffffffffffffffffffffff1614610bd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc890611f48565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3790611fda565b60405180910390fd5b610c4d838383600161117f565b8273ffffffffffffffffffffffffffffffffffffffff16610c6d8261060d565b73ffffffffffffffffffffffffffffffffffffffff1614610cc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cba90611f48565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610e4f83838360016112a5565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610eff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef690612046565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ff0919061165c565b60405180910390a3505050565b611008848484610b5b565b611014848484846112ab565b611053576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104a906120d8565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000600161107f84611432565b01905060008167ffffffffffffffff81111561109e5761109d611974565b5b6040519080825280601f01601f1916602001820160405280156110d05781602001600182028036833780820191505090505b509050600082602001820190505b600115611133578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611127576111266120f8565b5b049450600085036110de575b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661116083610e54565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600181111561129f57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146112135780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461120b9190612156565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461129e5780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611296919061218a565b925050819055505b5b50505050565b50505050565b60006112cc8473ffffffffffffffffffffffffffffffffffffffff16611585565b15611425578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026112f5610a05565b8786866040518563ffffffff1660e01b81526004016113179493929190612213565b6020604051808303816000875af192505050801561135357506040513d601f19601f820116820180604052508101906113509190612274565b60015b6113d5573d8060008114611383576040519150601f19603f3d011682016040523d82523d6000602084013e611388565b606091505b5060008151036113cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c4906120d8565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061142a565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611490577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611486576114856120f8565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106114cd576d04ee2d6d415b85acef810000000083816114c3576114c26120f8565b5b0492506020810190505b662386f26fc1000083106114fc57662386f26fc1000083816114f2576114f16120f8565b5b0492506010810190505b6305f5e1008310611525576305f5e100838161151b5761151a6120f8565b5b0492506008810190505b612710831061154a5761271083816115405761153f6120f8565b5b0492506004810190505b6064831061156d5760648381611563576115626120f8565b5b0492506002810190505b600a831061157c576001810190505b80915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6115f1816115bc565b81146115fc57600080fd5b50565b60008135905061160e816115e8565b92915050565b60006020828403121561162a576116296115b2565b5b6000611638848285016115ff565b91505092915050565b60008115159050919050565b61165681611641565b82525050565b6000602082019050611671600083018461164d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156116b1578082015181840152602081019050611696565b60008484015250505050565b6000601f19601f8301169050919050565b60006116d982611677565b6116e38185611682565b93506116f3818560208601611693565b6116fc816116bd565b840191505092915050565b6000602082019050818103600083015261172181846116ce565b905092915050565b6000819050919050565b61173c81611729565b811461174757600080fd5b50565b60008135905061175981611733565b92915050565b600060208284031215611775576117746115b2565b5b60006117838482850161174a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117b78261178c565b9050919050565b6117c7816117ac565b82525050565b60006020820190506117e260008301846117be565b92915050565b6117f1816117ac565b81146117fc57600080fd5b50565b60008135905061180e816117e8565b92915050565b6000806040838503121561182b5761182a6115b2565b5b6000611839858286016117ff565b925050602061184a8582860161174a565b9150509250929050565b60008060006060848603121561186d5761186c6115b2565b5b600061187b868287016117ff565b935050602061188c868287016117ff565b925050604061189d8682870161174a565b9150509250925092565b6000602082840312156118bd576118bc6115b2565b5b60006118cb848285016117ff565b91505092915050565b6118dd81611729565b82525050565b60006020820190506118f860008301846118d4565b92915050565b61190781611641565b811461191257600080fd5b50565b600081359050611924816118fe565b92915050565b60008060408385031215611941576119406115b2565b5b600061194f858286016117ff565b925050602061196085828601611915565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6119ac826116bd565b810181811067ffffffffffffffff821117156119cb576119ca611974565b5b80604052505050565b60006119de6115a8565b90506119ea82826119a3565b919050565b600067ffffffffffffffff821115611a0a57611a09611974565b5b611a13826116bd565b9050602081019050919050565b82818337600083830152505050565b6000611a42611a3d846119ef565b6119d4565b905082815260208101848484011115611a5e57611a5d61196f565b5b611a69848285611a20565b509392505050565b600082601f830112611a8657611a8561196a565b5b8135611a96848260208601611a2f565b91505092915050565b60008060008060808587031215611ab957611ab86115b2565b5b6000611ac7878288016117ff565b9450506020611ad8878288016117ff565b9350506040611ae98782880161174a565b925050606085013567ffffffffffffffff811115611b0a57611b096115b7565b5b611b1687828801611a71565b91505092959194509250565b60008060408385031215611b3957611b386115b2565b5b6000611b47858286016117ff565b9250506020611b58858286016117ff565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611ba957607f821691505b602082108103611bbc57611bbb611b62565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000611c1e602183611682565b9150611c2982611bc2565b604082019050919050565b60006020820190508181036000830152611c4d81611c11565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000611cb0603d83611682565b9150611cbb82611c54565b604082019050919050565b60006020820190508181036000830152611cdf81611ca3565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000611d42602d83611682565b9150611d4d82611ce6565b604082019050919050565b60006020820190508181036000830152611d7181611d35565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000611dae601883611682565b9150611db982611d78565b602082019050919050565b60006020820190508181036000830152611ddd81611da1565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000611e40602983611682565b9150611e4b82611de4565b604082019050919050565b60006020820190508181036000830152611e6f81611e33565b9050919050565b600081905092915050565b6000611e8c82611677565b611e968185611e76565b9350611ea6818560208601611693565b80840191505092915050565b6000611ebe8285611e81565b9150611eca8284611e81565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000611f32602583611682565b9150611f3d82611ed6565b604082019050919050565b60006020820190508181036000830152611f6181611f25565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611fc4602483611682565b9150611fcf82611f68565b604082019050919050565b60006020820190508181036000830152611ff381611fb7565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612030601983611682565b915061203b82611ffa565b602082019050919050565b6000602082019050818103600083015261205f81612023565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006120c2603283611682565b91506120cd82612066565b604082019050919050565b600060208201905081810360008301526120f1816120b5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061216182611729565b915061216c83611729565b925082820390508181111561218457612183612127565b5b92915050565b600061219582611729565b91506121a083611729565b92508282019050808211156121b8576121b7612127565b5b92915050565b600081519050919050565b600082825260208201905092915050565b60006121e5826121be565b6121ef81856121c9565b93506121ff818560208601611693565b612208816116bd565b840191505092915050565b600060808201905061222860008301876117be565b61223560208301866117be565b61224260408301856118d4565b818103606083015261225481846121da565b905095945050505050565b60008151905061226e816115e8565b92915050565b60006020828403121561228a576122896115b2565b5b60006122988482850161225f565b9150509291505056fea26469706673582212202ef155beec58315f9911e1c739e009937fe03bfa665f2f6054e78352d0bb320d64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2894 CODESIZE SUB DUP1 PUSH3 0x2894 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x1F6 JUMP JUMPDEST DUP2 PUSH1 0x0 SWAP1 DUP2 PUSH3 0x48 SWAP2 SWAP1 PUSH3 0x4C6 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP2 PUSH3 0x5A SWAP2 SWAP1 PUSH3 0x4C6 JUMP JUMPDEST POP POP POP PUSH3 0x5AD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0xCC DUP3 PUSH3 0x81 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0xEE JUMPI PUSH3 0xED PUSH3 0x92 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x103 PUSH3 0x63 JUMP JUMPDEST SWAP1 POP PUSH3 0x111 DUP3 DUP3 PUSH3 0xC1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x134 JUMPI PUSH3 0x133 PUSH3 0x92 JUMP JUMPDEST JUMPDEST PUSH3 0x13F DUP3 PUSH3 0x81 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x16C JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x14F JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x18F PUSH3 0x189 DUP5 PUSH3 0x116 JUMP JUMPDEST PUSH3 0xF7 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x1AE JUMPI PUSH3 0x1AD PUSH3 0x7C JUMP JUMPDEST JUMPDEST PUSH3 0x1BB DUP5 DUP3 DUP6 PUSH3 0x14C JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x1DB JUMPI PUSH3 0x1DA PUSH3 0x77 JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x1ED DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x178 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x210 JUMPI PUSH3 0x20F PUSH3 0x6D JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x231 JUMPI PUSH3 0x230 PUSH3 0x72 JUMP JUMPDEST JUMPDEST PUSH3 0x23F DUP6 DUP3 DUP7 ADD PUSH3 0x1C3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x263 JUMPI PUSH3 0x262 PUSH3 0x72 JUMP JUMPDEST JUMPDEST PUSH3 0x271 DUP6 DUP3 DUP7 ADD PUSH3 0x1C3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x2CE JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x2E4 JUMPI PUSH3 0x2E3 PUSH3 0x286 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH3 0x34E PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x30F JUMP JUMPDEST PUSH3 0x35A DUP7 DUP4 PUSH3 0x30F JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3A7 PUSH3 0x3A1 PUSH3 0x39B DUP5 PUSH3 0x372 JUMP JUMPDEST PUSH3 0x37C JUMP JUMPDEST PUSH3 0x372 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x3C3 DUP4 PUSH3 0x386 JUMP JUMPDEST PUSH3 0x3DB PUSH3 0x3D2 DUP3 PUSH3 0x3AE JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x31C JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH3 0x3F2 PUSH3 0x3E3 JUMP JUMPDEST PUSH3 0x3FF DUP2 DUP5 DUP5 PUSH3 0x3B8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x427 JUMPI PUSH3 0x41B PUSH1 0x0 DUP3 PUSH3 0x3E8 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x405 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x476 JUMPI PUSH3 0x440 DUP2 PUSH3 0x2EA JUMP JUMPDEST PUSH3 0x44B DUP5 PUSH3 0x2FF JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x45B JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x473 PUSH3 0x46A DUP6 PUSH3 0x2FF JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x404 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x49B PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x47B JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x4B6 DUP4 DUP4 PUSH3 0x488 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x4D1 DUP3 PUSH3 0x27B JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x4ED JUMPI PUSH3 0x4EC PUSH3 0x92 JUMP JUMPDEST JUMPDEST PUSH3 0x4F9 DUP3 SLOAD PUSH3 0x2B5 JUMP JUMPDEST PUSH3 0x506 DUP3 DUP3 DUP6 PUSH3 0x42B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x53E JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x529 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x535 DUP6 DUP3 PUSH3 0x4A8 JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0x5A5 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x54E DUP7 PUSH3 0x2EA JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x578 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x551 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0x598 JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0x594 PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x488 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x22D7 DUP1 PUSH3 0x5BD PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x28C JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x206 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x18A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1614 JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x165C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH2 0x39E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0x1707 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x175F JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x17CD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x1814 JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x183 SWAP2 SWAP1 PUSH2 0x1854 JUMP JUMPDEST PUSH2 0x58D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x1854 JUMP JUMPDEST PUSH2 0x5ED JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BB SWAP2 SWAP1 PUSH2 0x175F JUMP JUMPDEST PUSH2 0x60D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x17CD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x18A7 JUMP JUMPDEST PUSH2 0x693 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x18E3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20E PUSH2 0x74A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21B SWAP2 SWAP1 PUSH2 0x1707 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x239 SWAP2 SWAP1 PUSH2 0x192A JUMP JUMPDEST PUSH2 0x7DC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x1A9F JUMP JUMPDEST PUSH2 0x7F2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x276 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x175F JUMP JUMPDEST PUSH2 0x854 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x1707 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x1B22 JUMP JUMPDEST PUSH2 0x8BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B3 SWAP2 SWAP1 PUSH2 0x165C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x387 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x397 JUMPI POP PUSH2 0x396 DUP3 PUSH2 0x950 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x3AD SWAP1 PUSH2 0x1B91 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D9 SWAP1 PUSH2 0x1B91 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x426 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x426 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x409 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43B DUP3 PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x481 DUP3 PUSH2 0x60D JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x4F1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E8 SWAP1 PUSH2 0x1C34 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x510 PUSH2 0xA05 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x53F JUMPI POP PUSH2 0x53E DUP2 PUSH2 0x539 PUSH2 0xA05 JUMP JUMPDEST PUSH2 0x8BC JUMP JUMPDEST JUMPDEST PUSH2 0x57E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x575 SWAP1 PUSH2 0x1CC6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x588 DUP4 DUP4 PUSH2 0xA0D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x59E PUSH2 0x598 PUSH2 0xA05 JUMP JUMPDEST DUP3 PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x5DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D4 SWAP1 PUSH2 0x1D58 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E8 DUP4 DUP4 DUP4 PUSH2 0xB5B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x608 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7F2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x619 DUP4 PUSH2 0xE54 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x68A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x681 SWAP1 PUSH2 0x1DC4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x703 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FA SWAP1 PUSH2 0x1E56 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x759 SWAP1 PUSH2 0x1B91 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x785 SWAP1 PUSH2 0x1B91 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7A7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7EE PUSH2 0x7E7 PUSH2 0xA05 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xE91 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x803 PUSH2 0x7FD PUSH2 0xA05 JUMP JUMPDEST DUP4 PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x842 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x839 SWAP1 PUSH2 0x1D58 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x84E DUP5 DUP5 DUP5 DUP5 PUSH2 0xFFD JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x85F DUP3 PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x869 PUSH2 0x1059 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x889 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x8B4 JUMP JUMPDEST DUP1 PUSH2 0x893 DUP5 PUSH2 0x1070 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8A4 SWAP3 SWAP2 SWAP1 PUSH2 0x1EB2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9C3 DUP2 PUSH2 0x113E JUMP JUMPDEST PUSH2 0xA02 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F9 SWAP1 PUSH2 0x1DC4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA80 DUP4 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAD2 DUP4 PUSH2 0x60D JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB14 JUMPI POP PUSH2 0xB13 DUP2 DUP6 PUSH2 0x8BC JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xB52 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB3A DUP5 PUSH2 0x430 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB7B DUP3 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBD1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBC8 SWAP1 PUSH2 0x1F48 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC40 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC37 SWAP1 PUSH2 0x1FDA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC4D DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x117F JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC6D DUP3 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCC3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBA SWAP1 PUSH2 0x1F48 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xE4F DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x12A5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xEFF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEF6 SWAP1 PUSH2 0x2046 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xFF0 SWAP2 SWAP1 PUSH2 0x165C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1008 DUP5 DUP5 DUP5 PUSH2 0xB5B JUMP JUMPDEST PUSH2 0x1014 DUP5 DUP5 DUP5 DUP5 PUSH2 0x12AB JUMP JUMPDEST PUSH2 0x1053 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104A SWAP1 PUSH2 0x20D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x107F DUP5 PUSH2 0x1432 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x109E JUMPI PUSH2 0x109D PUSH2 0x1974 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10D0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1133 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1127 JUMPI PUSH2 0x1126 PUSH2 0x20F8 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x10DE JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1160 DUP4 PUSH2 0xE54 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x129F JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1213 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x120B SWAP2 SWAP1 PUSH2 0x2156 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x129E JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1296 SWAP2 SWAP1 PUSH2 0x218A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12CC DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1585 JUMP JUMPDEST ISZERO PUSH2 0x1425 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x12F5 PUSH2 0xA05 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1317 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2213 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1353 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1350 SWAP2 SWAP1 PUSH2 0x2274 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x13D5 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1383 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1388 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x13CD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13C4 SWAP1 PUSH2 0x20D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x142A JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1490 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1486 JUMPI PUSH2 0x1485 PUSH2 0x20F8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x14CD JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x14C3 JUMPI PUSH2 0x14C2 PUSH2 0x20F8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x14FC JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x14F2 JUMPI PUSH2 0x14F1 PUSH2 0x20F8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1525 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x151B JUMPI PUSH2 0x151A PUSH2 0x20F8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x154A JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1540 JUMPI PUSH2 0x153F PUSH2 0x20F8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x156D JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1563 JUMPI PUSH2 0x1562 PUSH2 0x20F8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x157C JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x15F1 DUP2 PUSH2 0x15BC JUMP JUMPDEST DUP2 EQ PUSH2 0x15FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x160E DUP2 PUSH2 0x15E8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x162A JUMPI PUSH2 0x1629 PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1638 DUP5 DUP3 DUP6 ADD PUSH2 0x15FF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1656 DUP2 PUSH2 0x1641 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1671 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x164D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x16B1 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1696 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16D9 DUP3 PUSH2 0x1677 JUMP JUMPDEST PUSH2 0x16E3 DUP2 DUP6 PUSH2 0x1682 JUMP JUMPDEST SWAP4 POP PUSH2 0x16F3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1693 JUMP JUMPDEST PUSH2 0x16FC DUP2 PUSH2 0x16BD JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1721 DUP2 DUP5 PUSH2 0x16CE JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x173C DUP2 PUSH2 0x1729 JUMP JUMPDEST DUP2 EQ PUSH2 0x1747 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1759 DUP2 PUSH2 0x1733 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1775 JUMPI PUSH2 0x1774 PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1783 DUP5 DUP3 DUP6 ADD PUSH2 0x174A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17B7 DUP3 PUSH2 0x178C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x17C7 DUP2 PUSH2 0x17AC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x17E2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x17BE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x17F1 DUP2 PUSH2 0x17AC JUMP JUMPDEST DUP2 EQ PUSH2 0x17FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x180E DUP2 PUSH2 0x17E8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x182B JUMPI PUSH2 0x182A PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1839 DUP6 DUP3 DUP7 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x184A DUP6 DUP3 DUP7 ADD PUSH2 0x174A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x186D JUMPI PUSH2 0x186C PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x187B DUP7 DUP3 DUP8 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x188C DUP7 DUP3 DUP8 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x189D DUP7 DUP3 DUP8 ADD PUSH2 0x174A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18BD JUMPI PUSH2 0x18BC PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18CB DUP5 DUP3 DUP6 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x18DD DUP2 PUSH2 0x1729 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x18F8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x18D4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1907 DUP2 PUSH2 0x1641 JUMP JUMPDEST DUP2 EQ PUSH2 0x1912 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1924 DUP2 PUSH2 0x18FE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1941 JUMPI PUSH2 0x1940 PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x194F DUP6 DUP3 DUP7 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1960 DUP6 DUP3 DUP7 ADD PUSH2 0x1915 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x19AC DUP3 PUSH2 0x16BD JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x19CB JUMPI PUSH2 0x19CA PUSH2 0x1974 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19DE PUSH2 0x15A8 JUMP JUMPDEST SWAP1 POP PUSH2 0x19EA DUP3 DUP3 PUSH2 0x19A3 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1A0A JUMPI PUSH2 0x1A09 PUSH2 0x1974 JUMP JUMPDEST JUMPDEST PUSH2 0x1A13 DUP3 PUSH2 0x16BD JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A42 PUSH2 0x1A3D DUP5 PUSH2 0x19EF JUMP JUMPDEST PUSH2 0x19D4 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1A5E JUMPI PUSH2 0x1A5D PUSH2 0x196F JUMP JUMPDEST JUMPDEST PUSH2 0x1A69 DUP5 DUP3 DUP6 PUSH2 0x1A20 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1A86 JUMPI PUSH2 0x1A85 PUSH2 0x196A JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1A96 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1A2F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1AB9 JUMPI PUSH2 0x1AB8 PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1AC7 DUP8 DUP3 DUP9 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1AD8 DUP8 DUP3 DUP9 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1AE9 DUP8 DUP3 DUP9 ADD PUSH2 0x174A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B0A JUMPI PUSH2 0x1B09 PUSH2 0x15B7 JUMP JUMPDEST JUMPDEST PUSH2 0x1B16 DUP8 DUP3 DUP9 ADD PUSH2 0x1A71 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B39 JUMPI PUSH2 0x1B38 PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B47 DUP6 DUP3 DUP7 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1B58 DUP6 DUP3 DUP7 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1BA9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1BBC JUMPI PUSH2 0x1BBB PUSH2 0x1B62 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C1E PUSH1 0x21 DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C29 DUP3 PUSH2 0x1BC2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C4D DUP2 PUSH2 0x1C11 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CB0 PUSH1 0x3D DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x1CBB DUP3 PUSH2 0x1C54 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CDF DUP2 PUSH2 0x1CA3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D42 PUSH1 0x2D DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D4D DUP3 PUSH2 0x1CE6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D71 DUP2 PUSH2 0x1D35 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DAE PUSH1 0x18 DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DB9 DUP3 PUSH2 0x1D78 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1DDD DUP2 PUSH2 0x1DA1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E40 PUSH1 0x29 DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x1E4B DUP3 PUSH2 0x1DE4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E6F DUP2 PUSH2 0x1E33 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E8C DUP3 PUSH2 0x1677 JUMP JUMPDEST PUSH2 0x1E96 DUP2 DUP6 PUSH2 0x1E76 JUMP JUMPDEST SWAP4 POP PUSH2 0x1EA6 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1693 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EBE DUP3 DUP6 PUSH2 0x1E81 JUMP JUMPDEST SWAP2 POP PUSH2 0x1ECA DUP3 DUP5 PUSH2 0x1E81 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F32 PUSH1 0x25 DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F3D DUP3 PUSH2 0x1ED6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F61 DUP2 PUSH2 0x1F25 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FC4 PUSH1 0x24 DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FCF DUP3 PUSH2 0x1F68 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1FF3 DUP2 PUSH2 0x1FB7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2030 PUSH1 0x19 DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x203B DUP3 PUSH2 0x1FFA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x205F DUP2 PUSH2 0x2023 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20C2 PUSH1 0x32 DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x20CD DUP3 PUSH2 0x2066 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x20F1 DUP2 PUSH2 0x20B5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2161 DUP3 PUSH2 0x1729 JUMP JUMPDEST SWAP2 POP PUSH2 0x216C DUP4 PUSH2 0x1729 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x2184 JUMPI PUSH2 0x2183 PUSH2 0x2127 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2195 DUP3 PUSH2 0x1729 JUMP JUMPDEST SWAP2 POP PUSH2 0x21A0 DUP4 PUSH2 0x1729 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x21B8 JUMPI PUSH2 0x21B7 PUSH2 0x2127 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21E5 DUP3 PUSH2 0x21BE JUMP JUMPDEST PUSH2 0x21EF DUP2 DUP6 PUSH2 0x21C9 JUMP JUMPDEST SWAP4 POP PUSH2 0x21FF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1693 JUMP JUMPDEST PUSH2 0x2208 DUP2 PUSH2 0x16BD JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2228 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x17BE JUMP JUMPDEST PUSH2 0x2235 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x17BE JUMP JUMPDEST PUSH2 0x2242 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x18D4 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2254 DUP2 DUP5 PUSH2 0x21DA JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x226E DUP2 PUSH2 0x15E8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x228A JUMPI PUSH2 0x2289 PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2298 DUP5 DUP3 DUP6 ADD PUSH2 0x225F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2E CALL SSTORE 0xBE 0xEC PC BALANCE 0x5F SWAP10 GT 0xE1 0xC7 CODECOPY 0xE0 MULMOD SWAP4 PUSH32 0xE03BFA665F2F6054E78352D0BB320D64736F6C63430008110033000000000000 ","sourceMap":"628:16327:1:-:0;;;1390:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1464:5;1456;:13;;;;;;:::i;:::-;;1489:7;1479;:17;;;;;;:::i;:::-;;1390:113;;628:16327;;7:75:18;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:117;566:1;563;556:12;580:102;621:6;672:2;668:7;663:2;656:5;652:14;648:28;638:38;;580:102;;;:::o;688:180::-;736:77;733:1;726:88;833:4;830:1;823:15;857:4;854:1;847:15;874:281;957:27;979:4;957:27;:::i;:::-;949:6;945:40;1087:6;1075:10;1072:22;1051:18;1039:10;1036:34;1033:62;1030:88;;;1098:18;;:::i;:::-;1030:88;1138:10;1134:2;1127:22;917:238;874:281;;:::o;1161:129::-;1195:6;1222:20;;:::i;:::-;1212:30;;1251:33;1279:4;1271:6;1251:33;:::i;:::-;1161:129;;;:::o;1296:308::-;1358:4;1448:18;1440:6;1437:30;1434:56;;;1470:18;;:::i;:::-;1434:56;1508:29;1530:6;1508:29;:::i;:::-;1500:37;;1592:4;1586;1582:15;1574:23;;1296:308;;;:::o;1610:246::-;1691:1;1701:113;1715:6;1712:1;1709:13;1701:113;;;1800:1;1795:3;1791:11;1785:18;1781:1;1776:3;1772:11;1765:39;1737:2;1734:1;1730:10;1725:15;;1701:113;;;1848:1;1839:6;1834:3;1830:16;1823:27;1672:184;1610:246;;;:::o;1862:434::-;1951:5;1976:66;1992:49;2034:6;1992:49;:::i;:::-;1976:66;:::i;:::-;1967:75;;2065:6;2058:5;2051:21;2103:4;2096:5;2092:16;2141:3;2132:6;2127:3;2123:16;2120:25;2117:112;;;2148:79;;:::i;:::-;2117:112;2238:52;2283:6;2278:3;2273;2238:52;:::i;:::-;1957:339;1862:434;;;;;:::o;2316:355::-;2383:5;2432:3;2425:4;2417:6;2413:17;2409:27;2399:122;;2440:79;;:::i;:::-;2399:122;2550:6;2544:13;2575:90;2661:3;2653:6;2646:4;2638:6;2634:17;2575:90;:::i;:::-;2566:99;;2389:282;2316:355;;;;:::o;2677:853::-;2776:6;2784;2833:2;2821:9;2812:7;2808:23;2804:32;2801:119;;;2839:79;;:::i;:::-;2801:119;2980:1;2969:9;2965:17;2959:24;3010:18;3002:6;2999:30;2996:117;;;3032:79;;:::i;:::-;2996:117;3137:74;3203:7;3194:6;3183:9;3179:22;3137:74;:::i;:::-;3127:84;;2930:291;3281:2;3270:9;3266:18;3260:25;3312:18;3304:6;3301:30;3298:117;;;3334:79;;:::i;:::-;3298:117;3439:74;3505:7;3496:6;3485:9;3481:22;3439:74;:::i;:::-;3429:84;;3231:292;2677:853;;;;;:::o;3536:99::-;3588:6;3622:5;3616:12;3606:22;;3536:99;;;:::o;3641:180::-;3689:77;3686:1;3679:88;3786:4;3783:1;3776:15;3810:4;3807:1;3800:15;3827:320;3871:6;3908:1;3902:4;3898:12;3888:22;;3955:1;3949:4;3945:12;3976:18;3966:81;;4032:4;4024:6;4020:17;4010:27;;3966:81;4094:2;4086:6;4083:14;4063:18;4060:38;4057:84;;4113:18;;:::i;:::-;4057:84;3878:269;3827:320;;;:::o;4153:141::-;4202:4;4225:3;4217:11;;4248:3;4245:1;4238:14;4282:4;4279:1;4269:18;4261:26;;4153:141;;;:::o;4300:93::-;4337:6;4384:2;4379;4372:5;4368:14;4364:23;4354:33;;4300:93;;;:::o;4399:107::-;4443:8;4493:5;4487:4;4483:16;4462:37;;4399:107;;;;:::o;4512:393::-;4581:6;4631:1;4619:10;4615:18;4654:97;4684:66;4673:9;4654:97;:::i;:::-;4772:39;4802:8;4791:9;4772:39;:::i;:::-;4760:51;;4844:4;4840:9;4833:5;4829:21;4820:30;;4893:4;4883:8;4879:19;4872:5;4869:30;4859:40;;4588:317;;4512:393;;;;;:::o;4911:77::-;4948:7;4977:5;4966:16;;4911:77;;;:::o;4994:60::-;5022:3;5043:5;5036:12;;4994:60;;;:::o;5060:142::-;5110:9;5143:53;5161:34;5170:24;5188:5;5170:24;:::i;:::-;5161:34;:::i;:::-;5143:53;:::i;:::-;5130:66;;5060:142;;;:::o;5208:75::-;5251:3;5272:5;5265:12;;5208:75;;;:::o;5289:269::-;5399:39;5430:7;5399:39;:::i;:::-;5460:91;5509:41;5533:16;5509:41;:::i;:::-;5501:6;5494:4;5488:11;5460:91;:::i;:::-;5454:4;5447:105;5365:193;5289:269;;;:::o;5564:73::-;5609:3;5564:73;:::o;5643:189::-;5720:32;;:::i;:::-;5761:65;5819:6;5811;5805:4;5761:65;:::i;:::-;5696:136;5643:189;;:::o;5838:186::-;5898:120;5915:3;5908:5;5905:14;5898:120;;;5969:39;6006:1;5999:5;5969:39;:::i;:::-;5942:1;5935:5;5931:13;5922:22;;5898:120;;;5838:186;;:::o;6030:543::-;6131:2;6126:3;6123:11;6120:446;;;6165:38;6197:5;6165:38;:::i;:::-;6249:29;6267:10;6249:29;:::i;:::-;6239:8;6235:44;6432:2;6420:10;6417:18;6414:49;;;6453:8;6438:23;;6414:49;6476:80;6532:22;6550:3;6532:22;:::i;:::-;6522:8;6518:37;6505:11;6476:80;:::i;:::-;6135:431;;6120:446;6030:543;;;:::o;6579:117::-;6633:8;6683:5;6677:4;6673:16;6652:37;;6579:117;;;;:::o;6702:169::-;6746:6;6779:51;6827:1;6823:6;6815:5;6812:1;6808:13;6779:51;:::i;:::-;6775:56;6860:4;6854;6850:15;6840:25;;6753:118;6702:169;;;;:::o;6876:295::-;6952:4;7098:29;7123:3;7117:4;7098:29;:::i;:::-;7090:37;;7160:3;7157:1;7153:11;7147:4;7144:21;7136:29;;6876:295;;;;:::o;7176:1395::-;7293:37;7326:3;7293:37;:::i;:::-;7395:18;7387:6;7384:30;7381:56;;;7417:18;;:::i;:::-;7381:56;7461:38;7493:4;7487:11;7461:38;:::i;:::-;7546:67;7606:6;7598;7592:4;7546:67;:::i;:::-;7640:1;7664:4;7651:17;;7696:2;7688:6;7685:14;7713:1;7708:618;;;;8370:1;8387:6;8384:77;;;8436:9;8431:3;8427:19;8421:26;8412:35;;8384:77;8487:67;8547:6;8540:5;8487:67;:::i;:::-;8481:4;8474:81;8343:222;7678:887;;7708:618;7760:4;7756:9;7748:6;7744:22;7794:37;7826:4;7794:37;:::i;:::-;7853:1;7867:208;7881:7;7878:1;7875:14;7867:208;;;7960:9;7955:3;7951:19;7945:26;7937:6;7930:42;8011:1;8003:6;7999:14;7989:24;;8058:2;8047:9;8043:18;8030:31;;7904:4;7901:1;7897:12;7892:17;;7867:208;;;8103:6;8094:7;8091:19;8088:179;;;8161:9;8156:3;8152:19;8146:26;8204:48;8246:4;8238:6;8234:17;8223:9;8204:48;:::i;:::-;8196:6;8189:64;8111:156;8088:179;8313:1;8309;8301:6;8297:14;8293:22;8287:4;8280:36;7715:611;;;7678:887;;7268:1303;;;7176:1395;;:::o;628:16327:1:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_1056":{"entryPoint":4773,"id":1056,"parameterSlots":4,"returnSlots":0},"@_approve_889":{"entryPoint":2573,"id":889,"parameterSlots":2,"returnSlots":0},"@_baseURI_326":{"entryPoint":4185,"id":326,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_1043":{"entryPoint":4479,"id":1043,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_997":{"entryPoint":4779,"id":997,"parameterSlots":4,"returnSlots":1},"@_exists_558":{"entryPoint":4414,"id":558,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_592":{"entryPoint":2758,"id":592,"parameterSlots":2,"returnSlots":1},"@_msgSender_1685":{"entryPoint":2565,"id":1685,"parameterSlots":0,"returnSlots":1},"@_ownerOf_540":{"entryPoint":3668,"id":540,"parameterSlots":1,"returnSlots":1},"@_requireMinted_935":{"entryPoint":2490,"id":935,"parameterSlots":1,"returnSlots":0},"@_safeTransfer_527":{"entryPoint":4093,"id":527,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_921":{"entryPoint":3729,"id":921,"parameterSlots":3,"returnSlots":0},"@_transfer_865":{"entryPoint":2907,"id":865,"parameterSlots":3,"returnSlots":0},"@approve_369":{"entryPoint":1142,"id":369,"parameterSlots":2,"returnSlots":0},"@balanceOf_230":{"entryPoint":1683,"id":230,"parameterSlots":1,"returnSlots":1},"@getApproved_387":{"entryPoint":1072,"id":387,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_422":{"entryPoint":2236,"id":422,"parameterSlots":2,"returnSlots":1},"@isContract_1361":{"entryPoint":5509,"id":1361,"parameterSlots":1,"returnSlots":1},"@log10_2682":{"entryPoint":5170,"id":2682,"parameterSlots":1,"returnSlots":1},"@name_268":{"entryPoint":926,"id":268,"parameterSlots":0,"returnSlots":1},"@ownerOf_258":{"entryPoint":1549,"id":258,"parameterSlots":1,"returnSlots":1},"@safeTransferFrom_468":{"entryPoint":1517,"id":468,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_498":{"entryPoint":2034,"id":498,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_404":{"entryPoint":2012,"id":404,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1967":{"entryPoint":2384,"id":1967,"parameterSlots":1,"returnSlots":1},"@supportsInterface_206":{"entryPoint":700,"id":206,"parameterSlots":1,"returnSlots":1},"@symbol_278":{"entryPoint":1866,"id":278,"parameterSlots":0,"returnSlots":1},"@toString_1827":{"entryPoint":4208,"id":1827,"parameterSlots":1,"returnSlots":1},"@tokenURI_317":{"entryPoint":2132,"id":317,"parameterSlots":1,"returnSlots":1},"@transferFrom_449":{"entryPoint":1421,"id":449,"parameterSlots":3,"returnSlots":0},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":6703,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":6143,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":6421,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":5631,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":8799,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":6769,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":5962,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":6311,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":6946,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":6228,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":6815,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":6442,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":6164,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":5652,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":8820,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":5983,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":6078,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":5709,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":8666,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":5838,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":7809,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack":{"entryPoint":7477,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack":{"entryPoint":8373,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack":{"entryPoint":7973,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack":{"entryPoint":8119,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack":{"entryPoint":8227,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack":{"entryPoint":7731,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack":{"entryPoint":7585,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack":{"entryPoint":7185,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack":{"entryPoint":7331,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":6356,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":7858,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":6093,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":8723,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":5724,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5895,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7512,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8408,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8008,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8154,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8262,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7766,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7620,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7220,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7366,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":6371,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":6612,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":5544,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":6639,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":8638,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":5751,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":8649,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":5762,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":7798,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":8586,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":8534,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":6060,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":5697,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":5564,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":6028,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":5929,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory_with_cleanup":{"entryPoint":6688,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":5779,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":7057,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":6563,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x11":{"entryPoint":8487,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":8440,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":7010,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":6516,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":6506,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":6511,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":5559,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":5554,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":5821,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af":{"entryPoint":7398,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e":{"entryPoint":8294,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48":{"entryPoint":7894,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4":{"entryPoint":8040,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05":{"entryPoint":8186,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159":{"entryPoint":7652,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f":{"entryPoint":7544,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942":{"entryPoint":7106,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83":{"entryPoint":7252,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":6120,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":6398,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":5608,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":5939,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:23733:18","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:18","statements":[{"nodeType":"YulAssignment","src":"57:19:18","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:18","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:18"},"nodeType":"YulFunctionCall","src":"67:9:18"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:18"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:18","type":""}],"src":"7:75:18"},{"body":{"nodeType":"YulBlock","src":"177:28:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:18"},"nodeType":"YulFunctionCall","src":"187:12:18"},"nodeType":"YulExpressionStatement","src":"187:12:18"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:18"},{"body":{"nodeType":"YulBlock","src":"300:28:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:18"},"nodeType":"YulFunctionCall","src":"310:12:18"},"nodeType":"YulExpressionStatement","src":"310:12:18"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:18"},{"body":{"nodeType":"YulBlock","src":"378:105:18","statements":[{"nodeType":"YulAssignment","src":"388:89:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:18","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:18"},"nodeType":"YulFunctionCall","src":"399:78:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:18"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:18","type":""}],"src":"334:149:18"},{"body":{"nodeType":"YulBlock","src":"531:78:18","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:18"},"nodeType":"YulFunctionCall","src":"589:12:18"},"nodeType":"YulExpressionStatement","src":"589:12:18"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:18"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:18"},"nodeType":"YulFunctionCall","src":"561:23:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:18"},"nodeType":"YulFunctionCall","src":"551:34:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:18"},"nodeType":"YulFunctionCall","src":"544:42:18"},"nodeType":"YulIf","src":"541:62:18"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:18","type":""}],"src":"489:120:18"},{"body":{"nodeType":"YulBlock","src":"666:86:18","statements":[{"nodeType":"YulAssignment","src":"676:29:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:18"},"nodeType":"YulFunctionCall","src":"685:20:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:18"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:18"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:18"},"nodeType":"YulFunctionCall","src":"714:32:18"},"nodeType":"YulExpressionStatement","src":"714:32:18"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:18","type":""}],"src":"615:137:18"},{"body":{"nodeType":"YulBlock","src":"823:262:18","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:18"},"nodeType":"YulFunctionCall","src":"871:79:18"},"nodeType":"YulExpressionStatement","src":"871:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:18"},"nodeType":"YulFunctionCall","src":"840:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:18","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:18"},"nodeType":"YulFunctionCall","src":"836:32:18"},"nodeType":"YulIf","src":"833:119:18"},{"nodeType":"YulBlock","src":"962:116:18","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:18","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:18"},"nodeType":"YulFunctionCall","src":"1036:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:18"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:18"},"nodeType":"YulFunctionCall","src":"1016:52:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:18"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:18","type":""}],"src":"758:327:18"},{"body":{"nodeType":"YulBlock","src":"1133:48:18","statements":[{"nodeType":"YulAssignment","src":"1143:32:18","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:18"},"nodeType":"YulFunctionCall","src":"1161:13:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:18"},"nodeType":"YulFunctionCall","src":"1154:21:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:18"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:18","type":""}],"src":"1091:90:18"},{"body":{"nodeType":"YulBlock","src":"1246:50:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:18"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:18"},"nodeType":"YulFunctionCall","src":"1268:21:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:18"},"nodeType":"YulFunctionCall","src":"1256:34:18"},"nodeType":"YulExpressionStatement","src":"1256:34:18"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:18","type":""}],"src":"1187:109:18"},{"body":{"nodeType":"YulBlock","src":"1394:118:18","statements":[{"nodeType":"YulAssignment","src":"1404:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:18"},"nodeType":"YulFunctionCall","src":"1412:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:18"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:18"},"nodeType":"YulFunctionCall","src":"1487:17:18"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:18"},"nodeType":"YulFunctionCall","src":"1440:65:18"},"nodeType":"YulExpressionStatement","src":"1440:65:18"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:18","type":""}],"src":"1302:210:18"},{"body":{"nodeType":"YulBlock","src":"1577:40:18","statements":[{"nodeType":"YulAssignment","src":"1588:22:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1604:5:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1598:5:18"},"nodeType":"YulFunctionCall","src":"1598:12:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1588:6:18"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1560:5:18","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1570:6:18","type":""}],"src":"1518:99:18"},{"body":{"nodeType":"YulBlock","src":"1719:73:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1736:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"1741:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1729:6:18"},"nodeType":"YulFunctionCall","src":"1729:19:18"},"nodeType":"YulExpressionStatement","src":"1729:19:18"},{"nodeType":"YulAssignment","src":"1757:29:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1776:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"1781:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1772:3:18"},"nodeType":"YulFunctionCall","src":"1772:14:18"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1757:11:18"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1691:3:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"1696:6:18","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1707:11:18","type":""}],"src":"1623:169:18"},{"body":{"nodeType":"YulBlock","src":"1860:184:18","statements":[{"nodeType":"YulVariableDeclaration","src":"1870:10:18","value":{"kind":"number","nodeType":"YulLiteral","src":"1879:1:18","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1874:1:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"1939:63:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1964:3:18"},{"name":"i","nodeType":"YulIdentifier","src":"1969:1:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1960:3:18"},"nodeType":"YulFunctionCall","src":"1960:11:18"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1983:3:18"},{"name":"i","nodeType":"YulIdentifier","src":"1988:1:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1979:3:18"},"nodeType":"YulFunctionCall","src":"1979:11:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1973:5:18"},"nodeType":"YulFunctionCall","src":"1973:18:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1953:6:18"},"nodeType":"YulFunctionCall","src":"1953:39:18"},"nodeType":"YulExpressionStatement","src":"1953:39:18"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1900:1:18"},{"name":"length","nodeType":"YulIdentifier","src":"1903:6:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1897:2:18"},"nodeType":"YulFunctionCall","src":"1897:13:18"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1911:19:18","statements":[{"nodeType":"YulAssignment","src":"1913:15:18","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1922:1:18"},{"kind":"number","nodeType":"YulLiteral","src":"1925:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1918:3:18"},"nodeType":"YulFunctionCall","src":"1918:10:18"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1913:1:18"}]}]},"pre":{"nodeType":"YulBlock","src":"1893:3:18","statements":[]},"src":"1889:113:18"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2022:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"2027:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2018:3:18"},"nodeType":"YulFunctionCall","src":"2018:16:18"},{"kind":"number","nodeType":"YulLiteral","src":"2036:1:18","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2011:6:18"},"nodeType":"YulFunctionCall","src":"2011:27:18"},"nodeType":"YulExpressionStatement","src":"2011:27:18"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1842:3:18","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1847:3:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"1852:6:18","type":""}],"src":"1798:246:18"},{"body":{"nodeType":"YulBlock","src":"2098:54:18","statements":[{"nodeType":"YulAssignment","src":"2108:38:18","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2126:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"2133:2:18","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2122:3:18"},"nodeType":"YulFunctionCall","src":"2122:14:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2142:2:18","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2138:3:18"},"nodeType":"YulFunctionCall","src":"2138:7:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2118:3:18"},"nodeType":"YulFunctionCall","src":"2118:28:18"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"2108:6:18"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2081:5:18","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"2091:6:18","type":""}],"src":"2050:102:18"},{"body":{"nodeType":"YulBlock","src":"2250:285:18","statements":[{"nodeType":"YulVariableDeclaration","src":"2260:53:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2307:5:18"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2274:32:18"},"nodeType":"YulFunctionCall","src":"2274:39:18"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2264:6:18","type":""}]},{"nodeType":"YulAssignment","src":"2322:78:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2388:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"2393:6:18"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2329:58:18"},"nodeType":"YulFunctionCall","src":"2329:71:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2322:3:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2448:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"2455:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2444:3:18"},"nodeType":"YulFunctionCall","src":"2444:16:18"},{"name":"pos","nodeType":"YulIdentifier","src":"2462:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"2467:6:18"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"2409:34:18"},"nodeType":"YulFunctionCall","src":"2409:65:18"},"nodeType":"YulExpressionStatement","src":"2409:65:18"},{"nodeType":"YulAssignment","src":"2483:46:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2494:3:18"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2521:6:18"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2499:21:18"},"nodeType":"YulFunctionCall","src":"2499:29:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2490:3:18"},"nodeType":"YulFunctionCall","src":"2490:39:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2483:3:18"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2231:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2238:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2246:3:18","type":""}],"src":"2158:377:18"},{"body":{"nodeType":"YulBlock","src":"2659:195:18","statements":[{"nodeType":"YulAssignment","src":"2669:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2681:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"2692:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2677:3:18"},"nodeType":"YulFunctionCall","src":"2677:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2669:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2716:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"2727:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2712:3:18"},"nodeType":"YulFunctionCall","src":"2712:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2735:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"2741:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2731:3:18"},"nodeType":"YulFunctionCall","src":"2731:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2705:6:18"},"nodeType":"YulFunctionCall","src":"2705:47:18"},"nodeType":"YulExpressionStatement","src":"2705:47:18"},{"nodeType":"YulAssignment","src":"2761:86:18","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2833:6:18"},{"name":"tail","nodeType":"YulIdentifier","src":"2842:4:18"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2769:63:18"},"nodeType":"YulFunctionCall","src":"2769:78:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2761:4:18"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2631:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2643:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2654:4:18","type":""}],"src":"2541:313:18"},{"body":{"nodeType":"YulBlock","src":"2905:32:18","statements":[{"nodeType":"YulAssignment","src":"2915:16:18","value":{"name":"value","nodeType":"YulIdentifier","src":"2926:5:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2915:7:18"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2887:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2897:7:18","type":""}],"src":"2860:77:18"},{"body":{"nodeType":"YulBlock","src":"2986:79:18","statements":[{"body":{"nodeType":"YulBlock","src":"3043:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3052:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3055:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3045:6:18"},"nodeType":"YulFunctionCall","src":"3045:12:18"},"nodeType":"YulExpressionStatement","src":"3045:12:18"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3009:5:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3034:5:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3016:17:18"},"nodeType":"YulFunctionCall","src":"3016:24:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3006:2:18"},"nodeType":"YulFunctionCall","src":"3006:35:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2999:6:18"},"nodeType":"YulFunctionCall","src":"2999:43:18"},"nodeType":"YulIf","src":"2996:63:18"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2979:5:18","type":""}],"src":"2943:122:18"},{"body":{"nodeType":"YulBlock","src":"3123:87:18","statements":[{"nodeType":"YulAssignment","src":"3133:29:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3155:6:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3142:12:18"},"nodeType":"YulFunctionCall","src":"3142:20:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3133:5:18"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3198:5:18"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"3171:26:18"},"nodeType":"YulFunctionCall","src":"3171:33:18"},"nodeType":"YulExpressionStatement","src":"3171:33:18"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3101:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"3109:3:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3117:5:18","type":""}],"src":"3071:139:18"},{"body":{"nodeType":"YulBlock","src":"3282:263:18","statements":[{"body":{"nodeType":"YulBlock","src":"3328:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3330:77:18"},"nodeType":"YulFunctionCall","src":"3330:79:18"},"nodeType":"YulExpressionStatement","src":"3330:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3303:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"3312:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3299:3:18"},"nodeType":"YulFunctionCall","src":"3299:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"3324:2:18","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3295:3:18"},"nodeType":"YulFunctionCall","src":"3295:32:18"},"nodeType":"YulIf","src":"3292:119:18"},{"nodeType":"YulBlock","src":"3421:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"3436:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"3450:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3440:6:18","type":""}]},{"nodeType":"YulAssignment","src":"3465:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3500:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"3511:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3496:3:18"},"nodeType":"YulFunctionCall","src":"3496:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3520:7:18"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3475:20:18"},"nodeType":"YulFunctionCall","src":"3475:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3465:6:18"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3252:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3263:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3275:6:18","type":""}],"src":"3216:329:18"},{"body":{"nodeType":"YulBlock","src":"3596:81:18","statements":[{"nodeType":"YulAssignment","src":"3606:65:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3621:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"3628:42:18","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3617:3:18"},"nodeType":"YulFunctionCall","src":"3617:54:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3606:7:18"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3578:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3588:7:18","type":""}],"src":"3551:126:18"},{"body":{"nodeType":"YulBlock","src":"3728:51:18","statements":[{"nodeType":"YulAssignment","src":"3738:35:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3767:5:18"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"3749:17:18"},"nodeType":"YulFunctionCall","src":"3749:24:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3738:7:18"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3710:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3720:7:18","type":""}],"src":"3683:96:18"},{"body":{"nodeType":"YulBlock","src":"3850:53:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3867:3:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3890:5:18"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"3872:17:18"},"nodeType":"YulFunctionCall","src":"3872:24:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3860:6:18"},"nodeType":"YulFunctionCall","src":"3860:37:18"},"nodeType":"YulExpressionStatement","src":"3860:37:18"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3838:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3845:3:18","type":""}],"src":"3785:118:18"},{"body":{"nodeType":"YulBlock","src":"4007:124:18","statements":[{"nodeType":"YulAssignment","src":"4017:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4029:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"4040:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4025:3:18"},"nodeType":"YulFunctionCall","src":"4025:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4017:4:18"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4097:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4110:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"4121:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4106:3:18"},"nodeType":"YulFunctionCall","src":"4106:17:18"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4053:43:18"},"nodeType":"YulFunctionCall","src":"4053:71:18"},"nodeType":"YulExpressionStatement","src":"4053:71:18"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3979:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3991:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4002:4:18","type":""}],"src":"3909:222:18"},{"body":{"nodeType":"YulBlock","src":"4180:79:18","statements":[{"body":{"nodeType":"YulBlock","src":"4237:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4246:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4249:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4239:6:18"},"nodeType":"YulFunctionCall","src":"4239:12:18"},"nodeType":"YulExpressionStatement","src":"4239:12:18"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4203:5:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4228:5:18"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4210:17:18"},"nodeType":"YulFunctionCall","src":"4210:24:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4200:2:18"},"nodeType":"YulFunctionCall","src":"4200:35:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4193:6:18"},"nodeType":"YulFunctionCall","src":"4193:43:18"},"nodeType":"YulIf","src":"4190:63:18"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4173:5:18","type":""}],"src":"4137:122:18"},{"body":{"nodeType":"YulBlock","src":"4317:87:18","statements":[{"nodeType":"YulAssignment","src":"4327:29:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4349:6:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4336:12:18"},"nodeType":"YulFunctionCall","src":"4336:20:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4327:5:18"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4392:5:18"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"4365:26:18"},"nodeType":"YulFunctionCall","src":"4365:33:18"},"nodeType":"YulExpressionStatement","src":"4365:33:18"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4295:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"4303:3:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4311:5:18","type":""}],"src":"4265:139:18"},{"body":{"nodeType":"YulBlock","src":"4493:391:18","statements":[{"body":{"nodeType":"YulBlock","src":"4539:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4541:77:18"},"nodeType":"YulFunctionCall","src":"4541:79:18"},"nodeType":"YulExpressionStatement","src":"4541:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4514:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"4523:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4510:3:18"},"nodeType":"YulFunctionCall","src":"4510:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"4535:2:18","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4506:3:18"},"nodeType":"YulFunctionCall","src":"4506:32:18"},"nodeType":"YulIf","src":"4503:119:18"},{"nodeType":"YulBlock","src":"4632:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"4647:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"4661:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4651:6:18","type":""}]},{"nodeType":"YulAssignment","src":"4676:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4711:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"4722:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4707:3:18"},"nodeType":"YulFunctionCall","src":"4707:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4731:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4686:20:18"},"nodeType":"YulFunctionCall","src":"4686:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4676:6:18"}]}]},{"nodeType":"YulBlock","src":"4759:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"4774:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"4788:2:18","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4778:6:18","type":""}]},{"nodeType":"YulAssignment","src":"4804:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4839:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"4850:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4835:3:18"},"nodeType":"YulFunctionCall","src":"4835:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4859:7:18"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4814:20:18"},"nodeType":"YulFunctionCall","src":"4814:53:18"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4804:6:18"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4455:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4466:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4478:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4486:6:18","type":""}],"src":"4410:474:18"},{"body":{"nodeType":"YulBlock","src":"4990:519:18","statements":[{"body":{"nodeType":"YulBlock","src":"5036:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5038:77:18"},"nodeType":"YulFunctionCall","src":"5038:79:18"},"nodeType":"YulExpressionStatement","src":"5038:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5011:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"5020:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5007:3:18"},"nodeType":"YulFunctionCall","src":"5007:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"5032:2:18","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5003:3:18"},"nodeType":"YulFunctionCall","src":"5003:32:18"},"nodeType":"YulIf","src":"5000:119:18"},{"nodeType":"YulBlock","src":"5129:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"5144:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"5158:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5148:6:18","type":""}]},{"nodeType":"YulAssignment","src":"5173:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5208:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"5219:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5204:3:18"},"nodeType":"YulFunctionCall","src":"5204:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5228:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5183:20:18"},"nodeType":"YulFunctionCall","src":"5183:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5173:6:18"}]}]},{"nodeType":"YulBlock","src":"5256:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"5271:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"5285:2:18","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5275:6:18","type":""}]},{"nodeType":"YulAssignment","src":"5301:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5336:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"5347:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5332:3:18"},"nodeType":"YulFunctionCall","src":"5332:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5356:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5311:20:18"},"nodeType":"YulFunctionCall","src":"5311:53:18"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5301:6:18"}]}]},{"nodeType":"YulBlock","src":"5384:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"5399:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"5413:2:18","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5403:6:18","type":""}]},{"nodeType":"YulAssignment","src":"5429:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5464:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"5475:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5460:3:18"},"nodeType":"YulFunctionCall","src":"5460:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5484:7:18"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5439:20:18"},"nodeType":"YulFunctionCall","src":"5439:53:18"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5429:6:18"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4944:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4955:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4967:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4975:6:18","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4983:6:18","type":""}],"src":"4890:619:18"},{"body":{"nodeType":"YulBlock","src":"5581:263:18","statements":[{"body":{"nodeType":"YulBlock","src":"5627:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5629:77:18"},"nodeType":"YulFunctionCall","src":"5629:79:18"},"nodeType":"YulExpressionStatement","src":"5629:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5602:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"5611:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5598:3:18"},"nodeType":"YulFunctionCall","src":"5598:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"5623:2:18","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5594:3:18"},"nodeType":"YulFunctionCall","src":"5594:32:18"},"nodeType":"YulIf","src":"5591:119:18"},{"nodeType":"YulBlock","src":"5720:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"5735:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"5749:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5739:6:18","type":""}]},{"nodeType":"YulAssignment","src":"5764:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5799:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"5810:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5795:3:18"},"nodeType":"YulFunctionCall","src":"5795:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5819:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5774:20:18"},"nodeType":"YulFunctionCall","src":"5774:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5764:6:18"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5551:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5562:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5574:6:18","type":""}],"src":"5515:329:18"},{"body":{"nodeType":"YulBlock","src":"5915:53:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5932:3:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5955:5:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5937:17:18"},"nodeType":"YulFunctionCall","src":"5937:24:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5925:6:18"},"nodeType":"YulFunctionCall","src":"5925:37:18"},"nodeType":"YulExpressionStatement","src":"5925:37:18"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5903:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5910:3:18","type":""}],"src":"5850:118:18"},{"body":{"nodeType":"YulBlock","src":"6072:124:18","statements":[{"nodeType":"YulAssignment","src":"6082:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6094:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"6105:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6090:3:18"},"nodeType":"YulFunctionCall","src":"6090:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6082:4:18"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6162:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6175:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"6186:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6171:3:18"},"nodeType":"YulFunctionCall","src":"6171:17:18"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"6118:43:18"},"nodeType":"YulFunctionCall","src":"6118:71:18"},"nodeType":"YulExpressionStatement","src":"6118:71:18"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6044:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6056:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6067:4:18","type":""}],"src":"5974:222:18"},{"body":{"nodeType":"YulBlock","src":"6242:76:18","statements":[{"body":{"nodeType":"YulBlock","src":"6296:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6305:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6308:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6298:6:18"},"nodeType":"YulFunctionCall","src":"6298:12:18"},"nodeType":"YulExpressionStatement","src":"6298:12:18"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6265:5:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6287:5:18"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"6272:14:18"},"nodeType":"YulFunctionCall","src":"6272:21:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6262:2:18"},"nodeType":"YulFunctionCall","src":"6262:32:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6255:6:18"},"nodeType":"YulFunctionCall","src":"6255:40:18"},"nodeType":"YulIf","src":"6252:60:18"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6235:5:18","type":""}],"src":"6202:116:18"},{"body":{"nodeType":"YulBlock","src":"6373:84:18","statements":[{"nodeType":"YulAssignment","src":"6383:29:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6405:6:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6392:12:18"},"nodeType":"YulFunctionCall","src":"6392:20:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6383:5:18"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6445:5:18"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"6421:23:18"},"nodeType":"YulFunctionCall","src":"6421:30:18"},"nodeType":"YulExpressionStatement","src":"6421:30:18"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6351:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"6359:3:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"6367:5:18","type":""}],"src":"6324:133:18"},{"body":{"nodeType":"YulBlock","src":"6543:388:18","statements":[{"body":{"nodeType":"YulBlock","src":"6589:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6591:77:18"},"nodeType":"YulFunctionCall","src":"6591:79:18"},"nodeType":"YulExpressionStatement","src":"6591:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6564:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"6573:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6560:3:18"},"nodeType":"YulFunctionCall","src":"6560:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"6585:2:18","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6556:3:18"},"nodeType":"YulFunctionCall","src":"6556:32:18"},"nodeType":"YulIf","src":"6553:119:18"},{"nodeType":"YulBlock","src":"6682:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"6697:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"6711:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6701:6:18","type":""}]},{"nodeType":"YulAssignment","src":"6726:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6761:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"6772:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6757:3:18"},"nodeType":"YulFunctionCall","src":"6757:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6781:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6736:20:18"},"nodeType":"YulFunctionCall","src":"6736:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6726:6:18"}]}]},{"nodeType":"YulBlock","src":"6809:115:18","statements":[{"nodeType":"YulVariableDeclaration","src":"6824:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"6838:2:18","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6828:6:18","type":""}]},{"nodeType":"YulAssignment","src":"6854:60:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6886:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"6897:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6882:3:18"},"nodeType":"YulFunctionCall","src":"6882:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6906:7:18"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"6864:17:18"},"nodeType":"YulFunctionCall","src":"6864:50:18"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6854:6:18"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6505:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6516:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6528:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6536:6:18","type":""}],"src":"6463:468:18"},{"body":{"nodeType":"YulBlock","src":"7026:28:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7043:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7046:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7036:6:18"},"nodeType":"YulFunctionCall","src":"7036:12:18"},"nodeType":"YulExpressionStatement","src":"7036:12:18"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"6937:117:18"},{"body":{"nodeType":"YulBlock","src":"7149:28:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7166:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7169:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7159:6:18"},"nodeType":"YulFunctionCall","src":"7159:12:18"},"nodeType":"YulExpressionStatement","src":"7159:12:18"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"7060:117:18"},{"body":{"nodeType":"YulBlock","src":"7211:152:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7228:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7231:77:18","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7221:6:18"},"nodeType":"YulFunctionCall","src":"7221:88:18"},"nodeType":"YulExpressionStatement","src":"7221:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7325:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7328:4:18","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7318:6:18"},"nodeType":"YulFunctionCall","src":"7318:15:18"},"nodeType":"YulExpressionStatement","src":"7318:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7349:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7352:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7342:6:18"},"nodeType":"YulFunctionCall","src":"7342:15:18"},"nodeType":"YulExpressionStatement","src":"7342:15:18"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"7183:180:18"},{"body":{"nodeType":"YulBlock","src":"7412:238:18","statements":[{"nodeType":"YulVariableDeclaration","src":"7422:58:18","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7444:6:18"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"7474:4:18"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"7452:21:18"},"nodeType":"YulFunctionCall","src":"7452:27:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7440:3:18"},"nodeType":"YulFunctionCall","src":"7440:40:18"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"7426:10:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"7591:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7593:16:18"},"nodeType":"YulFunctionCall","src":"7593:18:18"},"nodeType":"YulExpressionStatement","src":"7593:18:18"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7534:10:18"},{"kind":"number","nodeType":"YulLiteral","src":"7546:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7531:2:18"},"nodeType":"YulFunctionCall","src":"7531:34:18"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7570:10:18"},{"name":"memPtr","nodeType":"YulIdentifier","src":"7582:6:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7567:2:18"},"nodeType":"YulFunctionCall","src":"7567:22:18"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7528:2:18"},"nodeType":"YulFunctionCall","src":"7528:62:18"},"nodeType":"YulIf","src":"7525:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7629:2:18","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7633:10:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7622:6:18"},"nodeType":"YulFunctionCall","src":"7622:22:18"},"nodeType":"YulExpressionStatement","src":"7622:22:18"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7398:6:18","type":""},{"name":"size","nodeType":"YulTypedName","src":"7406:4:18","type":""}],"src":"7369:281:18"},{"body":{"nodeType":"YulBlock","src":"7697:88:18","statements":[{"nodeType":"YulAssignment","src":"7707:30:18","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"7717:18:18"},"nodeType":"YulFunctionCall","src":"7717:20:18"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7707:6:18"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7766:6:18"},{"name":"size","nodeType":"YulIdentifier","src":"7774:4:18"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"7746:19:18"},"nodeType":"YulFunctionCall","src":"7746:33:18"},"nodeType":"YulExpressionStatement","src":"7746:33:18"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"7681:4:18","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"7690:6:18","type":""}],"src":"7656:129:18"},{"body":{"nodeType":"YulBlock","src":"7857:241:18","statements":[{"body":{"nodeType":"YulBlock","src":"7962:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7964:16:18"},"nodeType":"YulFunctionCall","src":"7964:18:18"},"nodeType":"YulExpressionStatement","src":"7964:18:18"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7934:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"7942:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7931:2:18"},"nodeType":"YulFunctionCall","src":"7931:30:18"},"nodeType":"YulIf","src":"7928:56:18"},{"nodeType":"YulAssignment","src":"7994:37:18","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8024:6:18"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"8002:21:18"},"nodeType":"YulFunctionCall","src":"8002:29:18"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"7994:4:18"}]},{"nodeType":"YulAssignment","src":"8068:23:18","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"8080:4:18"},{"kind":"number","nodeType":"YulLiteral","src":"8086:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8076:3:18"},"nodeType":"YulFunctionCall","src":"8076:15:18"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"8068:4:18"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"7841:6:18","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"7852:4:18","type":""}],"src":"7791:307:18"},{"body":{"nodeType":"YulBlock","src":"8168:82:18","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8191:3:18"},{"name":"src","nodeType":"YulIdentifier","src":"8196:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"8201:6:18"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"8178:12:18"},"nodeType":"YulFunctionCall","src":"8178:30:18"},"nodeType":"YulExpressionStatement","src":"8178:30:18"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8228:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"8233:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8224:3:18"},"nodeType":"YulFunctionCall","src":"8224:16:18"},{"kind":"number","nodeType":"YulLiteral","src":"8242:1:18","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8217:6:18"},"nodeType":"YulFunctionCall","src":"8217:27:18"},"nodeType":"YulExpressionStatement","src":"8217:27:18"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8150:3:18","type":""},{"name":"dst","nodeType":"YulTypedName","src":"8155:3:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"8160:6:18","type":""}],"src":"8104:146:18"},{"body":{"nodeType":"YulBlock","src":"8339:340:18","statements":[{"nodeType":"YulAssignment","src":"8349:74:18","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8415:6:18"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"8374:40:18"},"nodeType":"YulFunctionCall","src":"8374:48:18"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"8358:15:18"},"nodeType":"YulFunctionCall","src":"8358:65:18"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8349:5:18"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"8439:5:18"},{"name":"length","nodeType":"YulIdentifier","src":"8446:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8432:6:18"},"nodeType":"YulFunctionCall","src":"8432:21:18"},"nodeType":"YulExpressionStatement","src":"8432:21:18"},{"nodeType":"YulVariableDeclaration","src":"8462:27:18","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"8477:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"8484:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8473:3:18"},"nodeType":"YulFunctionCall","src":"8473:16:18"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"8466:3:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"8527:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"8529:77:18"},"nodeType":"YulFunctionCall","src":"8529:79:18"},"nodeType":"YulExpressionStatement","src":"8529:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8508:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"8513:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8504:3:18"},"nodeType":"YulFunctionCall","src":"8504:16:18"},{"name":"end","nodeType":"YulIdentifier","src":"8522:3:18"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8501:2:18"},"nodeType":"YulFunctionCall","src":"8501:25:18"},"nodeType":"YulIf","src":"8498:112:18"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8656:3:18"},{"name":"dst","nodeType":"YulIdentifier","src":"8661:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"8666:6:18"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"8619:36:18"},"nodeType":"YulFunctionCall","src":"8619:54:18"},"nodeType":"YulExpressionStatement","src":"8619:54:18"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8312:3:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"8317:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"8325:3:18","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"8333:5:18","type":""}],"src":"8256:423:18"},{"body":{"nodeType":"YulBlock","src":"8759:277:18","statements":[{"body":{"nodeType":"YulBlock","src":"8808:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"8810:77:18"},"nodeType":"YulFunctionCall","src":"8810:79:18"},"nodeType":"YulExpressionStatement","src":"8810:79:18"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8787:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"8795:4:18","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8783:3:18"},"nodeType":"YulFunctionCall","src":"8783:17:18"},{"name":"end","nodeType":"YulIdentifier","src":"8802:3:18"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8779:3:18"},"nodeType":"YulFunctionCall","src":"8779:27:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8772:6:18"},"nodeType":"YulFunctionCall","src":"8772:35:18"},"nodeType":"YulIf","src":"8769:122:18"},{"nodeType":"YulVariableDeclaration","src":"8900:34:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8927:6:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8914:12:18"},"nodeType":"YulFunctionCall","src":"8914:20:18"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8904:6:18","type":""}]},{"nodeType":"YulAssignment","src":"8943:87:18","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9003:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"9011:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8999:3:18"},"nodeType":"YulFunctionCall","src":"8999:17:18"},{"name":"length","nodeType":"YulIdentifier","src":"9018:6:18"},{"name":"end","nodeType":"YulIdentifier","src":"9026:3:18"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"8952:46:18"},"nodeType":"YulFunctionCall","src":"8952:78:18"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8943:5:18"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8737:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"8745:3:18","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"8753:5:18","type":""}],"src":"8698:338:18"},{"body":{"nodeType":"YulBlock","src":"9168:817:18","statements":[{"body":{"nodeType":"YulBlock","src":"9215:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9217:77:18"},"nodeType":"YulFunctionCall","src":"9217:79:18"},"nodeType":"YulExpressionStatement","src":"9217:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9189:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"9198:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9185:3:18"},"nodeType":"YulFunctionCall","src":"9185:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"9210:3:18","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9181:3:18"},"nodeType":"YulFunctionCall","src":"9181:33:18"},"nodeType":"YulIf","src":"9178:120:18"},{"nodeType":"YulBlock","src":"9308:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"9323:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"9337:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9327:6:18","type":""}]},{"nodeType":"YulAssignment","src":"9352:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9387:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"9398:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9383:3:18"},"nodeType":"YulFunctionCall","src":"9383:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9407:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9362:20:18"},"nodeType":"YulFunctionCall","src":"9362:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9352:6:18"}]}]},{"nodeType":"YulBlock","src":"9435:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"9450:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"9464:2:18","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9454:6:18","type":""}]},{"nodeType":"YulAssignment","src":"9480:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9515:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"9526:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9511:3:18"},"nodeType":"YulFunctionCall","src":"9511:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9535:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9490:20:18"},"nodeType":"YulFunctionCall","src":"9490:53:18"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9480:6:18"}]}]},{"nodeType":"YulBlock","src":"9563:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"9578:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"9592:2:18","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9582:6:18","type":""}]},{"nodeType":"YulAssignment","src":"9608:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9643:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"9654:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9639:3:18"},"nodeType":"YulFunctionCall","src":"9639:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9663:7:18"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"9618:20:18"},"nodeType":"YulFunctionCall","src":"9618:53:18"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"9608:6:18"}]}]},{"nodeType":"YulBlock","src":"9691:287:18","statements":[{"nodeType":"YulVariableDeclaration","src":"9706:46:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9737:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"9748:2:18","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9733:3:18"},"nodeType":"YulFunctionCall","src":"9733:18:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9720:12:18"},"nodeType":"YulFunctionCall","src":"9720:32:18"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9710:6:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"9799:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"9801:77:18"},"nodeType":"YulFunctionCall","src":"9801:79:18"},"nodeType":"YulExpressionStatement","src":"9801:79:18"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9771:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"9779:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9768:2:18"},"nodeType":"YulFunctionCall","src":"9768:30:18"},"nodeType":"YulIf","src":"9765:117:18"},{"nodeType":"YulAssignment","src":"9896:72:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9940:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"9951:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9936:3:18"},"nodeType":"YulFunctionCall","src":"9936:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9960:7:18"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"9906:29:18"},"nodeType":"YulFunctionCall","src":"9906:62:18"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"9896:6:18"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9114:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9125:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9137:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9145:6:18","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9153:6:18","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9161:6:18","type":""}],"src":"9042:943:18"},{"body":{"nodeType":"YulBlock","src":"10074:391:18","statements":[{"body":{"nodeType":"YulBlock","src":"10120:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10122:77:18"},"nodeType":"YulFunctionCall","src":"10122:79:18"},"nodeType":"YulExpressionStatement","src":"10122:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10095:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"10104:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10091:3:18"},"nodeType":"YulFunctionCall","src":"10091:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"10116:2:18","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10087:3:18"},"nodeType":"YulFunctionCall","src":"10087:32:18"},"nodeType":"YulIf","src":"10084:119:18"},{"nodeType":"YulBlock","src":"10213:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"10228:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"10242:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10232:6:18","type":""}]},{"nodeType":"YulAssignment","src":"10257:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10292:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"10303:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10288:3:18"},"nodeType":"YulFunctionCall","src":"10288:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10312:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10267:20:18"},"nodeType":"YulFunctionCall","src":"10267:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10257:6:18"}]}]},{"nodeType":"YulBlock","src":"10340:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"10355:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"10369:2:18","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10359:6:18","type":""}]},{"nodeType":"YulAssignment","src":"10385:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10420:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"10431:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10416:3:18"},"nodeType":"YulFunctionCall","src":"10416:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10440:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10395:20:18"},"nodeType":"YulFunctionCall","src":"10395:53:18"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10385:6:18"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10036:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10047:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10059:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10067:6:18","type":""}],"src":"9991:474:18"},{"body":{"nodeType":"YulBlock","src":"10499:152:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10516:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10519:77:18","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10509:6:18"},"nodeType":"YulFunctionCall","src":"10509:88:18"},"nodeType":"YulExpressionStatement","src":"10509:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10613:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10616:4:18","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10606:6:18"},"nodeType":"YulFunctionCall","src":"10606:15:18"},"nodeType":"YulExpressionStatement","src":"10606:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10637:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10640:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10630:6:18"},"nodeType":"YulFunctionCall","src":"10630:15:18"},"nodeType":"YulExpressionStatement","src":"10630:15:18"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"10471:180:18"},{"body":{"nodeType":"YulBlock","src":"10708:269:18","statements":[{"nodeType":"YulAssignment","src":"10718:22:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10732:4:18"},{"kind":"number","nodeType":"YulLiteral","src":"10738:1:18","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"10728:3:18"},"nodeType":"YulFunctionCall","src":"10728:12:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10718:6:18"}]},{"nodeType":"YulVariableDeclaration","src":"10749:38:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10779:4:18"},{"kind":"number","nodeType":"YulLiteral","src":"10785:1:18","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10775:3:18"},"nodeType":"YulFunctionCall","src":"10775:12:18"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"10753:18:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"10826:51:18","statements":[{"nodeType":"YulAssignment","src":"10840:27:18","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10854:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"10862:4:18","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10850:3:18"},"nodeType":"YulFunctionCall","src":"10850:17:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10840:6:18"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"10806:18:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10799:6:18"},"nodeType":"YulFunctionCall","src":"10799:26:18"},"nodeType":"YulIf","src":"10796:81:18"},{"body":{"nodeType":"YulBlock","src":"10929:42:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"10943:16:18"},"nodeType":"YulFunctionCall","src":"10943:18:18"},"nodeType":"YulExpressionStatement","src":"10943:18:18"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"10893:18:18"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10916:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"10924:2:18","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10913:2:18"},"nodeType":"YulFunctionCall","src":"10913:14:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10890:2:18"},"nodeType":"YulFunctionCall","src":"10890:38:18"},"nodeType":"YulIf","src":"10887:84:18"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"10692:4:18","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"10701:6:18","type":""}],"src":"10657:320:18"},{"body":{"nodeType":"YulBlock","src":"11089:114:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11111:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"11119:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11107:3:18"},"nodeType":"YulFunctionCall","src":"11107:14:18"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"11123:34:18","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11100:6:18"},"nodeType":"YulFunctionCall","src":"11100:58:18"},"nodeType":"YulExpressionStatement","src":"11100:58:18"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11179:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"11187:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11175:3:18"},"nodeType":"YulFunctionCall","src":"11175:15:18"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"11192:3:18","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11168:6:18"},"nodeType":"YulFunctionCall","src":"11168:28:18"},"nodeType":"YulExpressionStatement","src":"11168:28:18"}]},"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11081:6:18","type":""}],"src":"10983:220:18"},{"body":{"nodeType":"YulBlock","src":"11355:220:18","statements":[{"nodeType":"YulAssignment","src":"11365:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11431:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"11436:2:18","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11372:58:18"},"nodeType":"YulFunctionCall","src":"11372:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11365:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11537:3:18"}],"functionName":{"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulIdentifier","src":"11448:88:18"},"nodeType":"YulFunctionCall","src":"11448:93:18"},"nodeType":"YulExpressionStatement","src":"11448:93:18"},{"nodeType":"YulAssignment","src":"11550:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11561:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"11566:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11557:3:18"},"nodeType":"YulFunctionCall","src":"11557:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11550:3:18"}]}]},"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11343:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11351:3:18","type":""}],"src":"11209:366:18"},{"body":{"nodeType":"YulBlock","src":"11752:248:18","statements":[{"nodeType":"YulAssignment","src":"11762:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11774:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"11785:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11770:3:18"},"nodeType":"YulFunctionCall","src":"11770:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11762:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11809:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"11820:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11805:3:18"},"nodeType":"YulFunctionCall","src":"11805:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11828:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"11834:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11824:3:18"},"nodeType":"YulFunctionCall","src":"11824:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11798:6:18"},"nodeType":"YulFunctionCall","src":"11798:47:18"},"nodeType":"YulExpressionStatement","src":"11798:47:18"},{"nodeType":"YulAssignment","src":"11854:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11988:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11862:124:18"},"nodeType":"YulFunctionCall","src":"11862:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11854:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11732:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11747:4:18","type":""}],"src":"11581:419:18"},{"body":{"nodeType":"YulBlock","src":"12112:142:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12134:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"12142:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12130:3:18"},"nodeType":"YulFunctionCall","src":"12130:14:18"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"12146:34:18","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12123:6:18"},"nodeType":"YulFunctionCall","src":"12123:58:18"},"nodeType":"YulExpressionStatement","src":"12123:58:18"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12202:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"12210:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12198:3:18"},"nodeType":"YulFunctionCall","src":"12198:15:18"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"12215:31:18","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12191:6:18"},"nodeType":"YulFunctionCall","src":"12191:56:18"},"nodeType":"YulExpressionStatement","src":"12191:56:18"}]},"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12104:6:18","type":""}],"src":"12006:248:18"},{"body":{"nodeType":"YulBlock","src":"12406:220:18","statements":[{"nodeType":"YulAssignment","src":"12416:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12482:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"12487:2:18","type":"","value":"61"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12423:58:18"},"nodeType":"YulFunctionCall","src":"12423:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12416:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12588:3:18"}],"functionName":{"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulIdentifier","src":"12499:88:18"},"nodeType":"YulFunctionCall","src":"12499:93:18"},"nodeType":"YulExpressionStatement","src":"12499:93:18"},{"nodeType":"YulAssignment","src":"12601:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12612:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"12617:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12608:3:18"},"nodeType":"YulFunctionCall","src":"12608:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12601:3:18"}]}]},"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12394:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12402:3:18","type":""}],"src":"12260:366:18"},{"body":{"nodeType":"YulBlock","src":"12803:248:18","statements":[{"nodeType":"YulAssignment","src":"12813:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12825:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"12836:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12821:3:18"},"nodeType":"YulFunctionCall","src":"12821:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12813:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12860:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"12871:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12856:3:18"},"nodeType":"YulFunctionCall","src":"12856:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12879:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"12885:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12875:3:18"},"nodeType":"YulFunctionCall","src":"12875:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12849:6:18"},"nodeType":"YulFunctionCall","src":"12849:47:18"},"nodeType":"YulExpressionStatement","src":"12849:47:18"},{"nodeType":"YulAssignment","src":"12905:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13039:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12913:124:18"},"nodeType":"YulFunctionCall","src":"12913:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12905:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12783:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12798:4:18","type":""}],"src":"12632:419:18"},{"body":{"nodeType":"YulBlock","src":"13163:126:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13185:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"13193:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13181:3:18"},"nodeType":"YulFunctionCall","src":"13181:14:18"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"13197:34:18","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13174:6:18"},"nodeType":"YulFunctionCall","src":"13174:58:18"},"nodeType":"YulExpressionStatement","src":"13174:58:18"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13253:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"13261:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13249:3:18"},"nodeType":"YulFunctionCall","src":"13249:15:18"},{"hexValue":"72206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"13266:15:18","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13242:6:18"},"nodeType":"YulFunctionCall","src":"13242:40:18"},"nodeType":"YulExpressionStatement","src":"13242:40:18"}]},"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"13155:6:18","type":""}],"src":"13057:232:18"},{"body":{"nodeType":"YulBlock","src":"13441:220:18","statements":[{"nodeType":"YulAssignment","src":"13451:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13517:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"13522:2:18","type":"","value":"45"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13458:58:18"},"nodeType":"YulFunctionCall","src":"13458:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13451:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13623:3:18"}],"functionName":{"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulIdentifier","src":"13534:88:18"},"nodeType":"YulFunctionCall","src":"13534:93:18"},"nodeType":"YulExpressionStatement","src":"13534:93:18"},{"nodeType":"YulAssignment","src":"13636:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13647:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"13652:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13643:3:18"},"nodeType":"YulFunctionCall","src":"13643:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13636:3:18"}]}]},"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13429:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13437:3:18","type":""}],"src":"13295:366:18"},{"body":{"nodeType":"YulBlock","src":"13838:248:18","statements":[{"nodeType":"YulAssignment","src":"13848:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13860:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"13871:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13856:3:18"},"nodeType":"YulFunctionCall","src":"13856:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13848:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13895:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"13906:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13891:3:18"},"nodeType":"YulFunctionCall","src":"13891:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13914:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"13920:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13910:3:18"},"nodeType":"YulFunctionCall","src":"13910:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13884:6:18"},"nodeType":"YulFunctionCall","src":"13884:47:18"},"nodeType":"YulExpressionStatement","src":"13884:47:18"},{"nodeType":"YulAssignment","src":"13940:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14074:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13948:124:18"},"nodeType":"YulFunctionCall","src":"13948:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13940:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13818:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13833:4:18","type":""}],"src":"13667:419:18"},{"body":{"nodeType":"YulBlock","src":"14198:68:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14220:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"14228:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14216:3:18"},"nodeType":"YulFunctionCall","src":"14216:14:18"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"14232:26:18","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14209:6:18"},"nodeType":"YulFunctionCall","src":"14209:50:18"},"nodeType":"YulExpressionStatement","src":"14209:50:18"}]},"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14190:6:18","type":""}],"src":"14092:174:18"},{"body":{"nodeType":"YulBlock","src":"14418:220:18","statements":[{"nodeType":"YulAssignment","src":"14428:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14494:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"14499:2:18","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14435:58:18"},"nodeType":"YulFunctionCall","src":"14435:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14428:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14600:3:18"}],"functionName":{"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulIdentifier","src":"14511:88:18"},"nodeType":"YulFunctionCall","src":"14511:93:18"},"nodeType":"YulExpressionStatement","src":"14511:93:18"},{"nodeType":"YulAssignment","src":"14613:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14624:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"14629:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14620:3:18"},"nodeType":"YulFunctionCall","src":"14620:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14613:3:18"}]}]},"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14406:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14414:3:18","type":""}],"src":"14272:366:18"},{"body":{"nodeType":"YulBlock","src":"14815:248:18","statements":[{"nodeType":"YulAssignment","src":"14825:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14837:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"14848:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14833:3:18"},"nodeType":"YulFunctionCall","src":"14833:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14825:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14872:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"14883:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14868:3:18"},"nodeType":"YulFunctionCall","src":"14868:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14891:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"14897:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14887:3:18"},"nodeType":"YulFunctionCall","src":"14887:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14861:6:18"},"nodeType":"YulFunctionCall","src":"14861:47:18"},"nodeType":"YulExpressionStatement","src":"14861:47:18"},{"nodeType":"YulAssignment","src":"14917:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15051:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14925:124:18"},"nodeType":"YulFunctionCall","src":"14925:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14917:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14795:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14810:4:18","type":""}],"src":"14644:419:18"},{"body":{"nodeType":"YulBlock","src":"15175:122:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15197:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"15205:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15193:3:18"},"nodeType":"YulFunctionCall","src":"15193:14:18"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"15209:34:18","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15186:6:18"},"nodeType":"YulFunctionCall","src":"15186:58:18"},"nodeType":"YulExpressionStatement","src":"15186:58:18"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15265:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"15273:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15261:3:18"},"nodeType":"YulFunctionCall","src":"15261:15:18"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"15278:11:18","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15254:6:18"},"nodeType":"YulFunctionCall","src":"15254:36:18"},"nodeType":"YulExpressionStatement","src":"15254:36:18"}]},"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"15167:6:18","type":""}],"src":"15069:228:18"},{"body":{"nodeType":"YulBlock","src":"15449:220:18","statements":[{"nodeType":"YulAssignment","src":"15459:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15525:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"15530:2:18","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15466:58:18"},"nodeType":"YulFunctionCall","src":"15466:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15459:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15631:3:18"}],"functionName":{"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulIdentifier","src":"15542:88:18"},"nodeType":"YulFunctionCall","src":"15542:93:18"},"nodeType":"YulExpressionStatement","src":"15542:93:18"},{"nodeType":"YulAssignment","src":"15644:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15655:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"15660:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15651:3:18"},"nodeType":"YulFunctionCall","src":"15651:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15644:3:18"}]}]},"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15437:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15445:3:18","type":""}],"src":"15303:366:18"},{"body":{"nodeType":"YulBlock","src":"15846:248:18","statements":[{"nodeType":"YulAssignment","src":"15856:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15868:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"15879:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15864:3:18"},"nodeType":"YulFunctionCall","src":"15864:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15856:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15903:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"15914:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15899:3:18"},"nodeType":"YulFunctionCall","src":"15899:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15922:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"15928:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15918:3:18"},"nodeType":"YulFunctionCall","src":"15918:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15892:6:18"},"nodeType":"YulFunctionCall","src":"15892:47:18"},"nodeType":"YulExpressionStatement","src":"15892:47:18"},{"nodeType":"YulAssignment","src":"15948:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16082:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15956:124:18"},"nodeType":"YulFunctionCall","src":"15956:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15948:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15826:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15841:4:18","type":""}],"src":"15675:419:18"},{"body":{"nodeType":"YulBlock","src":"16214:34:18","statements":[{"nodeType":"YulAssignment","src":"16224:18:18","value":{"name":"pos","nodeType":"YulIdentifier","src":"16239:3:18"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"16224:11:18"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16186:3:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"16191:6:18","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"16202:11:18","type":""}],"src":"16100:148:18"},{"body":{"nodeType":"YulBlock","src":"16364:280:18","statements":[{"nodeType":"YulVariableDeclaration","src":"16374:53:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16421:5:18"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"16388:32:18"},"nodeType":"YulFunctionCall","src":"16388:39:18"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"16378:6:18","type":""}]},{"nodeType":"YulAssignment","src":"16436:96:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16520:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"16525:6:18"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16443:76:18"},"nodeType":"YulFunctionCall","src":"16443:89:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16436:3:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16580:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"16587:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16576:3:18"},"nodeType":"YulFunctionCall","src":"16576:16:18"},{"name":"pos","nodeType":"YulIdentifier","src":"16594:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"16599:6:18"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"16541:34:18"},"nodeType":"YulFunctionCall","src":"16541:65:18"},"nodeType":"YulExpressionStatement","src":"16541:65:18"},{"nodeType":"YulAssignment","src":"16615:23:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16626:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"16631:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16622:3:18"},"nodeType":"YulFunctionCall","src":"16622:16:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16615:3:18"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16345:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16352:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16360:3:18","type":""}],"src":"16254:390:18"},{"body":{"nodeType":"YulBlock","src":"16834:251:18","statements":[{"nodeType":"YulAssignment","src":"16845:102:18","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16934:6:18"},{"name":"pos","nodeType":"YulIdentifier","src":"16943:3:18"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16852:81:18"},"nodeType":"YulFunctionCall","src":"16852:95:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16845:3:18"}]},{"nodeType":"YulAssignment","src":"16957:102:18","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17046:6:18"},{"name":"pos","nodeType":"YulIdentifier","src":"17055:3:18"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16964:81:18"},"nodeType":"YulFunctionCall","src":"16964:95:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16957:3:18"}]},{"nodeType":"YulAssignment","src":"17069:10:18","value":{"name":"pos","nodeType":"YulIdentifier","src":"17076:3:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17069:3:18"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16805:3:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16811:6:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16819:6:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16830:3:18","type":""}],"src":"16650:435:18"},{"body":{"nodeType":"YulBlock","src":"17197:118:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17219:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"17227:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17215:3:18"},"nodeType":"YulFunctionCall","src":"17215:14:18"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"17231:34:18","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17208:6:18"},"nodeType":"YulFunctionCall","src":"17208:58:18"},"nodeType":"YulExpressionStatement","src":"17208:58:18"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17287:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"17295:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17283:3:18"},"nodeType":"YulFunctionCall","src":"17283:15:18"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"17300:7:18","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17276:6:18"},"nodeType":"YulFunctionCall","src":"17276:32:18"},"nodeType":"YulExpressionStatement","src":"17276:32:18"}]},"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17189:6:18","type":""}],"src":"17091:224:18"},{"body":{"nodeType":"YulBlock","src":"17467:220:18","statements":[{"nodeType":"YulAssignment","src":"17477:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17543:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"17548:2:18","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17484:58:18"},"nodeType":"YulFunctionCall","src":"17484:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17477:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17649:3:18"}],"functionName":{"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulIdentifier","src":"17560:88:18"},"nodeType":"YulFunctionCall","src":"17560:93:18"},"nodeType":"YulExpressionStatement","src":"17560:93:18"},{"nodeType":"YulAssignment","src":"17662:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17673:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"17678:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17669:3:18"},"nodeType":"YulFunctionCall","src":"17669:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17662:3:18"}]}]},"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17455:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17463:3:18","type":""}],"src":"17321:366:18"},{"body":{"nodeType":"YulBlock","src":"17864:248:18","statements":[{"nodeType":"YulAssignment","src":"17874:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17886:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"17897:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17882:3:18"},"nodeType":"YulFunctionCall","src":"17882:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17874:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17921:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"17932:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17917:3:18"},"nodeType":"YulFunctionCall","src":"17917:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17940:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"17946:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17936:3:18"},"nodeType":"YulFunctionCall","src":"17936:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17910:6:18"},"nodeType":"YulFunctionCall","src":"17910:47:18"},"nodeType":"YulExpressionStatement","src":"17910:47:18"},{"nodeType":"YulAssignment","src":"17966:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18100:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17974:124:18"},"nodeType":"YulFunctionCall","src":"17974:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17966:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17844:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17859:4:18","type":""}],"src":"17693:419:18"},{"body":{"nodeType":"YulBlock","src":"18224:117:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18246:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"18254:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18242:3:18"},"nodeType":"YulFunctionCall","src":"18242:14:18"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"18258:34:18","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18235:6:18"},"nodeType":"YulFunctionCall","src":"18235:58:18"},"nodeType":"YulExpressionStatement","src":"18235:58:18"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18314:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"18322:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18310:3:18"},"nodeType":"YulFunctionCall","src":"18310:15:18"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"18327:6:18","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18303:6:18"},"nodeType":"YulFunctionCall","src":"18303:31:18"},"nodeType":"YulExpressionStatement","src":"18303:31:18"}]},"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18216:6:18","type":""}],"src":"18118:223:18"},{"body":{"nodeType":"YulBlock","src":"18493:220:18","statements":[{"nodeType":"YulAssignment","src":"18503:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18569:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"18574:2:18","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18510:58:18"},"nodeType":"YulFunctionCall","src":"18510:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18503:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18675:3:18"}],"functionName":{"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulIdentifier","src":"18586:88:18"},"nodeType":"YulFunctionCall","src":"18586:93:18"},"nodeType":"YulExpressionStatement","src":"18586:93:18"},{"nodeType":"YulAssignment","src":"18688:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18699:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"18704:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18695:3:18"},"nodeType":"YulFunctionCall","src":"18695:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18688:3:18"}]}]},"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18481:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18489:3:18","type":""}],"src":"18347:366:18"},{"body":{"nodeType":"YulBlock","src":"18890:248:18","statements":[{"nodeType":"YulAssignment","src":"18900:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18912:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"18923:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18908:3:18"},"nodeType":"YulFunctionCall","src":"18908:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18900:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18947:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"18958:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18943:3:18"},"nodeType":"YulFunctionCall","src":"18943:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18966:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"18972:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18962:3:18"},"nodeType":"YulFunctionCall","src":"18962:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18936:6:18"},"nodeType":"YulFunctionCall","src":"18936:47:18"},"nodeType":"YulExpressionStatement","src":"18936:47:18"},{"nodeType":"YulAssignment","src":"18992:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19126:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19000:124:18"},"nodeType":"YulFunctionCall","src":"19000:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18992:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18870:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18885:4:18","type":""}],"src":"18719:419:18"},{"body":{"nodeType":"YulBlock","src":"19250:69:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19272:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"19280:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19268:3:18"},"nodeType":"YulFunctionCall","src":"19268:14:18"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"19284:27:18","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19261:6:18"},"nodeType":"YulFunctionCall","src":"19261:51:18"},"nodeType":"YulExpressionStatement","src":"19261:51:18"}]},"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19242:6:18","type":""}],"src":"19144:175:18"},{"body":{"nodeType":"YulBlock","src":"19471:220:18","statements":[{"nodeType":"YulAssignment","src":"19481:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19547:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"19552:2:18","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19488:58:18"},"nodeType":"YulFunctionCall","src":"19488:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19481:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19653:3:18"}],"functionName":{"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulIdentifier","src":"19564:88:18"},"nodeType":"YulFunctionCall","src":"19564:93:18"},"nodeType":"YulExpressionStatement","src":"19564:93:18"},{"nodeType":"YulAssignment","src":"19666:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19677:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"19682:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19673:3:18"},"nodeType":"YulFunctionCall","src":"19673:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19666:3:18"}]}]},"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19459:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19467:3:18","type":""}],"src":"19325:366:18"},{"body":{"nodeType":"YulBlock","src":"19868:248:18","statements":[{"nodeType":"YulAssignment","src":"19878:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19890:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"19901:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19886:3:18"},"nodeType":"YulFunctionCall","src":"19886:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19878:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19925:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"19936:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19921:3:18"},"nodeType":"YulFunctionCall","src":"19921:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19944:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"19950:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19940:3:18"},"nodeType":"YulFunctionCall","src":"19940:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19914:6:18"},"nodeType":"YulFunctionCall","src":"19914:47:18"},"nodeType":"YulExpressionStatement","src":"19914:47:18"},{"nodeType":"YulAssignment","src":"19970:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20104:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19978:124:18"},"nodeType":"YulFunctionCall","src":"19978:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19970:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19848:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19863:4:18","type":""}],"src":"19697:419:18"},{"body":{"nodeType":"YulBlock","src":"20228:131:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20250:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"20258:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20246:3:18"},"nodeType":"YulFunctionCall","src":"20246:14:18"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"20262:34:18","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20239:6:18"},"nodeType":"YulFunctionCall","src":"20239:58:18"},"nodeType":"YulExpressionStatement","src":"20239:58:18"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20318:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"20326:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20314:3:18"},"nodeType":"YulFunctionCall","src":"20314:15:18"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"20331:20:18","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20307:6:18"},"nodeType":"YulFunctionCall","src":"20307:45:18"},"nodeType":"YulExpressionStatement","src":"20307:45:18"}]},"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20220:6:18","type":""}],"src":"20122:237:18"},{"body":{"nodeType":"YulBlock","src":"20511:220:18","statements":[{"nodeType":"YulAssignment","src":"20521:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20587:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"20592:2:18","type":"","value":"50"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20528:58:18"},"nodeType":"YulFunctionCall","src":"20528:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20521:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20693:3:18"}],"functionName":{"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulIdentifier","src":"20604:88:18"},"nodeType":"YulFunctionCall","src":"20604:93:18"},"nodeType":"YulExpressionStatement","src":"20604:93:18"},{"nodeType":"YulAssignment","src":"20706:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20717:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"20722:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20713:3:18"},"nodeType":"YulFunctionCall","src":"20713:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20706:3:18"}]}]},"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20499:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20507:3:18","type":""}],"src":"20365:366:18"},{"body":{"nodeType":"YulBlock","src":"20908:248:18","statements":[{"nodeType":"YulAssignment","src":"20918:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20930:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"20941:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20926:3:18"},"nodeType":"YulFunctionCall","src":"20926:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20918:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20965:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"20976:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20961:3:18"},"nodeType":"YulFunctionCall","src":"20961:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20984:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"20990:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20980:3:18"},"nodeType":"YulFunctionCall","src":"20980:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20954:6:18"},"nodeType":"YulFunctionCall","src":"20954:47:18"},"nodeType":"YulExpressionStatement","src":"20954:47:18"},{"nodeType":"YulAssignment","src":"21010:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21144:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21018:124:18"},"nodeType":"YulFunctionCall","src":"21018:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21010:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20888:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20903:4:18","type":""}],"src":"20737:419:18"},{"body":{"nodeType":"YulBlock","src":"21190:152:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21207:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21210:77:18","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21200:6:18"},"nodeType":"YulFunctionCall","src":"21200:88:18"},"nodeType":"YulExpressionStatement","src":"21200:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21304:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"21307:4:18","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21297:6:18"},"nodeType":"YulFunctionCall","src":"21297:15:18"},"nodeType":"YulExpressionStatement","src":"21297:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21328:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21331:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21321:6:18"},"nodeType":"YulFunctionCall","src":"21321:15:18"},"nodeType":"YulExpressionStatement","src":"21321:15:18"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"21162:180:18"},{"body":{"nodeType":"YulBlock","src":"21376:152:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21393:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21396:77:18","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21386:6:18"},"nodeType":"YulFunctionCall","src":"21386:88:18"},"nodeType":"YulExpressionStatement","src":"21386:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21490:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"21493:4:18","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21483:6:18"},"nodeType":"YulFunctionCall","src":"21483:15:18"},"nodeType":"YulExpressionStatement","src":"21483:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21514:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21517:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21507:6:18"},"nodeType":"YulFunctionCall","src":"21507:15:18"},"nodeType":"YulExpressionStatement","src":"21507:15:18"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"21348:180:18"},{"body":{"nodeType":"YulBlock","src":"21579:149:18","statements":[{"nodeType":"YulAssignment","src":"21589:25:18","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21612:1:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"21594:17:18"},"nodeType":"YulFunctionCall","src":"21594:20:18"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"21589:1:18"}]},{"nodeType":"YulAssignment","src":"21623:25:18","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"21646:1:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"21628:17:18"},"nodeType":"YulFunctionCall","src":"21628:20:18"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"21623:1:18"}]},{"nodeType":"YulAssignment","src":"21657:17:18","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21669:1:18"},{"name":"y","nodeType":"YulIdentifier","src":"21672:1:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21665:3:18"},"nodeType":"YulFunctionCall","src":"21665:9:18"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"21657:4:18"}]},{"body":{"nodeType":"YulBlock","src":"21699:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"21701:16:18"},"nodeType":"YulFunctionCall","src":"21701:18:18"},"nodeType":"YulExpressionStatement","src":"21701:18:18"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"21690:4:18"},{"name":"x","nodeType":"YulIdentifier","src":"21696:1:18"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"21687:2:18"},"nodeType":"YulFunctionCall","src":"21687:11:18"},"nodeType":"YulIf","src":"21684:37:18"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"21565:1:18","type":""},{"name":"y","nodeType":"YulTypedName","src":"21568:1:18","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"21574:4:18","type":""}],"src":"21534:194:18"},{"body":{"nodeType":"YulBlock","src":"21778:147:18","statements":[{"nodeType":"YulAssignment","src":"21788:25:18","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21811:1:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"21793:17:18"},"nodeType":"YulFunctionCall","src":"21793:20:18"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"21788:1:18"}]},{"nodeType":"YulAssignment","src":"21822:25:18","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"21845:1:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"21827:17:18"},"nodeType":"YulFunctionCall","src":"21827:20:18"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"21822:1:18"}]},{"nodeType":"YulAssignment","src":"21856:16:18","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21867:1:18"},{"name":"y","nodeType":"YulIdentifier","src":"21870:1:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21863:3:18"},"nodeType":"YulFunctionCall","src":"21863:9:18"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"21856:3:18"}]},{"body":{"nodeType":"YulBlock","src":"21896:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"21898:16:18"},"nodeType":"YulFunctionCall","src":"21898:18:18"},"nodeType":"YulExpressionStatement","src":"21898:18:18"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21888:1:18"},{"name":"sum","nodeType":"YulIdentifier","src":"21891:3:18"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"21885:2:18"},"nodeType":"YulFunctionCall","src":"21885:10:18"},"nodeType":"YulIf","src":"21882:36:18"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"21765:1:18","type":""},{"name":"y","nodeType":"YulTypedName","src":"21768:1:18","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"21774:3:18","type":""}],"src":"21734:191:18"},{"body":{"nodeType":"YulBlock","src":"21989:40:18","statements":[{"nodeType":"YulAssignment","src":"22000:22:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22016:5:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22010:5:18"},"nodeType":"YulFunctionCall","src":"22010:12:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"22000:6:18"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21972:5:18","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"21982:6:18","type":""}],"src":"21931:98:18"},{"body":{"nodeType":"YulBlock","src":"22130:73:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22147:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"22152:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22140:6:18"},"nodeType":"YulFunctionCall","src":"22140:19:18"},"nodeType":"YulExpressionStatement","src":"22140:19:18"},{"nodeType":"YulAssignment","src":"22168:29:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22187:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"22192:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22183:3:18"},"nodeType":"YulFunctionCall","src":"22183:14:18"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"22168:11:18"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22102:3:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"22107:6:18","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"22118:11:18","type":""}],"src":"22035:168:18"},{"body":{"nodeType":"YulBlock","src":"22299:283:18","statements":[{"nodeType":"YulVariableDeclaration","src":"22309:52:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22355:5:18"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"22323:31:18"},"nodeType":"YulFunctionCall","src":"22323:38:18"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"22313:6:18","type":""}]},{"nodeType":"YulAssignment","src":"22370:77:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22435:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"22440:6:18"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22377:57:18"},"nodeType":"YulFunctionCall","src":"22377:70:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22370:3:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22495:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"22502:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22491:3:18"},"nodeType":"YulFunctionCall","src":"22491:16:18"},{"name":"pos","nodeType":"YulIdentifier","src":"22509:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"22514:6:18"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"22456:34:18"},"nodeType":"YulFunctionCall","src":"22456:65:18"},"nodeType":"YulExpressionStatement","src":"22456:65:18"},{"nodeType":"YulAssignment","src":"22530:46:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22541:3:18"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"22568:6:18"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"22546:21:18"},"nodeType":"YulFunctionCall","src":"22546:29:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22537:3:18"},"nodeType":"YulFunctionCall","src":"22537:39:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22530:3:18"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22280:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"22287:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22295:3:18","type":""}],"src":"22209:373:18"},{"body":{"nodeType":"YulBlock","src":"22788:440:18","statements":[{"nodeType":"YulAssignment","src":"22798:27:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22810:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"22821:3:18","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22806:3:18"},"nodeType":"YulFunctionCall","src":"22806:19:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22798:4:18"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22879:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22892:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"22903:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22888:3:18"},"nodeType":"YulFunctionCall","src":"22888:17:18"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"22835:43:18"},"nodeType":"YulFunctionCall","src":"22835:71:18"},"nodeType":"YulExpressionStatement","src":"22835:71:18"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"22960:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22973:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"22984:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22969:3:18"},"nodeType":"YulFunctionCall","src":"22969:18:18"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"22916:43:18"},"nodeType":"YulFunctionCall","src":"22916:72:18"},"nodeType":"YulExpressionStatement","src":"22916:72:18"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"23042:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23055:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"23066:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23051:3:18"},"nodeType":"YulFunctionCall","src":"23051:18:18"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"22998:43:18"},"nodeType":"YulFunctionCall","src":"22998:72:18"},"nodeType":"YulExpressionStatement","src":"22998:72:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23091:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"23102:2:18","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23087:3:18"},"nodeType":"YulFunctionCall","src":"23087:18:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23111:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"23117:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23107:3:18"},"nodeType":"YulFunctionCall","src":"23107:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23080:6:18"},"nodeType":"YulFunctionCall","src":"23080:48:18"},"nodeType":"YulExpressionStatement","src":"23080:48:18"},{"nodeType":"YulAssignment","src":"23137:84:18","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"23207:6:18"},{"name":"tail","nodeType":"YulIdentifier","src":"23216:4:18"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23145:61:18"},"nodeType":"YulFunctionCall","src":"23145:76:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23137:4:18"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22736:9:18","type":""},{"name":"value3","nodeType":"YulTypedName","src":"22748:6:18","type":""},{"name":"value2","nodeType":"YulTypedName","src":"22756:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22764:6:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22772:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22783:4:18","type":""}],"src":"22588:640:18"},{"body":{"nodeType":"YulBlock","src":"23296:79:18","statements":[{"nodeType":"YulAssignment","src":"23306:22:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"23321:6:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23315:5:18"},"nodeType":"YulFunctionCall","src":"23315:13:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"23306:5:18"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23363:5:18"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"23337:25:18"},"nodeType":"YulFunctionCall","src":"23337:32:18"},"nodeType":"YulExpressionStatement","src":"23337:32:18"}]},"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"23274:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"23282:3:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"23290:5:18","type":""}],"src":"23234:141:18"},{"body":{"nodeType":"YulBlock","src":"23457:273:18","statements":[{"body":{"nodeType":"YulBlock","src":"23503:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"23505:77:18"},"nodeType":"YulFunctionCall","src":"23505:79:18"},"nodeType":"YulExpressionStatement","src":"23505:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"23478:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"23487:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23474:3:18"},"nodeType":"YulFunctionCall","src":"23474:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"23499:2:18","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"23470:3:18"},"nodeType":"YulFunctionCall","src":"23470:32:18"},"nodeType":"YulIf","src":"23467:119:18"},{"nodeType":"YulBlock","src":"23596:127:18","statements":[{"nodeType":"YulVariableDeclaration","src":"23611:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"23625:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"23615:6:18","type":""}]},{"nodeType":"YulAssignment","src":"23640:73:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23685:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"23696:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23681:3:18"},"nodeType":"YulFunctionCall","src":"23681:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"23705:7:18"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulIdentifier","src":"23650:30:18"},"nodeType":"YulFunctionCall","src":"23650:63:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"23640:6:18"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23427:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"23438:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"23450:6:18","type":""}],"src":"23381:349:18"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approval to current owne\")\n\n        mstore(add(memPtr, 32), \"r\")\n\n    }\n\n    function abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve caller is not to\")\n\n        mstore(add(memPtr, 32), \"ken owner or approved for all\")\n\n    }\n\n    function abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 61)\n        store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: caller is not token owne\")\n\n        mstore(add(memPtr, 32), \"r or approved\")\n\n    }\n\n    function abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n        store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: invalid token ID\")\n\n    }\n\n    function abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: address zero is not a va\")\n\n        mstore(add(memPtr, 32), \"lid owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer from incorrect \")\n\n        mstore(add(memPtr, 32), \"owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve to caller\")\n\n    }\n\n    function abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to non ERC721Re\")\n\n        mstore(add(memPtr, 32), \"ceiver implementer\")\n\n    }\n\n    function abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)\n        store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n","id":18,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb46514610224578063b88d4fde14610240578063c87b56dd1461025c578063e985e9c51461028c576100cf565b80636352211e146101a657806370a08231146101d657806395d89b4114610206576100cf565b806301ffc9a7146100d457806306fdde0314610104578063081812fc14610122578063095ea7b31461015257806323b872dd1461016e57806342842e0e1461018a575b600080fd5b6100ee60048036038101906100e99190611614565b6102bc565b6040516100fb919061165c565b60405180910390f35b61010c61039e565b6040516101199190611707565b60405180910390f35b61013c6004803603810190610137919061175f565b610430565b60405161014991906117cd565b60405180910390f35b61016c60048036038101906101679190611814565b610476565b005b61018860048036038101906101839190611854565b61058d565b005b6101a4600480360381019061019f9190611854565b6105ed565b005b6101c060048036038101906101bb919061175f565b61060d565b6040516101cd91906117cd565b60405180910390f35b6101f060048036038101906101eb91906118a7565b610693565b6040516101fd91906118e3565b60405180910390f35b61020e61074a565b60405161021b9190611707565b60405180910390f35b61023e6004803603810190610239919061192a565b6107dc565b005b61025a60048036038101906102559190611a9f565b6107f2565b005b6102766004803603810190610271919061175f565b610854565b6040516102839190611707565b60405180910390f35b6102a660048036038101906102a19190611b22565b6108bc565b6040516102b3919061165c565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061038757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610397575061039682610950565b5b9050919050565b6060600080546103ad90611b91565b80601f01602080910402602001604051908101604052809291908181526020018280546103d990611b91565b80156104265780601f106103fb57610100808354040283529160200191610426565b820191906000526020600020905b81548152906001019060200180831161040957829003601f168201915b5050505050905090565b600061043b826109ba565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104818261060d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036104f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e890611c34565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610510610a05565b73ffffffffffffffffffffffffffffffffffffffff16148061053f575061053e81610539610a05565b6108bc565b5b61057e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057590611cc6565b60405180910390fd5b6105888383610a0d565b505050565b61059e610598610a05565b82610ac6565b6105dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d490611d58565b60405180910390fd5b6105e8838383610b5b565b505050565b610608838383604051806020016040528060008152506107f2565b505050565b60008061061983610e54565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361068a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068190611dc4565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610703576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fa90611e56565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461075990611b91565b80601f016020809104026020016040519081016040528092919081815260200182805461078590611b91565b80156107d25780601f106107a7576101008083540402835291602001916107d2565b820191906000526020600020905b8154815290600101906020018083116107b557829003601f168201915b5050505050905090565b6107ee6107e7610a05565b8383610e91565b5050565b6108036107fd610a05565b83610ac6565b610842576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083990611d58565b60405180910390fd5b61084e84848484610ffd565b50505050565b606061085f826109ba565b6000610869611059565b9050600081511161088957604051806020016040528060008152506108b4565b8061089384611070565b6040516020016108a4929190611eb2565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6109c38161113e565b610a02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f990611dc4565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610a808361060d565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610ad28361060d565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610b145750610b1381856108bc565b5b80610b5257508373ffffffffffffffffffffffffffffffffffffffff16610b3a84610430565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610b7b8261060d565b73ffffffffffffffffffffffffffffffffffffffff1614610bd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc890611f48565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3790611fda565b60405180910390fd5b610c4d838383600161117f565b8273ffffffffffffffffffffffffffffffffffffffff16610c6d8261060d565b73ffffffffffffffffffffffffffffffffffffffff1614610cc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cba90611f48565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610e4f83838360016112a5565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610eff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef690612046565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ff0919061165c565b60405180910390a3505050565b611008848484610b5b565b611014848484846112ab565b611053576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104a906120d8565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000600161107f84611432565b01905060008167ffffffffffffffff81111561109e5761109d611974565b5b6040519080825280601f01601f1916602001820160405280156110d05781602001600182028036833780820191505090505b509050600082602001820190505b600115611133578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611127576111266120f8565b5b049450600085036110de575b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661116083610e54565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600181111561129f57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146112135780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461120b9190612156565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461129e5780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611296919061218a565b925050819055505b5b50505050565b50505050565b60006112cc8473ffffffffffffffffffffffffffffffffffffffff16611585565b15611425578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026112f5610a05565b8786866040518563ffffffff1660e01b81526004016113179493929190612213565b6020604051808303816000875af192505050801561135357506040513d601f19601f820116820180604052508101906113509190612274565b60015b6113d5573d8060008114611383576040519150601f19603f3d011682016040523d82523d6000602084013e611388565b606091505b5060008151036113cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c4906120d8565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061142a565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611490577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611486576114856120f8565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106114cd576d04ee2d6d415b85acef810000000083816114c3576114c26120f8565b5b0492506020810190505b662386f26fc1000083106114fc57662386f26fc1000083816114f2576114f16120f8565b5b0492506010810190505b6305f5e1008310611525576305f5e100838161151b5761151a6120f8565b5b0492506008810190505b612710831061154a5761271083816115405761153f6120f8565b5b0492506004810190505b6064831061156d5760648381611563576115626120f8565b5b0492506002810190505b600a831061157c576001810190505b80915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6115f1816115bc565b81146115fc57600080fd5b50565b60008135905061160e816115e8565b92915050565b60006020828403121561162a576116296115b2565b5b6000611638848285016115ff565b91505092915050565b60008115159050919050565b61165681611641565b82525050565b6000602082019050611671600083018461164d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156116b1578082015181840152602081019050611696565b60008484015250505050565b6000601f19601f8301169050919050565b60006116d982611677565b6116e38185611682565b93506116f3818560208601611693565b6116fc816116bd565b840191505092915050565b6000602082019050818103600083015261172181846116ce565b905092915050565b6000819050919050565b61173c81611729565b811461174757600080fd5b50565b60008135905061175981611733565b92915050565b600060208284031215611775576117746115b2565b5b60006117838482850161174a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117b78261178c565b9050919050565b6117c7816117ac565b82525050565b60006020820190506117e260008301846117be565b92915050565b6117f1816117ac565b81146117fc57600080fd5b50565b60008135905061180e816117e8565b92915050565b6000806040838503121561182b5761182a6115b2565b5b6000611839858286016117ff565b925050602061184a8582860161174a565b9150509250929050565b60008060006060848603121561186d5761186c6115b2565b5b600061187b868287016117ff565b935050602061188c868287016117ff565b925050604061189d8682870161174a565b9150509250925092565b6000602082840312156118bd576118bc6115b2565b5b60006118cb848285016117ff565b91505092915050565b6118dd81611729565b82525050565b60006020820190506118f860008301846118d4565b92915050565b61190781611641565b811461191257600080fd5b50565b600081359050611924816118fe565b92915050565b60008060408385031215611941576119406115b2565b5b600061194f858286016117ff565b925050602061196085828601611915565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6119ac826116bd565b810181811067ffffffffffffffff821117156119cb576119ca611974565b5b80604052505050565b60006119de6115a8565b90506119ea82826119a3565b919050565b600067ffffffffffffffff821115611a0a57611a09611974565b5b611a13826116bd565b9050602081019050919050565b82818337600083830152505050565b6000611a42611a3d846119ef565b6119d4565b905082815260208101848484011115611a5e57611a5d61196f565b5b611a69848285611a20565b509392505050565b600082601f830112611a8657611a8561196a565b5b8135611a96848260208601611a2f565b91505092915050565b60008060008060808587031215611ab957611ab86115b2565b5b6000611ac7878288016117ff565b9450506020611ad8878288016117ff565b9350506040611ae98782880161174a565b925050606085013567ffffffffffffffff811115611b0a57611b096115b7565b5b611b1687828801611a71565b91505092959194509250565b60008060408385031215611b3957611b386115b2565b5b6000611b47858286016117ff565b9250506020611b58858286016117ff565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611ba957607f821691505b602082108103611bbc57611bbb611b62565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000611c1e602183611682565b9150611c2982611bc2565b604082019050919050565b60006020820190508181036000830152611c4d81611c11565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000611cb0603d83611682565b9150611cbb82611c54565b604082019050919050565b60006020820190508181036000830152611cdf81611ca3565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000611d42602d83611682565b9150611d4d82611ce6565b604082019050919050565b60006020820190508181036000830152611d7181611d35565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000611dae601883611682565b9150611db982611d78565b602082019050919050565b60006020820190508181036000830152611ddd81611da1565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000611e40602983611682565b9150611e4b82611de4565b604082019050919050565b60006020820190508181036000830152611e6f81611e33565b9050919050565b600081905092915050565b6000611e8c82611677565b611e968185611e76565b9350611ea6818560208601611693565b80840191505092915050565b6000611ebe8285611e81565b9150611eca8284611e81565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000611f32602583611682565b9150611f3d82611ed6565b604082019050919050565b60006020820190508181036000830152611f6181611f25565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611fc4602483611682565b9150611fcf82611f68565b604082019050919050565b60006020820190508181036000830152611ff381611fb7565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612030601983611682565b915061203b82611ffa565b602082019050919050565b6000602082019050818103600083015261205f81612023565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006120c2603283611682565b91506120cd82612066565b604082019050919050565b600060208201905081810360008301526120f1816120b5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061216182611729565b915061216c83611729565b925082820390508181111561218457612183612127565b5b92915050565b600061219582611729565b91506121a083611729565b92508282019050808211156121b8576121b7612127565b5b92915050565b600081519050919050565b600082825260208201905092915050565b60006121e5826121be565b6121ef81856121c9565b93506121ff818560208601611693565b612208816116bd565b840191505092915050565b600060808201905061222860008301876117be565b61223560208301866117be565b61224260408301856118d4565b818103606083015261225481846121da565b905095945050505050565b60008151905061226e816115e8565b92915050565b60006020828403121561228a576122896115b2565b5b60006122988482850161225f565b9150509291505056fea26469706673582212202ef155beec58315f9911e1c739e009937fe03bfa665f2f6054e78352d0bb320d64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x28C JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x206 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x18A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1614 JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x165C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH2 0x39E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0x1707 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x175F JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x17CD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x1814 JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x183 SWAP2 SWAP1 PUSH2 0x1854 JUMP JUMPDEST PUSH2 0x58D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x1854 JUMP JUMPDEST PUSH2 0x5ED JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BB SWAP2 SWAP1 PUSH2 0x175F JUMP JUMPDEST PUSH2 0x60D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x17CD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x18A7 JUMP JUMPDEST PUSH2 0x693 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x18E3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20E PUSH2 0x74A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21B SWAP2 SWAP1 PUSH2 0x1707 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x239 SWAP2 SWAP1 PUSH2 0x192A JUMP JUMPDEST PUSH2 0x7DC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x1A9F JUMP JUMPDEST PUSH2 0x7F2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x276 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x175F JUMP JUMPDEST PUSH2 0x854 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x1707 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x1B22 JUMP JUMPDEST PUSH2 0x8BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B3 SWAP2 SWAP1 PUSH2 0x165C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x387 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x397 JUMPI POP PUSH2 0x396 DUP3 PUSH2 0x950 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x3AD SWAP1 PUSH2 0x1B91 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D9 SWAP1 PUSH2 0x1B91 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x426 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x426 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x409 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43B DUP3 PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x481 DUP3 PUSH2 0x60D JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x4F1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E8 SWAP1 PUSH2 0x1C34 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x510 PUSH2 0xA05 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x53F JUMPI POP PUSH2 0x53E DUP2 PUSH2 0x539 PUSH2 0xA05 JUMP JUMPDEST PUSH2 0x8BC JUMP JUMPDEST JUMPDEST PUSH2 0x57E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x575 SWAP1 PUSH2 0x1CC6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x588 DUP4 DUP4 PUSH2 0xA0D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x59E PUSH2 0x598 PUSH2 0xA05 JUMP JUMPDEST DUP3 PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x5DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D4 SWAP1 PUSH2 0x1D58 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E8 DUP4 DUP4 DUP4 PUSH2 0xB5B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x608 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7F2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x619 DUP4 PUSH2 0xE54 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x68A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x681 SWAP1 PUSH2 0x1DC4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x703 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FA SWAP1 PUSH2 0x1E56 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x759 SWAP1 PUSH2 0x1B91 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x785 SWAP1 PUSH2 0x1B91 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7A7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7EE PUSH2 0x7E7 PUSH2 0xA05 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xE91 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x803 PUSH2 0x7FD PUSH2 0xA05 JUMP JUMPDEST DUP4 PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x842 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x839 SWAP1 PUSH2 0x1D58 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x84E DUP5 DUP5 DUP5 DUP5 PUSH2 0xFFD JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x85F DUP3 PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x869 PUSH2 0x1059 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x889 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x8B4 JUMP JUMPDEST DUP1 PUSH2 0x893 DUP5 PUSH2 0x1070 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8A4 SWAP3 SWAP2 SWAP1 PUSH2 0x1EB2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9C3 DUP2 PUSH2 0x113E JUMP JUMPDEST PUSH2 0xA02 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F9 SWAP1 PUSH2 0x1DC4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA80 DUP4 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAD2 DUP4 PUSH2 0x60D JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB14 JUMPI POP PUSH2 0xB13 DUP2 DUP6 PUSH2 0x8BC JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xB52 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB3A DUP5 PUSH2 0x430 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB7B DUP3 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBD1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBC8 SWAP1 PUSH2 0x1F48 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC40 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC37 SWAP1 PUSH2 0x1FDA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC4D DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x117F JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC6D DUP3 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCC3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBA SWAP1 PUSH2 0x1F48 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xE4F DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x12A5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xEFF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEF6 SWAP1 PUSH2 0x2046 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xFF0 SWAP2 SWAP1 PUSH2 0x165C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1008 DUP5 DUP5 DUP5 PUSH2 0xB5B JUMP JUMPDEST PUSH2 0x1014 DUP5 DUP5 DUP5 DUP5 PUSH2 0x12AB JUMP JUMPDEST PUSH2 0x1053 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104A SWAP1 PUSH2 0x20D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x107F DUP5 PUSH2 0x1432 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x109E JUMPI PUSH2 0x109D PUSH2 0x1974 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10D0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1133 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1127 JUMPI PUSH2 0x1126 PUSH2 0x20F8 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x10DE JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1160 DUP4 PUSH2 0xE54 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x129F JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1213 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x120B SWAP2 SWAP1 PUSH2 0x2156 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x129E JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1296 SWAP2 SWAP1 PUSH2 0x218A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12CC DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1585 JUMP JUMPDEST ISZERO PUSH2 0x1425 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x12F5 PUSH2 0xA05 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1317 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2213 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1353 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1350 SWAP2 SWAP1 PUSH2 0x2274 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x13D5 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1383 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1388 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x13CD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13C4 SWAP1 PUSH2 0x20D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x142A JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1490 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1486 JUMPI PUSH2 0x1485 PUSH2 0x20F8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x14CD JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x14C3 JUMPI PUSH2 0x14C2 PUSH2 0x20F8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x14FC JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x14F2 JUMPI PUSH2 0x14F1 PUSH2 0x20F8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1525 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x151B JUMPI PUSH2 0x151A PUSH2 0x20F8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x154A JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1540 JUMPI PUSH2 0x153F PUSH2 0x20F8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x156D JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1563 JUMPI PUSH2 0x1562 PUSH2 0x20F8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x157C JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x15F1 DUP2 PUSH2 0x15BC JUMP JUMPDEST DUP2 EQ PUSH2 0x15FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x160E DUP2 PUSH2 0x15E8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x162A JUMPI PUSH2 0x1629 PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1638 DUP5 DUP3 DUP6 ADD PUSH2 0x15FF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1656 DUP2 PUSH2 0x1641 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1671 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x164D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x16B1 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1696 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16D9 DUP3 PUSH2 0x1677 JUMP JUMPDEST PUSH2 0x16E3 DUP2 DUP6 PUSH2 0x1682 JUMP JUMPDEST SWAP4 POP PUSH2 0x16F3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1693 JUMP JUMPDEST PUSH2 0x16FC DUP2 PUSH2 0x16BD JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1721 DUP2 DUP5 PUSH2 0x16CE JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x173C DUP2 PUSH2 0x1729 JUMP JUMPDEST DUP2 EQ PUSH2 0x1747 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1759 DUP2 PUSH2 0x1733 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1775 JUMPI PUSH2 0x1774 PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1783 DUP5 DUP3 DUP6 ADD PUSH2 0x174A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17B7 DUP3 PUSH2 0x178C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x17C7 DUP2 PUSH2 0x17AC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x17E2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x17BE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x17F1 DUP2 PUSH2 0x17AC JUMP JUMPDEST DUP2 EQ PUSH2 0x17FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x180E DUP2 PUSH2 0x17E8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x182B JUMPI PUSH2 0x182A PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1839 DUP6 DUP3 DUP7 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x184A DUP6 DUP3 DUP7 ADD PUSH2 0x174A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x186D JUMPI PUSH2 0x186C PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x187B DUP7 DUP3 DUP8 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x188C DUP7 DUP3 DUP8 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x189D DUP7 DUP3 DUP8 ADD PUSH2 0x174A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18BD JUMPI PUSH2 0x18BC PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18CB DUP5 DUP3 DUP6 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x18DD DUP2 PUSH2 0x1729 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x18F8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x18D4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1907 DUP2 PUSH2 0x1641 JUMP JUMPDEST DUP2 EQ PUSH2 0x1912 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1924 DUP2 PUSH2 0x18FE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1941 JUMPI PUSH2 0x1940 PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x194F DUP6 DUP3 DUP7 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1960 DUP6 DUP3 DUP7 ADD PUSH2 0x1915 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x19AC DUP3 PUSH2 0x16BD JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x19CB JUMPI PUSH2 0x19CA PUSH2 0x1974 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19DE PUSH2 0x15A8 JUMP JUMPDEST SWAP1 POP PUSH2 0x19EA DUP3 DUP3 PUSH2 0x19A3 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1A0A JUMPI PUSH2 0x1A09 PUSH2 0x1974 JUMP JUMPDEST JUMPDEST PUSH2 0x1A13 DUP3 PUSH2 0x16BD JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A42 PUSH2 0x1A3D DUP5 PUSH2 0x19EF JUMP JUMPDEST PUSH2 0x19D4 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1A5E JUMPI PUSH2 0x1A5D PUSH2 0x196F JUMP JUMPDEST JUMPDEST PUSH2 0x1A69 DUP5 DUP3 DUP6 PUSH2 0x1A20 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1A86 JUMPI PUSH2 0x1A85 PUSH2 0x196A JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1A96 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1A2F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1AB9 JUMPI PUSH2 0x1AB8 PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1AC7 DUP8 DUP3 DUP9 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1AD8 DUP8 DUP3 DUP9 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1AE9 DUP8 DUP3 DUP9 ADD PUSH2 0x174A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B0A JUMPI PUSH2 0x1B09 PUSH2 0x15B7 JUMP JUMPDEST JUMPDEST PUSH2 0x1B16 DUP8 DUP3 DUP9 ADD PUSH2 0x1A71 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B39 JUMPI PUSH2 0x1B38 PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B47 DUP6 DUP3 DUP7 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1B58 DUP6 DUP3 DUP7 ADD PUSH2 0x17FF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1BA9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1BBC JUMPI PUSH2 0x1BBB PUSH2 0x1B62 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C1E PUSH1 0x21 DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C29 DUP3 PUSH2 0x1BC2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C4D DUP2 PUSH2 0x1C11 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CB0 PUSH1 0x3D DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x1CBB DUP3 PUSH2 0x1C54 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CDF DUP2 PUSH2 0x1CA3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D42 PUSH1 0x2D DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D4D DUP3 PUSH2 0x1CE6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D71 DUP2 PUSH2 0x1D35 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DAE PUSH1 0x18 DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DB9 DUP3 PUSH2 0x1D78 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1DDD DUP2 PUSH2 0x1DA1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E40 PUSH1 0x29 DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x1E4B DUP3 PUSH2 0x1DE4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E6F DUP2 PUSH2 0x1E33 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E8C DUP3 PUSH2 0x1677 JUMP JUMPDEST PUSH2 0x1E96 DUP2 DUP6 PUSH2 0x1E76 JUMP JUMPDEST SWAP4 POP PUSH2 0x1EA6 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1693 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EBE DUP3 DUP6 PUSH2 0x1E81 JUMP JUMPDEST SWAP2 POP PUSH2 0x1ECA DUP3 DUP5 PUSH2 0x1E81 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F32 PUSH1 0x25 DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F3D DUP3 PUSH2 0x1ED6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F61 DUP2 PUSH2 0x1F25 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FC4 PUSH1 0x24 DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FCF DUP3 PUSH2 0x1F68 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1FF3 DUP2 PUSH2 0x1FB7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2030 PUSH1 0x19 DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x203B DUP3 PUSH2 0x1FFA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x205F DUP2 PUSH2 0x2023 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20C2 PUSH1 0x32 DUP4 PUSH2 0x1682 JUMP JUMPDEST SWAP2 POP PUSH2 0x20CD DUP3 PUSH2 0x2066 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x20F1 DUP2 PUSH2 0x20B5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2161 DUP3 PUSH2 0x1729 JUMP JUMPDEST SWAP2 POP PUSH2 0x216C DUP4 PUSH2 0x1729 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x2184 JUMPI PUSH2 0x2183 PUSH2 0x2127 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2195 DUP3 PUSH2 0x1729 JUMP JUMPDEST SWAP2 POP PUSH2 0x21A0 DUP4 PUSH2 0x1729 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x21B8 JUMPI PUSH2 0x21B7 PUSH2 0x2127 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21E5 DUP3 PUSH2 0x21BE JUMP JUMPDEST PUSH2 0x21EF DUP2 DUP6 PUSH2 0x21C9 JUMP JUMPDEST SWAP4 POP PUSH2 0x21FF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1693 JUMP JUMPDEST PUSH2 0x2208 DUP2 PUSH2 0x16BD JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2228 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x17BE JUMP JUMPDEST PUSH2 0x2235 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x17BE JUMP JUMPDEST PUSH2 0x2242 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x18D4 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2254 DUP2 DUP5 PUSH2 0x21DA JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x226E DUP2 PUSH2 0x15E8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x228A JUMPI PUSH2 0x2289 PUSH2 0x15B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2298 DUP5 DUP3 DUP6 ADD PUSH2 0x225F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2E CALL SSTORE 0xBE 0xEC PC BALANCE 0x5F SWAP10 GT 0xE1 0xC7 CODECOPY 0xE0 MULMOD SWAP4 PUSH32 0xE03BFA665F2F6054E78352D0BB320D64736F6C63430008110033000000000000 ","sourceMap":"628:16327:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2471:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3935:167;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3468:406;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4612:326;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5004:179;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2190:219;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1929:204;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2633:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4169:153;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5249:314;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2801:276;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4388:162;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1570:300;1672:4;1722:25;1707:40;;;:11;:40;;;;:104;;;;1778:33;1763:48;;;:11;:48;;;;1707:104;:156;;;;1827:36;1851:11;1827:23;:36::i;:::-;1707:156;1688:175;;1570:300;;;:::o;2471:98::-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;4071:15;:24;4087:7;4071:24;;;;;;;;;;;;;;;;;;;;;4064:31;;3935:167;;;:::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;3605:11;;:2;:11;;;3597:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;3702:5;3686:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;3711:37;3728:5;3735:12;:10;:12::i;:::-;3711:16;:37::i;:::-;3686:62;3665:170;;;;;;;;;;;;:::i;:::-;;;;;;;;;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;4612:326::-;4801:41;4820:12;:10;:12::i;:::-;4834:7;4801:18;:41::i;:::-;4793:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;4903:28;4913:4;4919:2;4923:7;4903:9;:28::i;:::-;4612:326;;;:::o;5004:179::-;5137:39;5154:4;5160:2;5164:7;5137:39;;;;;;;;;;;;:16;:39::i;:::-;5004:179;;;:::o;2190:219::-;2262:7;2281:13;2297:17;2306:7;2297:8;:17::i;:::-;2281:33;;2349:1;2332:19;;:5;:19;;;2324:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;2397:5;2390:12;;;2190:219;;;:::o;1929:204::-;2001:7;2045:1;2028:19;;:5;:19;;;2020:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2110:9;:16;2120:5;2110:16;;;;;;;;;;;;;;;;2103:23;;1929:204;;;:::o;2633:102::-;2689:13;2721:7;2714:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2633:102;:::o;4169:153::-;4263:52;4282:12;:10;:12::i;:::-;4296:8;4306;4263:18;:52::i;:::-;4169:153;;:::o;5249:314::-;5417:41;5436:12;:10;:12::i;:::-;5450:7;5417:18;:41::i;:::-;5409:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;5518:38;5532:4;5538:2;5542:7;5551:4;5518:13;:38::i;:::-;5249:314;;;;:::o;2801:276::-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;:8;:10::i;:::-;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;;;2801:276;;;:::o;4388:162::-;4485:4;4508:18;:25;4527:5;4508:25;;;;;;;;;;;;;;;:35;4534:8;4508:35;;;;;;;;;;;;;;;;;;;;;;;;;4501:42;;4388:162;;;;:::o;829:155:10:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;13466:133:1:-;13547:16;13555:7;13547;:16::i;:::-;13539:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;13466:133;:::o;640:96:7:-;693:7;719:10;712:17;;640:96;:::o;12768:171:1:-;12869:2;12842:15;:24;12858:7;12842:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;12924:7;12920:2;12886:46;;12895:23;12910:7;12895:14;:23::i;:::-;12886:46;;;;;;;;;;;;12768:171;;:::o;7540:261::-;7633:4;7649:13;7665:23;7680:7;7665:14;:23::i;:::-;7649:39;;7717:5;7706:16;;:7;:16;;;:52;;;;7726:32;7743:5;7750:7;7726:16;:32::i;:::-;7706:52;:87;;;;7786:7;7762:31;;:20;7774:7;7762:11;:20::i;:::-;:31;;;7706:87;7698:96;;;7540:261;;;;:::o;11423:1233::-;11577:4;11550:31;;:23;11565:7;11550:14;:23::i;:::-;:31;;;11542:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11655:1;11641:16;;:2;:16;;;11633:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;11709:42;11730:4;11736:2;11740:7;11749:1;11709:20;:42::i;:::-;11878:4;11851:31;;:23;11866:7;11851:14;:23::i;:::-;:31;;;11843:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11993:15;:24;12009:7;11993:24;;;;;;;;;;;;11986:31;;;;;;;;;;;12480:1;12461:9;:15;12471:4;12461:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;12512:1;12495:9;:13;12505:2;12495:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;12552:2;12533:7;:16;12541:7;12533:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;12589:7;12585:2;12570:27;;12579:4;12570:27;;;;;;;;;;;;12608:41;12628:4;12634:2;12638:7;12647:1;12608:19;:41::i;:::-;11423:1233;;;:::o;6838:115::-;6904:7;6930;:16;6938:7;6930:16;;;;;;;;;;;;;;;;;;;;;6923:23;;6838:115;;;:::o;13075:307::-;13225:8;13216:17;;:5;:17;;;13208:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;13311:8;13273:18;:25;13292:5;13273:25;;;;;;;;;;;;;;;:35;13299:8;13273:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;13356:8;13334:41;;13349:5;13334:41;;;13366:8;13334:41;;;;;;:::i;:::-;;;;;;;;13075:307;;;:::o;6424:305::-;6574:28;6584:4;6590:2;6594:7;6574:9;:28::i;:::-;6620:47;6643:4;6649:2;6653:7;6662:4;6620:22;:47::i;:::-;6612:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;6424:305;;;;:::o;3319:92::-;3370:13;3395:9;;;;;;;;;;;;;;3319:92;:::o;415:696:9:-;471:13;520:14;557:1;537:17;548:5;537:10;:17::i;:::-;:21;520:38;;572:20;606:6;595:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;572:41;;627:11;753:6;749:2;745:15;737:6;733:28;726:35;;788:280;795:4;788:280;;;819:5;;;;;;;;958:8;953:2;946:5;942:14;937:30;932:3;924:44;1012:2;1003:11;;;;;;:::i;:::-;;;;;1045:1;1036:5;:10;788:280;1032:21;788:280;1088:6;1081:13;;;;;415:696;;;:::o;7256:126:1:-;7321:4;7373:1;7344:31;;:17;7353:7;7344:8;:17::i;:::-;:31;;;;7337:38;;7256:126;;;:::o;15698:396::-;15882:1;15870:9;:13;15866:222;;;15919:1;15903:18;;:4;:18;;;15899:85;;15960:9;15941;:15;15951:4;15941:15;;;;;;;;;;;;;;;;:28;;;;;;;:::i;:::-;;;;;;;;15899:85;16015:1;16001:16;;:2;:16;;;15997:81;;16054:9;16037;:13;16047:2;16037:13;;;;;;;;;;;;;;;;:26;;;;;;;:::i;:::-;;;;;;;;15997:81;15866:222;15698:396;;;;:::o;16800:153::-;;;;;:::o;14151:831::-;14300:4;14320:15;:2;:13;;;:15::i;:::-;14316:660;;;14371:2;14355:36;;;14392:12;:10;:12::i;:::-;14406:4;14412:7;14421:4;14355:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14351:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14610:1;14593:6;:13;:18;14589:321;;14635:60;;;;;;;;;;:::i;:::-;;;;;;;;14589:321;14862:6;14856:13;14847:6;14843:2;14839:15;14832:38;14351:573;14486:41;;;14476:51;;;:6;:51;;;;14469:58;;;;;14316:660;14961:4;14954:11;;14151:831;;;;;;;:::o;9889:890:12:-;9942:7;9961:14;9978:1;9961:18;;10026:6;10017:5;:15;10013:99;;10061:6;10052:15;;;;;;:::i;:::-;;;;;10095:2;10085:12;;;;10013:99;10138:6;10129:5;:15;10125:99;;10173:6;10164:15;;;;;;:::i;:::-;;;;;10207:2;10197:12;;;;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;;;;:::i;:::-;;;;;10319:2;10309:12;;;;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;;;;:::i;:::-;;;;;10429:1;10419:11;;;;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;;;;:::i;:::-;;;;;10538:1;10528:11;;;;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;;;;:::i;:::-;;;;;10647:1;10637:11;;;;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;;;;10676:64;10766:6;10759:13;;;9889:890;;;:::o;1175:320:6:-;1235:4;1487:1;1465:7;:19;;;:23;1458:30;;1175:320;;;:::o;7:75:18:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:99::-;1570:6;1604:5;1598:12;1588:22;;1518:99;;;:::o;1623:169::-;1707:11;1741:6;1736:3;1729:19;1781:4;1776:3;1772:14;1757:29;;1623:169;;;;:::o;1798:246::-;1879:1;1889:113;1903:6;1900:1;1897:13;1889:113;;;1988:1;1983:3;1979:11;1973:18;1969:1;1964:3;1960:11;1953:39;1925:2;1922:1;1918:10;1913:15;;1889:113;;;2036:1;2027:6;2022:3;2018:16;2011:27;1860:184;1798:246;;;:::o;2050:102::-;2091:6;2142:2;2138:7;2133:2;2126:5;2122:14;2118:28;2108:38;;2050:102;;;:::o;2158:377::-;2246:3;2274:39;2307:5;2274:39;:::i;:::-;2329:71;2393:6;2388:3;2329:71;:::i;:::-;2322:78;;2409:65;2467:6;2462:3;2455:4;2448:5;2444:16;2409:65;:::i;:::-;2499:29;2521:6;2499:29;:::i;:::-;2494:3;2490:39;2483:46;;2250:285;2158:377;;;;:::o;2541:313::-;2654:4;2692:2;2681:9;2677:18;2669:26;;2741:9;2735:4;2731:20;2727:1;2716:9;2712:17;2705:47;2769:78;2842:4;2833:6;2769:78;:::i;:::-;2761:86;;2541:313;;;;:::o;2860:77::-;2897:7;2926:5;2915:16;;2860:77;;;:::o;2943:122::-;3016:24;3034:5;3016:24;:::i;:::-;3009:5;3006:35;2996:63;;3055:1;3052;3045:12;2996:63;2943:122;:::o;3071:139::-;3117:5;3155:6;3142:20;3133:29;;3171:33;3198:5;3171:33;:::i;:::-;3071:139;;;;:::o;3216:329::-;3275:6;3324:2;3312:9;3303:7;3299:23;3295:32;3292:119;;;3330:79;;:::i;:::-;3292:119;3450:1;3475:53;3520:7;3511:6;3500:9;3496:22;3475:53;:::i;:::-;3465:63;;3421:117;3216:329;;;;:::o;3551:126::-;3588:7;3628:42;3621:5;3617:54;3606:65;;3551:126;;;:::o;3683:96::-;3720:7;3749:24;3767:5;3749:24;:::i;:::-;3738:35;;3683:96;;;:::o;3785:118::-;3872:24;3890:5;3872:24;:::i;:::-;3867:3;3860:37;3785:118;;:::o;3909:222::-;4002:4;4040:2;4029:9;4025:18;4017:26;;4053:71;4121:1;4110:9;4106:17;4097:6;4053:71;:::i;:::-;3909:222;;;;:::o;4137:122::-;4210:24;4228:5;4210:24;:::i;:::-;4203:5;4200:35;4190:63;;4249:1;4246;4239:12;4190:63;4137:122;:::o;4265:139::-;4311:5;4349:6;4336:20;4327:29;;4365:33;4392:5;4365:33;:::i;:::-;4265:139;;;;:::o;4410:474::-;4478:6;4486;4535:2;4523:9;4514:7;4510:23;4506:32;4503:119;;;4541:79;;:::i;:::-;4503:119;4661:1;4686:53;4731:7;4722:6;4711:9;4707:22;4686:53;:::i;:::-;4676:63;;4632:117;4788:2;4814:53;4859:7;4850:6;4839:9;4835:22;4814:53;:::i;:::-;4804:63;;4759:118;4410:474;;;;;:::o;4890:619::-;4967:6;4975;4983;5032:2;5020:9;5011:7;5007:23;5003:32;5000:119;;;5038:79;;:::i;:::-;5000:119;5158:1;5183:53;5228:7;5219:6;5208:9;5204:22;5183:53;:::i;:::-;5173:63;;5129:117;5285:2;5311:53;5356:7;5347:6;5336:9;5332:22;5311:53;:::i;:::-;5301:63;;5256:118;5413:2;5439:53;5484:7;5475:6;5464:9;5460:22;5439:53;:::i;:::-;5429:63;;5384:118;4890:619;;;;;:::o;5515:329::-;5574:6;5623:2;5611:9;5602:7;5598:23;5594:32;5591:119;;;5629:79;;:::i;:::-;5591:119;5749:1;5774:53;5819:7;5810:6;5799:9;5795:22;5774:53;:::i;:::-;5764:63;;5720:117;5515:329;;;;:::o;5850:118::-;5937:24;5955:5;5937:24;:::i;:::-;5932:3;5925:37;5850:118;;:::o;5974:222::-;6067:4;6105:2;6094:9;6090:18;6082:26;;6118:71;6186:1;6175:9;6171:17;6162:6;6118:71;:::i;:::-;5974:222;;;;:::o;6202:116::-;6272:21;6287:5;6272:21;:::i;:::-;6265:5;6262:32;6252:60;;6308:1;6305;6298:12;6252:60;6202:116;:::o;6324:133::-;6367:5;6405:6;6392:20;6383:29;;6421:30;6445:5;6421:30;:::i;:::-;6324:133;;;;:::o;6463:468::-;6528:6;6536;6585:2;6573:9;6564:7;6560:23;6556:32;6553:119;;;6591:79;;:::i;:::-;6553:119;6711:1;6736:53;6781:7;6772:6;6761:9;6757:22;6736:53;:::i;:::-;6726:63;;6682:117;6838:2;6864:50;6906:7;6897:6;6886:9;6882:22;6864:50;:::i;:::-;6854:60;;6809:115;6463:468;;;;;:::o;6937:117::-;7046:1;7043;7036:12;7060:117;7169:1;7166;7159:12;7183:180;7231:77;7228:1;7221:88;7328:4;7325:1;7318:15;7352:4;7349:1;7342:15;7369:281;7452:27;7474:4;7452:27;:::i;:::-;7444:6;7440:40;7582:6;7570:10;7567:22;7546:18;7534:10;7531:34;7528:62;7525:88;;;7593:18;;:::i;:::-;7525:88;7633:10;7629:2;7622:22;7412:238;7369:281;;:::o;7656:129::-;7690:6;7717:20;;:::i;:::-;7707:30;;7746:33;7774:4;7766:6;7746:33;:::i;:::-;7656:129;;;:::o;7791:307::-;7852:4;7942:18;7934:6;7931:30;7928:56;;;7964:18;;:::i;:::-;7928:56;8002:29;8024:6;8002:29;:::i;:::-;7994:37;;8086:4;8080;8076:15;8068:23;;7791:307;;;:::o;8104:146::-;8201:6;8196:3;8191;8178:30;8242:1;8233:6;8228:3;8224:16;8217:27;8104:146;;;:::o;8256:423::-;8333:5;8358:65;8374:48;8415:6;8374:48;:::i;:::-;8358:65;:::i;:::-;8349:74;;8446:6;8439:5;8432:21;8484:4;8477:5;8473:16;8522:3;8513:6;8508:3;8504:16;8501:25;8498:112;;;8529:79;;:::i;:::-;8498:112;8619:54;8666:6;8661:3;8656;8619:54;:::i;:::-;8339:340;8256:423;;;;;:::o;8698:338::-;8753:5;8802:3;8795:4;8787:6;8783:17;8779:27;8769:122;;8810:79;;:::i;:::-;8769:122;8927:6;8914:20;8952:78;9026:3;9018:6;9011:4;9003:6;8999:17;8952:78;:::i;:::-;8943:87;;8759:277;8698:338;;;;:::o;9042:943::-;9137:6;9145;9153;9161;9210:3;9198:9;9189:7;9185:23;9181:33;9178:120;;;9217:79;;:::i;:::-;9178:120;9337:1;9362:53;9407:7;9398:6;9387:9;9383:22;9362:53;:::i;:::-;9352:63;;9308:117;9464:2;9490:53;9535:7;9526:6;9515:9;9511:22;9490:53;:::i;:::-;9480:63;;9435:118;9592:2;9618:53;9663:7;9654:6;9643:9;9639:22;9618:53;:::i;:::-;9608:63;;9563:118;9748:2;9737:9;9733:18;9720:32;9779:18;9771:6;9768:30;9765:117;;;9801:79;;:::i;:::-;9765:117;9906:62;9960:7;9951:6;9940:9;9936:22;9906:62;:::i;:::-;9896:72;;9691:287;9042:943;;;;;;;:::o;9991:474::-;10059:6;10067;10116:2;10104:9;10095:7;10091:23;10087:32;10084:119;;;10122:79;;:::i;:::-;10084:119;10242:1;10267:53;10312:7;10303:6;10292:9;10288:22;10267:53;:::i;:::-;10257:63;;10213:117;10369:2;10395:53;10440:7;10431:6;10420:9;10416:22;10395:53;:::i;:::-;10385:63;;10340:118;9991:474;;;;;:::o;10471:180::-;10519:77;10516:1;10509:88;10616:4;10613:1;10606:15;10640:4;10637:1;10630:15;10657:320;10701:6;10738:1;10732:4;10728:12;10718:22;;10785:1;10779:4;10775:12;10806:18;10796:81;;10862:4;10854:6;10850:17;10840:27;;10796:81;10924:2;10916:6;10913:14;10893:18;10890:38;10887:84;;10943:18;;:::i;:::-;10887:84;10708:269;10657:320;;;:::o;10983:220::-;11123:34;11119:1;11111:6;11107:14;11100:58;11192:3;11187:2;11179:6;11175:15;11168:28;10983:220;:::o;11209:366::-;11351:3;11372:67;11436:2;11431:3;11372:67;:::i;:::-;11365:74;;11448:93;11537:3;11448:93;:::i;:::-;11566:2;11561:3;11557:12;11550:19;;11209:366;;;:::o;11581:419::-;11747:4;11785:2;11774:9;11770:18;11762:26;;11834:9;11828:4;11824:20;11820:1;11809:9;11805:17;11798:47;11862:131;11988:4;11862:131;:::i;:::-;11854:139;;11581:419;;;:::o;12006:248::-;12146:34;12142:1;12134:6;12130:14;12123:58;12215:31;12210:2;12202:6;12198:15;12191:56;12006:248;:::o;12260:366::-;12402:3;12423:67;12487:2;12482:3;12423:67;:::i;:::-;12416:74;;12499:93;12588:3;12499:93;:::i;:::-;12617:2;12612:3;12608:12;12601:19;;12260:366;;;:::o;12632:419::-;12798:4;12836:2;12825:9;12821:18;12813:26;;12885:9;12879:4;12875:20;12871:1;12860:9;12856:17;12849:47;12913:131;13039:4;12913:131;:::i;:::-;12905:139;;12632:419;;;:::o;13057:232::-;13197:34;13193:1;13185:6;13181:14;13174:58;13266:15;13261:2;13253:6;13249:15;13242:40;13057:232;:::o;13295:366::-;13437:3;13458:67;13522:2;13517:3;13458:67;:::i;:::-;13451:74;;13534:93;13623:3;13534:93;:::i;:::-;13652:2;13647:3;13643:12;13636:19;;13295:366;;;:::o;13667:419::-;13833:4;13871:2;13860:9;13856:18;13848:26;;13920:9;13914:4;13910:20;13906:1;13895:9;13891:17;13884:47;13948:131;14074:4;13948:131;:::i;:::-;13940:139;;13667:419;;;:::o;14092:174::-;14232:26;14228:1;14220:6;14216:14;14209:50;14092:174;:::o;14272:366::-;14414:3;14435:67;14499:2;14494:3;14435:67;:::i;:::-;14428:74;;14511:93;14600:3;14511:93;:::i;:::-;14629:2;14624:3;14620:12;14613:19;;14272:366;;;:::o;14644:419::-;14810:4;14848:2;14837:9;14833:18;14825:26;;14897:9;14891:4;14887:20;14883:1;14872:9;14868:17;14861:47;14925:131;15051:4;14925:131;:::i;:::-;14917:139;;14644:419;;;:::o;15069:228::-;15209:34;15205:1;15197:6;15193:14;15186:58;15278:11;15273:2;15265:6;15261:15;15254:36;15069:228;:::o;15303:366::-;15445:3;15466:67;15530:2;15525:3;15466:67;:::i;:::-;15459:74;;15542:93;15631:3;15542:93;:::i;:::-;15660:2;15655:3;15651:12;15644:19;;15303:366;;;:::o;15675:419::-;15841:4;15879:2;15868:9;15864:18;15856:26;;15928:9;15922:4;15918:20;15914:1;15903:9;15899:17;15892:47;15956:131;16082:4;15956:131;:::i;:::-;15948:139;;15675:419;;;:::o;16100:148::-;16202:11;16239:3;16224:18;;16100:148;;;;:::o;16254:390::-;16360:3;16388:39;16421:5;16388:39;:::i;:::-;16443:89;16525:6;16520:3;16443:89;:::i;:::-;16436:96;;16541:65;16599:6;16594:3;16587:4;16580:5;16576:16;16541:65;:::i;:::-;16631:6;16626:3;16622:16;16615:23;;16364:280;16254:390;;;;:::o;16650:435::-;16830:3;16852:95;16943:3;16934:6;16852:95;:::i;:::-;16845:102;;16964:95;17055:3;17046:6;16964:95;:::i;:::-;16957:102;;17076:3;17069:10;;16650:435;;;;;:::o;17091:224::-;17231:34;17227:1;17219:6;17215:14;17208:58;17300:7;17295:2;17287:6;17283:15;17276:32;17091:224;:::o;17321:366::-;17463:3;17484:67;17548:2;17543:3;17484:67;:::i;:::-;17477:74;;17560:93;17649:3;17560:93;:::i;:::-;17678:2;17673:3;17669:12;17662:19;;17321:366;;;:::o;17693:419::-;17859:4;17897:2;17886:9;17882:18;17874:26;;17946:9;17940:4;17936:20;17932:1;17921:9;17917:17;17910:47;17974:131;18100:4;17974:131;:::i;:::-;17966:139;;17693:419;;;:::o;18118:223::-;18258:34;18254:1;18246:6;18242:14;18235:58;18327:6;18322:2;18314:6;18310:15;18303:31;18118:223;:::o;18347:366::-;18489:3;18510:67;18574:2;18569:3;18510:67;:::i;:::-;18503:74;;18586:93;18675:3;18586:93;:::i;:::-;18704:2;18699:3;18695:12;18688:19;;18347:366;;;:::o;18719:419::-;18885:4;18923:2;18912:9;18908:18;18900:26;;18972:9;18966:4;18962:20;18958:1;18947:9;18943:17;18936:47;19000:131;19126:4;19000:131;:::i;:::-;18992:139;;18719:419;;;:::o;19144:175::-;19284:27;19280:1;19272:6;19268:14;19261:51;19144:175;:::o;19325:366::-;19467:3;19488:67;19552:2;19547:3;19488:67;:::i;:::-;19481:74;;19564:93;19653:3;19564:93;:::i;:::-;19682:2;19677:3;19673:12;19666:19;;19325:366;;;:::o;19697:419::-;19863:4;19901:2;19890:9;19886:18;19878:26;;19950:9;19944:4;19940:20;19936:1;19925:9;19921:17;19914:47;19978:131;20104:4;19978:131;:::i;:::-;19970:139;;19697:419;;;:::o;20122:237::-;20262:34;20258:1;20250:6;20246:14;20239:58;20331:20;20326:2;20318:6;20314:15;20307:45;20122:237;:::o;20365:366::-;20507:3;20528:67;20592:2;20587:3;20528:67;:::i;:::-;20521:74;;20604:93;20693:3;20604:93;:::i;:::-;20722:2;20717:3;20713:12;20706:19;;20365:366;;;:::o;20737:419::-;20903:4;20941:2;20930:9;20926:18;20918:26;;20990:9;20984:4;20980:20;20976:1;20965:9;20961:17;20954:47;21018:131;21144:4;21018:131;:::i;:::-;21010:139;;20737:419;;;:::o;21162:180::-;21210:77;21207:1;21200:88;21307:4;21304:1;21297:15;21331:4;21328:1;21321:15;21348:180;21396:77;21393:1;21386:88;21493:4;21490:1;21483:15;21517:4;21514:1;21507:15;21534:194;21574:4;21594:20;21612:1;21594:20;:::i;:::-;21589:25;;21628:20;21646:1;21628:20;:::i;:::-;21623:25;;21672:1;21669;21665:9;21657:17;;21696:1;21690:4;21687:11;21684:37;;;21701:18;;:::i;:::-;21684:37;21534:194;;;;:::o;21734:191::-;21774:3;21793:20;21811:1;21793:20;:::i;:::-;21788:25;;21827:20;21845:1;21827:20;:::i;:::-;21822:25;;21870:1;21867;21863:9;21856:16;;21891:3;21888:1;21885:10;21882:36;;;21898:18;;:::i;:::-;21882:36;21734:191;;;;:::o;21931:98::-;21982:6;22016:5;22010:12;22000:22;;21931:98;;;:::o;22035:168::-;22118:11;22152:6;22147:3;22140:19;22192:4;22187:3;22183:14;22168:29;;22035:168;;;;:::o;22209:373::-;22295:3;22323:38;22355:5;22323:38;:::i;:::-;22377:70;22440:6;22435:3;22377:70;:::i;:::-;22370:77;;22456:65;22514:6;22509:3;22502:4;22495:5;22491:16;22456:65;:::i;:::-;22546:29;22568:6;22546:29;:::i;:::-;22541:3;22537:39;22530:46;;22299:283;22209:373;;;;:::o;22588:640::-;22783:4;22821:3;22810:9;22806:19;22798:27;;22835:71;22903:1;22892:9;22888:17;22879:6;22835:71;:::i;:::-;22916:72;22984:2;22973:9;22969:18;22960:6;22916:72;:::i;:::-;22998;23066:2;23055:9;23051:18;23042:6;22998:72;:::i;:::-;23117:9;23111:4;23107:20;23102:2;23091:9;23087:18;23080:48;23145:76;23216:4;23207:6;23145:76;:::i;:::-;23137:84;;22588:640;;;;;;;:::o;23234:141::-;23290:5;23321:6;23315:13;23306:22;;23337:32;23363:5;23337:32;:::i;:::-;23234:141;;;;:::o;23381:349::-;23450:6;23499:2;23487:9;23478:7;23474:23;23470:32;23467:119;;;23505:79;;:::i;:::-;23467:119;23625:1;23650:63;23705:7;23696:6;23685:9;23681:22;23650:63;:::i;:::-;23640:73;;23596:127;23381:349;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1783800","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2921","getApproved(uint256)":"5277","isApprovedForAll(address,address)":"infinite","name()":"infinite","ownerOf(uint256)":"3022","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","supportsInterface(bytes4)":"774","symbol()":"infinite","tokenURI(uint256)":"3459","transferFrom(address,address,uint256)":"infinite"},"internal":{"_afterTokenTransfer(address,address,uint256,uint256)":"17","_approve(address,uint256)":"infinite","_baseURI()":"infinite","_beforeTokenTransfer(address,address,uint256,uint256)":"infinite","_burn(uint256)":"infinite","_checkOnERC721Received(address,address,uint256,bytes memory)":"infinite","_exists(uint256)":"2312","_isApprovedOrOwner(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_ownerOf(uint256)":"2248","_requireMinted(uint256)":"infinite","_safeMint(address,uint256)":"infinite","_safeMint(address,uint256,bytes memory)":"infinite","_safeTransfer(address,address,uint256,bytes memory)":"infinite","_setApprovalForAll(address,address,bool)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":140,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":144,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":148,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":152,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":158,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"ERC721URIStorage":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"ERC721 token with storage based token URI management.","kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC721 token with storage based token URI management.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":\"ERC721URIStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":140,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":144,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":148,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":152,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":158,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":1204,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_tokenURIs","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_string_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a09abdc3732e0c34fe4885aa8571bfb41a251fdcff68744f78a9499a155ab62c64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG0 SWAP11 0xBD 0xC3 PUSH20 0x2E0C34FE4885AA8571BFB41A251FDCFF68744F78 0xA9 0x49 SWAP11 ISZERO GAS 0xB6 0x2C PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"194:8964:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a09abdc3732e0c34fe4885aa8571bfb41a251fdcff68744f78a9499a155ab62c64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG0 SWAP11 0xBD 0xC3 PUSH20 0x2E0C34FE4885AA8571BFB41A251FDCFF68744F78 0xA9 0x49 SWAP11 ISZERO GAS 0xB6 0x2C PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"194:8964:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Counters.sol":{"Counters":{"abi":[],"devdoc":{"author":"Matt Condon (@shrugs)","details":"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`","kind":"dev","methods":{},"title":"Counters","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206d57eab5abce5980e16157af3e54f91ac4d40b1cd70c31d551381348bbab7cb764736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH14 0x57EAB5ABCE5980E16157AF3E54F9 BYTE 0xC4 0xD4 SIGNEXTEND SHR 0xD7 0xC BALANCE 0xD5 MLOAD CODESIZE SGT BASEFEE 0xBB 0xAB PUSH29 0xB764736F6C634300081100330000000000000000000000000000000000 ","sourceMap":"424:971:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206d57eab5abce5980e16157af3e54f91ac4d40b1cd70c31d551381348bbab7cb764736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH14 0x57EAB5ABCE5980E16157AF3E54F9 BYTE 0xC4 0xD4 SIGNEXTEND SHR 0xD7 0xC BALANCE 0xD5 MLOAD CODESIZE SGT BASEFEE 0xBB 0xAB PUSH29 0xB764736F6C634300081100330000000000000000000000000000000000 ","sourceMap":"424:971:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"current(struct Counters.Counter storage pointer)":"infinite","decrement(struct Counters.Counter storage pointer)":"infinite","increment(struct Counters.Counter storage pointer)":"infinite","reset(struct Counters.Counter storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Counters.sol\":\"Counters\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122060017698e01c6932f89fdb7b12ba917edb07b5f945503f3abdcd2267742fb84b64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH1 0x1 PUSH23 0x98E01C6932F89FDB7B12BA917EDB07B5F945503F3ABDCD 0x22 PUSH8 0x742FB84B64736F6C PUSH4 0x43000811 STOP CALLER ","sourceMap":"188:2065:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122060017698e01c6932f89fdb7b12ba917edb07b5f945503f3abdcd2267742fb84b64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH1 0x1 PUSH23 0x98E01C6932F89FDB7B12BA917EDB07B5F945503F3ABDCD 0x22 PUSH8 0x742FB84B64736F6C PUSH4 0x43000811 STOP CALLER ","sourceMap":"188:2065:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205dbe6febdcf68c239e1ab1b2757512b1ef3440b4378677bd12b1687ef6a5a35764736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D 0xBE PUSH16 0xEBDCF68C239E1AB1B2757512B1EF3440 0xB4 CALLDATACOPY DUP7 PUSH24 0xBD12B1687EF6A5A35764736F6C6343000811003300000000 ","sourceMap":"202:12302:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205dbe6febdcf68c239e1ab1b2757512b1ef3440b4378677bd12b1687ef6a5a35764736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D 0xBE PUSH16 0xEBDCF68C239E1AB1B2757512B1EF3440 0xB4 CALLDATACOPY DUP7 PUSH24 0xBD12B1687EF6A5A35764736F6C6343000811003300000000 ","sourceMap":"202:12302:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"SafeMath":{"abi":[],"devdoc":{"details":"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a02c648438644133931b4c66812933dcc54aec01449b04904e46734647f00bf764736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG0 0x2C PUSH5 0x8438644133 SWAP4 SHL 0x4C PUSH7 0x812933DCC54AEC ADD DIFFICULTY SWAP12 DIV SWAP1 0x4E CHAINID PUSH20 0x4647F00BF764736F6C6343000811003300000000 ","sourceMap":"482:6300:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a02c648438644133931b4c66812933dcc54aec01449b04904e46734647f00bf764736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG0 0x2C PUSH5 0x8438644133 SWAP4 SHL 0x4C PUSH7 0x812933DCC54AEC ADD DIFFICULTY SWAP12 DIV SWAP1 0x4E CHAINID PUSH20 0x4647F00BF764736F6C6343000811003300000000 ","sourceMap":"482:6300:13:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"add(uint256,uint256)":"infinite","div(uint256,uint256)":"infinite","div(uint256,uint256,string memory)":"infinite","mod(uint256,uint256)":"infinite","mod(uint256,uint256,string memory)":"infinite","mul(uint256,uint256)":"infinite","sub(uint256,uint256)":"infinite","sub(uint256,uint256,string memory)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/structs/EnumerableMap.sol":{"EnumerableMap":{"abi":[],"devdoc":{"details":"Library for managing an enumerable variant of Solidity's https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`] type. Maps have the following properties: - Entries are added, removed, and checked for existence in constant time (O(1)). - Entries are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableMap for EnumerableMap.UintToAddressMap;     // Declare a set state variable     EnumerableMap.UintToAddressMap private myMap; } ``` The following map types are supported: - `uint256 -> address` (`UintToAddressMap`) since v3.0.0 - `address -> uint256` (`AddressToUintMap`) since v4.6.0 - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0 - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0 - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0 [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an array of EnumerableMap. ====","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c755e77dad26d1be080200f56aca7019505cdff7d026bcbb283de395b0af48ce64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC7 SSTORE 0xE7 PUSH30 0xAD26D1BE080200F56ACA7019505CDFF7D026BCBB283DE395B0AF48CE6473 PUSH16 0x6C634300081100330000000000000000 ","sourceMap":"1621:15801:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c755e77dad26d1be080200f56aca7019505cdff7d026bcbb283de395b0af48ce64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC7 SSTORE 0xE7 PUSH30 0xAD26D1BE080200F56ACA7019505CDFF7D026BCBB283DE395B0AF48CE6473 PUSH16 0x6C634300081100330000000000000000 ","sourceMap":"1621:15801:14:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"at(struct EnumerableMap.AddressToUintMap storage pointer,uint256)":"infinite","at(struct EnumerableMap.Bytes32ToBytes32Map storage pointer,uint256)":"infinite","at(struct EnumerableMap.Bytes32ToUintMap storage pointer,uint256)":"infinite","at(struct EnumerableMap.UintToAddressMap storage pointer,uint256)":"infinite","at(struct EnumerableMap.UintToUintMap storage pointer,uint256)":"infinite","contains(struct EnumerableMap.AddressToUintMap storage pointer,address)":"infinite","contains(struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32)":"infinite","contains(struct EnumerableMap.Bytes32ToUintMap storage pointer,bytes32)":"infinite","contains(struct EnumerableMap.UintToAddressMap storage pointer,uint256)":"infinite","contains(struct EnumerableMap.UintToUintMap storage pointer,uint256)":"infinite","get(struct EnumerableMap.AddressToUintMap storage pointer,address)":"infinite","get(struct EnumerableMap.AddressToUintMap storage pointer,address,string memory)":"infinite","get(struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32)":"infinite","get(struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32,string memory)":"infinite","get(struct EnumerableMap.Bytes32ToUintMap storage pointer,bytes32)":"infinite","get(struct EnumerableMap.Bytes32ToUintMap storage pointer,bytes32,string memory)":"infinite","get(struct EnumerableMap.UintToAddressMap storage pointer,uint256)":"infinite","get(struct EnumerableMap.UintToAddressMap storage pointer,uint256,string memory)":"infinite","get(struct EnumerableMap.UintToUintMap storage pointer,uint256)":"infinite","get(struct EnumerableMap.UintToUintMap storage pointer,uint256,string memory)":"infinite","length(struct EnumerableMap.AddressToUintMap storage pointer)":"infinite","length(struct EnumerableMap.Bytes32ToBytes32Map storage pointer)":"infinite","length(struct EnumerableMap.Bytes32ToUintMap storage pointer)":"infinite","length(struct EnumerableMap.UintToAddressMap storage pointer)":"infinite","length(struct EnumerableMap.UintToUintMap storage pointer)":"infinite","remove(struct EnumerableMap.AddressToUintMap storage pointer,address)":"infinite","remove(struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32)":"infinite","remove(struct EnumerableMap.Bytes32ToUintMap storage pointer,bytes32)":"infinite","remove(struct EnumerableMap.UintToAddressMap storage pointer,uint256)":"infinite","remove(struct EnumerableMap.UintToUintMap storage pointer,uint256)":"infinite","set(struct EnumerableMap.AddressToUintMap storage pointer,address,uint256)":"infinite","set(struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32,bytes32)":"infinite","set(struct EnumerableMap.Bytes32ToUintMap storage pointer,bytes32,uint256)":"infinite","set(struct EnumerableMap.UintToAddressMap storage pointer,uint256,address)":"infinite","set(struct EnumerableMap.UintToUintMap storage pointer,uint256,uint256)":"infinite","tryGet(struct EnumerableMap.AddressToUintMap storage pointer,address)":"infinite","tryGet(struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32)":"infinite","tryGet(struct EnumerableMap.Bytes32ToUintMap storage pointer,bytes32)":"infinite","tryGet(struct EnumerableMap.UintToAddressMap storage pointer,uint256)":"infinite","tryGet(struct EnumerableMap.UintToUintMap storage pointer,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing an enumerable variant of Solidity's https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`] type. Maps have the following properties: - Entries are added, removed, and checked for existence in constant time (O(1)). - Entries are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableMap for EnumerableMap.UintToAddressMap;     // Declare a set state variable     EnumerableMap.UintToAddressMap private myMap; } ``` The following map types are supported: - `uint256 -> address` (`UintToAddressMap`) since v3.0.0 - `address -> uint256` (`AddressToUintMap`) since v4.6.0 - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0 - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0 - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0 [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an array of EnumerableMap. ====\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":\"EnumerableMap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n}\\n\",\"keccak256\":\"0x5094b17cb46143943f3206d0738b91a05a7005e979681af7210d534cd3e72f54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"EnumerableSet":{"abi":[],"devdoc":{"details":"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220263e47076a3a0545504ca2cbb3d19f0b56ca72727f83d2bef0f42dd71e188ef664736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x26 RETURNDATACOPY SELFBALANCE SMOD PUSH11 0x3A0545504CA2CBB3D19F0B JUMP 0xCA PUSH19 0x727F83D2BEF0F42DD71E188EF664736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"1321:11630:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220263e47076a3a0545504ca2cbb3d19f0b56ca72727f83d2bef0f42dd71e188ef664736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x26 RETURNDATACOPY SELFBALANCE SMOD PUSH11 0x3A0545504CA2CBB3D19F0B JUMP 0xCA PUSH19 0x727F83D2BEF0F42DD71E188EF664736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"1321:11630:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_add(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_at(struct EnumerableSet.Set storage pointer,uint256)":"infinite","_contains(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_length(struct EnumerableSet.Set storage pointer)":"infinite","_remove(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_values(struct EnumerableSet.Set storage pointer)":"infinite","add(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","add(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","add(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","at(struct EnumerableSet.AddressSet storage pointer,uint256)":"infinite","at(struct EnumerableSet.Bytes32Set storage pointer,uint256)":"infinite","at(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","contains(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","contains(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","contains(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","length(struct EnumerableSet.AddressSet storage pointer)":"infinite","length(struct EnumerableSet.Bytes32Set storage pointer)":"infinite","length(struct EnumerableSet.UintSet storage pointer)":"infinite","remove(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","remove(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","remove(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","values(struct EnumerableSet.AddressSet storage pointer)":"infinite","values(struct EnumerableSet.Bytes32Set storage pointer)":"infinite","values(struct EnumerableSet.UintSet storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Marketplace.sol":{"Marketplace":{"abi":[{"inputs":[{"internalType":"address","name":"collection","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":true,"internalType":"address","name":"seller","type":"address"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"}],"name":"NFTListed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"}],"name":"NFTPriceUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"NFTRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":true,"internalType":"address","name":"offerer","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"OfferMade","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"},{"indexed":true,"internalType":"address","name":"buyer","type":"address"}],"name":"PurchaseMade","type":"event"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"address","name":"_buyer","type":"address"}],"name":"acceptOffer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"buyNFT","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"cancelOffer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"getNFTPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_seller","type":"address"}],"name":"getNFTsBySeller","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"getPendingOffers","outputs":[{"components":[{"internalType":"address","name":"offerer","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct Marketplace.Offer[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"}],"name":"listNFT","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"makeOffer","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"nfts","outputs":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"address","name":"buyer","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"removeNFT","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"}],"name":"updateNFTPrice","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_4994":{"entryPoint":null,"id":4994,"parameterSlots":1,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":275,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":298,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"cleanup_t_address":{"entryPoint":229,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":197,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":192,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_t_address":{"entryPoint":249,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1199:18","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:18","statements":[{"nodeType":"YulAssignment","src":"57:19:18","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:18","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:18"},"nodeType":"YulFunctionCall","src":"67:9:18"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:18"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:18","type":""}],"src":"7:75:18"},{"body":{"nodeType":"YulBlock","src":"177:28:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:18"},"nodeType":"YulFunctionCall","src":"187:12:18"},"nodeType":"YulExpressionStatement","src":"187:12:18"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:18"},{"body":{"nodeType":"YulBlock","src":"300:28:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:18"},"nodeType":"YulFunctionCall","src":"310:12:18"},"nodeType":"YulExpressionStatement","src":"310:12:18"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:18"},{"body":{"nodeType":"YulBlock","src":"379:81:18","statements":[{"nodeType":"YulAssignment","src":"389:65:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"404:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"411:42:18","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"400:3:18"},"nodeType":"YulFunctionCall","src":"400:54:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:18"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:18","type":""}],"src":"334:126:18"},{"body":{"nodeType":"YulBlock","src":"511:51:18","statements":[{"nodeType":"YulAssignment","src":"521:35:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:18"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"532:17:18"},"nodeType":"YulFunctionCall","src":"532:24:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"521:7:18"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"493:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"503:7:18","type":""}],"src":"466:96:18"},{"body":{"nodeType":"YulBlock","src":"611:79:18","statements":[{"body":{"nodeType":"YulBlock","src":"668:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"677:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"680:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"670:6:18"},"nodeType":"YulFunctionCall","src":"670:12:18"},"nodeType":"YulExpressionStatement","src":"670:12:18"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"634:5:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"659:5:18"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"641:17:18"},"nodeType":"YulFunctionCall","src":"641:24:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"631:2:18"},"nodeType":"YulFunctionCall","src":"631:35:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"624:6:18"},"nodeType":"YulFunctionCall","src":"624:43:18"},"nodeType":"YulIf","src":"621:63:18"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"604:5:18","type":""}],"src":"568:122:18"},{"body":{"nodeType":"YulBlock","src":"759:80:18","statements":[{"nodeType":"YulAssignment","src":"769:22:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"784:6:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"778:5:18"},"nodeType":"YulFunctionCall","src":"778:13:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"769:5:18"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"827:5:18"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"800:26:18"},"nodeType":"YulFunctionCall","src":"800:33:18"},"nodeType":"YulExpressionStatement","src":"800:33:18"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"737:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"745:3:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"753:5:18","type":""}],"src":"696:143:18"},{"body":{"nodeType":"YulBlock","src":"922:274:18","statements":[{"body":{"nodeType":"YulBlock","src":"968:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"970:77:18"},"nodeType":"YulFunctionCall","src":"970:79:18"},"nodeType":"YulExpressionStatement","src":"970:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"943:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"952:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"939:3:18"},"nodeType":"YulFunctionCall","src":"939:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"964:2:18","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"935:3:18"},"nodeType":"YulFunctionCall","src":"935:32:18"},"nodeType":"YulIf","src":"932:119:18"},{"nodeType":"YulBlock","src":"1061:128:18","statements":[{"nodeType":"YulVariableDeclaration","src":"1076:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"1090:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1080:6:18","type":""}]},{"nodeType":"YulAssignment","src":"1105:74:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1151:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"1162:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1147:3:18"},"nodeType":"YulFunctionCall","src":"1147:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1171:7:18"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"1115:31:18"},"nodeType":"YulFunctionCall","src":"1115:64:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1105:6:18"}]}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"892:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"903:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"915:6:18","type":""}],"src":"845:351:18"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n","id":18,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b5060405162002f8a38038062002f8a83398181016040528101906200003791906200012a565b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200015c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f282620000c5565b9050919050565b6200010481620000e5565b81146200011057600080fd5b50565b6000815190506200012481620000f9565b92915050565b600060208284031215620001435762000142620000c0565b5b6000620001538482850162000113565b91505092915050565b612e1e806200016c6000396000f3fe60806040526004361061009c5760003560e01c8063918d407d11610064578063918d407d146101a057806392976179146101c957806394383f14146102065780639a2f64741461022f578063ee4739cb1461024b578063ef706adf146102745761009c565b806309de4e06146100a1578063265aa621146100de5780634ac0123d1461011e57806350dc18671461014757806351ed828814610184575b600080fd5b3480156100ad57600080fd5b506100c860048036038101906100c391906120c7565b61029d565b6040516100d591906121bc565b60405180910390f35b3480156100ea57600080fd5b506101056004803603810190610100919061220a565b610410565b6040516101159493929190612255565b60405180910390f35b34801561012a57600080fd5b506101456004803603810190610140919061229a565b610480565b005b34801561015357600080fd5b5061016e6004803603810190610169919061220a565b6105c1565b60405161017b91906123c7565b60405180910390f35b61019e6004803603810190610199919061220a565b6106ee565b005b3480156101ac57600080fd5b506101c760048036038101906101c291906123e9565b61090b565b005b3480156101d557600080fd5b506101f060048036038101906101eb919061220a565b610b5b565b6040516101fd9190612429565b60405180910390f35b34801561021257600080fd5b5061022d6004803603810190610228919061229a565b610b8f565b005b6102496004803603810190610244919061220a565b610ed3565b005b34801561025757600080fd5b50610272600480360381019061026d919061220a565b6112e9565b005b34801561028057600080fd5b5061029b6004803603810190610296919061220a565b611481565b005b606060006102e8600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206115c2565b67ffffffffffffffff81111561030157610300612444565b5b60405190808252806020026020018201604052801561032f5781602001602082028036833780820191505090505b50905060005b61037c600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206115c2565b811015610406576103d481600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206115d790919063ffffffff16565b8282815181106103e7576103e6612473565b5b60200260200101818152505080806103fe906124d1565b915050610335565b5080915050919050565b60006020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905084565b610489826115f1565b6104c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bf90612576565b60405180910390fd5b60008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461056b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056290612608565b60405180910390fd5b8060008084815260200190815260200160002060020181905550817f2847cfe8afe8bcd9ac540f0259739697ea019f65d44c8e76c8796b8ce52f7c31826040516105b59190612429565b60405180910390a25050565b606060006105e060026000858152602001908152602001600020611612565b67ffffffffffffffff8111156105f9576105f8612444565b5b60405190808252806020026020018201604052801561063257816020015b61061f612034565b8152602001906001900390816106175790505b50905060005b61065360026000868152602001908152602001600020611612565b8110156106e457600080610682836002600089815260200190815260200160002061162790919063ffffffff16565b9150915060405180604001604052808373ffffffffffffffffffffffffffffffffffffffff168152602001828152508484815181106106c4576106c3612473565b5b6020026020010181905250505080806106dc906124d1565b915050610638565b5080915050919050565b6106f7816115f1565b610736576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072d90612576565b60405180910390fd5b60008082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036107d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d090612674565b60405180910390fd5b60008082815260200190815260200160002060020154341015610831576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610828906126e0565b60405180910390fd5b3360008083815260200190815260200160002060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506108a48160008084815260200190815260200160002060020154611653565b3373ffffffffffffffffffffffffffffffffffffffff16817f67ba49958f8b7a80047dfa2bdad61ca2b10d970a32898c2f345a7b20079ba037600080858152602001908152602001600020600201546040516109009190612429565b60405180910390a350565b610914826115f1565b610953576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094a90612576565b60405180910390fd5b60008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ed90612772565b60405180910390fd5b610a1b8160026000858152602001908152602001600020611aa490919063ffffffff16565b610a5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5190612804565b60405180910390fd5b8060008084815260200190815260200160002060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610ad38160026000858152602001908152602001600020611ad490919063ffffffff16565b50610af38260008085815260200190815260200160002060020154611653565b8073ffffffffffffffffffffffffffffffffffffffff16827f67ba49958f8b7a80047dfa2bdad61ca2b10d970a32898c2f345a7b20079ba03760008086815260200190815260200160002060020154604051610b4f9190612429565b60405180910390a35050565b6000610b66826115f1565b610b71576000610b88565b600080838152602001908152602001600020600201545b9050919050565b60008111610bd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc990612870565b60405180910390fd5b610bdb82611b04565b610c1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c11906128dc565b60405180910390fd5b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b8152600401610c779190612429565b602060405180830381865afa158015610c94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb89190612911565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610d28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1f9061298a565b60405180910390fd5b60405180608001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001848152602001838152602001600073ffffffffffffffffffffffffffffffffffffffff1681525060008085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050610e7e83600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611bb390919063ffffffff16565b503373ffffffffffffffffffffffffffffffffffffffff16837f5f9c03de076f5063cd3ebcfe8ef7aa8af378e4b35a83c77ba9777e97083879a284604051610ec69190612429565b60405180910390a3505050565b610edc816115f1565b610f1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1290612576565b60405180910390fd5b60008082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610fbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb590612a1c565b60405180910390fd5b60003411611001576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff890612aae565b60405180910390fd5b6110263360026000848152602001908152602001600020611aa490919063ffffffff16565b156111755760006110523360026000858152602001908152602001600020611bcd90919063ffffffff16565b905060008111801561106357508034115b15611134576000819050349150611097338360026000878152602001908152602001600020611c009092919063ffffffff16565b503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156110de573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff16837fbdf1e76c2ba2a5c85b93bf78678a4a3b06d63b18422612dac8d7d5249ed46714346040516111269190612429565b60405180910390a35061116f565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116690612b40565b60405180910390fd5b506112e6565b60008082815260200190815260200160002060020154341061126d573360008083815260200190815260200160002060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506112048160008084815260200190815260200160002060020154611653565b3373ffffffffffffffffffffffffffffffffffffffff16817f67ba49958f8b7a80047dfa2bdad61ca2b10d970a32898c2f345a7b20079ba037600080858152602001908152602001600020600201546040516112609190612429565b60405180910390a36112e5565b611294333460026000858152602001908152602001600020611c009092919063ffffffff16565b503373ffffffffffffffffffffffffffffffffffffffff16817fbdf1e76c2ba2a5c85b93bf78678a4a3b06d63b18422612dac8d7d5249ed46714346040516112dc9190612429565b60405180910390a35b5b50565b3373ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461138c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138390612bac565b60405180910390fd5b6113dd81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611c3590919063ffffffff16565b50600080828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905560028201600090556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050807f5b8046420884c4698df446ee47bb3971db3b7f1f959ff4f04a70b32b2873284160405160405180910390a250565b6114a63360026000848152602001908152602001600020611aa490919063ffffffff16565b6114e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114dc90612804565b60405180910390fd5b600061150c3360026000858152602001908152602001600020611bcd90919063ffffffff16565b905060008111611551576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154890612aae565b60405180910390fd5b6115763360026000858152602001908152602001600020611ad490919063ffffffff16565b503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156115bd573d6000803e3d6000fd5b505050565b60006115d082600001611c4f565b9050919050565b60006115e68360000183611c60565b60001c905092915050565b60008060008084815260200190815260200160002060010154119050919050565b600061162082600001611c8b565b9050919050565b60008060008061163a8660000186611ca0565b915091508160001c8160001c9350935050509250929050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639a22d0ea846040518263ffffffff1660e01b81526004016116b09190612429565b602060405180830381865afa1580156116cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f19190612be1565b905060008111611736576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172d90612c80565b60405180910390fd5b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b7121f8856040518263ffffffff1660e01b81526004016117939190612429565b602060405180830381865afa1580156117b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d49190612911565b905060006117eb8385611ce090919063ffffffff16565b9050600080600087815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166108fc6118548488611cf690919063ffffffff16565b9081150290604051600060405180830381858888f1935050505015801561187f573d6000803e3d6000fd5b508273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156118c6573d6000803e3d6000fd5b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e60008089815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16336000808b8152602001908152602001600020600101546040518463ffffffff1660e01b815260040161197093929190612ca0565b600060405180830381600087803b15801561198a57600080fd5b505af115801561199e573d6000803e3d6000fd5b50505050611a2886600160008060008b815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611c3590919063ffffffff16565b50600080878152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905560028201600090556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050505050505050565b6000611acc836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611d0c565b905092915050565b6000611afc836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611d2c565b905092915050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401611b619190612429565b602060405180830381865afa925050508015611b9b57506040513d601f19601f82011682018060405250810190611b989190612911565b60015b611ba85760009050611bae565b50600190505b919050565b6000611bc5836000018360001b611d65565b905092915050565b6000611bf5836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611dd5565b60001c905092915050565b6000611c2c846000018473ffffffffffffffffffffffffffffffffffffffff1660001b8460001b611e51565b90509392505050565b6000611c47836000018360001b611e8c565b905092915050565b600081600001805490509050919050565b6000826000018281548110611c7857611c77612473565b5b9060005260206000200154905092915050565b6000611c9982600001611fa0565b9050919050565b6000806000611cbb8486600001611fb590919063ffffffff16565b9050808560020160008381526020019081526020016000205492509250509250929050565b60008183611cee9190612cd7565b905092915050565b60008183611d049190612d19565b905092915050565b6000611d248284600001611fcc90919063ffffffff16565b905092915050565b600082600201600083815260200190815260200160002060009055611d5d8284600001611fe390919063ffffffff16565b905092915050565b6000611d718383611ffa565b611dca578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050611dcf565b600090505b92915050565b6000808360020160008481526020019081526020016000205490506000801b81141580611e085750611e078484611d0c565b5b611e47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3e90612d99565b60405180910390fd5b8091505092915050565b60008184600201600085815260200190815260200160002081905550611e83838560000161201d90919063ffffffff16565b90509392505050565b60008083600101600084815260200190815260200160002054905060008114611f94576000600182611ebe9190612d19565b9050600060018660000180549050611ed69190612d19565b9050818114611f45576000866000018281548110611ef757611ef6612473565b5b9060005260206000200154905080876000018481548110611f1b57611f1a612473565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480611f5957611f58612db9565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611f9a565b60009150505b92915050565b6000611fae82600001611c4f565b9050919050565b6000611fc48360000183611c60565b905092915050565b6000611fdb8360000183611ffa565b905092915050565b6000611ff28360000183611e8c565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600061202c8360000183611d65565b905092915050565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061209482612069565b9050919050565b6120a481612089565b81146120af57600080fd5b50565b6000813590506120c18161209b565b92915050565b6000602082840312156120dd576120dc612064565b5b60006120eb848285016120b2565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b61213381612120565b82525050565b6000612145838361212a565b60208301905092915050565b6000602082019050919050565b6000612169826120f4565b61217381856120ff565b935061217e83612110565b8060005b838110156121af5781516121968882612139565b97506121a183612151565b925050600181019050612182565b5085935050505092915050565b600060208201905081810360008301526121d6818461215e565b905092915050565b6121e781612120565b81146121f257600080fd5b50565b600081359050612204816121de565b92915050565b6000602082840312156122205761221f612064565b5b600061222e848285016121f5565b91505092915050565b61224081612089565b82525050565b61224f81612120565b82525050565b600060808201905061226a6000830187612237565b6122776020830186612246565b6122846040830185612246565b6122916060830184612237565b95945050505050565b600080604083850312156122b1576122b0612064565b5b60006122bf858286016121f5565b92505060206122d0858286016121f5565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61230f81612089565b82525050565b60408201600082015161232b6000850182612306565b50602082015161233e602085018261212a565b50505050565b60006123508383612315565b60408301905092915050565b6000602082019050919050565b6000612374826122da565b61237e81856122e5565b9350612389836122f6565b8060005b838110156123ba5781516123a18882612344565b97506123ac8361235c565b92505060018101905061238d565b5085935050505092915050565b600060208201905081810360008301526123e18184612369565b905092915050565b60008060408385031215612400576123ff612064565b5b600061240e858286016121f5565b925050602061241f858286016120b2565b9150509250929050565b600060208201905061243e6000830184612246565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006124dc82612120565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361250e5761250d6124a2565b5b600182019050919050565b600082825260208201905092915050565b7f4e465420646f6573206e6f742065786973740000000000000000000000000000600082015250565b6000612560601283612519565b915061256b8261252a565b602082019050919050565b6000602082019050818103600083015261258f81612553565b9050919050565b7f4f6e6c79204e46542073656c6c65722063616e2075706461746520746865207060008201527f7269636500000000000000000000000000000000000000000000000000000000602082015250565b60006125f2602483612519565b91506125fd82612596565b604082019050919050565b60006020820190508181036000830152612621816125e5565b9050919050565b7f53656c6c65722063616e6e6f7420627579207468656972206f776e204e465400600082015250565b600061265e601f83612519565b915061266982612628565b602082019050919050565b6000602082019050818103600083015261268d81612651565b9050919050565b7f496e73756666696369656e742066756e64730000000000000000000000000000600082015250565b60006126ca601283612519565b91506126d582612694565b602082019050919050565b600060208201905081810360008301526126f9816126bd565b9050919050565b7f4f6e6c79207468652073656c6c65722063616e2061636365707420616e206f6660008201527f6665720000000000000000000000000000000000000000000000000000000000602082015250565b600061275c602383612519565b915061276782612700565b604082019050919050565b6000602082019050818103600083015261278b8161274f565b9050919050565b7f546865726520617265206e6f2070656e64696e67206f666665727320666f722060008201527f74686973204e4654000000000000000000000000000000000000000000000000602082015250565b60006127ee602883612519565b91506127f982612792565b604082019050919050565b6000602082019050818103600083015261281d816127e1565b9050919050565b7f50726963652063616e6e6f74206265207a65726f000000000000000000000000600082015250565b600061285a601483612519565b915061286582612824565b602082019050919050565b600060208201905081810360008301526128898161284d565b9050919050565b7f496e76616c6964204e4654000000000000000000000000000000000000000000600082015250565b60006128c6600b83612519565b91506128d182612890565b602082019050919050565b600060208201905081810360008301526128f5816128b9565b9050919050565b60008151905061290b8161209b565b92915050565b60006020828403121561292757612926612064565b5b6000612935848285016128fc565b91505092915050565b7f4e6f7420746865204e4654206f776e6572000000000000000000000000000000600082015250565b6000612974601183612519565b915061297f8261293e565b602082019050919050565b600060208201905081810360008301526129a381612967565b9050919050565b7f53656c6c65722063616e6e6f74206d616b6520616e206f6666657220666f722060008201527f7468656972206f776e204e465400000000000000000000000000000000000000602082015250565b6000612a06602d83612519565b9150612a11826129aa565b604082019050919050565b60006020820190508181036000830152612a35816129f9565b9050919050565b7f4f666665722076616c7565206d7573742062652067726561746572207468616e60008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000612a98602583612519565b9150612aa382612a3c565b604082019050919050565b60006020820190508181036000830152612ac781612a8b565b9050919050565b7f4f666665722076616c7565206d75737420626520686967686572207468616e2060008201527f6578697374696e67206f66666572000000000000000000000000000000000000602082015250565b6000612b2a602e83612519565b9150612b3582612ace565b604082019050919050565b60006020820190508181036000830152612b5981612b1d565b9050919050565b7f4f6e6c792073656c6c65722063616e2072656d6f7665204e4654000000000000600082015250565b6000612b96601a83612519565b9150612ba182612b60565b602082019050919050565b60006020820190508181036000830152612bc581612b89565b9050919050565b600081519050612bdb816121de565b92915050565b600060208284031215612bf757612bf6612064565b5b6000612c0584828501612bcc565b91505092915050565b7f526f79616c746965732070657263656e74206d7573742062652067726561746560008201527f72207468616e207a65726f2e0000000000000000000000000000000000000000602082015250565b6000612c6a602c83612519565b9150612c7582612c0e565b604082019050919050565b60006020820190508181036000830152612c9981612c5d565b9050919050565b6000606082019050612cb56000830186612237565b612cc26020830185612237565b612ccf6040830184612246565b949350505050565b6000612ce282612120565b9150612ced83612120565b9250828202612cfb81612120565b91508282048414831517612d1257612d116124a2565b5b5092915050565b6000612d2482612120565b9150612d2f83612120565b9250828203905081811115612d4757612d466124a2565b5b92915050565b7f456e756d657261626c654d61703a206e6f6e6578697374656e74206b65790000600082015250565b6000612d83601e83612519565b9150612d8e82612d4d565b602082019050919050565b60006020820190508181036000830152612db281612d76565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea264697066735822122076de6f44bc2c89d60063cd383772caf637f4ec46d7aac25c2cab9d14b670538a64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2F8A CODESIZE SUB DUP1 PUSH3 0x2F8A DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x12A JUMP JUMPDEST CALLER PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x4 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH3 0x15C JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xF2 DUP3 PUSH3 0xC5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x104 DUP2 PUSH3 0xE5 JUMP JUMPDEST DUP2 EQ PUSH3 0x110 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x124 DUP2 PUSH3 0xF9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x143 JUMPI PUSH3 0x142 PUSH3 0xC0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x153 DUP5 DUP3 DUP6 ADD PUSH3 0x113 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2E1E DUP1 PUSH3 0x16C PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x918D407D GT PUSH2 0x64 JUMPI DUP1 PUSH4 0x918D407D EQ PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x92976179 EQ PUSH2 0x1C9 JUMPI DUP1 PUSH4 0x94383F14 EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0x9A2F6474 EQ PUSH2 0x22F JUMPI DUP1 PUSH4 0xEE4739CB EQ PUSH2 0x24B JUMPI DUP1 PUSH4 0xEF706ADF EQ PUSH2 0x274 JUMPI PUSH2 0x9C JUMP JUMPDEST DUP1 PUSH4 0x9DE4E06 EQ PUSH2 0xA1 JUMPI DUP1 PUSH4 0x265AA621 EQ PUSH2 0xDE JUMPI DUP1 PUSH4 0x4AC0123D EQ PUSH2 0x11E JUMPI DUP1 PUSH4 0x50DC1867 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x51ED8288 EQ PUSH2 0x184 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x20C7 JUMP JUMPDEST PUSH2 0x29D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD5 SWAP2 SWAP1 PUSH2 0x21BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x105 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x100 SWAP2 SWAP1 PUSH2 0x220A JUMP JUMPDEST PUSH2 0x410 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x115 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2255 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x145 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x140 SWAP2 SWAP1 PUSH2 0x229A JUMP JUMPDEST PUSH2 0x480 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x153 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x169 SWAP2 SWAP1 PUSH2 0x220A JUMP JUMPDEST PUSH2 0x5C1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x17B SWAP2 SWAP1 PUSH2 0x23C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x199 SWAP2 SWAP1 PUSH2 0x220A JUMP JUMPDEST PUSH2 0x6EE JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C2 SWAP2 SWAP1 PUSH2 0x23E9 JUMP JUMPDEST PUSH2 0x90B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x220A JUMP JUMPDEST PUSH2 0xB5B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x228 SWAP2 SWAP1 PUSH2 0x229A JUMP JUMPDEST PUSH2 0xB8F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x249 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x244 SWAP2 SWAP1 PUSH2 0x220A JUMP JUMPDEST PUSH2 0xED3 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x257 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x272 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x26D SWAP2 SWAP1 PUSH2 0x220A JUMP JUMPDEST PUSH2 0x12E9 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x296 SWAP2 SWAP1 PUSH2 0x220A JUMP JUMPDEST PUSH2 0x1481 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2E8 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x15C2 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x301 JUMPI PUSH2 0x300 PUSH2 0x2444 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x32F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST PUSH2 0x37C PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x15C2 JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x406 JUMPI PUSH2 0x3D4 DUP2 PUSH1 0x1 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x15D7 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3E7 JUMPI PUSH2 0x3E6 PUSH2 0x2473 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP1 DUP1 PUSH2 0x3FE SWAP1 PUSH2 0x24D1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x335 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP5 JUMP JUMPDEST PUSH2 0x489 DUP3 PUSH2 0x15F1 JUMP JUMPDEST PUSH2 0x4C8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4BF SWAP1 PUSH2 0x2576 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x56B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x562 SWAP1 PUSH2 0x2608 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP DUP2 PUSH32 0x2847CFE8AFE8BCD9AC540F0259739697EA019F65D44C8E76C8796B8CE52F7C31 DUP3 PUSH1 0x40 MLOAD PUSH2 0x5B5 SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x5E0 PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1612 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x5F9 JUMPI PUSH2 0x5F8 PUSH2 0x2444 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x632 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x61F PUSH2 0x2034 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x617 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST PUSH2 0x653 PUSH1 0x2 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1612 JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x6E4 JUMPI PUSH1 0x0 DUP1 PUSH2 0x682 DUP4 PUSH1 0x2 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1627 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE POP DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6C4 JUMPI PUSH2 0x6C3 PUSH2 0x2473 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP POP POP DUP1 DUP1 PUSH2 0x6DC SWAP1 PUSH2 0x24D1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x638 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x6F7 DUP2 PUSH2 0x15F1 JUMP JUMPDEST PUSH2 0x736 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x72D SWAP1 PUSH2 0x2576 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x7D9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7D0 SWAP1 PUSH2 0x2674 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD CALLVALUE LT ISZERO PUSH2 0x831 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x828 SWAP1 PUSH2 0x26E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x8A4 DUP2 PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x1653 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH32 0x67BA49958F8B7A80047DFA2BDAD61CA2B10D970A32898C2F345A7B20079BA037 PUSH1 0x0 DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x900 SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH2 0x914 DUP3 PUSH2 0x15F1 JUMP JUMPDEST PUSH2 0x953 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x94A SWAP1 PUSH2 0x2576 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x9F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9ED SWAP1 PUSH2 0x2772 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA1B DUP2 PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1AA4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xA5A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA51 SWAP1 PUSH2 0x2804 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0xAD3 DUP2 PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1AD4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP PUSH2 0xAF3 DUP3 PUSH1 0x0 DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x1653 JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH32 0x67BA49958F8B7A80047DFA2BDAD61CA2B10D970A32898C2F345A7B20079BA037 PUSH1 0x0 DUP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0xB4F SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB66 DUP3 PUSH2 0x15F1 JUMP JUMPDEST PUSH2 0xB71 JUMPI PUSH1 0x0 PUSH2 0xB88 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0xBD2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBC9 SWAP1 PUSH2 0x2870 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xBDB DUP3 PUSH2 0x1B04 JUMP JUMPDEST PUSH2 0xC1A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC11 SWAP1 PUSH2 0x28DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6352211E DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC77 SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC94 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCB8 SWAP2 SWAP1 PUSH2 0x2911 JUMP JUMPDEST SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD28 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD1F SWAP1 PUSH2 0x298A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP PUSH1 0x0 DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH2 0xE7E DUP4 PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1BB3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x5F9C03DE076F5063CD3EBCFE8EF7AA8AF378E4B35A83C77BA9777E97083879A2 DUP5 PUSH1 0x40 MLOAD PUSH2 0xEC6 SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xEDC DUP2 PUSH2 0x15F1 JUMP JUMPDEST PUSH2 0xF1B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF12 SWAP1 PUSH2 0x2576 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xFBE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFB5 SWAP1 PUSH2 0x2A1C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLVALUE GT PUSH2 0x1001 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFF8 SWAP1 PUSH2 0x2AAE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1026 CALLER PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1AA4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0x1175 JUMPI PUSH1 0x0 PUSH2 0x1052 CALLER PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1BCD SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x1063 JUMPI POP DUP1 CALLVALUE GT JUMPDEST ISZERO PUSH2 0x1134 JUMPI PUSH1 0x0 DUP2 SWAP1 POP CALLVALUE SWAP2 POP PUSH2 0x1097 CALLER DUP4 PUSH1 0x2 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1C00 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x10DE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xBDF1E76C2BA2A5C85B93BF78678A4A3B06D63B18422612DAC8D7D5249ED46714 CALLVALUE PUSH1 0x40 MLOAD PUSH2 0x1126 SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH2 0x116F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1166 SWAP1 PUSH2 0x2B40 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x12E6 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD CALLVALUE LT PUSH2 0x126D JUMPI CALLER PUSH1 0x0 DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x1204 DUP2 PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x1653 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH32 0x67BA49958F8B7A80047DFA2BDAD61CA2B10D970A32898C2F345A7B20079BA037 PUSH1 0x0 DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x1260 SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x12E5 JUMP JUMPDEST PUSH2 0x1294 CALLER CALLVALUE PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1C00 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH32 0xBDF1E76C2BA2A5C85B93BF78678A4A3B06D63B18422612DAC8D7D5249ED46714 CALLVALUE PUSH1 0x40 MLOAD PUSH2 0x12DC SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST JUMPDEST POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x138C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1383 SWAP1 PUSH2 0x2BAC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x13DD DUP2 PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1C35 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP PUSH1 0x0 DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE POP POP DUP1 PUSH32 0x5B8046420884C4698DF446EE47BB3971DB3B7F1F959FF4F04A70B32B28732841 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x14A6 CALLER PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1AA4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x14E5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14DC SWAP1 PUSH2 0x2804 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x150C CALLER PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1BCD SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x1551 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1548 SWAP1 PUSH2 0x2AAE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1576 CALLER PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1AD4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x15BD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15D0 DUP3 PUSH1 0x0 ADD PUSH2 0x1C4F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15E6 DUP4 PUSH1 0x0 ADD DUP4 PUSH2 0x1C60 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1620 DUP3 PUSH1 0x0 ADD PUSH2 0x1C8B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x163A DUP7 PUSH1 0x0 ADD DUP7 PUSH2 0x1CA0 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x0 SHR DUP2 PUSH1 0x0 SHR SWAP4 POP SWAP4 POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9A22D0EA DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16B0 SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x16CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x16F1 SWAP2 SWAP1 PUSH2 0x2BE1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x1736 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x172D SWAP1 PUSH2 0x2C80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5B7121F8 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1793 SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x17B0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x17D4 SWAP2 SWAP1 PUSH2 0x2911 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x17EB DUP4 DUP6 PUSH2 0x1CE0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC PUSH2 0x1854 DUP5 DUP9 PUSH2 0x1CF6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x187F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP4 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x18C6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42842E0E PUSH1 0x0 DUP1 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH1 0x0 DUP1 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1970 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2CA0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x198A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x199E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x1A28 DUP7 PUSH1 0x1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1C35 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP PUSH1 0x0 DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1ACC DUP4 PUSH1 0x0 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SHL PUSH2 0x1D0C JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AFC DUP4 PUSH1 0x0 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SHL PUSH2 0x1D2C JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6352211E DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B61 SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1B9B JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B98 SWAP2 SWAP1 PUSH2 0x2911 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1BA8 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x1BAE JUMP JUMPDEST POP PUSH1 0x1 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BC5 DUP4 PUSH1 0x0 ADD DUP4 PUSH1 0x0 SHL PUSH2 0x1D65 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BF5 DUP4 PUSH1 0x0 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SHL PUSH2 0x1DD5 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C2C DUP5 PUSH1 0x0 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SHL DUP5 PUSH1 0x0 SHL PUSH2 0x1E51 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C47 DUP4 PUSH1 0x0 ADD DUP4 PUSH1 0x0 SHL PUSH2 0x1E8C JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1C78 JUMPI PUSH2 0x1C77 PUSH2 0x2473 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C99 DUP3 PUSH1 0x0 ADD PUSH2 0x1FA0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1CBB DUP5 DUP7 PUSH1 0x0 ADD PUSH2 0x1FB5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 DUP6 PUSH1 0x2 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x1CEE SWAP2 SWAP1 PUSH2 0x2CD7 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x1D04 SWAP2 SWAP1 PUSH2 0x2D19 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D24 DUP3 DUP5 PUSH1 0x0 ADD PUSH2 0x1FCC SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x2 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH2 0x1D5D DUP3 DUP5 PUSH1 0x0 ADD PUSH2 0x1FE3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D71 DUP4 DUP4 PUSH2 0x1FFA JUMP JUMPDEST PUSH2 0x1DCA JUMPI DUP3 PUSH1 0x0 ADD DUP3 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE DUP3 PUSH1 0x0 ADD DUP1 SLOAD SWAP1 POP DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x1 SWAP1 POP PUSH2 0x1DCF JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x2 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 DUP1 SHL DUP2 EQ ISZERO DUP1 PUSH2 0x1E08 JUMPI POP PUSH2 0x1E07 DUP5 DUP5 PUSH2 0x1D0C JUMP JUMPDEST JUMPDEST PUSH2 0x1E47 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E3E SWAP1 PUSH2 0x2D99 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 PUSH1 0x2 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x1E83 DUP4 DUP6 PUSH1 0x0 ADD PUSH2 0x201D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 DUP2 EQ PUSH2 0x1F94 JUMPI PUSH1 0x0 PUSH1 0x1 DUP3 PUSH2 0x1EBE SWAP2 SWAP1 PUSH2 0x2D19 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP7 PUSH1 0x0 ADD DUP1 SLOAD SWAP1 POP PUSH2 0x1ED6 SWAP2 SWAP1 PUSH2 0x2D19 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 EQ PUSH2 0x1F45 JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1EF7 JUMPI PUSH2 0x1EF6 PUSH2 0x2473 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x1F1B JUMPI PUSH2 0x1F1A PUSH2 0x2473 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP2 SWAP1 SSTORE POP DUP4 DUP8 PUSH1 0x1 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST DUP6 PUSH1 0x0 ADD DUP1 SLOAD DUP1 PUSH2 0x1F59 JUMPI PUSH2 0x1F58 PUSH2 0x2DB9 JUMP JUMPDEST JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x1F9A JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FAE DUP3 PUSH1 0x0 ADD PUSH2 0x1C4F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FC4 DUP4 PUSH1 0x0 ADD DUP4 PUSH2 0x1C60 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FDB DUP4 PUSH1 0x0 ADD DUP4 PUSH2 0x1FFA JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FF2 DUP4 PUSH1 0x0 ADD DUP4 PUSH2 0x1E8C JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ ISZERO SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x202C DUP4 PUSH1 0x0 ADD DUP4 PUSH2 0x1D65 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2094 DUP3 PUSH2 0x2069 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x20A4 DUP2 PUSH2 0x2089 JUMP JUMPDEST DUP2 EQ PUSH2 0x20AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x20C1 DUP2 PUSH2 0x209B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x20DD JUMPI PUSH2 0x20DC PUSH2 0x2064 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x20EB DUP5 DUP3 DUP6 ADD PUSH2 0x20B2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2133 DUP2 PUSH2 0x2120 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2145 DUP4 DUP4 PUSH2 0x212A JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2169 DUP3 PUSH2 0x20F4 JUMP JUMPDEST PUSH2 0x2173 DUP2 DUP6 PUSH2 0x20FF JUMP JUMPDEST SWAP4 POP PUSH2 0x217E DUP4 PUSH2 0x2110 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x21AF JUMPI DUP2 MLOAD PUSH2 0x2196 DUP9 DUP3 PUSH2 0x2139 JUMP JUMPDEST SWAP8 POP PUSH2 0x21A1 DUP4 PUSH2 0x2151 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2182 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x21D6 DUP2 DUP5 PUSH2 0x215E JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x21E7 DUP2 PUSH2 0x2120 JUMP JUMPDEST DUP2 EQ PUSH2 0x21F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2204 DUP2 PUSH2 0x21DE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2220 JUMPI PUSH2 0x221F PUSH2 0x2064 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x222E DUP5 DUP3 DUP6 ADD PUSH2 0x21F5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2240 DUP2 PUSH2 0x2089 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x224F DUP2 PUSH2 0x2120 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x226A PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x2237 JUMP JUMPDEST PUSH2 0x2277 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2246 JUMP JUMPDEST PUSH2 0x2284 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2246 JUMP JUMPDEST PUSH2 0x2291 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x2237 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x22B1 JUMPI PUSH2 0x22B0 PUSH2 0x2064 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x22BF DUP6 DUP3 DUP7 ADD PUSH2 0x21F5 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x22D0 DUP6 DUP3 DUP7 ADD PUSH2 0x21F5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x230F DUP2 PUSH2 0x2089 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x232B PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x2306 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x233E PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x212A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2350 DUP4 DUP4 PUSH2 0x2315 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2374 DUP3 PUSH2 0x22DA JUMP JUMPDEST PUSH2 0x237E DUP2 DUP6 PUSH2 0x22E5 JUMP JUMPDEST SWAP4 POP PUSH2 0x2389 DUP4 PUSH2 0x22F6 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x23BA JUMPI DUP2 MLOAD PUSH2 0x23A1 DUP9 DUP3 PUSH2 0x2344 JUMP JUMPDEST SWAP8 POP PUSH2 0x23AC DUP4 PUSH2 0x235C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x238D JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x23E1 DUP2 DUP5 PUSH2 0x2369 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2400 JUMPI PUSH2 0x23FF PUSH2 0x2064 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x240E DUP6 DUP3 DUP7 ADD PUSH2 0x21F5 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x241F DUP6 DUP3 DUP7 ADD PUSH2 0x20B2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x243E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2246 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x24DC DUP3 PUSH2 0x2120 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x250E JUMPI PUSH2 0x250D PUSH2 0x24A2 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E465420646F6573206E6F742065786973740000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2560 PUSH1 0x12 DUP4 PUSH2 0x2519 JUMP JUMPDEST SWAP2 POP PUSH2 0x256B DUP3 PUSH2 0x252A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x258F DUP2 PUSH2 0x2553 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F6E6C79204E46542073656C6C65722063616E20757064617465207468652070 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7269636500000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25F2 PUSH1 0x24 DUP4 PUSH2 0x2519 JUMP JUMPDEST SWAP2 POP PUSH2 0x25FD DUP3 PUSH2 0x2596 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2621 DUP2 PUSH2 0x25E5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x53656C6C65722063616E6E6F7420627579207468656972206F776E204E465400 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x265E PUSH1 0x1F DUP4 PUSH2 0x2519 JUMP JUMPDEST SWAP2 POP PUSH2 0x2669 DUP3 PUSH2 0x2628 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x268D DUP2 PUSH2 0x2651 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E73756666696369656E742066756E64730000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26CA PUSH1 0x12 DUP4 PUSH2 0x2519 JUMP JUMPDEST SWAP2 POP PUSH2 0x26D5 DUP3 PUSH2 0x2694 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x26F9 DUP2 PUSH2 0x26BD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F6E6C79207468652073656C6C65722063616E2061636365707420616E206F66 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6665720000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x275C PUSH1 0x23 DUP4 PUSH2 0x2519 JUMP JUMPDEST SWAP2 POP PUSH2 0x2767 DUP3 PUSH2 0x2700 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x278B DUP2 PUSH2 0x274F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x546865726520617265206E6F2070656E64696E67206F666665727320666F7220 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x74686973204E4654000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27EE PUSH1 0x28 DUP4 PUSH2 0x2519 JUMP JUMPDEST SWAP2 POP PUSH2 0x27F9 DUP3 PUSH2 0x2792 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x281D DUP2 PUSH2 0x27E1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x50726963652063616E6E6F74206265207A65726F000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x285A PUSH1 0x14 DUP4 PUSH2 0x2519 JUMP JUMPDEST SWAP2 POP PUSH2 0x2865 DUP3 PUSH2 0x2824 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2889 DUP2 PUSH2 0x284D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E76616C6964204E4654000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28C6 PUSH1 0xB DUP4 PUSH2 0x2519 JUMP JUMPDEST SWAP2 POP PUSH2 0x28D1 DUP3 PUSH2 0x2890 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x28F5 DUP2 PUSH2 0x28B9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x290B DUP2 PUSH2 0x209B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2927 JUMPI PUSH2 0x2926 PUSH2 0x2064 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2935 DUP5 DUP3 DUP6 ADD PUSH2 0x28FC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E6F7420746865204E4654206F776E6572000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2974 PUSH1 0x11 DUP4 PUSH2 0x2519 JUMP JUMPDEST SWAP2 POP PUSH2 0x297F DUP3 PUSH2 0x293E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x29A3 DUP2 PUSH2 0x2967 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x53656C6C65722063616E6E6F74206D616B6520616E206F6666657220666F7220 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7468656972206F776E204E465400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A06 PUSH1 0x2D DUP4 PUSH2 0x2519 JUMP JUMPDEST SWAP2 POP PUSH2 0x2A11 DUP3 PUSH2 0x29AA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A35 DUP2 PUSH2 0x29F9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F666665722076616C7565206D7573742062652067726561746572207468616E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A98 PUSH1 0x25 DUP4 PUSH2 0x2519 JUMP JUMPDEST SWAP2 POP PUSH2 0x2AA3 DUP3 PUSH2 0x2A3C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2AC7 DUP2 PUSH2 0x2A8B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F666665722076616C7565206D75737420626520686967686572207468616E20 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6578697374696E67206F66666572000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B2A PUSH1 0x2E DUP4 PUSH2 0x2519 JUMP JUMPDEST SWAP2 POP PUSH2 0x2B35 DUP3 PUSH2 0x2ACE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B59 DUP2 PUSH2 0x2B1D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F6E6C792073656C6C65722063616E2072656D6F7665204E4654000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B96 PUSH1 0x1A DUP4 PUSH2 0x2519 JUMP JUMPDEST SWAP2 POP PUSH2 0x2BA1 DUP3 PUSH2 0x2B60 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2BC5 DUP2 PUSH2 0x2B89 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2BDB DUP2 PUSH2 0x21DE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2BF7 JUMPI PUSH2 0x2BF6 PUSH2 0x2064 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2C05 DUP5 DUP3 DUP6 ADD PUSH2 0x2BCC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x526F79616C746965732070657263656E74206D75737420626520677265617465 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72207468616E207A65726F2E0000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C6A PUSH1 0x2C DUP4 PUSH2 0x2519 JUMP JUMPDEST SWAP2 POP PUSH2 0x2C75 DUP3 PUSH2 0x2C0E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C99 DUP2 PUSH2 0x2C5D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2CB5 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2237 JUMP JUMPDEST PUSH2 0x2CC2 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2237 JUMP JUMPDEST PUSH2 0x2CCF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2246 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CE2 DUP3 PUSH2 0x2120 JUMP JUMPDEST SWAP2 POP PUSH2 0x2CED DUP4 PUSH2 0x2120 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x2CFB DUP2 PUSH2 0x2120 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x2D12 JUMPI PUSH2 0x2D11 PUSH2 0x24A2 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D24 DUP3 PUSH2 0x2120 JUMP JUMPDEST SWAP2 POP PUSH2 0x2D2F DUP4 PUSH2 0x2120 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x2D47 JUMPI PUSH2 0x2D46 PUSH2 0x24A2 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x456E756D657261626C654D61703A206E6F6E6578697374656E74206B65790000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D83 PUSH1 0x1E DUP4 PUSH2 0x2519 JUMP JUMPDEST SWAP2 POP PUSH2 0x2D8E DUP3 PUSH2 0x2D4D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2DB2 DUP2 PUSH2 0x2D76 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH23 0xDE6F44BC2C89D60063CD383772CAF637F4EC46D7AAC25C 0x2C 0xAB SWAP14 EQ 0xB6 PUSH17 0x538A64736F6C6343000811003300000000 ","sourceMap":"281:8627:16:-:0;;;1557:116;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1607:10;1599:5;;:18;;;;;;;;;;;;;;;;;;1655:10;1627:16;;:39;;;;;;;;;;;;;;;;;;1557:116;281:8627;;88:117:18;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:351::-;915:6;964:2;952:9;943:7;939:23;935:32;932:119;;;970:79;;:::i;:::-;932:119;1090:1;1115:64;1171:7;1162:6;1151:9;1147:22;1115:64;:::i;:::-;1105:74;;1061:128;845:351;;;;:::o;281:8627:16:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_add_4332":{"entryPoint":7525,"id":4332,"parameterSlots":2,"returnSlots":1},"@_at_4466":{"entryPoint":7264,"id":4466,"parameterSlots":2,"returnSlots":1},"@_contains_4435":{"entryPoint":8186,"id":4435,"parameterSlots":2,"returnSlots":1},"@_isValidNFT_5015":{"entryPoint":6916,"id":5015,"parameterSlots":1,"returnSlots":1},"@_length_4449":{"entryPoint":7247,"id":4449,"parameterSlots":1,"returnSlots":1},"@_processSaleAndTransferNFT_5247":{"entryPoint":5715,"id":5247,"parameterSlots":2,"returnSlots":0},"@_remove_4416":{"entryPoint":7820,"id":4416,"parameterSlots":2,"returnSlots":1},"@acceptOffer_5470":{"entryPoint":2315,"id":5470,"parameterSlots":2,"returnSlots":0},"@add_4502":{"entryPoint":8221,"id":4502,"parameterSlots":2,"returnSlots":1},"@add_4783":{"entryPoint":7091,"id":4783,"parameterSlots":2,"returnSlots":1},"@at_3287":{"entryPoint":7328,"id":3287,"parameterSlots":2,"returnSlots":2},"@at_3989":{"entryPoint":5671,"id":3989,"parameterSlots":2,"returnSlots":2},"@at_4571":{"entryPoint":8117,"id":4571,"parameterSlots":2,"returnSlots":1},"@at_4861":{"entryPoint":5591,"id":4861,"parameterSlots":2,"returnSlots":1},"@buyNFT_5582":{"entryPoint":1774,"id":5582,"parameterSlots":1,"returnSlots":0},"@cancelOffer_5521":{"entryPoint":5249,"id":5521,"parameterSlots":1,"returnSlots":0},"@contains_3243":{"entryPoint":7436,"id":3243,"parameterSlots":2,"returnSlots":1},"@contains_3934":{"entryPoint":6820,"id":3934,"parameterSlots":2,"returnSlots":1},"@contains_4538":{"entryPoint":8140,"id":4538,"parameterSlots":2,"returnSlots":1},"@getNFTPrice_5717":{"entryPoint":2907,"id":5717,"parameterSlots":1,"returnSlots":1},"@getNFTsBySeller_5699":{"entryPoint":669,"id":5699,"parameterSlots":1,"returnSlots":1},"@getPendingOffers_5646":{"entryPoint":1473,"id":5646,"parameterSlots":1,"returnSlots":1},"@get_3364":{"entryPoint":7637,"id":3364,"parameterSlots":2,"returnSlots":1},"@get_4059":{"entryPoint":7117,"id":4059,"parameterSlots":2,"returnSlots":1},"@isNFTListed_5732":{"entryPoint":5617,"id":5732,"parameterSlots":1,"returnSlots":1},"@length_3258":{"entryPoint":7307,"id":3258,"parameterSlots":1,"returnSlots":1},"@length_3949":{"entryPoint":5650,"id":3949,"parameterSlots":1,"returnSlots":1},"@length_4553":{"entryPoint":8096,"id":4553,"parameterSlots":1,"returnSlots":1},"@length_4840":{"entryPoint":5570,"id":4840,"parameterSlots":1,"returnSlots":1},"@listNFT_5082":{"entryPoint":2959,"id":5082,"parameterSlots":2,"returnSlots":0},"@makeOffer_5403":{"entryPoint":3795,"id":5403,"parameterSlots":1,"returnSlots":0},"@mul_3051":{"entryPoint":7392,"id":3051,"parameterSlots":2,"returnSlots":1},"@nfts_4928":{"entryPoint":1040,"id":4928,"parameterSlots":0,"returnSlots":0},"@removeNFT_5116":{"entryPoint":4841,"id":5116,"parameterSlots":1,"returnSlots":0},"@remove_3225":{"entryPoint":7468,"id":3225,"parameterSlots":2,"returnSlots":1},"@remove_3907":{"entryPoint":6868,"id":3907,"parameterSlots":2,"returnSlots":1},"@remove_4520":{"entryPoint":8163,"id":4520,"parameterSlots":2,"returnSlots":1},"@remove_4804":{"entryPoint":7221,"id":4804,"parameterSlots":2,"returnSlots":1},"@set_3201":{"entryPoint":7761,"id":3201,"parameterSlots":3,"returnSlots":1},"@set_3880":{"entryPoint":7168,"id":3880,"parameterSlots":3,"returnSlots":1},"@sub_3036":{"entryPoint":7414,"id":3036,"parameterSlots":2,"returnSlots":1},"@updateNFTPrice_5154":{"entryPoint":1152,"id":5154,"parameterSlots":2,"returnSlots":0},"abi_decode_t_address":{"entryPoint":8370,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_address_fromMemory":{"entryPoint":10492,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":8693,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":11212,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":8391,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":10513,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":8714,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":11233,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_address":{"entryPoint":9193,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":8858,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encodeUpdatedPos_t_struct$_Offer_$4923_memory_ptr_to_t_struct$_Offer_$4923_memory_ptr":{"entryPoint":9028,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encodeUpdatedPos_t_uint256_to_t_uint256":{"entryPoint":8505,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address":{"entryPoint":8966,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":8759,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":9065,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack":{"entryPoint":8542,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_312b0199b87785955ef2954637425f623c976afcee89dbd6ddbe087e5a185a62_to_t_string_memory_ptr_fromStack":{"entryPoint":11357,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_443b992b59a0be2f5f76238cb514531da1e5dcec7228eacdf8d76be549bc2aec_to_t_string_memory_ptr_fromStack":{"entryPoint":10891,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_4644ba2f6590daae55292d0a205104b061ee5d5463ede6bc016df2dbb9750633_to_t_string_memory_ptr_fromStack":{"entryPoint":9701,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_63452317cb6d597bef833f023ed2962a84dbd24c571e27629ed1e3056d6cfd8d_to_t_string_memory_ptr_fromStack":{"entryPoint":9917,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_66efb3d77f56c50e528cf51150e96ac96115e7d8e881287a7840a6d610a3d797_to_t_string_memory_ptr_fromStack":{"entryPoint":11145,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_72dc2a71c7e1de2c7b012d07a11f8199d268b42d946f22dcef81102d123f1ba2_to_t_string_memory_ptr_fromStack":{"entryPoint":10317,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7364dcc3d92c60ce85034c76325bc369e6f9c986a5158a7471ba75ccb0b8ebe4_to_t_string_memory_ptr_fromStack":{"entryPoint":10425,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_86d9a97fc78e44082cead82c4fb35239cc53982c716c0c9912aab7d6d8bddb44_to_t_string_memory_ptr_fromStack":{"entryPoint":10209,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_aabd344684bfafe82e0b208091da4b5f9f71692af2dbd0f198d76e52a4b871ba_to_t_string_memory_ptr_fromStack":{"entryPoint":10745,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b4af62525507167bc201a4d46c4e79b26426b7dba8b54811c0e9dfc1b03c2837_to_t_string_memory_ptr_fromStack":{"entryPoint":10063,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d3551e30d3095fd81287b88f7139bb09818e34280e85ee821994ebaebbed7072_to_t_string_memory_ptr_fromStack":{"entryPoint":11638,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_e403a9d7ffdeca555e754beaddbd9e6f34f997c24c017ab0a30199bbea954853_to_t_string_memory_ptr_fromStack":{"entryPoint":9555,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f015a052e3954aae4dde9ba7252d65d9b5488f1447a293d1575e62e90e025978_to_t_string_memory_ptr_fromStack":{"entryPoint":9809,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f066f1574dfd3ce03c2b17be94d4dbc07de2ef28c113bef4cc264c53bab61096_to_t_string_memory_ptr_fromStack":{"entryPoint":11037,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f40c7207b10e481e650faa5f8682df109c855977b906bbdb8a3725f64e1c28fd_to_t_string_memory_ptr_fromStack":{"entryPoint":10599,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_struct$_Offer_$4923_memory_ptr_to_t_struct$_Offer_$4923_memory_ptr":{"entryPoint":8981,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256":{"entryPoint":8490,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":8774,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":11424,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256_t_address__to_t_address_t_uint256_t_uint256_t_address__fromStack_reversed":{"entryPoint":8789,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":9159,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":8636,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_312b0199b87785955ef2954637425f623c976afcee89dbd6ddbe087e5a185a62__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11392,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_443b992b59a0be2f5f76238cb514531da1e5dcec7228eacdf8d76be549bc2aec__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10926,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4644ba2f6590daae55292d0a205104b061ee5d5463ede6bc016df2dbb9750633__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9736,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_63452317cb6d597bef833f023ed2962a84dbd24c571e27629ed1e3056d6cfd8d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9952,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_66efb3d77f56c50e528cf51150e96ac96115e7d8e881287a7840a6d610a3d797__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11180,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_72dc2a71c7e1de2c7b012d07a11f8199d268b42d946f22dcef81102d123f1ba2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10352,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7364dcc3d92c60ce85034c76325bc369e6f9c986a5158a7471ba75ccb0b8ebe4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10460,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_86d9a97fc78e44082cead82c4fb35239cc53982c716c0c9912aab7d6d8bddb44__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10244,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_aabd344684bfafe82e0b208091da4b5f9f71692af2dbd0f198d76e52a4b871ba__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10780,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b4af62525507167bc201a4d46c4e79b26426b7dba8b54811c0e9dfc1b03c2837__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10098,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3551e30d3095fd81287b88f7139bb09818e34280e85ee821994ebaebbed7072__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11673,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e403a9d7ffdeca555e754beaddbd9e6f34f997c24c017ab0a30199bbea954853__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9590,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f015a052e3954aae4dde9ba7252d65d9b5488f1447a293d1575e62e90e025978__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9844,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f066f1574dfd3ce03c2b17be94d4dbc07de2ef28c113bef4cc264c53bab61096__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11072,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f40c7207b10e481e650faa5f8682df109c855977b906bbdb8a3725f64e1c28fd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10634,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":9257,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_dataslot_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr":{"entryPoint":8950,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":8464,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr":{"entryPoint":8922,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":8436,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr":{"entryPoint":9052,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":8529,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":8933,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack":{"entryPoint":8447,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":9497,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":11479,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":11545,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":8329,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":8297,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":8480,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":9425,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":9378,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x31":{"entryPoint":11705,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":9331,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":9284,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":8292,"id":null,"parameterSlots":0,"returnSlots":0},"store_literal_in_memory_312b0199b87785955ef2954637425f623c976afcee89dbd6ddbe087e5a185a62":{"entryPoint":11278,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_443b992b59a0be2f5f76238cb514531da1e5dcec7228eacdf8d76be549bc2aec":{"entryPoint":10812,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_4644ba2f6590daae55292d0a205104b061ee5d5463ede6bc016df2dbb9750633":{"entryPoint":9622,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_63452317cb6d597bef833f023ed2962a84dbd24c571e27629ed1e3056d6cfd8d":{"entryPoint":9876,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_66efb3d77f56c50e528cf51150e96ac96115e7d8e881287a7840a6d610a3d797":{"entryPoint":11104,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_72dc2a71c7e1de2c7b012d07a11f8199d268b42d946f22dcef81102d123f1ba2":{"entryPoint":10276,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7364dcc3d92c60ce85034c76325bc369e6f9c986a5158a7471ba75ccb0b8ebe4":{"entryPoint":10384,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_86d9a97fc78e44082cead82c4fb35239cc53982c716c0c9912aab7d6d8bddb44":{"entryPoint":10130,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_aabd344684bfafe82e0b208091da4b5f9f71692af2dbd0f198d76e52a4b871ba":{"entryPoint":10666,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b4af62525507167bc201a4d46c4e79b26426b7dba8b54811c0e9dfc1b03c2837":{"entryPoint":9984,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d3551e30d3095fd81287b88f7139bb09818e34280e85ee821994ebaebbed7072":{"entryPoint":11597,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_e403a9d7ffdeca555e754beaddbd9e6f34f997c24c017ab0a30199bbea954853":{"entryPoint":9514,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f015a052e3954aae4dde9ba7252d65d9b5488f1447a293d1575e62e90e025978":{"entryPoint":9768,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f066f1574dfd3ce03c2b17be94d4dbc07de2ef28c113bef4cc264c53bab61096":{"entryPoint":10958,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f40c7207b10e481e650faa5f8682df109c855977b906bbdb8a3725f64e1c28fd":{"entryPoint":10558,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":8347,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":8670,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:27184:18","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:18","statements":[{"nodeType":"YulAssignment","src":"57:19:18","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:18","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:18"},"nodeType":"YulFunctionCall","src":"67:9:18"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:18"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:18","type":""}],"src":"7:75:18"},{"body":{"nodeType":"YulBlock","src":"177:28:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:18"},"nodeType":"YulFunctionCall","src":"187:12:18"},"nodeType":"YulExpressionStatement","src":"187:12:18"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:18"},{"body":{"nodeType":"YulBlock","src":"300:28:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:18"},"nodeType":"YulFunctionCall","src":"310:12:18"},"nodeType":"YulExpressionStatement","src":"310:12:18"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:18"},{"body":{"nodeType":"YulBlock","src":"379:81:18","statements":[{"nodeType":"YulAssignment","src":"389:65:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"404:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"411:42:18","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"400:3:18"},"nodeType":"YulFunctionCall","src":"400:54:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:18"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:18","type":""}],"src":"334:126:18"},{"body":{"nodeType":"YulBlock","src":"511:51:18","statements":[{"nodeType":"YulAssignment","src":"521:35:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:18"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"532:17:18"},"nodeType":"YulFunctionCall","src":"532:24:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"521:7:18"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"493:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"503:7:18","type":""}],"src":"466:96:18"},{"body":{"nodeType":"YulBlock","src":"611:79:18","statements":[{"body":{"nodeType":"YulBlock","src":"668:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"677:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"680:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"670:6:18"},"nodeType":"YulFunctionCall","src":"670:12:18"},"nodeType":"YulExpressionStatement","src":"670:12:18"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"634:5:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"659:5:18"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"641:17:18"},"nodeType":"YulFunctionCall","src":"641:24:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"631:2:18"},"nodeType":"YulFunctionCall","src":"631:35:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"624:6:18"},"nodeType":"YulFunctionCall","src":"624:43:18"},"nodeType":"YulIf","src":"621:63:18"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"604:5:18","type":""}],"src":"568:122:18"},{"body":{"nodeType":"YulBlock","src":"748:87:18","statements":[{"nodeType":"YulAssignment","src":"758:29:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"780:6:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"767:12:18"},"nodeType":"YulFunctionCall","src":"767:20:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"758:5:18"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"823:5:18"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"796:26:18"},"nodeType":"YulFunctionCall","src":"796:33:18"},"nodeType":"YulExpressionStatement","src":"796:33:18"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"726:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"734:3:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"742:5:18","type":""}],"src":"696:139:18"},{"body":{"nodeType":"YulBlock","src":"907:263:18","statements":[{"body":{"nodeType":"YulBlock","src":"953:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"955:77:18"},"nodeType":"YulFunctionCall","src":"955:79:18"},"nodeType":"YulExpressionStatement","src":"955:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"928:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"937:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"924:3:18"},"nodeType":"YulFunctionCall","src":"924:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"949:2:18","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"920:3:18"},"nodeType":"YulFunctionCall","src":"920:32:18"},"nodeType":"YulIf","src":"917:119:18"},{"nodeType":"YulBlock","src":"1046:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"1061:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"1075:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1065:6:18","type":""}]},{"nodeType":"YulAssignment","src":"1090:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1125:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"1136:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1121:3:18"},"nodeType":"YulFunctionCall","src":"1121:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1145:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1100:20:18"},"nodeType":"YulFunctionCall","src":"1100:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1090:6:18"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"877:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"888:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"900:6:18","type":""}],"src":"841:329:18"},{"body":{"nodeType":"YulBlock","src":"1250:40:18","statements":[{"nodeType":"YulAssignment","src":"1261:22:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1277:5:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1271:5:18"},"nodeType":"YulFunctionCall","src":"1271:12:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1261:6:18"}]}]},"name":"array_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1233:5:18","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1243:6:18","type":""}],"src":"1176:114:18"},{"body":{"nodeType":"YulBlock","src":"1407:73:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1424:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"1429:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1417:6:18"},"nodeType":"YulFunctionCall","src":"1417:19:18"},"nodeType":"YulExpressionStatement","src":"1417:19:18"},{"nodeType":"YulAssignment","src":"1445:29:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1464:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"1469:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1460:3:18"},"nodeType":"YulFunctionCall","src":"1460:14:18"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1445:11:18"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1379:3:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"1384:6:18","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1395:11:18","type":""}],"src":"1296:184:18"},{"body":{"nodeType":"YulBlock","src":"1558:60:18","statements":[{"nodeType":"YulAssignment","src":"1568:11:18","value":{"name":"ptr","nodeType":"YulIdentifier","src":"1576:3:18"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"1568:4:18"}]},{"nodeType":"YulAssignment","src":"1589:22:18","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1601:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"1606:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1597:3:18"},"nodeType":"YulFunctionCall","src":"1597:14:18"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"1589:4:18"}]}]},"name":"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"1545:3:18","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"1553:4:18","type":""}],"src":"1486:132:18"},{"body":{"nodeType":"YulBlock","src":"1669:32:18","statements":[{"nodeType":"YulAssignment","src":"1679:16:18","value":{"name":"value","nodeType":"YulIdentifier","src":"1690:5:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1679:7:18"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1651:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1661:7:18","type":""}],"src":"1624:77:18"},{"body":{"nodeType":"YulBlock","src":"1762:53:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1779:3:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1802:5:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1784:17:18"},"nodeType":"YulFunctionCall","src":"1784:24:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1772:6:18"},"nodeType":"YulFunctionCall","src":"1772:37:18"},"nodeType":"YulExpressionStatement","src":"1772:37:18"}]},"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1750:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1757:3:18","type":""}],"src":"1707:108:18"},{"body":{"nodeType":"YulBlock","src":"1901:99:18","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1945:6:18"},{"name":"pos","nodeType":"YulIdentifier","src":"1953:3:18"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"1911:33:18"},"nodeType":"YulFunctionCall","src":"1911:46:18"},"nodeType":"YulExpressionStatement","src":"1911:46:18"},{"nodeType":"YulAssignment","src":"1966:28:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1984:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"1989:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1980:3:18"},"nodeType":"YulFunctionCall","src":"1980:14:18"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"1966:10:18"}]}]},"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"1874:6:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1882:3:18","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"1890:10:18","type":""}],"src":"1821:179:18"},{"body":{"nodeType":"YulBlock","src":"2081:38:18","statements":[{"nodeType":"YulAssignment","src":"2091:22:18","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"2103:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"2108:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2099:3:18"},"nodeType":"YulFunctionCall","src":"2099:14:18"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"2091:4:18"}]}]},"name":"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"2068:3:18","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"2076:4:18","type":""}],"src":"2006:113:18"},{"body":{"nodeType":"YulBlock","src":"2279:608:18","statements":[{"nodeType":"YulVariableDeclaration","src":"2289:68:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2351:5:18"}],"functionName":{"name":"array_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"2303:47:18"},"nodeType":"YulFunctionCall","src":"2303:54:18"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2293:6:18","type":""}]},{"nodeType":"YulAssignment","src":"2366:93:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2447:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"2452:6:18"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2373:73:18"},"nodeType":"YulFunctionCall","src":"2373:86:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2366:3:18"}]},{"nodeType":"YulVariableDeclaration","src":"2468:71:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2533:5:18"}],"functionName":{"name":"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"2483:49:18"},"nodeType":"YulFunctionCall","src":"2483:56:18"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"2472:7:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2548:21:18","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"2562:7:18"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"2552:6:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"2638:224:18","statements":[{"nodeType":"YulVariableDeclaration","src":"2652:34:18","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2679:6:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2673:5:18"},"nodeType":"YulFunctionCall","src":"2673:13:18"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"2656:13:18","type":""}]},{"nodeType":"YulAssignment","src":"2699:70:18","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"2750:13:18"},{"name":"pos","nodeType":"YulIdentifier","src":"2765:3:18"}],"functionName":{"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"2706:43:18"},"nodeType":"YulFunctionCall","src":"2706:63:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2699:3:18"}]},{"nodeType":"YulAssignment","src":"2782:70:18","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2845:6:18"}],"functionName":{"name":"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"2792:52:18"},"nodeType":"YulFunctionCall","src":"2792:60:18"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2782:6:18"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2600:1:18"},{"name":"length","nodeType":"YulIdentifier","src":"2603:6:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2597:2:18"},"nodeType":"YulFunctionCall","src":"2597:13:18"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2611:18:18","statements":[{"nodeType":"YulAssignment","src":"2613:14:18","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2622:1:18"},{"kind":"number","nodeType":"YulLiteral","src":"2625:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2618:3:18"},"nodeType":"YulFunctionCall","src":"2618:9:18"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2613:1:18"}]}]},"pre":{"nodeType":"YulBlock","src":"2582:14:18","statements":[{"nodeType":"YulVariableDeclaration","src":"2584:10:18","value":{"kind":"number","nodeType":"YulLiteral","src":"2593:1:18","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2588:1:18","type":""}]}]},"src":"2578:284:18"},{"nodeType":"YulAssignment","src":"2871:10:18","value":{"name":"pos","nodeType":"YulIdentifier","src":"2878:3:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2871:3:18"}]}]},"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2258:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2265:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2274:3:18","type":""}],"src":"2155:732:18"},{"body":{"nodeType":"YulBlock","src":"3041:225:18","statements":[{"nodeType":"YulAssignment","src":"3051:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3063:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"3074:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3059:3:18"},"nodeType":"YulFunctionCall","src":"3059:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3051:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3098:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"3109:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3094:3:18"},"nodeType":"YulFunctionCall","src":"3094:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"3117:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"3123:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3113:3:18"},"nodeType":"YulFunctionCall","src":"3113:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3087:6:18"},"nodeType":"YulFunctionCall","src":"3087:47:18"},"nodeType":"YulExpressionStatement","src":"3087:47:18"},{"nodeType":"YulAssignment","src":"3143:116:18","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3245:6:18"},{"name":"tail","nodeType":"YulIdentifier","src":"3254:4:18"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"3151:93:18"},"nodeType":"YulFunctionCall","src":"3151:108:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3143:4:18"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3013:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3025:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3036:4:18","type":""}],"src":"2893:373:18"},{"body":{"nodeType":"YulBlock","src":"3315:79:18","statements":[{"body":{"nodeType":"YulBlock","src":"3372:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3381:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3384:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3374:6:18"},"nodeType":"YulFunctionCall","src":"3374:12:18"},"nodeType":"YulExpressionStatement","src":"3374:12:18"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3338:5:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3363:5:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3345:17:18"},"nodeType":"YulFunctionCall","src":"3345:24:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3335:2:18"},"nodeType":"YulFunctionCall","src":"3335:35:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3328:6:18"},"nodeType":"YulFunctionCall","src":"3328:43:18"},"nodeType":"YulIf","src":"3325:63:18"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3308:5:18","type":""}],"src":"3272:122:18"},{"body":{"nodeType":"YulBlock","src":"3452:87:18","statements":[{"nodeType":"YulAssignment","src":"3462:29:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3484:6:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3471:12:18"},"nodeType":"YulFunctionCall","src":"3471:20:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3462:5:18"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3527:5:18"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"3500:26:18"},"nodeType":"YulFunctionCall","src":"3500:33:18"},"nodeType":"YulExpressionStatement","src":"3500:33:18"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3430:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"3438:3:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3446:5:18","type":""}],"src":"3400:139:18"},{"body":{"nodeType":"YulBlock","src":"3611:263:18","statements":[{"body":{"nodeType":"YulBlock","src":"3657:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3659:77:18"},"nodeType":"YulFunctionCall","src":"3659:79:18"},"nodeType":"YulExpressionStatement","src":"3659:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3632:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"3641:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3628:3:18"},"nodeType":"YulFunctionCall","src":"3628:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"3653:2:18","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3624:3:18"},"nodeType":"YulFunctionCall","src":"3624:32:18"},"nodeType":"YulIf","src":"3621:119:18"},{"nodeType":"YulBlock","src":"3750:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"3765:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"3779:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3769:6:18","type":""}]},{"nodeType":"YulAssignment","src":"3794:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3829:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"3840:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3825:3:18"},"nodeType":"YulFunctionCall","src":"3825:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3849:7:18"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3804:20:18"},"nodeType":"YulFunctionCall","src":"3804:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3794:6:18"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3581:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3592:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3604:6:18","type":""}],"src":"3545:329:18"},{"body":{"nodeType":"YulBlock","src":"3945:53:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3962:3:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3985:5:18"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"3967:17:18"},"nodeType":"YulFunctionCall","src":"3967:24:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3955:6:18"},"nodeType":"YulFunctionCall","src":"3955:37:18"},"nodeType":"YulExpressionStatement","src":"3955:37:18"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3933:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3940:3:18","type":""}],"src":"3880:118:18"},{"body":{"nodeType":"YulBlock","src":"4069:53:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4086:3:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4109:5:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4091:17:18"},"nodeType":"YulFunctionCall","src":"4091:24:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4079:6:18"},"nodeType":"YulFunctionCall","src":"4079:37:18"},"nodeType":"YulExpressionStatement","src":"4079:37:18"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4057:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4064:3:18","type":""}],"src":"4004:118:18"},{"body":{"nodeType":"YulBlock","src":"4310:371:18","statements":[{"nodeType":"YulAssignment","src":"4320:27:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4332:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"4343:3:18","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4328:3:18"},"nodeType":"YulFunctionCall","src":"4328:19:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4320:4:18"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4401:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4414:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"4425:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4410:3:18"},"nodeType":"YulFunctionCall","src":"4410:17:18"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4357:43:18"},"nodeType":"YulFunctionCall","src":"4357:71:18"},"nodeType":"YulExpressionStatement","src":"4357:71:18"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"4482:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4495:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"4506:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4491:3:18"},"nodeType":"YulFunctionCall","src":"4491:18:18"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"4438:43:18"},"nodeType":"YulFunctionCall","src":"4438:72:18"},"nodeType":"YulExpressionStatement","src":"4438:72:18"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"4564:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4577:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"4588:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4573:3:18"},"nodeType":"YulFunctionCall","src":"4573:18:18"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"4520:43:18"},"nodeType":"YulFunctionCall","src":"4520:72:18"},"nodeType":"YulExpressionStatement","src":"4520:72:18"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"4646:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4659:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"4670:2:18","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4655:3:18"},"nodeType":"YulFunctionCall","src":"4655:18:18"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4602:43:18"},"nodeType":"YulFunctionCall","src":"4602:72:18"},"nodeType":"YulExpressionStatement","src":"4602:72:18"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256_t_address__to_t_address_t_uint256_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4258:9:18","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4270:6:18","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4278:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4286:6:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4294:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4305:4:18","type":""}],"src":"4128:553:18"},{"body":{"nodeType":"YulBlock","src":"4770:391:18","statements":[{"body":{"nodeType":"YulBlock","src":"4816:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4818:77:18"},"nodeType":"YulFunctionCall","src":"4818:79:18"},"nodeType":"YulExpressionStatement","src":"4818:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4791:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"4800:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4787:3:18"},"nodeType":"YulFunctionCall","src":"4787:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"4812:2:18","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4783:3:18"},"nodeType":"YulFunctionCall","src":"4783:32:18"},"nodeType":"YulIf","src":"4780:119:18"},{"nodeType":"YulBlock","src":"4909:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"4924:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"4938:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4928:6:18","type":""}]},{"nodeType":"YulAssignment","src":"4953:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4988:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"4999:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4984:3:18"},"nodeType":"YulFunctionCall","src":"4984:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5008:7:18"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4963:20:18"},"nodeType":"YulFunctionCall","src":"4963:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4953:6:18"}]}]},{"nodeType":"YulBlock","src":"5036:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"5051:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"5065:2:18","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5055:6:18","type":""}]},{"nodeType":"YulAssignment","src":"5081:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5116:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"5127:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5112:3:18"},"nodeType":"YulFunctionCall","src":"5112:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5136:7:18"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5091:20:18"},"nodeType":"YulFunctionCall","src":"5091:53:18"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5081:6:18"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4732:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4743:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4755:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4763:6:18","type":""}],"src":"4687:474:18"},{"body":{"nodeType":"YulBlock","src":"5264:40:18","statements":[{"nodeType":"YulAssignment","src":"5275:22:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5291:5:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5285:5:18"},"nodeType":"YulFunctionCall","src":"5285:12:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"5275:6:18"}]}]},"name":"array_length_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5247:5:18","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"5257:6:18","type":""}],"src":"5167:137:18"},{"body":{"nodeType":"YulBlock","src":"5444:73:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5461:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"5466:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5454:6:18"},"nodeType":"YulFunctionCall","src":"5454:19:18"},"nodeType":"YulExpressionStatement","src":"5454:19:18"},{"nodeType":"YulAssignment","src":"5482:29:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5501:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"5506:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5497:3:18"},"nodeType":"YulFunctionCall","src":"5497:14:18"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"5482:11:18"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5416:3:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"5421:6:18","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"5432:11:18","type":""}],"src":"5310:207:18"},{"body":{"nodeType":"YulBlock","src":"5618:60:18","statements":[{"nodeType":"YulAssignment","src":"5628:11:18","value":{"name":"ptr","nodeType":"YulIdentifier","src":"5636:3:18"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"5628:4:18"}]},{"nodeType":"YulAssignment","src":"5649:22:18","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"5661:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"5666:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5657:3:18"},"nodeType":"YulFunctionCall","src":"5657:14:18"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"5649:4:18"}]}]},"name":"array_dataslot_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"5605:3:18","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"5613:4:18","type":""}],"src":"5523:155:18"},{"body":{"nodeType":"YulBlock","src":"5739:53:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5756:3:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5779:5:18"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"5761:17:18"},"nodeType":"YulFunctionCall","src":"5761:24:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5749:6:18"},"nodeType":"YulFunctionCall","src":"5749:37:18"},"nodeType":"YulExpressionStatement","src":"5749:37:18"}]},"name":"abi_encode_t_address_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5727:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5734:3:18","type":""}],"src":"5684:108:18"},{"body":{"nodeType":"YulBlock","src":"5960:395:18","statements":[{"nodeType":"YulVariableDeclaration","src":"5970:26:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5986:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"5991:4:18","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5982:3:18"},"nodeType":"YulFunctionCall","src":"5982:14:18"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"5974:4:18","type":""}]},{"nodeType":"YulBlock","src":"6006:167:18","statements":[{"nodeType":"YulVariableDeclaration","src":"6044:43:18","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6074:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"6081:4:18","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6070:3:18"},"nodeType":"YulFunctionCall","src":"6070:16:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6064:5:18"},"nodeType":"YulFunctionCall","src":"6064:23:18"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"6048:12:18","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"6134:12:18"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6152:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"6157:4:18","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6148:3:18"},"nodeType":"YulFunctionCall","src":"6148:14:18"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"6100:33:18"},"nodeType":"YulFunctionCall","src":"6100:63:18"},"nodeType":"YulExpressionStatement","src":"6100:63:18"}]},{"nodeType":"YulBlock","src":"6183:165:18","statements":[{"nodeType":"YulVariableDeclaration","src":"6219:43:18","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6249:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"6256:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6245:3:18"},"nodeType":"YulFunctionCall","src":"6245:16:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6239:5:18"},"nodeType":"YulFunctionCall","src":"6239:23:18"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"6223:12:18","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"6309:12:18"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6327:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"6332:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6323:3:18"},"nodeType":"YulFunctionCall","src":"6323:14:18"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"6275:33:18"},"nodeType":"YulFunctionCall","src":"6275:63:18"},"nodeType":"YulExpressionStatement","src":"6275:63:18"}]}]},"name":"abi_encode_t_struct$_Offer_$4923_memory_ptr_to_t_struct$_Offer_$4923_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5947:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5954:3:18","type":""}],"src":"5858:497:18"},{"body":{"nodeType":"YulBlock","src":"6487:145:18","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6577:6:18"},{"name":"pos","nodeType":"YulIdentifier","src":"6585:3:18"}],"functionName":{"name":"abi_encode_t_struct$_Offer_$4923_memory_ptr_to_t_struct$_Offer_$4923_memory_ptr","nodeType":"YulIdentifier","src":"6497:79:18"},"nodeType":"YulFunctionCall","src":"6497:92:18"},"nodeType":"YulExpressionStatement","src":"6497:92:18"},{"nodeType":"YulAssignment","src":"6598:28:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6616:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"6621:4:18","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6612:3:18"},"nodeType":"YulFunctionCall","src":"6612:14:18"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"6598:10:18"}]}]},"name":"abi_encodeUpdatedPos_t_struct$_Offer_$4923_memory_ptr_to_t_struct$_Offer_$4923_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"6460:6:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6468:3:18","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"6476:10:18","type":""}],"src":"6361:271:18"},{"body":{"nodeType":"YulBlock","src":"6736:38:18","statements":[{"nodeType":"YulAssignment","src":"6746:22:18","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"6758:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"6763:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6754:3:18"},"nodeType":"YulFunctionCall","src":"6754:14:18"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"6746:4:18"}]}]},"name":"array_nextElement_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"6723:3:18","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"6731:4:18","type":""}],"src":"6638:136:18"},{"body":{"nodeType":"YulBlock","src":"7014:746:18","statements":[{"nodeType":"YulVariableDeclaration","src":"7024:91:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7109:5:18"}],"functionName":{"name":"array_length_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"7038:70:18"},"nodeType":"YulFunctionCall","src":"7038:77:18"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7028:6:18","type":""}]},{"nodeType":"YulAssignment","src":"7124:116:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7228:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"7233:6:18"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7131:96:18"},"nodeType":"YulFunctionCall","src":"7131:109:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7124:3:18"}]},{"nodeType":"YulVariableDeclaration","src":"7249:94:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7337:5:18"}],"functionName":{"name":"array_dataslot_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"7264:72:18"},"nodeType":"YulFunctionCall","src":"7264:79:18"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"7253:7:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7352:21:18","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"7366:7:18"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"7356:6:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"7442:293:18","statements":[{"nodeType":"YulVariableDeclaration","src":"7456:34:18","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7483:6:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7477:5:18"},"nodeType":"YulFunctionCall","src":"7477:13:18"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"7460:13:18","type":""}]},{"nodeType":"YulAssignment","src":"7503:116:18","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"7600:13:18"},{"name":"pos","nodeType":"YulIdentifier","src":"7615:3:18"}],"functionName":{"name":"abi_encodeUpdatedPos_t_struct$_Offer_$4923_memory_ptr_to_t_struct$_Offer_$4923_memory_ptr","nodeType":"YulIdentifier","src":"7510:89:18"},"nodeType":"YulFunctionCall","src":"7510:109:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7503:3:18"}]},{"nodeType":"YulAssignment","src":"7632:93:18","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7718:6:18"}],"functionName":{"name":"array_nextElement_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"7642:75:18"},"nodeType":"YulFunctionCall","src":"7642:83:18"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7632:6:18"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7404:1:18"},{"name":"length","nodeType":"YulIdentifier","src":"7407:6:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7401:2:18"},"nodeType":"YulFunctionCall","src":"7401:13:18"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7415:18:18","statements":[{"nodeType":"YulAssignment","src":"7417:14:18","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7426:1:18"},{"kind":"number","nodeType":"YulLiteral","src":"7429:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7422:3:18"},"nodeType":"YulFunctionCall","src":"7422:9:18"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"7417:1:18"}]}]},"pre":{"nodeType":"YulBlock","src":"7386:14:18","statements":[{"nodeType":"YulVariableDeclaration","src":"7388:10:18","value":{"kind":"number","nodeType":"YulLiteral","src":"7397:1:18","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7392:1:18","type":""}]}]},"src":"7382:353:18"},{"nodeType":"YulAssignment","src":"7744:10:18","value":{"name":"pos","nodeType":"YulIdentifier","src":"7751:3:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7744:3:18"}]}]},"name":"abi_encode_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6993:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7000:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7009:3:18","type":""}],"src":"6844:916:18"},{"body":{"nodeType":"YulBlock","src":"7960:271:18","statements":[{"nodeType":"YulAssignment","src":"7970:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7982:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"7993:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7978:3:18"},"nodeType":"YulFunctionCall","src":"7978:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7970:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8017:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"8028:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8013:3:18"},"nodeType":"YulFunctionCall","src":"8013:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8036:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"8042:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8032:3:18"},"nodeType":"YulFunctionCall","src":"8032:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8006:6:18"},"nodeType":"YulFunctionCall","src":"8006:47:18"},"nodeType":"YulExpressionStatement","src":"8006:47:18"},{"nodeType":"YulAssignment","src":"8062:162:18","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8210:6:18"},{"name":"tail","nodeType":"YulIdentifier","src":"8219:4:18"}],"functionName":{"name":"abi_encode_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8070:139:18"},"nodeType":"YulFunctionCall","src":"8070:154:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8062:4:18"}]}]},"name":"abi_encode_tuple_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7932:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7944:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7955:4:18","type":""}],"src":"7766:465:18"},{"body":{"nodeType":"YulBlock","src":"8320:391:18","statements":[{"body":{"nodeType":"YulBlock","src":"8366:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"8368:77:18"},"nodeType":"YulFunctionCall","src":"8368:79:18"},"nodeType":"YulExpressionStatement","src":"8368:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8341:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"8350:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8337:3:18"},"nodeType":"YulFunctionCall","src":"8337:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"8362:2:18","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8333:3:18"},"nodeType":"YulFunctionCall","src":"8333:32:18"},"nodeType":"YulIf","src":"8330:119:18"},{"nodeType":"YulBlock","src":"8459:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"8474:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"8488:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8478:6:18","type":""}]},{"nodeType":"YulAssignment","src":"8503:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8538:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"8549:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8534:3:18"},"nodeType":"YulFunctionCall","src":"8534:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8558:7:18"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"8513:20:18"},"nodeType":"YulFunctionCall","src":"8513:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8503:6:18"}]}]},{"nodeType":"YulBlock","src":"8586:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"8601:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"8615:2:18","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8605:6:18","type":""}]},{"nodeType":"YulAssignment","src":"8631:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8666:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"8677:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8662:3:18"},"nodeType":"YulFunctionCall","src":"8662:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8686:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"8641:20:18"},"nodeType":"YulFunctionCall","src":"8641:53:18"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8631:6:18"}]}]}]},"name":"abi_decode_tuple_t_uint256t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8282:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8293:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8305:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8313:6:18","type":""}],"src":"8237:474:18"},{"body":{"nodeType":"YulBlock","src":"8815:124:18","statements":[{"nodeType":"YulAssignment","src":"8825:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8837:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"8848:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8833:3:18"},"nodeType":"YulFunctionCall","src":"8833:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8825:4:18"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8905:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8918:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"8929:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8914:3:18"},"nodeType":"YulFunctionCall","src":"8914:17:18"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"8861:43:18"},"nodeType":"YulFunctionCall","src":"8861:71:18"},"nodeType":"YulExpressionStatement","src":"8861:71:18"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8787:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8799:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8810:4:18","type":""}],"src":"8717:222:18"},{"body":{"nodeType":"YulBlock","src":"8973:152:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8990:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8993:77:18","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8983:6:18"},"nodeType":"YulFunctionCall","src":"8983:88:18"},"nodeType":"YulExpressionStatement","src":"8983:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9087:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9090:4:18","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9080:6:18"},"nodeType":"YulFunctionCall","src":"9080:15:18"},"nodeType":"YulExpressionStatement","src":"9080:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9111:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9114:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9104:6:18"},"nodeType":"YulFunctionCall","src":"9104:15:18"},"nodeType":"YulExpressionStatement","src":"9104:15:18"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"8945:180:18"},{"body":{"nodeType":"YulBlock","src":"9159:152:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9176:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9179:77:18","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9169:6:18"},"nodeType":"YulFunctionCall","src":"9169:88:18"},"nodeType":"YulExpressionStatement","src":"9169:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9273:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9276:4:18","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9266:6:18"},"nodeType":"YulFunctionCall","src":"9266:15:18"},"nodeType":"YulExpressionStatement","src":"9266:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9297:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9300:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9290:6:18"},"nodeType":"YulFunctionCall","src":"9290:15:18"},"nodeType":"YulExpressionStatement","src":"9290:15:18"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"9131:180:18"},{"body":{"nodeType":"YulBlock","src":"9345:152:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9362:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9365:77:18","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9355:6:18"},"nodeType":"YulFunctionCall","src":"9355:88:18"},"nodeType":"YulExpressionStatement","src":"9355:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9459:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9462:4:18","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9452:6:18"},"nodeType":"YulFunctionCall","src":"9452:15:18"},"nodeType":"YulExpressionStatement","src":"9452:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9483:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9486:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9476:6:18"},"nodeType":"YulFunctionCall","src":"9476:15:18"},"nodeType":"YulExpressionStatement","src":"9476:15:18"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"9317:180:18"},{"body":{"nodeType":"YulBlock","src":"9546:190:18","statements":[{"nodeType":"YulAssignment","src":"9556:33:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9583:5:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9565:17:18"},"nodeType":"YulFunctionCall","src":"9565:24:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"9556:5:18"}]},{"body":{"nodeType":"YulBlock","src":"9679:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"9681:16:18"},"nodeType":"YulFunctionCall","src":"9681:18:18"},"nodeType":"YulExpressionStatement","src":"9681:18:18"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9604:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"9611:66:18","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9601:2:18"},"nodeType":"YulFunctionCall","src":"9601:77:18"},"nodeType":"YulIf","src":"9598:103:18"},{"nodeType":"YulAssignment","src":"9710:20:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9721:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"9728:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9717:3:18"},"nodeType":"YulFunctionCall","src":"9717:13:18"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"9710:3:18"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9532:5:18","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"9542:3:18","type":""}],"src":"9503:233:18"},{"body":{"nodeType":"YulBlock","src":"9838:73:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9855:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"9860:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9848:6:18"},"nodeType":"YulFunctionCall","src":"9848:19:18"},"nodeType":"YulExpressionStatement","src":"9848:19:18"},{"nodeType":"YulAssignment","src":"9876:29:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9895:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"9900:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9891:3:18"},"nodeType":"YulFunctionCall","src":"9891:14:18"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"9876:11:18"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9810:3:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"9815:6:18","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"9826:11:18","type":""}],"src":"9742:169:18"},{"body":{"nodeType":"YulBlock","src":"10023:62:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10045:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"10053:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10041:3:18"},"nodeType":"YulFunctionCall","src":"10041:14:18"},{"hexValue":"4e465420646f6573206e6f74206578697374","kind":"string","nodeType":"YulLiteral","src":"10057:20:18","type":"","value":"NFT does not exist"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10034:6:18"},"nodeType":"YulFunctionCall","src":"10034:44:18"},"nodeType":"YulExpressionStatement","src":"10034:44:18"}]},"name":"store_literal_in_memory_e403a9d7ffdeca555e754beaddbd9e6f34f997c24c017ab0a30199bbea954853","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"10015:6:18","type":""}],"src":"9917:168:18"},{"body":{"nodeType":"YulBlock","src":"10237:220:18","statements":[{"nodeType":"YulAssignment","src":"10247:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10313:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"10318:2:18","type":"","value":"18"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10254:58:18"},"nodeType":"YulFunctionCall","src":"10254:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10247:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10419:3:18"}],"functionName":{"name":"store_literal_in_memory_e403a9d7ffdeca555e754beaddbd9e6f34f997c24c017ab0a30199bbea954853","nodeType":"YulIdentifier","src":"10330:88:18"},"nodeType":"YulFunctionCall","src":"10330:93:18"},"nodeType":"YulExpressionStatement","src":"10330:93:18"},{"nodeType":"YulAssignment","src":"10432:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10443:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"10448:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10439:3:18"},"nodeType":"YulFunctionCall","src":"10439:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10432:3:18"}]}]},"name":"abi_encode_t_stringliteral_e403a9d7ffdeca555e754beaddbd9e6f34f997c24c017ab0a30199bbea954853_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10225:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10233:3:18","type":""}],"src":"10091:366:18"},{"body":{"nodeType":"YulBlock","src":"10634:248:18","statements":[{"nodeType":"YulAssignment","src":"10644:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10656:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"10667:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10652:3:18"},"nodeType":"YulFunctionCall","src":"10652:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10644:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10691:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"10702:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10687:3:18"},"nodeType":"YulFunctionCall","src":"10687:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10710:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"10716:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10706:3:18"},"nodeType":"YulFunctionCall","src":"10706:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10680:6:18"},"nodeType":"YulFunctionCall","src":"10680:47:18"},"nodeType":"YulExpressionStatement","src":"10680:47:18"},{"nodeType":"YulAssignment","src":"10736:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10870:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_e403a9d7ffdeca555e754beaddbd9e6f34f997c24c017ab0a30199bbea954853_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10744:124:18"},"nodeType":"YulFunctionCall","src":"10744:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10736:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_e403a9d7ffdeca555e754beaddbd9e6f34f997c24c017ab0a30199bbea954853__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10614:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10629:4:18","type":""}],"src":"10463:419:18"},{"body":{"nodeType":"YulBlock","src":"10994:117:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11016:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"11024:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11012:3:18"},"nodeType":"YulFunctionCall","src":"11012:14:18"},{"hexValue":"4f6e6c79204e46542073656c6c65722063616e20757064617465207468652070","kind":"string","nodeType":"YulLiteral","src":"11028:34:18","type":"","value":"Only NFT seller can update the p"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11005:6:18"},"nodeType":"YulFunctionCall","src":"11005:58:18"},"nodeType":"YulExpressionStatement","src":"11005:58:18"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11084:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"11092:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11080:3:18"},"nodeType":"YulFunctionCall","src":"11080:15:18"},{"hexValue":"72696365","kind":"string","nodeType":"YulLiteral","src":"11097:6:18","type":"","value":"rice"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11073:6:18"},"nodeType":"YulFunctionCall","src":"11073:31:18"},"nodeType":"YulExpressionStatement","src":"11073:31:18"}]},"name":"store_literal_in_memory_4644ba2f6590daae55292d0a205104b061ee5d5463ede6bc016df2dbb9750633","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"10986:6:18","type":""}],"src":"10888:223:18"},{"body":{"nodeType":"YulBlock","src":"11263:220:18","statements":[{"nodeType":"YulAssignment","src":"11273:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11339:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"11344:2:18","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11280:58:18"},"nodeType":"YulFunctionCall","src":"11280:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11273:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11445:3:18"}],"functionName":{"name":"store_literal_in_memory_4644ba2f6590daae55292d0a205104b061ee5d5463ede6bc016df2dbb9750633","nodeType":"YulIdentifier","src":"11356:88:18"},"nodeType":"YulFunctionCall","src":"11356:93:18"},"nodeType":"YulExpressionStatement","src":"11356:93:18"},{"nodeType":"YulAssignment","src":"11458:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11469:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"11474:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11465:3:18"},"nodeType":"YulFunctionCall","src":"11465:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11458:3:18"}]}]},"name":"abi_encode_t_stringliteral_4644ba2f6590daae55292d0a205104b061ee5d5463ede6bc016df2dbb9750633_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11251:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11259:3:18","type":""}],"src":"11117:366:18"},{"body":{"nodeType":"YulBlock","src":"11660:248:18","statements":[{"nodeType":"YulAssignment","src":"11670:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11682:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"11693:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11678:3:18"},"nodeType":"YulFunctionCall","src":"11678:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11670:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11717:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"11728:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11713:3:18"},"nodeType":"YulFunctionCall","src":"11713:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11736:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"11742:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11732:3:18"},"nodeType":"YulFunctionCall","src":"11732:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11706:6:18"},"nodeType":"YulFunctionCall","src":"11706:47:18"},"nodeType":"YulExpressionStatement","src":"11706:47:18"},{"nodeType":"YulAssignment","src":"11762:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11896:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_4644ba2f6590daae55292d0a205104b061ee5d5463ede6bc016df2dbb9750633_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11770:124:18"},"nodeType":"YulFunctionCall","src":"11770:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11762:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_4644ba2f6590daae55292d0a205104b061ee5d5463ede6bc016df2dbb9750633__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11640:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11655:4:18","type":""}],"src":"11489:419:18"},{"body":{"nodeType":"YulBlock","src":"12020:75:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12042:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"12050:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12038:3:18"},"nodeType":"YulFunctionCall","src":"12038:14:18"},{"hexValue":"53656c6c65722063616e6e6f7420627579207468656972206f776e204e4654","kind":"string","nodeType":"YulLiteral","src":"12054:33:18","type":"","value":"Seller cannot buy their own NFT"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12031:6:18"},"nodeType":"YulFunctionCall","src":"12031:57:18"},"nodeType":"YulExpressionStatement","src":"12031:57:18"}]},"name":"store_literal_in_memory_f015a052e3954aae4dde9ba7252d65d9b5488f1447a293d1575e62e90e025978","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12012:6:18","type":""}],"src":"11914:181:18"},{"body":{"nodeType":"YulBlock","src":"12247:220:18","statements":[{"nodeType":"YulAssignment","src":"12257:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12323:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"12328:2:18","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12264:58:18"},"nodeType":"YulFunctionCall","src":"12264:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12257:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12429:3:18"}],"functionName":{"name":"store_literal_in_memory_f015a052e3954aae4dde9ba7252d65d9b5488f1447a293d1575e62e90e025978","nodeType":"YulIdentifier","src":"12340:88:18"},"nodeType":"YulFunctionCall","src":"12340:93:18"},"nodeType":"YulExpressionStatement","src":"12340:93:18"},{"nodeType":"YulAssignment","src":"12442:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12453:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"12458:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12449:3:18"},"nodeType":"YulFunctionCall","src":"12449:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12442:3:18"}]}]},"name":"abi_encode_t_stringliteral_f015a052e3954aae4dde9ba7252d65d9b5488f1447a293d1575e62e90e025978_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12235:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12243:3:18","type":""}],"src":"12101:366:18"},{"body":{"nodeType":"YulBlock","src":"12644:248:18","statements":[{"nodeType":"YulAssignment","src":"12654:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12666:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"12677:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12662:3:18"},"nodeType":"YulFunctionCall","src":"12662:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12654:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12701:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"12712:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12697:3:18"},"nodeType":"YulFunctionCall","src":"12697:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12720:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"12726:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12716:3:18"},"nodeType":"YulFunctionCall","src":"12716:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12690:6:18"},"nodeType":"YulFunctionCall","src":"12690:47:18"},"nodeType":"YulExpressionStatement","src":"12690:47:18"},{"nodeType":"YulAssignment","src":"12746:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12880:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_f015a052e3954aae4dde9ba7252d65d9b5488f1447a293d1575e62e90e025978_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12754:124:18"},"nodeType":"YulFunctionCall","src":"12754:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12746:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_f015a052e3954aae4dde9ba7252d65d9b5488f1447a293d1575e62e90e025978__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12624:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12639:4:18","type":""}],"src":"12473:419:18"},{"body":{"nodeType":"YulBlock","src":"13004:62:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13026:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"13034:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13022:3:18"},"nodeType":"YulFunctionCall","src":"13022:14:18"},{"hexValue":"496e73756666696369656e742066756e6473","kind":"string","nodeType":"YulLiteral","src":"13038:20:18","type":"","value":"Insufficient funds"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13015:6:18"},"nodeType":"YulFunctionCall","src":"13015:44:18"},"nodeType":"YulExpressionStatement","src":"13015:44:18"}]},"name":"store_literal_in_memory_63452317cb6d597bef833f023ed2962a84dbd24c571e27629ed1e3056d6cfd8d","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12996:6:18","type":""}],"src":"12898:168:18"},{"body":{"nodeType":"YulBlock","src":"13218:220:18","statements":[{"nodeType":"YulAssignment","src":"13228:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13294:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"13299:2:18","type":"","value":"18"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13235:58:18"},"nodeType":"YulFunctionCall","src":"13235:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13228:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13400:3:18"}],"functionName":{"name":"store_literal_in_memory_63452317cb6d597bef833f023ed2962a84dbd24c571e27629ed1e3056d6cfd8d","nodeType":"YulIdentifier","src":"13311:88:18"},"nodeType":"YulFunctionCall","src":"13311:93:18"},"nodeType":"YulExpressionStatement","src":"13311:93:18"},{"nodeType":"YulAssignment","src":"13413:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13424:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"13429:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13420:3:18"},"nodeType":"YulFunctionCall","src":"13420:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13413:3:18"}]}]},"name":"abi_encode_t_stringliteral_63452317cb6d597bef833f023ed2962a84dbd24c571e27629ed1e3056d6cfd8d_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13206:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13214:3:18","type":""}],"src":"13072:366:18"},{"body":{"nodeType":"YulBlock","src":"13615:248:18","statements":[{"nodeType":"YulAssignment","src":"13625:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13637:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"13648:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13633:3:18"},"nodeType":"YulFunctionCall","src":"13633:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13625:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13672:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"13683:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13668:3:18"},"nodeType":"YulFunctionCall","src":"13668:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13691:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"13697:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13687:3:18"},"nodeType":"YulFunctionCall","src":"13687:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13661:6:18"},"nodeType":"YulFunctionCall","src":"13661:47:18"},"nodeType":"YulExpressionStatement","src":"13661:47:18"},{"nodeType":"YulAssignment","src":"13717:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13851:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_63452317cb6d597bef833f023ed2962a84dbd24c571e27629ed1e3056d6cfd8d_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13725:124:18"},"nodeType":"YulFunctionCall","src":"13725:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13717:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_63452317cb6d597bef833f023ed2962a84dbd24c571e27629ed1e3056d6cfd8d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13595:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13610:4:18","type":""}],"src":"13444:419:18"},{"body":{"nodeType":"YulBlock","src":"13975:116:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13997:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"14005:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13993:3:18"},"nodeType":"YulFunctionCall","src":"13993:14:18"},{"hexValue":"4f6e6c79207468652073656c6c65722063616e2061636365707420616e206f66","kind":"string","nodeType":"YulLiteral","src":"14009:34:18","type":"","value":"Only the seller can accept an of"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13986:6:18"},"nodeType":"YulFunctionCall","src":"13986:58:18"},"nodeType":"YulExpressionStatement","src":"13986:58:18"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14065:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"14073:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14061:3:18"},"nodeType":"YulFunctionCall","src":"14061:15:18"},{"hexValue":"666572","kind":"string","nodeType":"YulLiteral","src":"14078:5:18","type":"","value":"fer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14054:6:18"},"nodeType":"YulFunctionCall","src":"14054:30:18"},"nodeType":"YulExpressionStatement","src":"14054:30:18"}]},"name":"store_literal_in_memory_b4af62525507167bc201a4d46c4e79b26426b7dba8b54811c0e9dfc1b03c2837","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"13967:6:18","type":""}],"src":"13869:222:18"},{"body":{"nodeType":"YulBlock","src":"14243:220:18","statements":[{"nodeType":"YulAssignment","src":"14253:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14319:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"14324:2:18","type":"","value":"35"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14260:58:18"},"nodeType":"YulFunctionCall","src":"14260:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14253:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14425:3:18"}],"functionName":{"name":"store_literal_in_memory_b4af62525507167bc201a4d46c4e79b26426b7dba8b54811c0e9dfc1b03c2837","nodeType":"YulIdentifier","src":"14336:88:18"},"nodeType":"YulFunctionCall","src":"14336:93:18"},"nodeType":"YulExpressionStatement","src":"14336:93:18"},{"nodeType":"YulAssignment","src":"14438:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14449:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"14454:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14445:3:18"},"nodeType":"YulFunctionCall","src":"14445:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14438:3:18"}]}]},"name":"abi_encode_t_stringliteral_b4af62525507167bc201a4d46c4e79b26426b7dba8b54811c0e9dfc1b03c2837_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14231:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14239:3:18","type":""}],"src":"14097:366:18"},{"body":{"nodeType":"YulBlock","src":"14640:248:18","statements":[{"nodeType":"YulAssignment","src":"14650:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14662:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"14673:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14658:3:18"},"nodeType":"YulFunctionCall","src":"14658:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14650:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14697:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"14708:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14693:3:18"},"nodeType":"YulFunctionCall","src":"14693:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14716:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"14722:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14712:3:18"},"nodeType":"YulFunctionCall","src":"14712:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14686:6:18"},"nodeType":"YulFunctionCall","src":"14686:47:18"},"nodeType":"YulExpressionStatement","src":"14686:47:18"},{"nodeType":"YulAssignment","src":"14742:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14876:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_b4af62525507167bc201a4d46c4e79b26426b7dba8b54811c0e9dfc1b03c2837_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14750:124:18"},"nodeType":"YulFunctionCall","src":"14750:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14742:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_b4af62525507167bc201a4d46c4e79b26426b7dba8b54811c0e9dfc1b03c2837__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14620:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14635:4:18","type":""}],"src":"14469:419:18"},{"body":{"nodeType":"YulBlock","src":"15000:121:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15022:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"15030:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15018:3:18"},"nodeType":"YulFunctionCall","src":"15018:14:18"},{"hexValue":"546865726520617265206e6f2070656e64696e67206f666665727320666f7220","kind":"string","nodeType":"YulLiteral","src":"15034:34:18","type":"","value":"There are no pending offers for "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15011:6:18"},"nodeType":"YulFunctionCall","src":"15011:58:18"},"nodeType":"YulExpressionStatement","src":"15011:58:18"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15090:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"15098:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15086:3:18"},"nodeType":"YulFunctionCall","src":"15086:15:18"},{"hexValue":"74686973204e4654","kind":"string","nodeType":"YulLiteral","src":"15103:10:18","type":"","value":"this NFT"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15079:6:18"},"nodeType":"YulFunctionCall","src":"15079:35:18"},"nodeType":"YulExpressionStatement","src":"15079:35:18"}]},"name":"store_literal_in_memory_86d9a97fc78e44082cead82c4fb35239cc53982c716c0c9912aab7d6d8bddb44","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14992:6:18","type":""}],"src":"14894:227:18"},{"body":{"nodeType":"YulBlock","src":"15273:220:18","statements":[{"nodeType":"YulAssignment","src":"15283:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15349:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"15354:2:18","type":"","value":"40"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15290:58:18"},"nodeType":"YulFunctionCall","src":"15290:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15283:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15455:3:18"}],"functionName":{"name":"store_literal_in_memory_86d9a97fc78e44082cead82c4fb35239cc53982c716c0c9912aab7d6d8bddb44","nodeType":"YulIdentifier","src":"15366:88:18"},"nodeType":"YulFunctionCall","src":"15366:93:18"},"nodeType":"YulExpressionStatement","src":"15366:93:18"},{"nodeType":"YulAssignment","src":"15468:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15479:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"15484:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15475:3:18"},"nodeType":"YulFunctionCall","src":"15475:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15468:3:18"}]}]},"name":"abi_encode_t_stringliteral_86d9a97fc78e44082cead82c4fb35239cc53982c716c0c9912aab7d6d8bddb44_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15261:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15269:3:18","type":""}],"src":"15127:366:18"},{"body":{"nodeType":"YulBlock","src":"15670:248:18","statements":[{"nodeType":"YulAssignment","src":"15680:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15692:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"15703:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15688:3:18"},"nodeType":"YulFunctionCall","src":"15688:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15680:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15727:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"15738:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15723:3:18"},"nodeType":"YulFunctionCall","src":"15723:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15746:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"15752:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15742:3:18"},"nodeType":"YulFunctionCall","src":"15742:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15716:6:18"},"nodeType":"YulFunctionCall","src":"15716:47:18"},"nodeType":"YulExpressionStatement","src":"15716:47:18"},{"nodeType":"YulAssignment","src":"15772:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15906:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_86d9a97fc78e44082cead82c4fb35239cc53982c716c0c9912aab7d6d8bddb44_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15780:124:18"},"nodeType":"YulFunctionCall","src":"15780:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15772:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_86d9a97fc78e44082cead82c4fb35239cc53982c716c0c9912aab7d6d8bddb44__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15650:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15665:4:18","type":""}],"src":"15499:419:18"},{"body":{"nodeType":"YulBlock","src":"16030:64:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16052:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"16060:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16048:3:18"},"nodeType":"YulFunctionCall","src":"16048:14:18"},{"hexValue":"50726963652063616e6e6f74206265207a65726f","kind":"string","nodeType":"YulLiteral","src":"16064:22:18","type":"","value":"Price cannot be zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16041:6:18"},"nodeType":"YulFunctionCall","src":"16041:46:18"},"nodeType":"YulExpressionStatement","src":"16041:46:18"}]},"name":"store_literal_in_memory_72dc2a71c7e1de2c7b012d07a11f8199d268b42d946f22dcef81102d123f1ba2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"16022:6:18","type":""}],"src":"15924:170:18"},{"body":{"nodeType":"YulBlock","src":"16246:220:18","statements":[{"nodeType":"YulAssignment","src":"16256:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16322:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"16327:2:18","type":"","value":"20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16263:58:18"},"nodeType":"YulFunctionCall","src":"16263:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16256:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16428:3:18"}],"functionName":{"name":"store_literal_in_memory_72dc2a71c7e1de2c7b012d07a11f8199d268b42d946f22dcef81102d123f1ba2","nodeType":"YulIdentifier","src":"16339:88:18"},"nodeType":"YulFunctionCall","src":"16339:93:18"},"nodeType":"YulExpressionStatement","src":"16339:93:18"},{"nodeType":"YulAssignment","src":"16441:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16452:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"16457:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16448:3:18"},"nodeType":"YulFunctionCall","src":"16448:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16441:3:18"}]}]},"name":"abi_encode_t_stringliteral_72dc2a71c7e1de2c7b012d07a11f8199d268b42d946f22dcef81102d123f1ba2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16234:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16242:3:18","type":""}],"src":"16100:366:18"},{"body":{"nodeType":"YulBlock","src":"16643:248:18","statements":[{"nodeType":"YulAssignment","src":"16653:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16665:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"16676:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16661:3:18"},"nodeType":"YulFunctionCall","src":"16661:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16653:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16700:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"16711:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16696:3:18"},"nodeType":"YulFunctionCall","src":"16696:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16719:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"16725:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16715:3:18"},"nodeType":"YulFunctionCall","src":"16715:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16689:6:18"},"nodeType":"YulFunctionCall","src":"16689:47:18"},"nodeType":"YulExpressionStatement","src":"16689:47:18"},{"nodeType":"YulAssignment","src":"16745:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16879:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_72dc2a71c7e1de2c7b012d07a11f8199d268b42d946f22dcef81102d123f1ba2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16753:124:18"},"nodeType":"YulFunctionCall","src":"16753:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16745:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_72dc2a71c7e1de2c7b012d07a11f8199d268b42d946f22dcef81102d123f1ba2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16623:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16638:4:18","type":""}],"src":"16472:419:18"},{"body":{"nodeType":"YulBlock","src":"17003:55:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17025:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"17033:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17021:3:18"},"nodeType":"YulFunctionCall","src":"17021:14:18"},{"hexValue":"496e76616c6964204e4654","kind":"string","nodeType":"YulLiteral","src":"17037:13:18","type":"","value":"Invalid NFT"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17014:6:18"},"nodeType":"YulFunctionCall","src":"17014:37:18"},"nodeType":"YulExpressionStatement","src":"17014:37:18"}]},"name":"store_literal_in_memory_7364dcc3d92c60ce85034c76325bc369e6f9c986a5158a7471ba75ccb0b8ebe4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"16995:6:18","type":""}],"src":"16897:161:18"},{"body":{"nodeType":"YulBlock","src":"17210:220:18","statements":[{"nodeType":"YulAssignment","src":"17220:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17286:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"17291:2:18","type":"","value":"11"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17227:58:18"},"nodeType":"YulFunctionCall","src":"17227:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17220:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17392:3:18"}],"functionName":{"name":"store_literal_in_memory_7364dcc3d92c60ce85034c76325bc369e6f9c986a5158a7471ba75ccb0b8ebe4","nodeType":"YulIdentifier","src":"17303:88:18"},"nodeType":"YulFunctionCall","src":"17303:93:18"},"nodeType":"YulExpressionStatement","src":"17303:93:18"},{"nodeType":"YulAssignment","src":"17405:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17416:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"17421:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17412:3:18"},"nodeType":"YulFunctionCall","src":"17412:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17405:3:18"}]}]},"name":"abi_encode_t_stringliteral_7364dcc3d92c60ce85034c76325bc369e6f9c986a5158a7471ba75ccb0b8ebe4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17198:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17206:3:18","type":""}],"src":"17064:366:18"},{"body":{"nodeType":"YulBlock","src":"17607:248:18","statements":[{"nodeType":"YulAssignment","src":"17617:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17629:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"17640:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17625:3:18"},"nodeType":"YulFunctionCall","src":"17625:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17617:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17664:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"17675:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17660:3:18"},"nodeType":"YulFunctionCall","src":"17660:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17683:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"17689:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17679:3:18"},"nodeType":"YulFunctionCall","src":"17679:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17653:6:18"},"nodeType":"YulFunctionCall","src":"17653:47:18"},"nodeType":"YulExpressionStatement","src":"17653:47:18"},{"nodeType":"YulAssignment","src":"17709:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17843:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_7364dcc3d92c60ce85034c76325bc369e6f9c986a5158a7471ba75ccb0b8ebe4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17717:124:18"},"nodeType":"YulFunctionCall","src":"17717:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17709:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_7364dcc3d92c60ce85034c76325bc369e6f9c986a5158a7471ba75ccb0b8ebe4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17587:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17602:4:18","type":""}],"src":"17436:419:18"},{"body":{"nodeType":"YulBlock","src":"17924:80:18","statements":[{"nodeType":"YulAssignment","src":"17934:22:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"17949:6:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17943:5:18"},"nodeType":"YulFunctionCall","src":"17943:13:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"17934:5:18"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17992:5:18"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"17965:26:18"},"nodeType":"YulFunctionCall","src":"17965:33:18"},"nodeType":"YulExpressionStatement","src":"17965:33:18"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"17902:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"17910:3:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"17918:5:18","type":""}],"src":"17861:143:18"},{"body":{"nodeType":"YulBlock","src":"18087:274:18","statements":[{"body":{"nodeType":"YulBlock","src":"18133:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"18135:77:18"},"nodeType":"YulFunctionCall","src":"18135:79:18"},"nodeType":"YulExpressionStatement","src":"18135:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"18108:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"18117:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18104:3:18"},"nodeType":"YulFunctionCall","src":"18104:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"18129:2:18","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"18100:3:18"},"nodeType":"YulFunctionCall","src":"18100:32:18"},"nodeType":"YulIf","src":"18097:119:18"},{"nodeType":"YulBlock","src":"18226:128:18","statements":[{"nodeType":"YulVariableDeclaration","src":"18241:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"18255:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"18245:6:18","type":""}]},{"nodeType":"YulAssignment","src":"18270:74:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18316:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"18327:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18312:3:18"},"nodeType":"YulFunctionCall","src":"18312:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"18336:7:18"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"18280:31:18"},"nodeType":"YulFunctionCall","src":"18280:64:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"18270:6:18"}]}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18057:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"18068:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"18080:6:18","type":""}],"src":"18010:351:18"},{"body":{"nodeType":"YulBlock","src":"18473:61:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18495:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"18503:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18491:3:18"},"nodeType":"YulFunctionCall","src":"18491:14:18"},{"hexValue":"4e6f7420746865204e4654206f776e6572","kind":"string","nodeType":"YulLiteral","src":"18507:19:18","type":"","value":"Not the NFT owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18484:6:18"},"nodeType":"YulFunctionCall","src":"18484:43:18"},"nodeType":"YulExpressionStatement","src":"18484:43:18"}]},"name":"store_literal_in_memory_f40c7207b10e481e650faa5f8682df109c855977b906bbdb8a3725f64e1c28fd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18465:6:18","type":""}],"src":"18367:167:18"},{"body":{"nodeType":"YulBlock","src":"18686:220:18","statements":[{"nodeType":"YulAssignment","src":"18696:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18762:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"18767:2:18","type":"","value":"17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18703:58:18"},"nodeType":"YulFunctionCall","src":"18703:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18696:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18868:3:18"}],"functionName":{"name":"store_literal_in_memory_f40c7207b10e481e650faa5f8682df109c855977b906bbdb8a3725f64e1c28fd","nodeType":"YulIdentifier","src":"18779:88:18"},"nodeType":"YulFunctionCall","src":"18779:93:18"},"nodeType":"YulExpressionStatement","src":"18779:93:18"},{"nodeType":"YulAssignment","src":"18881:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18892:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"18897:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18888:3:18"},"nodeType":"YulFunctionCall","src":"18888:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18881:3:18"}]}]},"name":"abi_encode_t_stringliteral_f40c7207b10e481e650faa5f8682df109c855977b906bbdb8a3725f64e1c28fd_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18674:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18682:3:18","type":""}],"src":"18540:366:18"},{"body":{"nodeType":"YulBlock","src":"19083:248:18","statements":[{"nodeType":"YulAssignment","src":"19093:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19105:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"19116:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19101:3:18"},"nodeType":"YulFunctionCall","src":"19101:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19093:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19140:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"19151:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19136:3:18"},"nodeType":"YulFunctionCall","src":"19136:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19159:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"19165:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19155:3:18"},"nodeType":"YulFunctionCall","src":"19155:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19129:6:18"},"nodeType":"YulFunctionCall","src":"19129:47:18"},"nodeType":"YulExpressionStatement","src":"19129:47:18"},{"nodeType":"YulAssignment","src":"19185:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19319:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_f40c7207b10e481e650faa5f8682df109c855977b906bbdb8a3725f64e1c28fd_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19193:124:18"},"nodeType":"YulFunctionCall","src":"19193:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19185:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_f40c7207b10e481e650faa5f8682df109c855977b906bbdb8a3725f64e1c28fd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19063:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19078:4:18","type":""}],"src":"18912:419:18"},{"body":{"nodeType":"YulBlock","src":"19443:126:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19465:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"19473:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19461:3:18"},"nodeType":"YulFunctionCall","src":"19461:14:18"},{"hexValue":"53656c6c65722063616e6e6f74206d616b6520616e206f6666657220666f7220","kind":"string","nodeType":"YulLiteral","src":"19477:34:18","type":"","value":"Seller cannot make an offer for "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19454:6:18"},"nodeType":"YulFunctionCall","src":"19454:58:18"},"nodeType":"YulExpressionStatement","src":"19454:58:18"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19533:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"19541:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19529:3:18"},"nodeType":"YulFunctionCall","src":"19529:15:18"},{"hexValue":"7468656972206f776e204e4654","kind":"string","nodeType":"YulLiteral","src":"19546:15:18","type":"","value":"their own NFT"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19522:6:18"},"nodeType":"YulFunctionCall","src":"19522:40:18"},"nodeType":"YulExpressionStatement","src":"19522:40:18"}]},"name":"store_literal_in_memory_aabd344684bfafe82e0b208091da4b5f9f71692af2dbd0f198d76e52a4b871ba","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19435:6:18","type":""}],"src":"19337:232:18"},{"body":{"nodeType":"YulBlock","src":"19721:220:18","statements":[{"nodeType":"YulAssignment","src":"19731:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19797:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"19802:2:18","type":"","value":"45"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19738:58:18"},"nodeType":"YulFunctionCall","src":"19738:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19731:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19903:3:18"}],"functionName":{"name":"store_literal_in_memory_aabd344684bfafe82e0b208091da4b5f9f71692af2dbd0f198d76e52a4b871ba","nodeType":"YulIdentifier","src":"19814:88:18"},"nodeType":"YulFunctionCall","src":"19814:93:18"},"nodeType":"YulExpressionStatement","src":"19814:93:18"},{"nodeType":"YulAssignment","src":"19916:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19927:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"19932:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19923:3:18"},"nodeType":"YulFunctionCall","src":"19923:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19916:3:18"}]}]},"name":"abi_encode_t_stringliteral_aabd344684bfafe82e0b208091da4b5f9f71692af2dbd0f198d76e52a4b871ba_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19709:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19717:3:18","type":""}],"src":"19575:366:18"},{"body":{"nodeType":"YulBlock","src":"20118:248:18","statements":[{"nodeType":"YulAssignment","src":"20128:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20140:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"20151:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20136:3:18"},"nodeType":"YulFunctionCall","src":"20136:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20128:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20175:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"20186:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20171:3:18"},"nodeType":"YulFunctionCall","src":"20171:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20194:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"20200:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20190:3:18"},"nodeType":"YulFunctionCall","src":"20190:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20164:6:18"},"nodeType":"YulFunctionCall","src":"20164:47:18"},"nodeType":"YulExpressionStatement","src":"20164:47:18"},{"nodeType":"YulAssignment","src":"20220:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20354:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_aabd344684bfafe82e0b208091da4b5f9f71692af2dbd0f198d76e52a4b871ba_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20228:124:18"},"nodeType":"YulFunctionCall","src":"20228:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20220:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_aabd344684bfafe82e0b208091da4b5f9f71692af2dbd0f198d76e52a4b871ba__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20098:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20113:4:18","type":""}],"src":"19947:419:18"},{"body":{"nodeType":"YulBlock","src":"20478:118:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20500:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"20508:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20496:3:18"},"nodeType":"YulFunctionCall","src":"20496:14:18"},{"hexValue":"4f666665722076616c7565206d7573742062652067726561746572207468616e","kind":"string","nodeType":"YulLiteral","src":"20512:34:18","type":"","value":"Offer value must be greater than"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20489:6:18"},"nodeType":"YulFunctionCall","src":"20489:58:18"},"nodeType":"YulExpressionStatement","src":"20489:58:18"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20568:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"20576:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20564:3:18"},"nodeType":"YulFunctionCall","src":"20564:15:18"},{"hexValue":"207a65726f","kind":"string","nodeType":"YulLiteral","src":"20581:7:18","type":"","value":" zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20557:6:18"},"nodeType":"YulFunctionCall","src":"20557:32:18"},"nodeType":"YulExpressionStatement","src":"20557:32:18"}]},"name":"store_literal_in_memory_443b992b59a0be2f5f76238cb514531da1e5dcec7228eacdf8d76be549bc2aec","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20470:6:18","type":""}],"src":"20372:224:18"},{"body":{"nodeType":"YulBlock","src":"20748:220:18","statements":[{"nodeType":"YulAssignment","src":"20758:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20824:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"20829:2:18","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20765:58:18"},"nodeType":"YulFunctionCall","src":"20765:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20758:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20930:3:18"}],"functionName":{"name":"store_literal_in_memory_443b992b59a0be2f5f76238cb514531da1e5dcec7228eacdf8d76be549bc2aec","nodeType":"YulIdentifier","src":"20841:88:18"},"nodeType":"YulFunctionCall","src":"20841:93:18"},"nodeType":"YulExpressionStatement","src":"20841:93:18"},{"nodeType":"YulAssignment","src":"20943:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20954:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"20959:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20950:3:18"},"nodeType":"YulFunctionCall","src":"20950:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20943:3:18"}]}]},"name":"abi_encode_t_stringliteral_443b992b59a0be2f5f76238cb514531da1e5dcec7228eacdf8d76be549bc2aec_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20736:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20744:3:18","type":""}],"src":"20602:366:18"},{"body":{"nodeType":"YulBlock","src":"21145:248:18","statements":[{"nodeType":"YulAssignment","src":"21155:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21167:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"21178:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21163:3:18"},"nodeType":"YulFunctionCall","src":"21163:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21155:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21202:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"21213:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21198:3:18"},"nodeType":"YulFunctionCall","src":"21198:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21221:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"21227:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21217:3:18"},"nodeType":"YulFunctionCall","src":"21217:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21191:6:18"},"nodeType":"YulFunctionCall","src":"21191:47:18"},"nodeType":"YulExpressionStatement","src":"21191:47:18"},{"nodeType":"YulAssignment","src":"21247:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21381:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_443b992b59a0be2f5f76238cb514531da1e5dcec7228eacdf8d76be549bc2aec_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21255:124:18"},"nodeType":"YulFunctionCall","src":"21255:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21247:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_443b992b59a0be2f5f76238cb514531da1e5dcec7228eacdf8d76be549bc2aec__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21125:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21140:4:18","type":""}],"src":"20974:419:18"},{"body":{"nodeType":"YulBlock","src":"21505:127:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21527:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"21535:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21523:3:18"},"nodeType":"YulFunctionCall","src":"21523:14:18"},{"hexValue":"4f666665722076616c7565206d75737420626520686967686572207468616e20","kind":"string","nodeType":"YulLiteral","src":"21539:34:18","type":"","value":"Offer value must be higher than "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21516:6:18"},"nodeType":"YulFunctionCall","src":"21516:58:18"},"nodeType":"YulExpressionStatement","src":"21516:58:18"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21595:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"21603:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21591:3:18"},"nodeType":"YulFunctionCall","src":"21591:15:18"},{"hexValue":"6578697374696e67206f66666572","kind":"string","nodeType":"YulLiteral","src":"21608:16:18","type":"","value":"existing offer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21584:6:18"},"nodeType":"YulFunctionCall","src":"21584:41:18"},"nodeType":"YulExpressionStatement","src":"21584:41:18"}]},"name":"store_literal_in_memory_f066f1574dfd3ce03c2b17be94d4dbc07de2ef28c113bef4cc264c53bab61096","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"21497:6:18","type":""}],"src":"21399:233:18"},{"body":{"nodeType":"YulBlock","src":"21784:220:18","statements":[{"nodeType":"YulAssignment","src":"21794:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21860:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"21865:2:18","type":"","value":"46"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21801:58:18"},"nodeType":"YulFunctionCall","src":"21801:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21794:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21966:3:18"}],"functionName":{"name":"store_literal_in_memory_f066f1574dfd3ce03c2b17be94d4dbc07de2ef28c113bef4cc264c53bab61096","nodeType":"YulIdentifier","src":"21877:88:18"},"nodeType":"YulFunctionCall","src":"21877:93:18"},"nodeType":"YulExpressionStatement","src":"21877:93:18"},{"nodeType":"YulAssignment","src":"21979:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21990:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"21995:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21986:3:18"},"nodeType":"YulFunctionCall","src":"21986:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"21979:3:18"}]}]},"name":"abi_encode_t_stringliteral_f066f1574dfd3ce03c2b17be94d4dbc07de2ef28c113bef4cc264c53bab61096_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"21772:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"21780:3:18","type":""}],"src":"21638:366:18"},{"body":{"nodeType":"YulBlock","src":"22181:248:18","statements":[{"nodeType":"YulAssignment","src":"22191:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22203:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"22214:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22199:3:18"},"nodeType":"YulFunctionCall","src":"22199:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22191:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22238:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"22249:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22234:3:18"},"nodeType":"YulFunctionCall","src":"22234:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22257:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"22263:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22253:3:18"},"nodeType":"YulFunctionCall","src":"22253:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22227:6:18"},"nodeType":"YulFunctionCall","src":"22227:47:18"},"nodeType":"YulExpressionStatement","src":"22227:47:18"},{"nodeType":"YulAssignment","src":"22283:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22417:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_f066f1574dfd3ce03c2b17be94d4dbc07de2ef28c113bef4cc264c53bab61096_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22291:124:18"},"nodeType":"YulFunctionCall","src":"22291:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22283:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_f066f1574dfd3ce03c2b17be94d4dbc07de2ef28c113bef4cc264c53bab61096__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22161:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22176:4:18","type":""}],"src":"22010:419:18"},{"body":{"nodeType":"YulBlock","src":"22541:70:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22563:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"22571:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22559:3:18"},"nodeType":"YulFunctionCall","src":"22559:14:18"},{"hexValue":"4f6e6c792073656c6c65722063616e2072656d6f7665204e4654","kind":"string","nodeType":"YulLiteral","src":"22575:28:18","type":"","value":"Only seller can remove NFT"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22552:6:18"},"nodeType":"YulFunctionCall","src":"22552:52:18"},"nodeType":"YulExpressionStatement","src":"22552:52:18"}]},"name":"store_literal_in_memory_66efb3d77f56c50e528cf51150e96ac96115e7d8e881287a7840a6d610a3d797","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22533:6:18","type":""}],"src":"22435:176:18"},{"body":{"nodeType":"YulBlock","src":"22763:220:18","statements":[{"nodeType":"YulAssignment","src":"22773:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22839:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"22844:2:18","type":"","value":"26"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22780:58:18"},"nodeType":"YulFunctionCall","src":"22780:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22773:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22945:3:18"}],"functionName":{"name":"store_literal_in_memory_66efb3d77f56c50e528cf51150e96ac96115e7d8e881287a7840a6d610a3d797","nodeType":"YulIdentifier","src":"22856:88:18"},"nodeType":"YulFunctionCall","src":"22856:93:18"},"nodeType":"YulExpressionStatement","src":"22856:93:18"},{"nodeType":"YulAssignment","src":"22958:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22969:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"22974:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22965:3:18"},"nodeType":"YulFunctionCall","src":"22965:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22958:3:18"}]}]},"name":"abi_encode_t_stringliteral_66efb3d77f56c50e528cf51150e96ac96115e7d8e881287a7840a6d610a3d797_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22751:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22759:3:18","type":""}],"src":"22617:366:18"},{"body":{"nodeType":"YulBlock","src":"23160:248:18","statements":[{"nodeType":"YulAssignment","src":"23170:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23182:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"23193:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23178:3:18"},"nodeType":"YulFunctionCall","src":"23178:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23170:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23217:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"23228:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23213:3:18"},"nodeType":"YulFunctionCall","src":"23213:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23236:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"23242:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23232:3:18"},"nodeType":"YulFunctionCall","src":"23232:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23206:6:18"},"nodeType":"YulFunctionCall","src":"23206:47:18"},"nodeType":"YulExpressionStatement","src":"23206:47:18"},{"nodeType":"YulAssignment","src":"23262:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23396:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_66efb3d77f56c50e528cf51150e96ac96115e7d8e881287a7840a6d610a3d797_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23270:124:18"},"nodeType":"YulFunctionCall","src":"23270:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23262:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_66efb3d77f56c50e528cf51150e96ac96115e7d8e881287a7840a6d610a3d797__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23140:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23155:4:18","type":""}],"src":"22989:419:18"},{"body":{"nodeType":"YulBlock","src":"23477:80:18","statements":[{"nodeType":"YulAssignment","src":"23487:22:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"23502:6:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23496:5:18"},"nodeType":"YulFunctionCall","src":"23496:13:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"23487:5:18"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23545:5:18"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"23518:26:18"},"nodeType":"YulFunctionCall","src":"23518:33:18"},"nodeType":"YulExpressionStatement","src":"23518:33:18"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"23455:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"23463:3:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"23471:5:18","type":""}],"src":"23414:143:18"},{"body":{"nodeType":"YulBlock","src":"23640:274:18","statements":[{"body":{"nodeType":"YulBlock","src":"23686:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"23688:77:18"},"nodeType":"YulFunctionCall","src":"23688:79:18"},"nodeType":"YulExpressionStatement","src":"23688:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"23661:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"23670:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23657:3:18"},"nodeType":"YulFunctionCall","src":"23657:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"23682:2:18","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"23653:3:18"},"nodeType":"YulFunctionCall","src":"23653:32:18"},"nodeType":"YulIf","src":"23650:119:18"},{"nodeType":"YulBlock","src":"23779:128:18","statements":[{"nodeType":"YulVariableDeclaration","src":"23794:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"23808:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"23798:6:18","type":""}]},{"nodeType":"YulAssignment","src":"23823:74:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23869:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"23880:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23865:3:18"},"nodeType":"YulFunctionCall","src":"23865:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"23889:7:18"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"23833:31:18"},"nodeType":"YulFunctionCall","src":"23833:64:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"23823:6:18"}]}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23610:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"23621:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"23633:6:18","type":""}],"src":"23563:351:18"},{"body":{"nodeType":"YulBlock","src":"24026:125:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24048:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"24056:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24044:3:18"},"nodeType":"YulFunctionCall","src":"24044:14:18"},{"hexValue":"526f79616c746965732070657263656e74206d75737420626520677265617465","kind":"string","nodeType":"YulLiteral","src":"24060:34:18","type":"","value":"Royalties percent must be greate"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24037:6:18"},"nodeType":"YulFunctionCall","src":"24037:58:18"},"nodeType":"YulExpressionStatement","src":"24037:58:18"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24116:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"24124:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24112:3:18"},"nodeType":"YulFunctionCall","src":"24112:15:18"},{"hexValue":"72207468616e207a65726f2e","kind":"string","nodeType":"YulLiteral","src":"24129:14:18","type":"","value":"r than zero."}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24105:6:18"},"nodeType":"YulFunctionCall","src":"24105:39:18"},"nodeType":"YulExpressionStatement","src":"24105:39:18"}]},"name":"store_literal_in_memory_312b0199b87785955ef2954637425f623c976afcee89dbd6ddbe087e5a185a62","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"24018:6:18","type":""}],"src":"23920:231:18"},{"body":{"nodeType":"YulBlock","src":"24303:220:18","statements":[{"nodeType":"YulAssignment","src":"24313:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24379:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"24384:2:18","type":"","value":"44"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24320:58:18"},"nodeType":"YulFunctionCall","src":"24320:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24313:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24485:3:18"}],"functionName":{"name":"store_literal_in_memory_312b0199b87785955ef2954637425f623c976afcee89dbd6ddbe087e5a185a62","nodeType":"YulIdentifier","src":"24396:88:18"},"nodeType":"YulFunctionCall","src":"24396:93:18"},"nodeType":"YulExpressionStatement","src":"24396:93:18"},{"nodeType":"YulAssignment","src":"24498:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24509:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"24514:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24505:3:18"},"nodeType":"YulFunctionCall","src":"24505:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24498:3:18"}]}]},"name":"abi_encode_t_stringliteral_312b0199b87785955ef2954637425f623c976afcee89dbd6ddbe087e5a185a62_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24291:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24299:3:18","type":""}],"src":"24157:366:18"},{"body":{"nodeType":"YulBlock","src":"24700:248:18","statements":[{"nodeType":"YulAssignment","src":"24710:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24722:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"24733:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24718:3:18"},"nodeType":"YulFunctionCall","src":"24718:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24710:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24757:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"24768:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24753:3:18"},"nodeType":"YulFunctionCall","src":"24753:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24776:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"24782:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24772:3:18"},"nodeType":"YulFunctionCall","src":"24772:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24746:6:18"},"nodeType":"YulFunctionCall","src":"24746:47:18"},"nodeType":"YulExpressionStatement","src":"24746:47:18"},{"nodeType":"YulAssignment","src":"24802:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24936:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_312b0199b87785955ef2954637425f623c976afcee89dbd6ddbe087e5a185a62_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24810:124:18"},"nodeType":"YulFunctionCall","src":"24810:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24802:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_312b0199b87785955ef2954637425f623c976afcee89dbd6ddbe087e5a185a62__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24680:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24695:4:18","type":""}],"src":"24529:419:18"},{"body":{"nodeType":"YulBlock","src":"25108:288:18","statements":[{"nodeType":"YulAssignment","src":"25118:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25130:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"25141:2:18","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25126:3:18"},"nodeType":"YulFunctionCall","src":"25126:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25118:4:18"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"25198:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25211:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"25222:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25207:3:18"},"nodeType":"YulFunctionCall","src":"25207:17:18"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"25154:43:18"},"nodeType":"YulFunctionCall","src":"25154:71:18"},"nodeType":"YulExpressionStatement","src":"25154:71:18"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"25279:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25292:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"25303:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25288:3:18"},"nodeType":"YulFunctionCall","src":"25288:18:18"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"25235:43:18"},"nodeType":"YulFunctionCall","src":"25235:72:18"},"nodeType":"YulExpressionStatement","src":"25235:72:18"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"25361:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25374:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"25385:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25370:3:18"},"nodeType":"YulFunctionCall","src":"25370:18:18"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"25317:43:18"},"nodeType":"YulFunctionCall","src":"25317:72:18"},"nodeType":"YulExpressionStatement","src":"25317:72:18"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25064:9:18","type":""},{"name":"value2","nodeType":"YulTypedName","src":"25076:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"25084:6:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"25092:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25103:4:18","type":""}],"src":"24954:442:18"},{"body":{"nodeType":"YulBlock","src":"25450:362:18","statements":[{"nodeType":"YulAssignment","src":"25460:25:18","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25483:1:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"25465:17:18"},"nodeType":"YulFunctionCall","src":"25465:20:18"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"25460:1:18"}]},{"nodeType":"YulAssignment","src":"25494:25:18","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"25517:1:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"25499:17:18"},"nodeType":"YulFunctionCall","src":"25499:20:18"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"25494:1:18"}]},{"nodeType":"YulVariableDeclaration","src":"25528:28:18","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25551:1:18"},{"name":"y","nodeType":"YulIdentifier","src":"25554:1:18"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"25547:3:18"},"nodeType":"YulFunctionCall","src":"25547:9:18"},"variables":[{"name":"product_raw","nodeType":"YulTypedName","src":"25532:11:18","type":""}]},{"nodeType":"YulAssignment","src":"25565:41:18","value":{"arguments":[{"name":"product_raw","nodeType":"YulIdentifier","src":"25594:11:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"25576:17:18"},"nodeType":"YulFunctionCall","src":"25576:30:18"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"25565:7:18"}]},{"body":{"nodeType":"YulBlock","src":"25783:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"25785:16:18"},"nodeType":"YulFunctionCall","src":"25785:18:18"},"nodeType":"YulExpressionStatement","src":"25785:18:18"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25716:1:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"25709:6:18"},"nodeType":"YulFunctionCall","src":"25709:9:18"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"25739:1:18"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"25746:7:18"},{"name":"x","nodeType":"YulIdentifier","src":"25755:1:18"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"25742:3:18"},"nodeType":"YulFunctionCall","src":"25742:15:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"25736:2:18"},"nodeType":"YulFunctionCall","src":"25736:22:18"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"25689:2:18"},"nodeType":"YulFunctionCall","src":"25689:83:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"25669:6:18"},"nodeType":"YulFunctionCall","src":"25669:113:18"},"nodeType":"YulIf","src":"25666:139:18"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"25433:1:18","type":""},{"name":"y","nodeType":"YulTypedName","src":"25436:1:18","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"25442:7:18","type":""}],"src":"25402:410:18"},{"body":{"nodeType":"YulBlock","src":"25863:149:18","statements":[{"nodeType":"YulAssignment","src":"25873:25:18","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25896:1:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"25878:17:18"},"nodeType":"YulFunctionCall","src":"25878:20:18"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"25873:1:18"}]},{"nodeType":"YulAssignment","src":"25907:25:18","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"25930:1:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"25912:17:18"},"nodeType":"YulFunctionCall","src":"25912:20:18"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"25907:1:18"}]},{"nodeType":"YulAssignment","src":"25941:17:18","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25953:1:18"},{"name":"y","nodeType":"YulIdentifier","src":"25956:1:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25949:3:18"},"nodeType":"YulFunctionCall","src":"25949:9:18"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"25941:4:18"}]},{"body":{"nodeType":"YulBlock","src":"25983:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"25985:16:18"},"nodeType":"YulFunctionCall","src":"25985:18:18"},"nodeType":"YulExpressionStatement","src":"25985:18:18"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"25974:4:18"},{"name":"x","nodeType":"YulIdentifier","src":"25980:1:18"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"25971:2:18"},"nodeType":"YulFunctionCall","src":"25971:11:18"},"nodeType":"YulIf","src":"25968:37:18"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"25849:1:18","type":""},{"name":"y","nodeType":"YulTypedName","src":"25852:1:18","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"25858:4:18","type":""}],"src":"25818:194:18"},{"body":{"nodeType":"YulBlock","src":"26124:74:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"26146:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"26154:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26142:3:18"},"nodeType":"YulFunctionCall","src":"26142:14:18"},{"hexValue":"456e756d657261626c654d61703a206e6f6e6578697374656e74206b6579","kind":"string","nodeType":"YulLiteral","src":"26158:32:18","type":"","value":"EnumerableMap: nonexistent key"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26135:6:18"},"nodeType":"YulFunctionCall","src":"26135:56:18"},"nodeType":"YulExpressionStatement","src":"26135:56:18"}]},"name":"store_literal_in_memory_d3551e30d3095fd81287b88f7139bb09818e34280e85ee821994ebaebbed7072","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"26116:6:18","type":""}],"src":"26018:180:18"},{"body":{"nodeType":"YulBlock","src":"26350:220:18","statements":[{"nodeType":"YulAssignment","src":"26360:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26426:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"26431:2:18","type":"","value":"30"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26367:58:18"},"nodeType":"YulFunctionCall","src":"26367:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"26360:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26532:3:18"}],"functionName":{"name":"store_literal_in_memory_d3551e30d3095fd81287b88f7139bb09818e34280e85ee821994ebaebbed7072","nodeType":"YulIdentifier","src":"26443:88:18"},"nodeType":"YulFunctionCall","src":"26443:93:18"},"nodeType":"YulExpressionStatement","src":"26443:93:18"},{"nodeType":"YulAssignment","src":"26545:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26556:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"26561:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26552:3:18"},"nodeType":"YulFunctionCall","src":"26552:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"26545:3:18"}]}]},"name":"abi_encode_t_stringliteral_d3551e30d3095fd81287b88f7139bb09818e34280e85ee821994ebaebbed7072_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26338:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"26346:3:18","type":""}],"src":"26204:366:18"},{"body":{"nodeType":"YulBlock","src":"26747:248:18","statements":[{"nodeType":"YulAssignment","src":"26757:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26769:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"26780:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26765:3:18"},"nodeType":"YulFunctionCall","src":"26765:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26757:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26804:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"26815:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26800:3:18"},"nodeType":"YulFunctionCall","src":"26800:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26823:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"26829:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26819:3:18"},"nodeType":"YulFunctionCall","src":"26819:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26793:6:18"},"nodeType":"YulFunctionCall","src":"26793:47:18"},"nodeType":"YulExpressionStatement","src":"26793:47:18"},{"nodeType":"YulAssignment","src":"26849:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26983:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_d3551e30d3095fd81287b88f7139bb09818e34280e85ee821994ebaebbed7072_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26857:124:18"},"nodeType":"YulFunctionCall","src":"26857:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26849:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3551e30d3095fd81287b88f7139bb09818e34280e85ee821994ebaebbed7072__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26727:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26742:4:18","type":""}],"src":"26576:419:18"},{"body":{"nodeType":"YulBlock","src":"27029:152:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27046:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"27049:77:18","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27039:6:18"},"nodeType":"YulFunctionCall","src":"27039:88:18"},"nodeType":"YulExpressionStatement","src":"27039:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27143:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"27146:4:18","type":"","value":"0x31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27136:6:18"},"nodeType":"YulFunctionCall","src":"27136:15:18"},"nodeType":"YulExpressionStatement","src":"27136:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27167:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"27170:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"27160:6:18"},"nodeType":"YulFunctionCall","src":"27160:15:18"},"nodeType":"YulExpressionStatement","src":"27160:15:18"}]},"name":"panic_error_0x31","nodeType":"YulFunctionDefinition","src":"27001:180:18"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_array$_t_uint256_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encodeUpdatedPos_t_uint256_to_t_uint256(value0, pos) -> updatedPos {\n        abi_encode_t_uint256_to_t_uint256(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // uint256[] -> uint256[]\n    function abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_uint256_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_uint256_to_t_uint256(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_uint256_t_address__to_t_address_t_uint256_t_uint256_t_address__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_address_to_t_address_fromStack(value3,  add(headStart, 96))\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_address_to_t_address(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    // struct Marketplace.Offer -> struct Marketplace.Offer\n    function abi_encode_t_struct$_Offer_$4923_memory_ptr_to_t_struct$_Offer_$4923_memory_ptr(value, pos)  {\n        let tail := add(pos, 0x40)\n\n        {\n            // offerer\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // value\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x20))\n        }\n\n    }\n\n    function abi_encodeUpdatedPos_t_struct$_Offer_$4923_memory_ptr_to_t_struct$_Offer_$4923_memory_ptr(value0, pos) -> updatedPos {\n        abi_encode_t_struct$_Offer_$4923_memory_ptr_to_t_struct$_Offer_$4923_memory_ptr(value0, pos)\n        updatedPos := add(pos, 0x40)\n    }\n\n    function array_nextElement_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // struct Marketplace.Offer[] -> struct Marketplace.Offer[]\n    function abi_encode_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_struct$_Offer_$4923_memory_ptr_to_t_struct$_Offer_$4923_memory_ptr(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Offer_$4923_memory_ptr_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_e403a9d7ffdeca555e754beaddbd9e6f34f997c24c017ab0a30199bbea954853(memPtr) {\n\n        mstore(add(memPtr, 0), \"NFT does not exist\")\n\n    }\n\n    function abi_encode_t_stringliteral_e403a9d7ffdeca555e754beaddbd9e6f34f997c24c017ab0a30199bbea954853_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 18)\n        store_literal_in_memory_e403a9d7ffdeca555e754beaddbd9e6f34f997c24c017ab0a30199bbea954853(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_e403a9d7ffdeca555e754beaddbd9e6f34f997c24c017ab0a30199bbea954853__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e403a9d7ffdeca555e754beaddbd9e6f34f997c24c017ab0a30199bbea954853_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_4644ba2f6590daae55292d0a205104b061ee5d5463ede6bc016df2dbb9750633(memPtr) {\n\n        mstore(add(memPtr, 0), \"Only NFT seller can update the p\")\n\n        mstore(add(memPtr, 32), \"rice\")\n\n    }\n\n    function abi_encode_t_stringliteral_4644ba2f6590daae55292d0a205104b061ee5d5463ede6bc016df2dbb9750633_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_4644ba2f6590daae55292d0a205104b061ee5d5463ede6bc016df2dbb9750633(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_4644ba2f6590daae55292d0a205104b061ee5d5463ede6bc016df2dbb9750633__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4644ba2f6590daae55292d0a205104b061ee5d5463ede6bc016df2dbb9750633_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_f015a052e3954aae4dde9ba7252d65d9b5488f1447a293d1575e62e90e025978(memPtr) {\n\n        mstore(add(memPtr, 0), \"Seller cannot buy their own NFT\")\n\n    }\n\n    function abi_encode_t_stringliteral_f015a052e3954aae4dde9ba7252d65d9b5488f1447a293d1575e62e90e025978_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_f015a052e3954aae4dde9ba7252d65d9b5488f1447a293d1575e62e90e025978(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_f015a052e3954aae4dde9ba7252d65d9b5488f1447a293d1575e62e90e025978__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_f015a052e3954aae4dde9ba7252d65d9b5488f1447a293d1575e62e90e025978_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_63452317cb6d597bef833f023ed2962a84dbd24c571e27629ed1e3056d6cfd8d(memPtr) {\n\n        mstore(add(memPtr, 0), \"Insufficient funds\")\n\n    }\n\n    function abi_encode_t_stringliteral_63452317cb6d597bef833f023ed2962a84dbd24c571e27629ed1e3056d6cfd8d_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 18)\n        store_literal_in_memory_63452317cb6d597bef833f023ed2962a84dbd24c571e27629ed1e3056d6cfd8d(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_63452317cb6d597bef833f023ed2962a84dbd24c571e27629ed1e3056d6cfd8d__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_63452317cb6d597bef833f023ed2962a84dbd24c571e27629ed1e3056d6cfd8d_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_b4af62525507167bc201a4d46c4e79b26426b7dba8b54811c0e9dfc1b03c2837(memPtr) {\n\n        mstore(add(memPtr, 0), \"Only the seller can accept an of\")\n\n        mstore(add(memPtr, 32), \"fer\")\n\n    }\n\n    function abi_encode_t_stringliteral_b4af62525507167bc201a4d46c4e79b26426b7dba8b54811c0e9dfc1b03c2837_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 35)\n        store_literal_in_memory_b4af62525507167bc201a4d46c4e79b26426b7dba8b54811c0e9dfc1b03c2837(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b4af62525507167bc201a4d46c4e79b26426b7dba8b54811c0e9dfc1b03c2837__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b4af62525507167bc201a4d46c4e79b26426b7dba8b54811c0e9dfc1b03c2837_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_86d9a97fc78e44082cead82c4fb35239cc53982c716c0c9912aab7d6d8bddb44(memPtr) {\n\n        mstore(add(memPtr, 0), \"There are no pending offers for \")\n\n        mstore(add(memPtr, 32), \"this NFT\")\n\n    }\n\n    function abi_encode_t_stringliteral_86d9a97fc78e44082cead82c4fb35239cc53982c716c0c9912aab7d6d8bddb44_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 40)\n        store_literal_in_memory_86d9a97fc78e44082cead82c4fb35239cc53982c716c0c9912aab7d6d8bddb44(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_86d9a97fc78e44082cead82c4fb35239cc53982c716c0c9912aab7d6d8bddb44__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_86d9a97fc78e44082cead82c4fb35239cc53982c716c0c9912aab7d6d8bddb44_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_72dc2a71c7e1de2c7b012d07a11f8199d268b42d946f22dcef81102d123f1ba2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Price cannot be zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_72dc2a71c7e1de2c7b012d07a11f8199d268b42d946f22dcef81102d123f1ba2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)\n        store_literal_in_memory_72dc2a71c7e1de2c7b012d07a11f8199d268b42d946f22dcef81102d123f1ba2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_72dc2a71c7e1de2c7b012d07a11f8199d268b42d946f22dcef81102d123f1ba2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_72dc2a71c7e1de2c7b012d07a11f8199d268b42d946f22dcef81102d123f1ba2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_7364dcc3d92c60ce85034c76325bc369e6f9c986a5158a7471ba75ccb0b8ebe4(memPtr) {\n\n        mstore(add(memPtr, 0), \"Invalid NFT\")\n\n    }\n\n    function abi_encode_t_stringliteral_7364dcc3d92c60ce85034c76325bc369e6f9c986a5158a7471ba75ccb0b8ebe4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 11)\n        store_literal_in_memory_7364dcc3d92c60ce85034c76325bc369e6f9c986a5158a7471ba75ccb0b8ebe4(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7364dcc3d92c60ce85034c76325bc369e6f9c986a5158a7471ba75ccb0b8ebe4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7364dcc3d92c60ce85034c76325bc369e6f9c986a5158a7471ba75ccb0b8ebe4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_f40c7207b10e481e650faa5f8682df109c855977b906bbdb8a3725f64e1c28fd(memPtr) {\n\n        mstore(add(memPtr, 0), \"Not the NFT owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_f40c7207b10e481e650faa5f8682df109c855977b906bbdb8a3725f64e1c28fd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 17)\n        store_literal_in_memory_f40c7207b10e481e650faa5f8682df109c855977b906bbdb8a3725f64e1c28fd(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_f40c7207b10e481e650faa5f8682df109c855977b906bbdb8a3725f64e1c28fd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_f40c7207b10e481e650faa5f8682df109c855977b906bbdb8a3725f64e1c28fd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_aabd344684bfafe82e0b208091da4b5f9f71692af2dbd0f198d76e52a4b871ba(memPtr) {\n\n        mstore(add(memPtr, 0), \"Seller cannot make an offer for \")\n\n        mstore(add(memPtr, 32), \"their own NFT\")\n\n    }\n\n    function abi_encode_t_stringliteral_aabd344684bfafe82e0b208091da4b5f9f71692af2dbd0f198d76e52a4b871ba_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n        store_literal_in_memory_aabd344684bfafe82e0b208091da4b5f9f71692af2dbd0f198d76e52a4b871ba(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_aabd344684bfafe82e0b208091da4b5f9f71692af2dbd0f198d76e52a4b871ba__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_aabd344684bfafe82e0b208091da4b5f9f71692af2dbd0f198d76e52a4b871ba_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_443b992b59a0be2f5f76238cb514531da1e5dcec7228eacdf8d76be549bc2aec(memPtr) {\n\n        mstore(add(memPtr, 0), \"Offer value must be greater than\")\n\n        mstore(add(memPtr, 32), \" zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_443b992b59a0be2f5f76238cb514531da1e5dcec7228eacdf8d76be549bc2aec_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_443b992b59a0be2f5f76238cb514531da1e5dcec7228eacdf8d76be549bc2aec(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_443b992b59a0be2f5f76238cb514531da1e5dcec7228eacdf8d76be549bc2aec__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_443b992b59a0be2f5f76238cb514531da1e5dcec7228eacdf8d76be549bc2aec_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_f066f1574dfd3ce03c2b17be94d4dbc07de2ef28c113bef4cc264c53bab61096(memPtr) {\n\n        mstore(add(memPtr, 0), \"Offer value must be higher than \")\n\n        mstore(add(memPtr, 32), \"existing offer\")\n\n    }\n\n    function abi_encode_t_stringliteral_f066f1574dfd3ce03c2b17be94d4dbc07de2ef28c113bef4cc264c53bab61096_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_f066f1574dfd3ce03c2b17be94d4dbc07de2ef28c113bef4cc264c53bab61096(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_f066f1574dfd3ce03c2b17be94d4dbc07de2ef28c113bef4cc264c53bab61096__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_f066f1574dfd3ce03c2b17be94d4dbc07de2ef28c113bef4cc264c53bab61096_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_66efb3d77f56c50e528cf51150e96ac96115e7d8e881287a7840a6d610a3d797(memPtr) {\n\n        mstore(add(memPtr, 0), \"Only seller can remove NFT\")\n\n    }\n\n    function abi_encode_t_stringliteral_66efb3d77f56c50e528cf51150e96ac96115e7d8e881287a7840a6d610a3d797_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 26)\n        store_literal_in_memory_66efb3d77f56c50e528cf51150e96ac96115e7d8e881287a7840a6d610a3d797(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_66efb3d77f56c50e528cf51150e96ac96115e7d8e881287a7840a6d610a3d797__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_66efb3d77f56c50e528cf51150e96ac96115e7d8e881287a7840a6d610a3d797_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_312b0199b87785955ef2954637425f623c976afcee89dbd6ddbe087e5a185a62(memPtr) {\n\n        mstore(add(memPtr, 0), \"Royalties percent must be greate\")\n\n        mstore(add(memPtr, 32), \"r than zero.\")\n\n    }\n\n    function abi_encode_t_stringliteral_312b0199b87785955ef2954637425f623c976afcee89dbd6ddbe087e5a185a62_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 44)\n        store_literal_in_memory_312b0199b87785955ef2954637425f623c976afcee89dbd6ddbe087e5a185a62(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_312b0199b87785955ef2954637425f623c976afcee89dbd6ddbe087e5a185a62__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_312b0199b87785955ef2954637425f623c976afcee89dbd6ddbe087e5a185a62_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_d3551e30d3095fd81287b88f7139bb09818e34280e85ee821994ebaebbed7072(memPtr) {\n\n        mstore(add(memPtr, 0), \"EnumerableMap: nonexistent key\")\n\n    }\n\n    function abi_encode_t_stringliteral_d3551e30d3095fd81287b88f7139bb09818e34280e85ee821994ebaebbed7072_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 30)\n        store_literal_in_memory_d3551e30d3095fd81287b88f7139bb09818e34280e85ee821994ebaebbed7072(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d3551e30d3095fd81287b88f7139bb09818e34280e85ee821994ebaebbed7072__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d3551e30d3095fd81287b88f7139bb09818e34280e85ee821994ebaebbed7072_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x31() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n\n}\n","id":18,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"60806040526004361061009c5760003560e01c8063918d407d11610064578063918d407d146101a057806392976179146101c957806394383f14146102065780639a2f64741461022f578063ee4739cb1461024b578063ef706adf146102745761009c565b806309de4e06146100a1578063265aa621146100de5780634ac0123d1461011e57806350dc18671461014757806351ed828814610184575b600080fd5b3480156100ad57600080fd5b506100c860048036038101906100c391906120c7565b61029d565b6040516100d591906121bc565b60405180910390f35b3480156100ea57600080fd5b506101056004803603810190610100919061220a565b610410565b6040516101159493929190612255565b60405180910390f35b34801561012a57600080fd5b506101456004803603810190610140919061229a565b610480565b005b34801561015357600080fd5b5061016e6004803603810190610169919061220a565b6105c1565b60405161017b91906123c7565b60405180910390f35b61019e6004803603810190610199919061220a565b6106ee565b005b3480156101ac57600080fd5b506101c760048036038101906101c291906123e9565b61090b565b005b3480156101d557600080fd5b506101f060048036038101906101eb919061220a565b610b5b565b6040516101fd9190612429565b60405180910390f35b34801561021257600080fd5b5061022d6004803603810190610228919061229a565b610b8f565b005b6102496004803603810190610244919061220a565b610ed3565b005b34801561025757600080fd5b50610272600480360381019061026d919061220a565b6112e9565b005b34801561028057600080fd5b5061029b6004803603810190610296919061220a565b611481565b005b606060006102e8600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206115c2565b67ffffffffffffffff81111561030157610300612444565b5b60405190808252806020026020018201604052801561032f5781602001602082028036833780820191505090505b50905060005b61037c600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206115c2565b811015610406576103d481600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206115d790919063ffffffff16565b8282815181106103e7576103e6612473565b5b60200260200101818152505080806103fe906124d1565b915050610335565b5080915050919050565b60006020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905084565b610489826115f1565b6104c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bf90612576565b60405180910390fd5b60008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461056b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056290612608565b60405180910390fd5b8060008084815260200190815260200160002060020181905550817f2847cfe8afe8bcd9ac540f0259739697ea019f65d44c8e76c8796b8ce52f7c31826040516105b59190612429565b60405180910390a25050565b606060006105e060026000858152602001908152602001600020611612565b67ffffffffffffffff8111156105f9576105f8612444565b5b60405190808252806020026020018201604052801561063257816020015b61061f612034565b8152602001906001900390816106175790505b50905060005b61065360026000868152602001908152602001600020611612565b8110156106e457600080610682836002600089815260200190815260200160002061162790919063ffffffff16565b9150915060405180604001604052808373ffffffffffffffffffffffffffffffffffffffff168152602001828152508484815181106106c4576106c3612473565b5b6020026020010181905250505080806106dc906124d1565b915050610638565b5080915050919050565b6106f7816115f1565b610736576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072d90612576565b60405180910390fd5b60008082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036107d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d090612674565b60405180910390fd5b60008082815260200190815260200160002060020154341015610831576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610828906126e0565b60405180910390fd5b3360008083815260200190815260200160002060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506108a48160008084815260200190815260200160002060020154611653565b3373ffffffffffffffffffffffffffffffffffffffff16817f67ba49958f8b7a80047dfa2bdad61ca2b10d970a32898c2f345a7b20079ba037600080858152602001908152602001600020600201546040516109009190612429565b60405180910390a350565b610914826115f1565b610953576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094a90612576565b60405180910390fd5b60008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ed90612772565b60405180910390fd5b610a1b8160026000858152602001908152602001600020611aa490919063ffffffff16565b610a5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5190612804565b60405180910390fd5b8060008084815260200190815260200160002060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610ad38160026000858152602001908152602001600020611ad490919063ffffffff16565b50610af38260008085815260200190815260200160002060020154611653565b8073ffffffffffffffffffffffffffffffffffffffff16827f67ba49958f8b7a80047dfa2bdad61ca2b10d970a32898c2f345a7b20079ba03760008086815260200190815260200160002060020154604051610b4f9190612429565b60405180910390a35050565b6000610b66826115f1565b610b71576000610b88565b600080838152602001908152602001600020600201545b9050919050565b60008111610bd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc990612870565b60405180910390fd5b610bdb82611b04565b610c1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c11906128dc565b60405180910390fd5b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b8152600401610c779190612429565b602060405180830381865afa158015610c94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb89190612911565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610d28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1f9061298a565b60405180910390fd5b60405180608001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001848152602001838152602001600073ffffffffffffffffffffffffffffffffffffffff1681525060008085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050610e7e83600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611bb390919063ffffffff16565b503373ffffffffffffffffffffffffffffffffffffffff16837f5f9c03de076f5063cd3ebcfe8ef7aa8af378e4b35a83c77ba9777e97083879a284604051610ec69190612429565b60405180910390a3505050565b610edc816115f1565b610f1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1290612576565b60405180910390fd5b60008082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610fbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb590612a1c565b60405180910390fd5b60003411611001576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff890612aae565b60405180910390fd5b6110263360026000848152602001908152602001600020611aa490919063ffffffff16565b156111755760006110523360026000858152602001908152602001600020611bcd90919063ffffffff16565b905060008111801561106357508034115b15611134576000819050349150611097338360026000878152602001908152602001600020611c009092919063ffffffff16565b503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156110de573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff16837fbdf1e76c2ba2a5c85b93bf78678a4a3b06d63b18422612dac8d7d5249ed46714346040516111269190612429565b60405180910390a35061116f565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116690612b40565b60405180910390fd5b506112e6565b60008082815260200190815260200160002060020154341061126d573360008083815260200190815260200160002060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506112048160008084815260200190815260200160002060020154611653565b3373ffffffffffffffffffffffffffffffffffffffff16817f67ba49958f8b7a80047dfa2bdad61ca2b10d970a32898c2f345a7b20079ba037600080858152602001908152602001600020600201546040516112609190612429565b60405180910390a36112e5565b611294333460026000858152602001908152602001600020611c009092919063ffffffff16565b503373ffffffffffffffffffffffffffffffffffffffff16817fbdf1e76c2ba2a5c85b93bf78678a4a3b06d63b18422612dac8d7d5249ed46714346040516112dc9190612429565b60405180910390a35b5b50565b3373ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461138c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138390612bac565b60405180910390fd5b6113dd81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611c3590919063ffffffff16565b50600080828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905560028201600090556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050807f5b8046420884c4698df446ee47bb3971db3b7f1f959ff4f04a70b32b2873284160405160405180910390a250565b6114a63360026000848152602001908152602001600020611aa490919063ffffffff16565b6114e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114dc90612804565b60405180910390fd5b600061150c3360026000858152602001908152602001600020611bcd90919063ffffffff16565b905060008111611551576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154890612aae565b60405180910390fd5b6115763360026000858152602001908152602001600020611ad490919063ffffffff16565b503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156115bd573d6000803e3d6000fd5b505050565b60006115d082600001611c4f565b9050919050565b60006115e68360000183611c60565b60001c905092915050565b60008060008084815260200190815260200160002060010154119050919050565b600061162082600001611c8b565b9050919050565b60008060008061163a8660000186611ca0565b915091508160001c8160001c9350935050509250929050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639a22d0ea846040518263ffffffff1660e01b81526004016116b09190612429565b602060405180830381865afa1580156116cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f19190612be1565b905060008111611736576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172d90612c80565b60405180910390fd5b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b7121f8856040518263ffffffff1660e01b81526004016117939190612429565b602060405180830381865afa1580156117b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d49190612911565b905060006117eb8385611ce090919063ffffffff16565b9050600080600087815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166108fc6118548488611cf690919063ffffffff16565b9081150290604051600060405180830381858888f1935050505015801561187f573d6000803e3d6000fd5b508273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156118c6573d6000803e3d6000fd5b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e60008089815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16336000808b8152602001908152602001600020600101546040518463ffffffff1660e01b815260040161197093929190612ca0565b600060405180830381600087803b15801561198a57600080fd5b505af115801561199e573d6000803e3d6000fd5b50505050611a2886600160008060008b815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611c3590919063ffffffff16565b50600080878152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905560028201600090556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050505050505050565b6000611acc836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611d0c565b905092915050565b6000611afc836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611d2c565b905092915050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401611b619190612429565b602060405180830381865afa925050508015611b9b57506040513d601f19601f82011682018060405250810190611b989190612911565b60015b611ba85760009050611bae565b50600190505b919050565b6000611bc5836000018360001b611d65565b905092915050565b6000611bf5836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611dd5565b60001c905092915050565b6000611c2c846000018473ffffffffffffffffffffffffffffffffffffffff1660001b8460001b611e51565b90509392505050565b6000611c47836000018360001b611e8c565b905092915050565b600081600001805490509050919050565b6000826000018281548110611c7857611c77612473565b5b9060005260206000200154905092915050565b6000611c9982600001611fa0565b9050919050565b6000806000611cbb8486600001611fb590919063ffffffff16565b9050808560020160008381526020019081526020016000205492509250509250929050565b60008183611cee9190612cd7565b905092915050565b60008183611d049190612d19565b905092915050565b6000611d248284600001611fcc90919063ffffffff16565b905092915050565b600082600201600083815260200190815260200160002060009055611d5d8284600001611fe390919063ffffffff16565b905092915050565b6000611d718383611ffa565b611dca578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050611dcf565b600090505b92915050565b6000808360020160008481526020019081526020016000205490506000801b81141580611e085750611e078484611d0c565b5b611e47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3e90612d99565b60405180910390fd5b8091505092915050565b60008184600201600085815260200190815260200160002081905550611e83838560000161201d90919063ffffffff16565b90509392505050565b60008083600101600084815260200190815260200160002054905060008114611f94576000600182611ebe9190612d19565b9050600060018660000180549050611ed69190612d19565b9050818114611f45576000866000018281548110611ef757611ef6612473565b5b9060005260206000200154905080876000018481548110611f1b57611f1a612473565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480611f5957611f58612db9565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611f9a565b60009150505b92915050565b6000611fae82600001611c4f565b9050919050565b6000611fc48360000183611c60565b905092915050565b6000611fdb8360000183611ffa565b905092915050565b6000611ff28360000183611e8c565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600061202c8360000183611d65565b905092915050565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061209482612069565b9050919050565b6120a481612089565b81146120af57600080fd5b50565b6000813590506120c18161209b565b92915050565b6000602082840312156120dd576120dc612064565b5b60006120eb848285016120b2565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b61213381612120565b82525050565b6000612145838361212a565b60208301905092915050565b6000602082019050919050565b6000612169826120f4565b61217381856120ff565b935061217e83612110565b8060005b838110156121af5781516121968882612139565b97506121a183612151565b925050600181019050612182565b5085935050505092915050565b600060208201905081810360008301526121d6818461215e565b905092915050565b6121e781612120565b81146121f257600080fd5b50565b600081359050612204816121de565b92915050565b6000602082840312156122205761221f612064565b5b600061222e848285016121f5565b91505092915050565b61224081612089565b82525050565b61224f81612120565b82525050565b600060808201905061226a6000830187612237565b6122776020830186612246565b6122846040830185612246565b6122916060830184612237565b95945050505050565b600080604083850312156122b1576122b0612064565b5b60006122bf858286016121f5565b92505060206122d0858286016121f5565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61230f81612089565b82525050565b60408201600082015161232b6000850182612306565b50602082015161233e602085018261212a565b50505050565b60006123508383612315565b60408301905092915050565b6000602082019050919050565b6000612374826122da565b61237e81856122e5565b9350612389836122f6565b8060005b838110156123ba5781516123a18882612344565b97506123ac8361235c565b92505060018101905061238d565b5085935050505092915050565b600060208201905081810360008301526123e18184612369565b905092915050565b60008060408385031215612400576123ff612064565b5b600061240e858286016121f5565b925050602061241f858286016120b2565b9150509250929050565b600060208201905061243e6000830184612246565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006124dc82612120565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361250e5761250d6124a2565b5b600182019050919050565b600082825260208201905092915050565b7f4e465420646f6573206e6f742065786973740000000000000000000000000000600082015250565b6000612560601283612519565b915061256b8261252a565b602082019050919050565b6000602082019050818103600083015261258f81612553565b9050919050565b7f4f6e6c79204e46542073656c6c65722063616e2075706461746520746865207060008201527f7269636500000000000000000000000000000000000000000000000000000000602082015250565b60006125f2602483612519565b91506125fd82612596565b604082019050919050565b60006020820190508181036000830152612621816125e5565b9050919050565b7f53656c6c65722063616e6e6f7420627579207468656972206f776e204e465400600082015250565b600061265e601f83612519565b915061266982612628565b602082019050919050565b6000602082019050818103600083015261268d81612651565b9050919050565b7f496e73756666696369656e742066756e64730000000000000000000000000000600082015250565b60006126ca601283612519565b91506126d582612694565b602082019050919050565b600060208201905081810360008301526126f9816126bd565b9050919050565b7f4f6e6c79207468652073656c6c65722063616e2061636365707420616e206f6660008201527f6665720000000000000000000000000000000000000000000000000000000000602082015250565b600061275c602383612519565b915061276782612700565b604082019050919050565b6000602082019050818103600083015261278b8161274f565b9050919050565b7f546865726520617265206e6f2070656e64696e67206f666665727320666f722060008201527f74686973204e4654000000000000000000000000000000000000000000000000602082015250565b60006127ee602883612519565b91506127f982612792565b604082019050919050565b6000602082019050818103600083015261281d816127e1565b9050919050565b7f50726963652063616e6e6f74206265207a65726f000000000000000000000000600082015250565b600061285a601483612519565b915061286582612824565b602082019050919050565b600060208201905081810360008301526128898161284d565b9050919050565b7f496e76616c6964204e4654000000000000000000000000000000000000000000600082015250565b60006128c6600b83612519565b91506128d182612890565b602082019050919050565b600060208201905081810360008301526128f5816128b9565b9050919050565b60008151905061290b8161209b565b92915050565b60006020828403121561292757612926612064565b5b6000612935848285016128fc565b91505092915050565b7f4e6f7420746865204e4654206f776e6572000000000000000000000000000000600082015250565b6000612974601183612519565b915061297f8261293e565b602082019050919050565b600060208201905081810360008301526129a381612967565b9050919050565b7f53656c6c65722063616e6e6f74206d616b6520616e206f6666657220666f722060008201527f7468656972206f776e204e465400000000000000000000000000000000000000602082015250565b6000612a06602d83612519565b9150612a11826129aa565b604082019050919050565b60006020820190508181036000830152612a35816129f9565b9050919050565b7f4f666665722076616c7565206d7573742062652067726561746572207468616e60008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000612a98602583612519565b9150612aa382612a3c565b604082019050919050565b60006020820190508181036000830152612ac781612a8b565b9050919050565b7f4f666665722076616c7565206d75737420626520686967686572207468616e2060008201527f6578697374696e67206f66666572000000000000000000000000000000000000602082015250565b6000612b2a602e83612519565b9150612b3582612ace565b604082019050919050565b60006020820190508181036000830152612b5981612b1d565b9050919050565b7f4f6e6c792073656c6c65722063616e2072656d6f7665204e4654000000000000600082015250565b6000612b96601a83612519565b9150612ba182612b60565b602082019050919050565b60006020820190508181036000830152612bc581612b89565b9050919050565b600081519050612bdb816121de565b92915050565b600060208284031215612bf757612bf6612064565b5b6000612c0584828501612bcc565b91505092915050565b7f526f79616c746965732070657263656e74206d7573742062652067726561746560008201527f72207468616e207a65726f2e0000000000000000000000000000000000000000602082015250565b6000612c6a602c83612519565b9150612c7582612c0e565b604082019050919050565b60006020820190508181036000830152612c9981612c5d565b9050919050565b6000606082019050612cb56000830186612237565b612cc26020830185612237565b612ccf6040830184612246565b949350505050565b6000612ce282612120565b9150612ced83612120565b9250828202612cfb81612120565b91508282048414831517612d1257612d116124a2565b5b5092915050565b6000612d2482612120565b9150612d2f83612120565b9250828203905081811115612d4757612d466124a2565b5b92915050565b7f456e756d657261626c654d61703a206e6f6e6578697374656e74206b65790000600082015250565b6000612d83601e83612519565b9150612d8e82612d4d565b602082019050919050565b60006020820190508181036000830152612db281612d76565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea264697066735822122076de6f44bc2c89d60063cd383772caf637f4ec46d7aac25c2cab9d14b670538a64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x918D407D GT PUSH2 0x64 JUMPI DUP1 PUSH4 0x918D407D EQ PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x92976179 EQ PUSH2 0x1C9 JUMPI DUP1 PUSH4 0x94383F14 EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0x9A2F6474 EQ PUSH2 0x22F JUMPI DUP1 PUSH4 0xEE4739CB EQ PUSH2 0x24B JUMPI DUP1 PUSH4 0xEF706ADF EQ PUSH2 0x274 JUMPI PUSH2 0x9C JUMP JUMPDEST DUP1 PUSH4 0x9DE4E06 EQ PUSH2 0xA1 JUMPI DUP1 PUSH4 0x265AA621 EQ PUSH2 0xDE JUMPI DUP1 PUSH4 0x4AC0123D EQ PUSH2 0x11E JUMPI DUP1 PUSH4 0x50DC1867 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x51ED8288 EQ PUSH2 0x184 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x20C7 JUMP JUMPDEST PUSH2 0x29D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD5 SWAP2 SWAP1 PUSH2 0x21BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x105 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x100 SWAP2 SWAP1 PUSH2 0x220A JUMP JUMPDEST PUSH2 0x410 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x115 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2255 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x145 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x140 SWAP2 SWAP1 PUSH2 0x229A JUMP JUMPDEST PUSH2 0x480 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x153 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x169 SWAP2 SWAP1 PUSH2 0x220A JUMP JUMPDEST PUSH2 0x5C1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x17B SWAP2 SWAP1 PUSH2 0x23C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x199 SWAP2 SWAP1 PUSH2 0x220A JUMP JUMPDEST PUSH2 0x6EE JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C2 SWAP2 SWAP1 PUSH2 0x23E9 JUMP JUMPDEST PUSH2 0x90B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x220A JUMP JUMPDEST PUSH2 0xB5B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x228 SWAP2 SWAP1 PUSH2 0x229A JUMP JUMPDEST PUSH2 0xB8F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x249 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x244 SWAP2 SWAP1 PUSH2 0x220A JUMP JUMPDEST PUSH2 0xED3 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x257 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x272 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x26D SWAP2 SWAP1 PUSH2 0x220A JUMP JUMPDEST PUSH2 0x12E9 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x296 SWAP2 SWAP1 PUSH2 0x220A JUMP JUMPDEST PUSH2 0x1481 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2E8 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x15C2 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x301 JUMPI PUSH2 0x300 PUSH2 0x2444 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x32F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST PUSH2 0x37C PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x15C2 JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x406 JUMPI PUSH2 0x3D4 DUP2 PUSH1 0x1 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x15D7 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3E7 JUMPI PUSH2 0x3E6 PUSH2 0x2473 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP1 DUP1 PUSH2 0x3FE SWAP1 PUSH2 0x24D1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x335 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP5 JUMP JUMPDEST PUSH2 0x489 DUP3 PUSH2 0x15F1 JUMP JUMPDEST PUSH2 0x4C8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4BF SWAP1 PUSH2 0x2576 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x56B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x562 SWAP1 PUSH2 0x2608 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP DUP2 PUSH32 0x2847CFE8AFE8BCD9AC540F0259739697EA019F65D44C8E76C8796B8CE52F7C31 DUP3 PUSH1 0x40 MLOAD PUSH2 0x5B5 SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x5E0 PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1612 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x5F9 JUMPI PUSH2 0x5F8 PUSH2 0x2444 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x632 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x61F PUSH2 0x2034 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x617 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST PUSH2 0x653 PUSH1 0x2 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1612 JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x6E4 JUMPI PUSH1 0x0 DUP1 PUSH2 0x682 DUP4 PUSH1 0x2 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1627 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE POP DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6C4 JUMPI PUSH2 0x6C3 PUSH2 0x2473 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP POP POP DUP1 DUP1 PUSH2 0x6DC SWAP1 PUSH2 0x24D1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x638 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x6F7 DUP2 PUSH2 0x15F1 JUMP JUMPDEST PUSH2 0x736 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x72D SWAP1 PUSH2 0x2576 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x7D9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7D0 SWAP1 PUSH2 0x2674 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD CALLVALUE LT ISZERO PUSH2 0x831 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x828 SWAP1 PUSH2 0x26E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x8A4 DUP2 PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x1653 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH32 0x67BA49958F8B7A80047DFA2BDAD61CA2B10D970A32898C2F345A7B20079BA037 PUSH1 0x0 DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x900 SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH2 0x914 DUP3 PUSH2 0x15F1 JUMP JUMPDEST PUSH2 0x953 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x94A SWAP1 PUSH2 0x2576 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x9F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9ED SWAP1 PUSH2 0x2772 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA1B DUP2 PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1AA4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xA5A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA51 SWAP1 PUSH2 0x2804 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0xAD3 DUP2 PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1AD4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP PUSH2 0xAF3 DUP3 PUSH1 0x0 DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x1653 JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH32 0x67BA49958F8B7A80047DFA2BDAD61CA2B10D970A32898C2F345A7B20079BA037 PUSH1 0x0 DUP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0xB4F SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB66 DUP3 PUSH2 0x15F1 JUMP JUMPDEST PUSH2 0xB71 JUMPI PUSH1 0x0 PUSH2 0xB88 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0xBD2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBC9 SWAP1 PUSH2 0x2870 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xBDB DUP3 PUSH2 0x1B04 JUMP JUMPDEST PUSH2 0xC1A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC11 SWAP1 PUSH2 0x28DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6352211E DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC77 SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC94 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCB8 SWAP2 SWAP1 PUSH2 0x2911 JUMP JUMPDEST SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD28 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD1F SWAP1 PUSH2 0x298A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP PUSH1 0x0 DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH2 0xE7E DUP4 PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1BB3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x5F9C03DE076F5063CD3EBCFE8EF7AA8AF378E4B35A83C77BA9777E97083879A2 DUP5 PUSH1 0x40 MLOAD PUSH2 0xEC6 SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xEDC DUP2 PUSH2 0x15F1 JUMP JUMPDEST PUSH2 0xF1B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF12 SWAP1 PUSH2 0x2576 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xFBE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFB5 SWAP1 PUSH2 0x2A1C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLVALUE GT PUSH2 0x1001 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFF8 SWAP1 PUSH2 0x2AAE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1026 CALLER PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1AA4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0x1175 JUMPI PUSH1 0x0 PUSH2 0x1052 CALLER PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1BCD SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x1063 JUMPI POP DUP1 CALLVALUE GT JUMPDEST ISZERO PUSH2 0x1134 JUMPI PUSH1 0x0 DUP2 SWAP1 POP CALLVALUE SWAP2 POP PUSH2 0x1097 CALLER DUP4 PUSH1 0x2 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1C00 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x10DE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xBDF1E76C2BA2A5C85B93BF78678A4A3B06D63B18422612DAC8D7D5249ED46714 CALLVALUE PUSH1 0x40 MLOAD PUSH2 0x1126 SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH2 0x116F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1166 SWAP1 PUSH2 0x2B40 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x12E6 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD CALLVALUE LT PUSH2 0x126D JUMPI CALLER PUSH1 0x0 DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x1204 DUP2 PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x1653 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH32 0x67BA49958F8B7A80047DFA2BDAD61CA2B10D970A32898C2F345A7B20079BA037 PUSH1 0x0 DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x1260 SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x12E5 JUMP JUMPDEST PUSH2 0x1294 CALLER CALLVALUE PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1C00 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH32 0xBDF1E76C2BA2A5C85B93BF78678A4A3B06D63B18422612DAC8D7D5249ED46714 CALLVALUE PUSH1 0x40 MLOAD PUSH2 0x12DC SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST JUMPDEST POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x138C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1383 SWAP1 PUSH2 0x2BAC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x13DD DUP2 PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1C35 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP PUSH1 0x0 DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE POP POP DUP1 PUSH32 0x5B8046420884C4698DF446EE47BB3971DB3B7F1F959FF4F04A70B32B28732841 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x14A6 CALLER PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1AA4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x14E5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14DC SWAP1 PUSH2 0x2804 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x150C CALLER PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1BCD SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x1551 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1548 SWAP1 PUSH2 0x2AAE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1576 CALLER PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1AD4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x15BD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15D0 DUP3 PUSH1 0x0 ADD PUSH2 0x1C4F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15E6 DUP4 PUSH1 0x0 ADD DUP4 PUSH2 0x1C60 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1620 DUP3 PUSH1 0x0 ADD PUSH2 0x1C8B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x163A DUP7 PUSH1 0x0 ADD DUP7 PUSH2 0x1CA0 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x0 SHR DUP2 PUSH1 0x0 SHR SWAP4 POP SWAP4 POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9A22D0EA DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16B0 SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x16CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x16F1 SWAP2 SWAP1 PUSH2 0x2BE1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x1736 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x172D SWAP1 PUSH2 0x2C80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5B7121F8 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1793 SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x17B0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x17D4 SWAP2 SWAP1 PUSH2 0x2911 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x17EB DUP4 DUP6 PUSH2 0x1CE0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC PUSH2 0x1854 DUP5 DUP9 PUSH2 0x1CF6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x187F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP4 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x18C6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42842E0E PUSH1 0x0 DUP1 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH1 0x0 DUP1 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1970 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2CA0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x198A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x199E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x1A28 DUP7 PUSH1 0x1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1C35 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP PUSH1 0x0 DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1ACC DUP4 PUSH1 0x0 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SHL PUSH2 0x1D0C JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AFC DUP4 PUSH1 0x0 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SHL PUSH2 0x1D2C JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6352211E DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B61 SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1B9B JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B98 SWAP2 SWAP1 PUSH2 0x2911 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1BA8 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x1BAE JUMP JUMPDEST POP PUSH1 0x1 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BC5 DUP4 PUSH1 0x0 ADD DUP4 PUSH1 0x0 SHL PUSH2 0x1D65 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BF5 DUP4 PUSH1 0x0 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SHL PUSH2 0x1DD5 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C2C DUP5 PUSH1 0x0 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SHL DUP5 PUSH1 0x0 SHL PUSH2 0x1E51 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C47 DUP4 PUSH1 0x0 ADD DUP4 PUSH1 0x0 SHL PUSH2 0x1E8C JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1C78 JUMPI PUSH2 0x1C77 PUSH2 0x2473 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C99 DUP3 PUSH1 0x0 ADD PUSH2 0x1FA0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1CBB DUP5 DUP7 PUSH1 0x0 ADD PUSH2 0x1FB5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 DUP6 PUSH1 0x2 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x1CEE SWAP2 SWAP1 PUSH2 0x2CD7 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x1D04 SWAP2 SWAP1 PUSH2 0x2D19 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D24 DUP3 DUP5 PUSH1 0x0 ADD PUSH2 0x1FCC SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x2 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH2 0x1D5D DUP3 DUP5 PUSH1 0x0 ADD PUSH2 0x1FE3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D71 DUP4 DUP4 PUSH2 0x1FFA JUMP JUMPDEST PUSH2 0x1DCA JUMPI DUP3 PUSH1 0x0 ADD DUP3 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE DUP3 PUSH1 0x0 ADD DUP1 SLOAD SWAP1 POP DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x1 SWAP1 POP PUSH2 0x1DCF JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x2 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 DUP1 SHL DUP2 EQ ISZERO DUP1 PUSH2 0x1E08 JUMPI POP PUSH2 0x1E07 DUP5 DUP5 PUSH2 0x1D0C JUMP JUMPDEST JUMPDEST PUSH2 0x1E47 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E3E SWAP1 PUSH2 0x2D99 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 PUSH1 0x2 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x1E83 DUP4 DUP6 PUSH1 0x0 ADD PUSH2 0x201D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 DUP2 EQ PUSH2 0x1F94 JUMPI PUSH1 0x0 PUSH1 0x1 DUP3 PUSH2 0x1EBE SWAP2 SWAP1 PUSH2 0x2D19 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP7 PUSH1 0x0 ADD DUP1 SLOAD SWAP1 POP PUSH2 0x1ED6 SWAP2 SWAP1 PUSH2 0x2D19 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 EQ PUSH2 0x1F45 JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1EF7 JUMPI PUSH2 0x1EF6 PUSH2 0x2473 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x1F1B JUMPI PUSH2 0x1F1A PUSH2 0x2473 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP2 SWAP1 SSTORE POP DUP4 DUP8 PUSH1 0x1 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST DUP6 PUSH1 0x0 ADD DUP1 SLOAD DUP1 PUSH2 0x1F59 JUMPI PUSH2 0x1F58 PUSH2 0x2DB9 JUMP JUMPDEST JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x1F9A JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FAE DUP3 PUSH1 0x0 ADD PUSH2 0x1C4F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FC4 DUP4 PUSH1 0x0 ADD DUP4 PUSH2 0x1C60 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FDB DUP4 PUSH1 0x0 ADD DUP4 PUSH2 0x1FFA JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FF2 DUP4 PUSH1 0x0 ADD DUP4 PUSH2 0x1E8C JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ ISZERO SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x202C DUP4 PUSH1 0x0 ADD DUP4 PUSH2 0x1D65 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2094 DUP3 PUSH2 0x2069 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x20A4 DUP2 PUSH2 0x2089 JUMP JUMPDEST DUP2 EQ PUSH2 0x20AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x20C1 DUP2 PUSH2 0x209B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x20DD JUMPI PUSH2 0x20DC PUSH2 0x2064 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x20EB DUP5 DUP3 DUP6 ADD PUSH2 0x20B2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2133 DUP2 PUSH2 0x2120 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2145 DUP4 DUP4 PUSH2 0x212A JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2169 DUP3 PUSH2 0x20F4 JUMP JUMPDEST PUSH2 0x2173 DUP2 DUP6 PUSH2 0x20FF JUMP JUMPDEST SWAP4 POP PUSH2 0x217E DUP4 PUSH2 0x2110 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x21AF JUMPI DUP2 MLOAD PUSH2 0x2196 DUP9 DUP3 PUSH2 0x2139 JUMP JUMPDEST SWAP8 POP PUSH2 0x21A1 DUP4 PUSH2 0x2151 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2182 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x21D6 DUP2 DUP5 PUSH2 0x215E JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x21E7 DUP2 PUSH2 0x2120 JUMP JUMPDEST DUP2 EQ PUSH2 0x21F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2204 DUP2 PUSH2 0x21DE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2220 JUMPI PUSH2 0x221F PUSH2 0x2064 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x222E DUP5 DUP3 DUP6 ADD PUSH2 0x21F5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2240 DUP2 PUSH2 0x2089 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x224F DUP2 PUSH2 0x2120 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x226A PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x2237 JUMP JUMPDEST PUSH2 0x2277 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2246 JUMP JUMPDEST PUSH2 0x2284 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2246 JUMP JUMPDEST PUSH2 0x2291 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x2237 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x22B1 JUMPI PUSH2 0x22B0 PUSH2 0x2064 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x22BF DUP6 DUP3 DUP7 ADD PUSH2 0x21F5 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x22D0 DUP6 DUP3 DUP7 ADD PUSH2 0x21F5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x230F DUP2 PUSH2 0x2089 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x232B PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x2306 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x233E PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x212A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2350 DUP4 DUP4 PUSH2 0x2315 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2374 DUP3 PUSH2 0x22DA JUMP JUMPDEST PUSH2 0x237E DUP2 DUP6 PUSH2 0x22E5 JUMP JUMPDEST SWAP4 POP PUSH2 0x2389 DUP4 PUSH2 0x22F6 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x23BA JUMPI DUP2 MLOAD PUSH2 0x23A1 DUP9 DUP3 PUSH2 0x2344 JUMP JUMPDEST SWAP8 POP PUSH2 0x23AC DUP4 PUSH2 0x235C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x238D JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x23E1 DUP2 DUP5 PUSH2 0x2369 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2400 JUMPI PUSH2 0x23FF PUSH2 0x2064 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x240E DUP6 DUP3 DUP7 ADD PUSH2 0x21F5 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x241F DUP6 DUP3 DUP7 ADD PUSH2 0x20B2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x243E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2246 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x24DC DUP3 PUSH2 0x2120 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x250E JUMPI PUSH2 0x250D PUSH2 0x24A2 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E465420646F6573206E6F742065786973740000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2560 PUSH1 0x12 DUP4 PUSH2 0x2519 JUMP JUMPDEST SWAP2 POP PUSH2 0x256B DUP3 PUSH2 0x252A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x258F DUP2 PUSH2 0x2553 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F6E6C79204E46542073656C6C65722063616E20757064617465207468652070 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7269636500000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25F2 PUSH1 0x24 DUP4 PUSH2 0x2519 JUMP JUMPDEST SWAP2 POP PUSH2 0x25FD DUP3 PUSH2 0x2596 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2621 DUP2 PUSH2 0x25E5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x53656C6C65722063616E6E6F7420627579207468656972206F776E204E465400 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x265E PUSH1 0x1F DUP4 PUSH2 0x2519 JUMP JUMPDEST SWAP2 POP PUSH2 0x2669 DUP3 PUSH2 0x2628 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x268D DUP2 PUSH2 0x2651 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E73756666696369656E742066756E64730000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26CA PUSH1 0x12 DUP4 PUSH2 0x2519 JUMP JUMPDEST SWAP2 POP PUSH2 0x26D5 DUP3 PUSH2 0x2694 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x26F9 DUP2 PUSH2 0x26BD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F6E6C79207468652073656C6C65722063616E2061636365707420616E206F66 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6665720000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x275C PUSH1 0x23 DUP4 PUSH2 0x2519 JUMP JUMPDEST SWAP2 POP PUSH2 0x2767 DUP3 PUSH2 0x2700 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x278B DUP2 PUSH2 0x274F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x546865726520617265206E6F2070656E64696E67206F666665727320666F7220 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x74686973204E4654000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27EE PUSH1 0x28 DUP4 PUSH2 0x2519 JUMP JUMPDEST SWAP2 POP PUSH2 0x27F9 DUP3 PUSH2 0x2792 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x281D DUP2 PUSH2 0x27E1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x50726963652063616E6E6F74206265207A65726F000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x285A PUSH1 0x14 DUP4 PUSH2 0x2519 JUMP JUMPDEST SWAP2 POP PUSH2 0x2865 DUP3 PUSH2 0x2824 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2889 DUP2 PUSH2 0x284D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E76616C6964204E4654000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28C6 PUSH1 0xB DUP4 PUSH2 0x2519 JUMP JUMPDEST SWAP2 POP PUSH2 0x28D1 DUP3 PUSH2 0x2890 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x28F5 DUP2 PUSH2 0x28B9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x290B DUP2 PUSH2 0x209B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2927 JUMPI PUSH2 0x2926 PUSH2 0x2064 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2935 DUP5 DUP3 DUP6 ADD PUSH2 0x28FC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E6F7420746865204E4654206F776E6572000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2974 PUSH1 0x11 DUP4 PUSH2 0x2519 JUMP JUMPDEST SWAP2 POP PUSH2 0x297F DUP3 PUSH2 0x293E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x29A3 DUP2 PUSH2 0x2967 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x53656C6C65722063616E6E6F74206D616B6520616E206F6666657220666F7220 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7468656972206F776E204E465400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A06 PUSH1 0x2D DUP4 PUSH2 0x2519 JUMP JUMPDEST SWAP2 POP PUSH2 0x2A11 DUP3 PUSH2 0x29AA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A35 DUP2 PUSH2 0x29F9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F666665722076616C7565206D7573742062652067726561746572207468616E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A98 PUSH1 0x25 DUP4 PUSH2 0x2519 JUMP JUMPDEST SWAP2 POP PUSH2 0x2AA3 DUP3 PUSH2 0x2A3C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2AC7 DUP2 PUSH2 0x2A8B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F666665722076616C7565206D75737420626520686967686572207468616E20 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6578697374696E67206F66666572000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B2A PUSH1 0x2E DUP4 PUSH2 0x2519 JUMP JUMPDEST SWAP2 POP PUSH2 0x2B35 DUP3 PUSH2 0x2ACE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B59 DUP2 PUSH2 0x2B1D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F6E6C792073656C6C65722063616E2072656D6F7665204E4654000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B96 PUSH1 0x1A DUP4 PUSH2 0x2519 JUMP JUMPDEST SWAP2 POP PUSH2 0x2BA1 DUP3 PUSH2 0x2B60 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2BC5 DUP2 PUSH2 0x2B89 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2BDB DUP2 PUSH2 0x21DE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2BF7 JUMPI PUSH2 0x2BF6 PUSH2 0x2064 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2C05 DUP5 DUP3 DUP6 ADD PUSH2 0x2BCC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x526F79616C746965732070657263656E74206D75737420626520677265617465 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72207468616E207A65726F2E0000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C6A PUSH1 0x2C DUP4 PUSH2 0x2519 JUMP JUMPDEST SWAP2 POP PUSH2 0x2C75 DUP3 PUSH2 0x2C0E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C99 DUP2 PUSH2 0x2C5D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2CB5 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2237 JUMP JUMPDEST PUSH2 0x2CC2 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2237 JUMP JUMPDEST PUSH2 0x2CCF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2246 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CE2 DUP3 PUSH2 0x2120 JUMP JUMPDEST SWAP2 POP PUSH2 0x2CED DUP4 PUSH2 0x2120 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x2CFB DUP2 PUSH2 0x2120 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x2D12 JUMPI PUSH2 0x2D11 PUSH2 0x24A2 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D24 DUP3 PUSH2 0x2120 JUMP JUMPDEST SWAP2 POP PUSH2 0x2D2F DUP4 PUSH2 0x2120 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x2D47 JUMPI PUSH2 0x2D46 PUSH2 0x24A2 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x456E756D657261626C654D61703A206E6F6E6578697374656E74206B65790000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D83 PUSH1 0x1E DUP4 PUSH2 0x2519 JUMP JUMPDEST SWAP2 POP PUSH2 0x2D8E DUP3 PUSH2 0x2D4D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2DB2 DUP2 PUSH2 0x2D76 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH23 0xDE6F44BC2C89D60063CD383772CAF637F4EC46D7AAC25C 0x2C 0xAB SWAP14 EQ 0xB6 PUSH17 0x538A64736F6C6343000811003300000000 ","sourceMap":"281:8627:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8318:318;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;761:35;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;3045:405;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;7894:418;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7351:537;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6262:622;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;8642:141;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1929:802;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4600:1656;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2741:246;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6890:398;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;8318:318;8383:16;8409:23;8449:30;:12;:21;8462:7;8449:21;;;;;;;;;;;;;;;:28;:30::i;:::-;8435:45;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8409:71;;8493:9;8488:121;8512:30;:12;:21;8525:7;8512:21;;;;;;;;;;;;;;;:28;:30::i;:::-;8508:1;:34;8488:121;;;8573:27;8598:1;8573:12;:21;8586:7;8573:21;;;;;;;;;;;;;;;:24;;:27;;;;:::i;:::-;8561:6;8568:1;8561:9;;;;;;;;:::i;:::-;;;;;;;:39;;;;;8544:3;;;;;:::i;:::-;;;;8488:121;;;;8623:6;8616:13;;;8318:318;;;:::o;761:35::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3045:405::-;3130:21;3142:8;3130:11;:21::i;:::-;3122:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;3206:4;:14;3211:8;3206:14;;;;;;;;;;;:21;;;;;;;;;;;;3192:35;;:10;:35;;;3184:84;;;;;;;;;;;;:::i;:::-;;;;;;;;;3342:6;3319:4;:14;3324:8;3319:14;;;;;;;;;;;:20;;:29;;;;3426:8;3410:33;3436:6;3410:33;;;;;;:::i;:::-;;;;;;;;3045:405;;:::o;7894:418::-;7961:14;7987:21;8023:32;:13;:23;8037:8;8023:23;;;;;;;;;;;:30;:32::i;:::-;8011:45;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;7987:69;;8071:9;8066:217;8090:32;:13;:23;8104:8;8090:23;;;;;;;;;;;:30;:32::i;:::-;8086:1;:36;8066:217;;;8144:15;8161:13;8178:29;8205:1;8178:13;:23;8192:8;8178:23;;;;;;;;;;;:26;;:29;;;;:::i;:::-;8143:64;;;;8233:39;;;;;;;;8249:7;8233:39;;;;;;8265:5;8233:39;;;8221:6;8228:1;8221:9;;;;;;;;:::i;:::-;;;;;;;:51;;;;8129:154;;8124:3;;;;;:::i;:::-;;;;8066:217;;;;8299:6;8292:13;;;7894:418;;;:::o;7351:537::-;7420:21;7432:8;7420:11;:21::i;:::-;7412:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;7496:4;:14;7501:8;7496:14;;;;;;;;;;;:21;;;;;;;;;;;;7482:35;;:10;:35;;;7474:79;;;;;;;;;;;;:::i;:::-;;;;;;;;;7584:4;:14;7589:8;7584:14;;;;;;;;;;;:20;;;7571:9;:33;;7563:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;7661:10;7638:4;:14;7643:8;7638:14;;;;;;;;;;;:20;;;:33;;;;;;;;;;;;;;;;;;7716:58;7743:8;7753:4;:14;7758:8;7753:14;;;;;;;;;;;:20;;;7716:26;:58::i;:::-;7835:10;7790:56;;7803:8;7790:56;7813:4;:14;7818:8;7813:14;;;;;;;;;;;:20;;;7790:56;;;;;;:::i;:::-;;;;;;;;7351:537;:::o;6262:622::-;6344:21;6356:8;6344:11;:21::i;:::-;6336:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;6420:4;:14;6425:8;6420:14;;;;;;;;;;;:21;;;;;;;;;;;;6406:35;;:10;:35;;;6398:83;;;;;;;;;;;;:::i;:::-;;;;;;;;;6499:40;6532:6;6499:13;:23;6513:8;6499:23;;;;;;;;;;;:32;;:40;;;;:::i;:::-;6491:93;;;;;;;;;;;;:::i;:::-;;;;;;;;;6618:6;6595:4;:14;6600:8;6595:14;;;;;;;;;;;:20;;;:29;;;;;;;;;;;;;;;;;;6668:38;6699:6;6668:13;:23;6682:8;6668:23;;;;;;;;;;;:30;;:38;;;;:::i;:::-;;6716:58;6743:8;6753:4;:14;6758:8;6753:14;;;;;;;;;;;:20;;;6716:26;:58::i;:::-;6835:6;6790:52;;6803:8;6790:52;6813:4;:14;6818:8;6813:14;;;;;;;;;;;:20;;;6790:52;;;;;;:::i;:::-;;;;;;;;6262:622;;:::o;8642:141::-;8704:7;8728:21;8740:8;8728:11;:21::i;:::-;:48;;8775:1;8728:48;;;8752:4;:14;8757:8;8752:14;;;;;;;;;;;:20;;;8728:48;8721:55;;8642:141;;;:::o;1929:802::-;2016:1;2007:6;:10;1999:43;;;;;;;;;;;;:::i;:::-;;;;;;;;;2060:21;2072:8;2060:11;:21::i;:::-;2052:45;;;;;;;;;;;;:::i;:::-;;;;;;;;;2212:14;2229:16;;;;;;;;;;;:24;;;2254:8;2229:34;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2212:51;;2291:10;2281:20;;:6;:20;;;2273:50;;;;;;;;;;;;:::i;:::-;;;;;;;;;2395:136;;;;;;;;2421:10;2395:136;;;;;;2454:8;2395:136;;;;2483:6;2395:136;;;;2518:1;2395:136;;;;;2378:4;:14;2383:8;2378:14;;;;;;;;;;;:153;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2591:38;2620:8;2591:12;:24;2604:10;2591:24;;;;;;;;;;;;;;;:28;;:38;;;;:::i;:::-;;2705:10;2685:39;;2695:8;2685:39;2717:6;2685:39;;;;;;:::i;:::-;;;;;;;;1989:742;1929:802;;:::o;4600:1656::-;4672:21;4684:8;4672:11;:21::i;:::-;4664:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;4748:4;:14;4753:8;4748:14;;;;;;;;;;;:21;;;;;;;;;;;;4734:35;;:10;:35;;;4726:93;;;;;;;;;;;;:::i;:::-;;;;;;;;;4849:1;4837:9;:13;4829:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;4907:44;4940:10;4907:13;:23;4921:8;4907:23;;;;;;;;;;;:32;;:44;;;;:::i;:::-;4903:1347;;;4965:18;4986:39;5014:10;4986:13;:23;5000:8;4986:23;;;;;;;;;;;:27;;:39;;;;:::i;:::-;4965:60;;5057:1;5041:13;:17;:46;;;;;5074:13;5062:9;:25;5041:46;5037:589;;;5158:20;5181:13;5158:36;;5224:9;5208:25;;5247:54;5275:10;5287:13;5247;:23;5261:8;5247:23;;;;;;;;;;;:27;;:54;;;;;:::i;:::-;;5323:10;5315:28;;:42;5344:12;5315:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5429:10;5409:42;;5419:8;5409:42;5441:9;5409:42;;;;;;:::i;:::-;;;;;;;;5089:376;5037:589;;;5557:56;;;;;;;;;;:::i;:::-;;;;;;;;5037:589;4953:683;4903:1347;;;5671:4;:14;5676:8;5671:14;;;;;;;;;;;:20;;;5658:9;:33;5654:586;;5785:10;5762:4;:14;5767:8;5762:14;;;;;;;;;;;:20;;;:33;;;;;;;;;;;;;;;;;;5844:58;5871:8;5881:4;:14;5886:8;5881:14;;;;;;;;;;;:20;;;5844:26;:58::i;:::-;5967:10;5922:56;;5935:8;5922:56;5945:4;:14;5950:8;5945:14;;;;;;;;;;;:20;;;5922:56;;;;;;:::i;:::-;;;;;;;;5654:586;;;6115:50;6143:10;6155:9;6115:13;:23;6129:8;6115:23;;;;;;;;;;;:27;;:50;;;;;:::i;:::-;;6204:10;6184:42;;6194:8;6184:42;6216:9;6184:42;;;;;;:::i;:::-;;;;;;;;5654:586;4903:1347;4600:1656;:::o;2741:246::-;2828:10;2803:35;;:4;:14;2808:8;2803:14;;;;;;;;;;;:21;;;;;;;;;;;;:35;;;2795:74;;;;;;;;;;;;:::i;:::-;;;;;;;;;2877:41;2909:8;2877:12;:24;2890:10;2877:24;;;;;;;;;;;;;;;:31;;:41;;;;:::i;:::-;;2933:4;:14;2938:8;2933:14;;;;;;;;;;;;2926:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2971:8;2960:20;;;;;;;;;;2741:246;:::o;6890:398::-;6954:44;6987:10;6954:13;:23;6968:8;6954:23;;;;;;;;;;;:32;;:44;;;;:::i;:::-;6946:97;;;;;;;;;;;;:::i;:::-;;;;;;;;;7051:18;7072:39;7100:10;7072:13;:23;7086:8;7072:23;;;;;;;;;;;:27;;:39;;;;:::i;:::-;7051:60;;7140:1;7127:10;:14;7119:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;7191:42;7222:10;7191:13;:23;7205:8;7191:23;;;;;;;;;;;:30;;:42;;;;:::i;:::-;;7249:10;7241:28;;:40;7270:10;7241:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6938:350;6890:398;:::o;11523:112:15:-;11583:7;11609:19;11617:3;:10;;11609:7;:19::i;:::-;11602:26;;11523:112;;;:::o;11977:135::-;12048:7;12082:22;12086:3;:10;;12098:5;12082:3;:22::i;:::-;12074:31;;12067:38;;11977:135;;;;:::o;8789:116:16:-;8851:4;8897:1;8872:4;:14;8877:8;8872:14;;;;;;;;;;;:22;;;:26;8865:33;;8789:116;;;:::o;12614:120:14:-;12683:7;12709:18;12716:3;:10;;12709:6;:18::i;:::-;12702:25;;12614:120;;;:::o;13071:232::-;13151:7;13160;13180:11;13193:13;13210:21;13213:3;:10;;13225:5;13210:2;:21::i;:::-;13179:52;;;;13273:3;13265:12;;13289:5;13281:14;;13241:55;;;;;;13071:232;;;;;:::o;3456:1089:16:-;3543:24;3570:16;;;;;;;;;;;:36;;;3607:8;3570:46;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3543:73;;3680:1;3661:16;:20;3653:77;;;;;;;;;;;;:::i;:::-;;;;;;;;;3738:22;3763:16;;;;;;;;;;;:26;;;3790:8;3763:36;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3738:61;;3840:17;3860:28;3871:16;3860:6;:10;;:28;;;;:::i;:::-;3840:48;;3918:22;3951:4;:14;3956:8;3951:14;;;;;;;;;;;:21;;;;;;;;;;;;3918:55;;4032:6;:15;;:38;4048:21;4059:9;4048:6;:10;;:21;;;;:::i;:::-;4032:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4150:14;4142:32;;:43;4175:9;4142:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4236:16;;;;;;;;;;;:33;;;4270:4;:14;4275:8;4270:14;;;;;;;;;;;:21;;;;;;;;;;;;4293:10;4305:4;:14;4310:8;4305:14;;;;;;;;;;;:22;;;4236:92;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4370:52;4413:8;4370:12;:35;4383:4;:14;4388:8;4383:14;;;;;;;;;;;:21;;;;;;;;;;;;4370:35;;;;;;;;;;;;;;;:42;;:52;;;;:::i;:::-;;4485:4;:14;4490:8;4485:14;;;;;;;;;;;;4478:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3535:1010;;;;3456:1089;;:::o;12365:166:14:-;12449:4;12472:52;12481:3;:10;;12517:3;12501:21;;12493:30;;12472:8;:52::i;:::-;12465:59;;12365:166;;;;:::o;12129:157::-;12206:4;12229:50;12236:3;:10;;12272:3;12256:21;;12248:30;;12229:6;:50::i;:::-;12222:57;;12129:157;;;;:::o;1679:186:16:-;1738:4;1756:16;;;;;;;;;;;:24;;;1781:8;1756:34;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;1752:107;;1845:5;1838:12;;;;1752:107;;1808:4;1801:11;;1679:186;;;;:::o;10785:129:15:-;10852:4;10875:32;10880:3;:10;;10900:5;10892:14;;10875:4;:32::i;:::-;10868:39;;10785:129;;;;:::o;13833:168:14:-;13912:7;13946:47;13950:3;:10;;13986:3;13970:21;;13962:30;;13946:3;:47::i;:::-;13938:56;;13931:63;;13833:168;;;;:::o;11758:212::-;11877:4;11900:63;11904:3;:10;;11940:3;11924:21;;11916:30;;11956:5;11948:14;;11900:3;:63::i;:::-;11893:70;;11758:212;;;;;:::o;11082:135:15:-;11152:4;11175:35;11183:3;:10;;11203:5;11195:14;;11175:7;:35::i;:::-;11168:42;;11082:135;;;;:::o;4455:107::-;4511:7;4537:3;:11;;:18;;;;4530:25;;4455:107;;;:::o;4904:118::-;4971:7;4997:3;:11;;5009:5;4997:18;;;;;;;;:::i;:::-;;;;;;;;;;4990:25;;4904:118;;;;:::o;3380:123:14:-;3452:7;3478:18;:3;:9;;:16;:18::i;:::-;3471:25;;3380:123;;;:::o;3856:191::-;3939:7;3948;3967:11;3981:19;3994:5;3981:3;:9;;:12;;:19;;;;:::i;:::-;3967:33;;4018:3;4023;:11;;:16;4035:3;4023:16;;;;;;;;;;;;4010:30;;;;;3856:191;;;;;:::o;3465:96:13:-;3523:7;3553:1;3549;:5;;;;:::i;:::-;3542:12;;3465:96;;;;:::o;3122:::-;3180:7;3210:1;3206;:5;;;;:::i;:::-;3199:12;;3122:96;;;;:::o;3150:140:14:-;3237:4;3260:23;3279:3;3260;:9;;:18;;:23;;;;:::i;:::-;3253:30;;3150:140;;;;:::o;2907:164::-;2987:4;3010:3;:11;;:16;3022:3;3010:16;;;;;;;;;;;3003:23;;;3043:21;3060:3;3043;:9;;:16;;:21;;;;:::i;:::-;3036:28;;2907:164;;;;:::o;2206:404:15:-;2269:4;2290:21;2300:3;2305:5;2290:9;:21::i;:::-;2285:319;;2327:3;:11;;2344:5;2327:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2507:3;:11;;:18;;;;2485:3;:12;;:19;2498:5;2485:19;;;;;;;;;;;:40;;;;2546:4;2539:11;;;;2285:319;2588:5;2581:12;;2206:404;;;;;:::o;4637:247:14:-;4719:7;4738:13;4754:3;:11;;:16;4766:3;4754:16;;;;;;;;;;;;4738:32;;4797:1;4788:10;;:5;:10;;:32;;;;4802:18;4811:3;4816;4802:8;:18::i;:::-;4788:32;4780:75;;;;;;;;;;;;:::i;:::-;;;;;;;;;4872:5;4865:12;;;4637:247;;;;:::o;2535:204::-;2657:4;2692:5;2673:3;:11;;:16;2685:3;2673:16;;;;;;;;;;;:24;;;;2714:18;2728:3;2714;:9;;:13;;:18;;;;:::i;:::-;2707:25;;2535:204;;;;;:::o;2778:1388:15:-;2844:4;2960:18;2981:3;:12;;:19;2994:5;2981:19;;;;;;;;;;;;2960:40;;3029:1;3015:10;:15;3011:1149;;3384:21;3421:1;3408:10;:14;;;;:::i;:::-;3384:38;;3436:17;3477:1;3456:3;:11;;:18;;;;:22;;;;:::i;:::-;3436:42;;3510:13;3497:9;:26;3493:398;;3543:17;3563:3;:11;;3575:9;3563:22;;;;;;;;:::i;:::-;;;;;;;;;;3543:42;;3714:9;3685:3;:11;;3697:13;3685:26;;;;;;;;:::i;:::-;;;;;;;;;:38;;;;3823:10;3797:3;:12;;:23;3810:9;3797:23;;;;;;;;;;;:36;;;;3525:366;3493:398;3969:3;:11;;:17;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4061:3;:12;;:19;4074:5;4061:19;;;;;;;;;;;4054:26;;;4102:4;4095:11;;;;;;;3011:1149;4144:5;4137:12;;;2778:1388;;;;;:::o;6631:115::-;6694:7;6720:19;6728:3;:10;;6720:7;:19::i;:::-;6713:26;;6631:115;;;:::o;7088:129::-;7162:7;7188:22;7192:3;:10;;7204:5;7188:3;:22::i;:::-;7181:29;;7088:129;;;;:::o;6412:138::-;6492:4;6515:28;6525:3;:10;;6537:5;6515:9;:28::i;:::-;6508:35;;6412:138;;;;:::o;6202:129::-;6275:4;6298:26;6306:3;:10;;6318:5;6298:7;:26::i;:::-;6291:33;;6202:129;;;;:::o;4247:127::-;4320:4;4366:1;4343:3;:12;;:19;4356:5;4343:19;;;;;;;;;;;;:24;;4336:31;;4247:127;;;;:::o;5911:123::-;5981:4;6004:23;6009:3;:10;;6021:5;6004:4;:23::i;:::-;5997:30;;5911:123;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;:::o;88:117:18:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:329::-;900:6;949:2;937:9;928:7;924:23;920:32;917:119;;;955:79;;:::i;:::-;917:119;1075:1;1100:53;1145:7;1136:6;1125:9;1121:22;1100:53;:::i;:::-;1090:63;;1046:117;841:329;;;;:::o;1176:114::-;1243:6;1277:5;1271:12;1261:22;;1176:114;;;:::o;1296:184::-;1395:11;1429:6;1424:3;1417:19;1469:4;1464:3;1460:14;1445:29;;1296:184;;;;:::o;1486:132::-;1553:4;1576:3;1568:11;;1606:4;1601:3;1597:14;1589:22;;1486:132;;;:::o;1624:77::-;1661:7;1690:5;1679:16;;1624:77;;;:::o;1707:108::-;1784:24;1802:5;1784:24;:::i;:::-;1779:3;1772:37;1707:108;;:::o;1821:179::-;1890:10;1911:46;1953:3;1945:6;1911:46;:::i;:::-;1989:4;1984:3;1980:14;1966:28;;1821:179;;;;:::o;2006:113::-;2076:4;2108;2103:3;2099:14;2091:22;;2006:113;;;:::o;2155:732::-;2274:3;2303:54;2351:5;2303:54;:::i;:::-;2373:86;2452:6;2447:3;2373:86;:::i;:::-;2366:93;;2483:56;2533:5;2483:56;:::i;:::-;2562:7;2593:1;2578:284;2603:6;2600:1;2597:13;2578:284;;;2679:6;2673:13;2706:63;2765:3;2750:13;2706:63;:::i;:::-;2699:70;;2792:60;2845:6;2792:60;:::i;:::-;2782:70;;2638:224;2625:1;2622;2618:9;2613:14;;2578:284;;;2582:14;2878:3;2871:10;;2279:608;;;2155:732;;;;:::o;2893:373::-;3036:4;3074:2;3063:9;3059:18;3051:26;;3123:9;3117:4;3113:20;3109:1;3098:9;3094:17;3087:47;3151:108;3254:4;3245:6;3151:108;:::i;:::-;3143:116;;2893:373;;;;:::o;3272:122::-;3345:24;3363:5;3345:24;:::i;:::-;3338:5;3335:35;3325:63;;3384:1;3381;3374:12;3325:63;3272:122;:::o;3400:139::-;3446:5;3484:6;3471:20;3462:29;;3500:33;3527:5;3500:33;:::i;:::-;3400:139;;;;:::o;3545:329::-;3604:6;3653:2;3641:9;3632:7;3628:23;3624:32;3621:119;;;3659:79;;:::i;:::-;3621:119;3779:1;3804:53;3849:7;3840:6;3829:9;3825:22;3804:53;:::i;:::-;3794:63;;3750:117;3545:329;;;;:::o;3880:118::-;3967:24;3985:5;3967:24;:::i;:::-;3962:3;3955:37;3880:118;;:::o;4004:::-;4091:24;4109:5;4091:24;:::i;:::-;4086:3;4079:37;4004:118;;:::o;4128:553::-;4305:4;4343:3;4332:9;4328:19;4320:27;;4357:71;4425:1;4414:9;4410:17;4401:6;4357:71;:::i;:::-;4438:72;4506:2;4495:9;4491:18;4482:6;4438:72;:::i;:::-;4520;4588:2;4577:9;4573:18;4564:6;4520:72;:::i;:::-;4602;4670:2;4659:9;4655:18;4646:6;4602:72;:::i;:::-;4128:553;;;;;;;:::o;4687:474::-;4755:6;4763;4812:2;4800:9;4791:7;4787:23;4783:32;4780:119;;;4818:79;;:::i;:::-;4780:119;4938:1;4963:53;5008:7;4999:6;4988:9;4984:22;4963:53;:::i;:::-;4953:63;;4909:117;5065:2;5091:53;5136:7;5127:6;5116:9;5112:22;5091:53;:::i;:::-;5081:63;;5036:118;4687:474;;;;;:::o;5167:137::-;5257:6;5291:5;5285:12;5275:22;;5167:137;;;:::o;5310:207::-;5432:11;5466:6;5461:3;5454:19;5506:4;5501:3;5497:14;5482:29;;5310:207;;;;:::o;5523:155::-;5613:4;5636:3;5628:11;;5666:4;5661:3;5657:14;5649:22;;5523:155;;;:::o;5684:108::-;5761:24;5779:5;5761:24;:::i;:::-;5756:3;5749:37;5684:108;;:::o;5858:497::-;5991:4;5986:3;5982:14;6081:4;6074:5;6070:16;6064:23;6100:63;6157:4;6152:3;6148:14;6134:12;6100:63;:::i;:::-;6006:167;6256:4;6249:5;6245:16;6239:23;6275:63;6332:4;6327:3;6323:14;6309:12;6275:63;:::i;:::-;6183:165;5960:395;5858:497;;:::o;6361:271::-;6476:10;6497:92;6585:3;6577:6;6497:92;:::i;:::-;6621:4;6616:3;6612:14;6598:28;;6361:271;;;;:::o;6638:136::-;6731:4;6763;6758:3;6754:14;6746:22;;6638:136;;;:::o;6844:916::-;7009:3;7038:77;7109:5;7038:77;:::i;:::-;7131:109;7233:6;7228:3;7131:109;:::i;:::-;7124:116;;7264:79;7337:5;7264:79;:::i;:::-;7366:7;7397:1;7382:353;7407:6;7404:1;7401:13;7382:353;;;7483:6;7477:13;7510:109;7615:3;7600:13;7510:109;:::i;:::-;7503:116;;7642:83;7718:6;7642:83;:::i;:::-;7632:93;;7442:293;7429:1;7426;7422:9;7417:14;;7382:353;;;7386:14;7751:3;7744:10;;7014:746;;;6844:916;;;;:::o;7766:465::-;7955:4;7993:2;7982:9;7978:18;7970:26;;8042:9;8036:4;8032:20;8028:1;8017:9;8013:17;8006:47;8070:154;8219:4;8210:6;8070:154;:::i;:::-;8062:162;;7766:465;;;;:::o;8237:474::-;8305:6;8313;8362:2;8350:9;8341:7;8337:23;8333:32;8330:119;;;8368:79;;:::i;:::-;8330:119;8488:1;8513:53;8558:7;8549:6;8538:9;8534:22;8513:53;:::i;:::-;8503:63;;8459:117;8615:2;8641:53;8686:7;8677:6;8666:9;8662:22;8641:53;:::i;:::-;8631:63;;8586:118;8237:474;;;;;:::o;8717:222::-;8810:4;8848:2;8837:9;8833:18;8825:26;;8861:71;8929:1;8918:9;8914:17;8905:6;8861:71;:::i;:::-;8717:222;;;;:::o;8945:180::-;8993:77;8990:1;8983:88;9090:4;9087:1;9080:15;9114:4;9111:1;9104:15;9131:180;9179:77;9176:1;9169:88;9276:4;9273:1;9266:15;9300:4;9297:1;9290:15;9317:180;9365:77;9362:1;9355:88;9462:4;9459:1;9452:15;9486:4;9483:1;9476:15;9503:233;9542:3;9565:24;9583:5;9565:24;:::i;:::-;9556:33;;9611:66;9604:5;9601:77;9598:103;;9681:18;;:::i;:::-;9598:103;9728:1;9721:5;9717:13;9710:20;;9503:233;;;:::o;9742:169::-;9826:11;9860:6;9855:3;9848:19;9900:4;9895:3;9891:14;9876:29;;9742:169;;;;:::o;9917:168::-;10057:20;10053:1;10045:6;10041:14;10034:44;9917:168;:::o;10091:366::-;10233:3;10254:67;10318:2;10313:3;10254:67;:::i;:::-;10247:74;;10330:93;10419:3;10330:93;:::i;:::-;10448:2;10443:3;10439:12;10432:19;;10091:366;;;:::o;10463:419::-;10629:4;10667:2;10656:9;10652:18;10644:26;;10716:9;10710:4;10706:20;10702:1;10691:9;10687:17;10680:47;10744:131;10870:4;10744:131;:::i;:::-;10736:139;;10463:419;;;:::o;10888:223::-;11028:34;11024:1;11016:6;11012:14;11005:58;11097:6;11092:2;11084:6;11080:15;11073:31;10888:223;:::o;11117:366::-;11259:3;11280:67;11344:2;11339:3;11280:67;:::i;:::-;11273:74;;11356:93;11445:3;11356:93;:::i;:::-;11474:2;11469:3;11465:12;11458:19;;11117:366;;;:::o;11489:419::-;11655:4;11693:2;11682:9;11678:18;11670:26;;11742:9;11736:4;11732:20;11728:1;11717:9;11713:17;11706:47;11770:131;11896:4;11770:131;:::i;:::-;11762:139;;11489:419;;;:::o;11914:181::-;12054:33;12050:1;12042:6;12038:14;12031:57;11914:181;:::o;12101:366::-;12243:3;12264:67;12328:2;12323:3;12264:67;:::i;:::-;12257:74;;12340:93;12429:3;12340:93;:::i;:::-;12458:2;12453:3;12449:12;12442:19;;12101:366;;;:::o;12473:419::-;12639:4;12677:2;12666:9;12662:18;12654:26;;12726:9;12720:4;12716:20;12712:1;12701:9;12697:17;12690:47;12754:131;12880:4;12754:131;:::i;:::-;12746:139;;12473:419;;;:::o;12898:168::-;13038:20;13034:1;13026:6;13022:14;13015:44;12898:168;:::o;13072:366::-;13214:3;13235:67;13299:2;13294:3;13235:67;:::i;:::-;13228:74;;13311:93;13400:3;13311:93;:::i;:::-;13429:2;13424:3;13420:12;13413:19;;13072:366;;;:::o;13444:419::-;13610:4;13648:2;13637:9;13633:18;13625:26;;13697:9;13691:4;13687:20;13683:1;13672:9;13668:17;13661:47;13725:131;13851:4;13725:131;:::i;:::-;13717:139;;13444:419;;;:::o;13869:222::-;14009:34;14005:1;13997:6;13993:14;13986:58;14078:5;14073:2;14065:6;14061:15;14054:30;13869:222;:::o;14097:366::-;14239:3;14260:67;14324:2;14319:3;14260:67;:::i;:::-;14253:74;;14336:93;14425:3;14336:93;:::i;:::-;14454:2;14449:3;14445:12;14438:19;;14097:366;;;:::o;14469:419::-;14635:4;14673:2;14662:9;14658:18;14650:26;;14722:9;14716:4;14712:20;14708:1;14697:9;14693:17;14686:47;14750:131;14876:4;14750:131;:::i;:::-;14742:139;;14469:419;;;:::o;14894:227::-;15034:34;15030:1;15022:6;15018:14;15011:58;15103:10;15098:2;15090:6;15086:15;15079:35;14894:227;:::o;15127:366::-;15269:3;15290:67;15354:2;15349:3;15290:67;:::i;:::-;15283:74;;15366:93;15455:3;15366:93;:::i;:::-;15484:2;15479:3;15475:12;15468:19;;15127:366;;;:::o;15499:419::-;15665:4;15703:2;15692:9;15688:18;15680:26;;15752:9;15746:4;15742:20;15738:1;15727:9;15723:17;15716:47;15780:131;15906:4;15780:131;:::i;:::-;15772:139;;15499:419;;;:::o;15924:170::-;16064:22;16060:1;16052:6;16048:14;16041:46;15924:170;:::o;16100:366::-;16242:3;16263:67;16327:2;16322:3;16263:67;:::i;:::-;16256:74;;16339:93;16428:3;16339:93;:::i;:::-;16457:2;16452:3;16448:12;16441:19;;16100:366;;;:::o;16472:419::-;16638:4;16676:2;16665:9;16661:18;16653:26;;16725:9;16719:4;16715:20;16711:1;16700:9;16696:17;16689:47;16753:131;16879:4;16753:131;:::i;:::-;16745:139;;16472:419;;;:::o;16897:161::-;17037:13;17033:1;17025:6;17021:14;17014:37;16897:161;:::o;17064:366::-;17206:3;17227:67;17291:2;17286:3;17227:67;:::i;:::-;17220:74;;17303:93;17392:3;17303:93;:::i;:::-;17421:2;17416:3;17412:12;17405:19;;17064:366;;;:::o;17436:419::-;17602:4;17640:2;17629:9;17625:18;17617:26;;17689:9;17683:4;17679:20;17675:1;17664:9;17660:17;17653:47;17717:131;17843:4;17717:131;:::i;:::-;17709:139;;17436:419;;;:::o;17861:143::-;17918:5;17949:6;17943:13;17934:22;;17965:33;17992:5;17965:33;:::i;:::-;17861:143;;;;:::o;18010:351::-;18080:6;18129:2;18117:9;18108:7;18104:23;18100:32;18097:119;;;18135:79;;:::i;:::-;18097:119;18255:1;18280:64;18336:7;18327:6;18316:9;18312:22;18280:64;:::i;:::-;18270:74;;18226:128;18010:351;;;;:::o;18367:167::-;18507:19;18503:1;18495:6;18491:14;18484:43;18367:167;:::o;18540:366::-;18682:3;18703:67;18767:2;18762:3;18703:67;:::i;:::-;18696:74;;18779:93;18868:3;18779:93;:::i;:::-;18897:2;18892:3;18888:12;18881:19;;18540:366;;;:::o;18912:419::-;19078:4;19116:2;19105:9;19101:18;19093:26;;19165:9;19159:4;19155:20;19151:1;19140:9;19136:17;19129:47;19193:131;19319:4;19193:131;:::i;:::-;19185:139;;18912:419;;;:::o;19337:232::-;19477:34;19473:1;19465:6;19461:14;19454:58;19546:15;19541:2;19533:6;19529:15;19522:40;19337:232;:::o;19575:366::-;19717:3;19738:67;19802:2;19797:3;19738:67;:::i;:::-;19731:74;;19814:93;19903:3;19814:93;:::i;:::-;19932:2;19927:3;19923:12;19916:19;;19575:366;;;:::o;19947:419::-;20113:4;20151:2;20140:9;20136:18;20128:26;;20200:9;20194:4;20190:20;20186:1;20175:9;20171:17;20164:47;20228:131;20354:4;20228:131;:::i;:::-;20220:139;;19947:419;;;:::o;20372:224::-;20512:34;20508:1;20500:6;20496:14;20489:58;20581:7;20576:2;20568:6;20564:15;20557:32;20372:224;:::o;20602:366::-;20744:3;20765:67;20829:2;20824:3;20765:67;:::i;:::-;20758:74;;20841:93;20930:3;20841:93;:::i;:::-;20959:2;20954:3;20950:12;20943:19;;20602:366;;;:::o;20974:419::-;21140:4;21178:2;21167:9;21163:18;21155:26;;21227:9;21221:4;21217:20;21213:1;21202:9;21198:17;21191:47;21255:131;21381:4;21255:131;:::i;:::-;21247:139;;20974:419;;;:::o;21399:233::-;21539:34;21535:1;21527:6;21523:14;21516:58;21608:16;21603:2;21595:6;21591:15;21584:41;21399:233;:::o;21638:366::-;21780:3;21801:67;21865:2;21860:3;21801:67;:::i;:::-;21794:74;;21877:93;21966:3;21877:93;:::i;:::-;21995:2;21990:3;21986:12;21979:19;;21638:366;;;:::o;22010:419::-;22176:4;22214:2;22203:9;22199:18;22191:26;;22263:9;22257:4;22253:20;22249:1;22238:9;22234:17;22227:47;22291:131;22417:4;22291:131;:::i;:::-;22283:139;;22010:419;;;:::o;22435:176::-;22575:28;22571:1;22563:6;22559:14;22552:52;22435:176;:::o;22617:366::-;22759:3;22780:67;22844:2;22839:3;22780:67;:::i;:::-;22773:74;;22856:93;22945:3;22856:93;:::i;:::-;22974:2;22969:3;22965:12;22958:19;;22617:366;;;:::o;22989:419::-;23155:4;23193:2;23182:9;23178:18;23170:26;;23242:9;23236:4;23232:20;23228:1;23217:9;23213:17;23206:47;23270:131;23396:4;23270:131;:::i;:::-;23262:139;;22989:419;;;:::o;23414:143::-;23471:5;23502:6;23496:13;23487:22;;23518:33;23545:5;23518:33;:::i;:::-;23414:143;;;;:::o;23563:351::-;23633:6;23682:2;23670:9;23661:7;23657:23;23653:32;23650:119;;;23688:79;;:::i;:::-;23650:119;23808:1;23833:64;23889:7;23880:6;23869:9;23865:22;23833:64;:::i;:::-;23823:74;;23779:128;23563:351;;;;:::o;23920:231::-;24060:34;24056:1;24048:6;24044:14;24037:58;24129:14;24124:2;24116:6;24112:15;24105:39;23920:231;:::o;24157:366::-;24299:3;24320:67;24384:2;24379:3;24320:67;:::i;:::-;24313:74;;24396:93;24485:3;24396:93;:::i;:::-;24514:2;24509:3;24505:12;24498:19;;24157:366;;;:::o;24529:419::-;24695:4;24733:2;24722:9;24718:18;24710:26;;24782:9;24776:4;24772:20;24768:1;24757:9;24753:17;24746:47;24810:131;24936:4;24810:131;:::i;:::-;24802:139;;24529:419;;;:::o;24954:442::-;25103:4;25141:2;25130:9;25126:18;25118:26;;25154:71;25222:1;25211:9;25207:17;25198:6;25154:71;:::i;:::-;25235:72;25303:2;25292:9;25288:18;25279:6;25235:72;:::i;:::-;25317;25385:2;25374:9;25370:18;25361:6;25317:72;:::i;:::-;24954:442;;;;;;:::o;25402:410::-;25442:7;25465:20;25483:1;25465:20;:::i;:::-;25460:25;;25499:20;25517:1;25499:20;:::i;:::-;25494:25;;25554:1;25551;25547:9;25576:30;25594:11;25576:30;:::i;:::-;25565:41;;25755:1;25746:7;25742:15;25739:1;25736:22;25716:1;25709:9;25689:83;25666:139;;25785:18;;:::i;:::-;25666:139;25450:362;25402:410;;;;:::o;25818:194::-;25858:4;25878:20;25896:1;25878:20;:::i;:::-;25873:25;;25912:20;25930:1;25912:20;:::i;:::-;25907:25;;25956:1;25953;25949:9;25941:17;;25980:1;25974:4;25971:11;25968:37;;;25985:18;;:::i;:::-;25968:37;25818:194;;;;:::o;26018:180::-;26158:32;26154:1;26146:6;26142:14;26135:56;26018:180;:::o;26204:366::-;26346:3;26367:67;26431:2;26426:3;26367:67;:::i;:::-;26360:74;;26443:93;26532:3;26443:93;:::i;:::-;26561:2;26556:3;26552:12;26545:19;;26204:366;;;:::o;26576:419::-;26742:4;26780:2;26769:9;26765:18;26757:26;;26829:9;26823:4;26819:20;26815:1;26804:9;26800:17;26793:47;26857:131;26983:4;26857:131;:::i;:::-;26849:139;;26576:419;;;:::o;27001:180::-;27049:77;27046:1;27039:88;27146:4;27143:1;27136:15;27170:4;27167:1;27160:15"},"gasEstimates":{"creation":{"codeDepositCost":"2361200","executionCost":"infinite","totalCost":"infinite"},"external":{"acceptOffer(uint256,address)":"infinite","buyNFT(uint256)":"infinite","cancelOffer(uint256)":"infinite","getNFTPrice(uint256)":"infinite","getNFTsBySeller(address)":"infinite","getPendingOffers(uint256)":"infinite","listNFT(uint256,uint256)":"infinite","makeOffer(uint256)":"infinite","nfts(uint256)":"infinite","removeNFT(uint256)":"infinite","updateNFTPrice(uint256,uint256)":"infinite"},"internal":{"_isValidNFT(uint256)":"infinite","_processSaleAndTransferNFT(uint256,uint256)":"infinite","isNFTListed(uint256)":"2224"}},"methodIdentifiers":{"acceptOffer(uint256,address)":"918d407d","buyNFT(uint256)":"51ed8288","cancelOffer(uint256)":"ef706adf","getNFTPrice(uint256)":"92976179","getNFTsBySeller(address)":"09de4e06","getPendingOffers(uint256)":"50dc1867","listNFT(uint256,uint256)":"94383f14","makeOffer(uint256)":"9a2f6474","nfts(uint256)":"265aa621","removeNFT(uint256)":"ee4739cb","updateNFTPrice(uint256,uint256)":"4ac0123d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NFTListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NFTPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NFTRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OfferMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"PurchaseMade\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"acceptOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getNFTPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"getNFTsBySeller\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPendingOffers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Marketplace.Offer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"listNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"makeOffer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nfts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"removeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateNFTPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Marketplace.sol\":\"Marketplace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n}\\n\",\"keccak256\":\"0x5094b17cb46143943f3206d0738b91a05a7005e979681af7210d534cd3e72f54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/Marketplace.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\n\\nimport \\\"./Pixel4te.sol\\\";\\n\\ncontract Marketplace {\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\\n    // Struct para representar un NFT en venta\\n    struct NFT {\\n        address seller;\\n        uint256 tokenId;\\n        uint256 price;\\n        address buyer;\\n    }\\n    struct Offer {\\n        address offerer;\\n        uint256 value;\\n    }\\n    // Mapping para almacenar todos los NFTs en venta en el marketplace\\n    mapping(uint256 => NFT) public nfts;\\n\\n    // Mapping para almacenar los NFTs listados por cada vendedor\\n    mapping(address => EnumerableSet.UintSet) private sellerToNfts;\\n\\n    mapping(uint256 => EnumerableMap.AddressToUintMap) private pendingOffers;\\n\\n    // Eventos\\n    event NFTListed(uint256 indexed tokenId, address indexed seller, uint256 price);\\n    event NFTPriceUpdated(uint256 indexed tokenId, uint256 price);\\n    event OfferMade(uint256 indexed tokenId, address indexed offerer, uint256 value);\\n    event PurchaseMade(uint256 indexed tokenId, uint256 price, address indexed buyer);\\n    event NFTRemoved(uint256 indexed tokenId);\\n\\n    // Propietario del contrato\\n    address owner;\\n\\n    // Contrato de la colecci\\u00f3n Pixel4te\\n    Pixel4te private pixel4teContract;\\n    // Constructor\\n    constructor(address collection) {\\n        owner = msg.sender;\\n        pixel4teContract = Pixel4te(collection);\\n    }\\n\\n    function _isValidNFT(uint _tokenId) internal view returns (bool) {\\n      try pixel4teContract.ownerOf(_tokenId) {\\n        return true;\\n      } catch {\\n        return false;\\n      }\\n    }\\n    // Funci\\u00f3n para listar un nuevo NFT en el marketplace\\n    function listNFT(uint256 _tokenId, uint256 _price) external {\\n        require(_price > 0, \\\"Price cannot be zero\\\");\\n        require(_isValidNFT(_tokenId), \\\"Invalid NFT\\\");\\n        // Verificar que el NFT no est\\u00e1 listado\\n        // Verificar que el NFT pertenece al msg.sender\\n        address _owner = pixel4teContract.ownerOf(_tokenId);\\n        require(_owner == msg.sender, \\\"Not the NFT owner\\\");\\n        // A\\u00f1adir el NFT al mapping de nfts\\n        nfts[_tokenId] = NFT({\\n            seller: msg.sender,\\n            tokenId: _tokenId,\\n            price: _price,\\n            buyer: address(0)\\n        });\\n\\n        // A\\u00f1adir el NFT al set de sellerToNfts\\n        sellerToNfts[msg.sender].add(_tokenId);\\n\\n        // Disparar el evento NFTListed\\n        emit NFTListed(_tokenId, msg.sender, _price);\\n    }\\n    \\n    function removeNFT(uint256 _tokenId) external {\\n      require(nfts[_tokenId].seller == msg.sender, \\\"Only seller can remove NFT\\\");\\n      sellerToNfts[msg.sender].remove(_tokenId);\\n      delete nfts[_tokenId];\\n      emit NFTRemoved(_tokenId);\\n    }\\n\\n    // Funci\\u00f3n para actualizar el precio de un NFT\\n    function updateNFTPrice(uint256 _tokenId, uint256 _price) external {\\n        require(isNFTListed(_tokenId), \\\"NFT does not exist\\\");\\n        require(msg.sender == nfts[_tokenId].seller, \\\"Only NFT seller can update the price\\\");\\n\\n        // Actualizar el precio del NFT\\n        nfts[_tokenId].price = _price;\\n\\n        // Disparar el evento NFTPriceUpdated\\n        emit NFTPriceUpdated(_tokenId, _price);\\n    }\\n\\n    function _processSaleAndTransferNFT(uint256 _tokenId, uint256 _price) internal {\\n      uint256 royaltiesPercent = pixel4teContract.getRoyaltiesPercent(_tokenId); // Obtener royalties percent\\n      require(royaltiesPercent > 0, \\\"Royalties percent must be greater than zero.\\\");\\n      address royaltiesOwner = pixel4teContract.getMinter(_tokenId); // Obtener royalties beneficario\\n      uint256 royalties = _price.mul(royaltiesPercent); // Calcular royalties\\n      address payable seller = payable(nfts[_tokenId].seller); // Obtener la direcci\\u00f3n del vendedor como payable\\n      seller.transfer(_price.sub(royalties)); // Transferir el precio del NFT menos las royalties al vendedor\\n      payable(royaltiesOwner).transfer(royalties); // Transferir las royalties al beneficario\\n      pixel4teContract.safeTransferFrom(nfts[_tokenId].seller, msg.sender, nfts[_tokenId].tokenId); // Transferir el NFT al comprador\\n      sellerToNfts[nfts[_tokenId].seller].remove(_tokenId); // Eliminar el NFT del set de NFTs del vendedor\\n      delete nfts[_tokenId]; // Eliminar el NFT del mapping de NFTs\\n    }\\n\\n    // Funci\\u00f3n para hacer una oferta por un NFT\\n    function makeOffer(uint256 _tokenId) external payable {\\n        require(isNFTListed(_tokenId), \\\"NFT does not exist\\\");\\n        require(msg.sender != nfts[_tokenId].seller, \\\"Seller cannot make an offer for their own NFT\\\");\\n        require(msg.value > 0, \\\"Offer value must be greater than zero\\\");\\n\\n        if (pendingOffers[_tokenId].contains(msg.sender)) {\\n          uint existingOffer = pendingOffers[_tokenId].get(msg.sender);\\n          if (existingOffer > 0 && msg.value > existingOffer) { // Si la nueva oferta es mayor que la oferta existente\\n            uint256 refundAmount = existingOffer;\\n            existingOffer = msg.value;\\n            pendingOffers[_tokenId].set(msg.sender, existingOffer);\\n            payable(msg.sender).transfer(refundAmount); // Reembolsar la oferta anterior\\n            emit OfferMade(_tokenId, msg.sender, msg.value);\\n\\n          } else {\\n            // La nueva oferta es menor o igual que la oferta existente\\n            revert(\\\"Offer value must be higher than existing offer\\\");\\n          }\\n        } else {\\n          if (msg.value >= nfts[_tokenId].price) { // Si la oferta es mayor o igual que el precio del NFT\\n            nfts[_tokenId].buyer = msg.sender; // Almacenar el comprador del NFT\\n\\n            _processSaleAndTransferNFT(_tokenId, nfts[_tokenId].price);\\n\\n            emit PurchaseMade(_tokenId, nfts[_tokenId].price, msg.sender); // Disparar el evento PurchaseMade\\n          } else {\\n            // No hay una oferta pendiente del usuario para este NFT\\n            pendingOffers[_tokenId].set(msg.sender, msg.value);\\n            emit OfferMade(_tokenId, msg.sender, msg.value);\\n\\n          }\\n        }\\n    }\\n\\n    function acceptOffer(uint256 _tokenId, address _buyer) external {\\n        require(isNFTListed(_tokenId), \\\"NFT does not exist\\\");\\n        require(msg.sender == nfts[_tokenId].seller, \\\"Only the seller can accept an offer\\\");\\n        require(pendingOffers[_tokenId].contains(_buyer), \\\"There are no pending offers for this NFT\\\");\\n\\n        nfts[_tokenId].buyer = _buyer; // Almacenar el comprador del NFT\\n        pendingOffers[_tokenId].remove(_buyer);\\n        _processSaleAndTransferNFT(_tokenId, nfts[_tokenId].price);\\n\\n        emit PurchaseMade(_tokenId, nfts[_tokenId].price, _buyer); // Disparar el evento PurchaseMade\\n    }\\n\\n    function cancelOffer(uint256 _tokenId) external {\\n      require(pendingOffers[_tokenId].contains(msg.sender), \\\"There are no pending offers for this NFT\\\");\\n      uint256 offerValue = pendingOffers[_tokenId].get(msg.sender);\\n      require(offerValue > 0, \\\"Offer value must be greater than zero\\\");\\n      pendingOffers[_tokenId].remove(msg.sender);\\n      payable(msg.sender).transfer(offerValue);\\n    }\\n\\n    // Funci\\u00f3n para comprar un NFT sin hacer una oferta\\n    function buyNFT(uint256 _tokenId) external payable {\\n        require(isNFTListed(_tokenId), \\\"NFT does not exist\\\");\\n        require(msg.sender != nfts[_tokenId].seller, \\\"Seller cannot buy their own NFT\\\");\\n        require(msg.value >= nfts[_tokenId].price, \\\"Insufficient funds\\\");\\n\\n        nfts[_tokenId].buyer = msg.sender; // Almacenar el comprador del NFT\\n\\n        _processSaleAndTransferNFT(_tokenId, nfts[_tokenId].price);\\n\\n        emit PurchaseMade(_tokenId, nfts[_tokenId].price, msg.sender); // Disparar el evento PurchaseMade\\n    }\\n\\n    function getPendingOffers(uint256 _tokenId) external view returns (Offer[] memory) {\\n        Offer[] memory offers = new Offer[](pendingOffers[_tokenId].length());\\n        for (uint256 i = 0; i < pendingOffers[_tokenId].length(); i++) {\\n            (address offerer, uint256 value) = pendingOffers[_tokenId].at(i);\\n            offers[i] = Offer({offerer: offerer, value: value});\\n        }\\n        return offers;\\n    }\\n\\n    function getNFTsBySeller(address _seller) external view returns (uint256[] memory) {\\n      uint256[] memory result = new uint256[](sellerToNfts[_seller].length());\\n      for (uint256 i = 0; i < sellerToNfts[_seller].length(); i++) {\\n          result[i] = sellerToNfts[_seller].at(i);\\n      }\\n      return result;\\n    }\\n\\n    function getNFTPrice(uint256 _tokenId) external view returns (uint256) {\\n      return isNFTListed(_tokenId) ? nfts[_tokenId].price : 0;\\n    }\\n\\n    function isNFTListed(uint256 _tokenId) internal view returns (bool) {\\n      return nfts[_tokenId].tokenId > 0;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x9ab1498cfb233ebdcdf3e1ceee37a4450c101f37d261f909814ecc9e67659f35\",\"license\":\"UNLICENSED\"},\"contracts/Pixel4te.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Pixel4te is ERC721URIStorage, Ownable {\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIds;\\n    mapping(uint256 => address) private _mintedBy;\\n    mapping(uint256 => uint256) private _royaltiesPercent;\\n\\n    uint256 public mintFee;\\n\\n    constructor() ERC721(\\\"Pixel4te\\\", \\\"PIX\\\") {\\n        mintFee = 0.01 ether; // Set a default minting fee of 0.01 ether\\n    }\\n\\n    function mintItem(address to, uint256 royaltiesPercent, string memory tokenURI)\\n        public\\n        payable\\n        returns (uint256)\\n    {\\n        require(msg.value >= mintFee, \\\"Insufficient payment\\\"); // Require payment of the minting fee\\n        _tokenIds.increment();\\n\\n        uint256 newItemId = _tokenIds.current();\\n        _mint(to, newItemId);\\n        _setTokenURI(newItemId, tokenURI);\\n        _mintedBy[newItemId] = msg.sender; // Store the address of the user who minted the NFT\\n        _royaltiesPercent[newItemId] = royaltiesPercent;\\n\\n        // Transfer the minting fee to the contract owner\\n        payable(owner()).transfer(msg.value);\\n\\n        return newItemId;\\n    }\\n\\n    function setURI(uint tokenId, string memory newURI)\\n        public\\n    {\\n        address itemOwner = ownerOf(tokenId);\\n        require(msg.sender == itemOwner, 'UNAUTHORIZED');\\n        _setTokenURI(tokenId, newURI);\\n    }\\n\\n    function currentItem()\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _tokenIds.current();\\n    }\\n\\n    function itemsOf(address owner) public view returns (uint256[] memory) {\\n      \\n      uint256 balance = balanceOf(owner);\\n      uint256[] memory items = new uint256[](balance);\\n      if (balance == uint256(0)) {\\n        return items;\\n      }\\n      uint256 j = 0;\\n      for (uint256 i = 1; i <= currentItem(); i++) {\\n        if (ownerOf(i) == owner) {\\n          items[j] = i;\\n          j++;\\n        }\\n      }\\n      return items;\\n    }\\n\\n    function mintFeeUpdate(uint256 newFee) public onlyOwner {\\n        mintFee = newFee;\\n    }\\n\\n    function getMinter(uint256 tokenId) public view returns (address) {\\n        return _mintedBy[tokenId];\\n    }\\n\\n    function setRoyaltiesPercent(uint256 tokenId, uint256 percent) public {\\n        require(_mintedBy[tokenId] == msg.sender, \\\"Unauthorized\\\");\\n        _royaltiesPercent[tokenId] = percent;\\n    }\\n\\n    function getRoyaltiesPercent(uint256 tokenId) public view returns (uint256) {\\n        return _royaltiesPercent[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0xb098dda04c17a8b0d2d75c9fdd9a8c68ae537f2e9d88f9fc85812d207fa42aea\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4928,"contract":"contracts/Marketplace.sol:Marketplace","label":"nfts","offset":0,"slot":"0","type":"t_mapping(t_uint256,t_struct(NFT)4918_storage)"},{"astId":4933,"contract":"contracts/Marketplace.sol:Marketplace","label":"sellerToNfts","offset":0,"slot":"1","type":"t_mapping(t_address,t_struct(UintSet)4762_storage)"},{"astId":4938,"contract":"contracts/Marketplace.sol:Marketplace","label":"pendingOffers","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_struct(AddressToUintMap)3847_storage)"},{"astId":4974,"contract":"contracts/Marketplace.sol:Marketplace","label":"owner","offset":0,"slot":"3","type":"t_address"},{"astId":4977,"contract":"contracts/Marketplace.sol:Marketplace","label":"pixel4teContract","offset":0,"slot":"4","type":"t_contract(Pixel4te)6006"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(Pixel4te)6006":{"encoding":"inplace","label":"contract Pixel4te","numberOfBytes":"20"},"t_mapping(t_address,t_struct(UintSet)4762_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct EnumerableSet.UintSet)","numberOfBytes":"32","value":"t_struct(UintSet)4762_storage"},"t_mapping(t_bytes32,t_bytes32)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bytes32)","numberOfBytes":"32","value":"t_bytes32"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_struct(AddressToUintMap)3847_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct EnumerableMap.AddressToUintMap)","numberOfBytes":"32","value":"t_struct(AddressToUintMap)3847_storage"},"t_mapping(t_uint256,t_struct(NFT)4918_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct Marketplace.NFT)","numberOfBytes":"32","value":"t_struct(NFT)4918_storage"},"t_struct(AddressToUintMap)3847_storage":{"encoding":"inplace","label":"struct EnumerableMap.AddressToUintMap","members":[{"astId":3846,"contract":"contracts/Marketplace.sol:Marketplace","label":"_inner","offset":0,"slot":"0","type":"t_struct(Bytes32ToBytes32Map)3173_storage"}],"numberOfBytes":"96"},"t_struct(Bytes32Set)4484_storage":{"encoding":"inplace","label":"struct EnumerableSet.Bytes32Set","members":[{"astId":4483,"contract":"contracts/Marketplace.sol:Marketplace","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)4290_storage"}],"numberOfBytes":"64"},"t_struct(Bytes32ToBytes32Map)3173_storage":{"encoding":"inplace","label":"struct EnumerableMap.Bytes32ToBytes32Map","members":[{"astId":3168,"contract":"contracts/Marketplace.sol:Marketplace","label":"_keys","offset":0,"slot":"0","type":"t_struct(Bytes32Set)4484_storage"},{"astId":3172,"contract":"contracts/Marketplace.sol:Marketplace","label":"_values","offset":0,"slot":"2","type":"t_mapping(t_bytes32,t_bytes32)"}],"numberOfBytes":"96"},"t_struct(NFT)4918_storage":{"encoding":"inplace","label":"struct Marketplace.NFT","members":[{"astId":4911,"contract":"contracts/Marketplace.sol:Marketplace","label":"seller","offset":0,"slot":"0","type":"t_address"},{"astId":4913,"contract":"contracts/Marketplace.sol:Marketplace","label":"tokenId","offset":0,"slot":"1","type":"t_uint256"},{"astId":4915,"contract":"contracts/Marketplace.sol:Marketplace","label":"price","offset":0,"slot":"2","type":"t_uint256"},{"astId":4917,"contract":"contracts/Marketplace.sol:Marketplace","label":"buyer","offset":0,"slot":"3","type":"t_address"}],"numberOfBytes":"128"},"t_struct(Set)4290_storage":{"encoding":"inplace","label":"struct EnumerableSet.Set","members":[{"astId":4285,"contract":"contracts/Marketplace.sol:Marketplace","label":"_values","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":4289,"contract":"contracts/Marketplace.sol:Marketplace","label":"_indexes","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_uint256)"}],"numberOfBytes":"64"},"t_struct(UintSet)4762_storage":{"encoding":"inplace","label":"struct EnumerableSet.UintSet","members":[{"astId":4761,"contract":"contracts/Marketplace.sol:Marketplace","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)4290_storage"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Pixel4te.sol":{"Pixel4te":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentItem","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getMinter","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getRoyaltiesPercent","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"itemsOf","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"mintFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"newFee","type":"uint256"}],"name":"mintFeeUpdate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"royaltiesPercent","type":"uint256"},{"internalType":"string","name":"tokenURI","type":"string"}],"name":"mintItem","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"percent","type":"uint256"}],"name":"setRoyaltiesPercent","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"newURI","type":"string"}],"name":"setURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"owner()":{"details":"Returns the address of the current owner."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_175":{"entryPoint":null,"id":175,"parameterSlots":2,"returnSlots":0},"@_23":{"entryPoint":null,"id":23,"parameterSlots":0,"returnSlots":0},"@_5771":{"entryPoint":null,"id":5771,"parameterSlots":0,"returnSlots":0},"@_msgSender_1685":{"entryPoint":216,"id":1685,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_111":{"entryPoint":224,"id":111,"parameterSlots":1,"returnSlots":0},"array_dataslot_t_string_storage":{"entryPoint":580,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":422,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":901,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_uint256":{"entryPoint":716,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":862,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":736,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":1056,"id":null,"parameterSlots":2,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":601,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":527,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":1026,"id":null,"parameterSlots":2,"returnSlots":1},"identity":{"entryPoint":726,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":994,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x22":{"entryPoint":480,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":433,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":776,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":617,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":981,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":834,"id":null,"parameterSlots":2,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":630,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":786,"id":null,"parameterSlots":3,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":829,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5231:18","statements":[{"body":{"nodeType":"YulBlock","src":"66:40:18","statements":[{"nodeType":"YulAssignment","src":"77:22:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"93:5:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"87:5:18"},"nodeType":"YulFunctionCall","src":"87:12:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"77:6:18"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"49:5:18","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"59:6:18","type":""}],"src":"7:99:18"},{"body":{"nodeType":"YulBlock","src":"140:152:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"157:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"160:77:18","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"150:6:18"},"nodeType":"YulFunctionCall","src":"150:88:18"},"nodeType":"YulExpressionStatement","src":"150:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"254:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"257:4:18","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"247:6:18"},"nodeType":"YulFunctionCall","src":"247:15:18"},"nodeType":"YulExpressionStatement","src":"247:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"278:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"281:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"271:6:18"},"nodeType":"YulFunctionCall","src":"271:15:18"},"nodeType":"YulExpressionStatement","src":"271:15:18"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"112:180:18"},{"body":{"nodeType":"YulBlock","src":"326:152:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"343:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"346:77:18","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"336:6:18"},"nodeType":"YulFunctionCall","src":"336:88:18"},"nodeType":"YulExpressionStatement","src":"336:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"440:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"443:4:18","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"433:6:18"},"nodeType":"YulFunctionCall","src":"433:15:18"},"nodeType":"YulExpressionStatement","src":"433:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"464:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"467:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"457:6:18"},"nodeType":"YulFunctionCall","src":"457:15:18"},"nodeType":"YulExpressionStatement","src":"457:15:18"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"298:180:18"},{"body":{"nodeType":"YulBlock","src":"535:269:18","statements":[{"nodeType":"YulAssignment","src":"545:22:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"559:4:18"},{"kind":"number","nodeType":"YulLiteral","src":"565:1:18","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"555:3:18"},"nodeType":"YulFunctionCall","src":"555:12:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"545:6:18"}]},{"nodeType":"YulVariableDeclaration","src":"576:38:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"606:4:18"},{"kind":"number","nodeType":"YulLiteral","src":"612:1:18","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"602:3:18"},"nodeType":"YulFunctionCall","src":"602:12:18"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"580:18:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"653:51:18","statements":[{"nodeType":"YulAssignment","src":"667:27:18","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"681:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"689:4:18","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"677:3:18"},"nodeType":"YulFunctionCall","src":"677:17:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"667:6:18"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"633:18:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"626:6:18"},"nodeType":"YulFunctionCall","src":"626:26:18"},"nodeType":"YulIf","src":"623:81:18"},{"body":{"nodeType":"YulBlock","src":"756:42:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"770:16:18"},"nodeType":"YulFunctionCall","src":"770:18:18"},"nodeType":"YulExpressionStatement","src":"770:18:18"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"720:18:18"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"743:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"751:2:18","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"740:2:18"},"nodeType":"YulFunctionCall","src":"740:14:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"717:2:18"},"nodeType":"YulFunctionCall","src":"717:38:18"},"nodeType":"YulIf","src":"714:84:18"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"519:4:18","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"528:6:18","type":""}],"src":"484:320:18"},{"body":{"nodeType":"YulBlock","src":"864:87:18","statements":[{"nodeType":"YulAssignment","src":"874:11:18","value":{"name":"ptr","nodeType":"YulIdentifier","src":"882:3:18"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"874:4:18"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"902:1:18","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"905:3:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"895:6:18"},"nodeType":"YulFunctionCall","src":"895:14:18"},"nodeType":"YulExpressionStatement","src":"895:14:18"},{"nodeType":"YulAssignment","src":"918:26:18","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"936:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"939:4:18","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"926:9:18"},"nodeType":"YulFunctionCall","src":"926:18:18"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"918:4:18"}]}]},"name":"array_dataslot_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"851:3:18","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"859:4:18","type":""}],"src":"810:141:18"},{"body":{"nodeType":"YulBlock","src":"1001:49:18","statements":[{"nodeType":"YulAssignment","src":"1011:33:18","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1029:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"1036:2:18","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1025:3:18"},"nodeType":"YulFunctionCall","src":"1025:14:18"},{"kind":"number","nodeType":"YulLiteral","src":"1041:2:18","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"1021:3:18"},"nodeType":"YulFunctionCall","src":"1021:23:18"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"1011:6:18"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"984:5:18","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"994:6:18","type":""}],"src":"957:93:18"},{"body":{"nodeType":"YulBlock","src":"1109:54:18","statements":[{"nodeType":"YulAssignment","src":"1119:37:18","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"1144:4:18"},{"name":"value","nodeType":"YulIdentifier","src":"1150:5:18"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1140:3:18"},"nodeType":"YulFunctionCall","src":"1140:16:18"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"1119:8:18"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"1084:4:18","type":""},{"name":"value","nodeType":"YulTypedName","src":"1090:5:18","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"1100:8:18","type":""}],"src":"1056:107:18"},{"body":{"nodeType":"YulBlock","src":"1245:317:18","statements":[{"nodeType":"YulVariableDeclaration","src":"1255:35:18","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"1276:10:18"},{"kind":"number","nodeType":"YulLiteral","src":"1288:1:18","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"1272:3:18"},"nodeType":"YulFunctionCall","src":"1272:18:18"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"1259:9:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1299:109:18","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"1330:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"1341:66:18","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"1311:18:18"},"nodeType":"YulFunctionCall","src":"1311:97:18"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"1303:4:18","type":""}]},{"nodeType":"YulAssignment","src":"1417:51:18","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"1448:9:18"},{"name":"toInsert","nodeType":"YulIdentifier","src":"1459:8:18"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"1429:18:18"},"nodeType":"YulFunctionCall","src":"1429:39:18"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"1417:8:18"}]},{"nodeType":"YulAssignment","src":"1477:30:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1490:5:18"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"1501:4:18"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1497:3:18"},"nodeType":"YulFunctionCall","src":"1497:9:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1486:3:18"},"nodeType":"YulFunctionCall","src":"1486:21:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1477:5:18"}]},{"nodeType":"YulAssignment","src":"1516:40:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1529:5:18"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"1540:8:18"},{"name":"mask","nodeType":"YulIdentifier","src":"1550:4:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1536:3:18"},"nodeType":"YulFunctionCall","src":"1536:19:18"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1526:2:18"},"nodeType":"YulFunctionCall","src":"1526:30:18"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"1516:6:18"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1206:5:18","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"1213:10:18","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"1225:8:18","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"1238:6:18","type":""}],"src":"1169:393:18"},{"body":{"nodeType":"YulBlock","src":"1613:32:18","statements":[{"nodeType":"YulAssignment","src":"1623:16:18","value":{"name":"value","nodeType":"YulIdentifier","src":"1634:5:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1623:7:18"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1595:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1605:7:18","type":""}],"src":"1568:77:18"},{"body":{"nodeType":"YulBlock","src":"1683:28:18","statements":[{"nodeType":"YulAssignment","src":"1693:12:18","value":{"name":"value","nodeType":"YulIdentifier","src":"1700:5:18"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"1693:3:18"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1669:5:18","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"1679:3:18","type":""}],"src":"1651:60:18"},{"body":{"nodeType":"YulBlock","src":"1777:82:18","statements":[{"nodeType":"YulAssignment","src":"1787:66:18","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1845:5:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1827:17:18"},"nodeType":"YulFunctionCall","src":"1827:24:18"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"1818:8:18"},"nodeType":"YulFunctionCall","src":"1818:34:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1800:17:18"},"nodeType":"YulFunctionCall","src":"1800:53:18"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"1787:9:18"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1757:5:18","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"1767:9:18","type":""}],"src":"1717:142:18"},{"body":{"nodeType":"YulBlock","src":"1912:28:18","statements":[{"nodeType":"YulAssignment","src":"1922:12:18","value":{"name":"value","nodeType":"YulIdentifier","src":"1929:5:18"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"1922:3:18"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1898:5:18","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"1908:3:18","type":""}],"src":"1865:75:18"},{"body":{"nodeType":"YulBlock","src":"2022:193:18","statements":[{"nodeType":"YulVariableDeclaration","src":"2032:63:18","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"2087:7:18"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"2056:30:18"},"nodeType":"YulFunctionCall","src":"2056:39:18"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"2036:16:18","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2111:4:18"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2151:4:18"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"2145:5:18"},"nodeType":"YulFunctionCall","src":"2145:11:18"},{"name":"offset","nodeType":"YulIdentifier","src":"2158:6:18"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"2190:16:18"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"2166:23:18"},"nodeType":"YulFunctionCall","src":"2166:41:18"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"2117:27:18"},"nodeType":"YulFunctionCall","src":"2117:91:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2104:6:18"},"nodeType":"YulFunctionCall","src":"2104:105:18"},"nodeType":"YulExpressionStatement","src":"2104:105:18"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"1999:4:18","type":""},{"name":"offset","nodeType":"YulTypedName","src":"2005:6:18","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"2013:7:18","type":""}],"src":"1946:269:18"},{"body":{"nodeType":"YulBlock","src":"2270:24:18","statements":[{"nodeType":"YulAssignment","src":"2280:8:18","value":{"kind":"number","nodeType":"YulLiteral","src":"2287:1:18","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"2280:3:18"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"2266:3:18","type":""}],"src":"2221:73:18"},{"body":{"nodeType":"YulBlock","src":"2353:136:18","statements":[{"nodeType":"YulVariableDeclaration","src":"2363:46:18","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"2377:30:18"},"nodeType":"YulFunctionCall","src":"2377:32:18"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"2367:6:18","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2462:4:18"},{"name":"offset","nodeType":"YulIdentifier","src":"2468:6:18"},{"name":"zero_0","nodeType":"YulIdentifier","src":"2476:6:18"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"2418:43:18"},"nodeType":"YulFunctionCall","src":"2418:65:18"},"nodeType":"YulExpressionStatement","src":"2418:65:18"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"2339:4:18","type":""},{"name":"offset","nodeType":"YulTypedName","src":"2345:6:18","type":""}],"src":"2300:189:18"},{"body":{"nodeType":"YulBlock","src":"2545:136:18","statements":[{"body":{"nodeType":"YulBlock","src":"2612:63:18","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2656:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"2663:1:18","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"2626:29:18"},"nodeType":"YulFunctionCall","src":"2626:39:18"},"nodeType":"YulExpressionStatement","src":"2626:39:18"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2565:5:18"},{"name":"end","nodeType":"YulIdentifier","src":"2572:3:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2562:2:18"},"nodeType":"YulFunctionCall","src":"2562:14:18"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2577:26:18","statements":[{"nodeType":"YulAssignment","src":"2579:22:18","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2592:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"2599:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2588:3:18"},"nodeType":"YulFunctionCall","src":"2588:13:18"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"2579:5:18"}]}]},"pre":{"nodeType":"YulBlock","src":"2559:2:18","statements":[]},"src":"2555:120:18"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"2533:5:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"2540:3:18","type":""}],"src":"2495:186:18"},{"body":{"nodeType":"YulBlock","src":"2766:464:18","statements":[{"body":{"nodeType":"YulBlock","src":"2792:431:18","statements":[{"nodeType":"YulVariableDeclaration","src":"2806:54:18","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2854:5:18"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"2822:31:18"},"nodeType":"YulFunctionCall","src":"2822:38:18"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"2810:8:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2873:63:18","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"2896:8:18"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2924:10:18"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"2906:17:18"},"nodeType":"YulFunctionCall","src":"2906:29:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2892:3:18"},"nodeType":"YulFunctionCall","src":"2892:44:18"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"2877:11:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"3093:27:18","statements":[{"nodeType":"YulAssignment","src":"3095:23:18","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"3110:8:18"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"3095:11:18"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"3077:10:18"},{"kind":"number","nodeType":"YulLiteral","src":"3089:2:18","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3074:2:18"},"nodeType":"YulFunctionCall","src":"3074:18:18"},"nodeType":"YulIf","src":"3071:49:18"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"3162:11:18"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"3179:8:18"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"3207:3:18"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"3189:17:18"},"nodeType":"YulFunctionCall","src":"3189:22:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3175:3:18"},"nodeType":"YulFunctionCall","src":"3175:37:18"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"3133:28:18"},"nodeType":"YulFunctionCall","src":"3133:80:18"},"nodeType":"YulExpressionStatement","src":"3133:80:18"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2783:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"2788:2:18","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2780:2:18"},"nodeType":"YulFunctionCall","src":"2780:11:18"},"nodeType":"YulIf","src":"2777:446:18"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"2742:5:18","type":""},{"name":"len","nodeType":"YulTypedName","src":"2749:3:18","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"2754:10:18","type":""}],"src":"2687:543:18"},{"body":{"nodeType":"YulBlock","src":"3299:54:18","statements":[{"nodeType":"YulAssignment","src":"3309:37:18","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"3334:4:18"},{"name":"value","nodeType":"YulIdentifier","src":"3340:5:18"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3330:3:18"},"nodeType":"YulFunctionCall","src":"3330:16:18"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"3309:8:18"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"3274:4:18","type":""},{"name":"value","nodeType":"YulTypedName","src":"3280:5:18","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"3290:8:18","type":""}],"src":"3236:117:18"},{"body":{"nodeType":"YulBlock","src":"3410:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"3420:68:18","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3469:1:18","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"3472:5:18"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3465:3:18"},"nodeType":"YulFunctionCall","src":"3465:13:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3484:1:18","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3480:3:18"},"nodeType":"YulFunctionCall","src":"3480:6:18"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"3436:28:18"},"nodeType":"YulFunctionCall","src":"3436:51:18"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3432:3:18"},"nodeType":"YulFunctionCall","src":"3432:56:18"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"3424:4:18","type":""}]},{"nodeType":"YulAssignment","src":"3497:25:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3511:4:18"},{"name":"mask","nodeType":"YulIdentifier","src":"3517:4:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3507:3:18"},"nodeType":"YulFunctionCall","src":"3507:15:18"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"3497:6:18"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3387:4:18","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"3393:5:18","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"3403:6:18","type":""}],"src":"3359:169:18"},{"body":{"nodeType":"YulBlock","src":"3614:214:18","statements":[{"nodeType":"YulAssignment","src":"3747:37:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3774:4:18"},{"name":"len","nodeType":"YulIdentifier","src":"3780:3:18"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"3755:18:18"},"nodeType":"YulFunctionCall","src":"3755:29:18"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"3747:4:18"}]},{"nodeType":"YulAssignment","src":"3793:29:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3804:4:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3814:1:18","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"3817:3:18"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3810:3:18"},"nodeType":"YulFunctionCall","src":"3810:11:18"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3801:2:18"},"nodeType":"YulFunctionCall","src":"3801:21:18"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"3793:4:18"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3595:4:18","type":""},{"name":"len","nodeType":"YulTypedName","src":"3601:3:18","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"3609:4:18","type":""}],"src":"3533:295:18"},{"body":{"nodeType":"YulBlock","src":"3925:1303:18","statements":[{"nodeType":"YulVariableDeclaration","src":"3936:51:18","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3983:3:18"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"3950:32:18"},"nodeType":"YulFunctionCall","src":"3950:37:18"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"3940:6:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"4072:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4074:16:18"},"nodeType":"YulFunctionCall","src":"4074:18:18"},"nodeType":"YulExpressionStatement","src":"4074:18:18"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4044:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"4052:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4041:2:18"},"nodeType":"YulFunctionCall","src":"4041:30:18"},"nodeType":"YulIf","src":"4038:56:18"},{"nodeType":"YulVariableDeclaration","src":"4104:52:18","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4150:4:18"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"4144:5:18"},"nodeType":"YulFunctionCall","src":"4144:11:18"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"4118:25:18"},"nodeType":"YulFunctionCall","src":"4118:38:18"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"4108:6:18","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4249:4:18"},{"name":"oldLen","nodeType":"YulIdentifier","src":"4255:6:18"},{"name":"newLen","nodeType":"YulIdentifier","src":"4263:6:18"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulIdentifier","src":"4203:45:18"},"nodeType":"YulFunctionCall","src":"4203:67:18"},"nodeType":"YulExpressionStatement","src":"4203:67:18"},{"nodeType":"YulVariableDeclaration","src":"4280:18:18","value":{"kind":"number","nodeType":"YulLiteral","src":"4297:1:18","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"4284:9:18","type":""}]},{"nodeType":"YulAssignment","src":"4308:17:18","value":{"kind":"number","nodeType":"YulLiteral","src":"4321:4:18","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4308:9:18"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"4372:611:18","statements":[{"nodeType":"YulVariableDeclaration","src":"4386:37:18","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4405:6:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4417:4:18","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4413:3:18"},"nodeType":"YulFunctionCall","src":"4413:9:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4401:3:18"},"nodeType":"YulFunctionCall","src":"4401:22:18"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"4390:7:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4437:51:18","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4483:4:18"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"4451:31:18"},"nodeType":"YulFunctionCall","src":"4451:37:18"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"4441:6:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4501:10:18","value":{"kind":"number","nodeType":"YulLiteral","src":"4510:1:18","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"4505:1:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"4569:163:18","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4594:6:18"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4612:3:18"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4617:9:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4608:3:18"},"nodeType":"YulFunctionCall","src":"4608:19:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4602:5:18"},"nodeType":"YulFunctionCall","src":"4602:26:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4587:6:18"},"nodeType":"YulFunctionCall","src":"4587:42:18"},"nodeType":"YulExpressionStatement","src":"4587:42:18"},{"nodeType":"YulAssignment","src":"4646:24:18","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4660:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"4668:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4656:3:18"},"nodeType":"YulFunctionCall","src":"4656:14:18"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4646:6:18"}]},{"nodeType":"YulAssignment","src":"4687:31:18","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4704:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"4715:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4700:3:18"},"nodeType":"YulFunctionCall","src":"4700:18:18"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4687:9:18"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4535:1:18"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"4538:7:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4532:2:18"},"nodeType":"YulFunctionCall","src":"4532:14:18"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4547:21:18","statements":[{"nodeType":"YulAssignment","src":"4549:17:18","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4558:1:18"},{"kind":"number","nodeType":"YulLiteral","src":"4561:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4554:3:18"},"nodeType":"YulFunctionCall","src":"4554:12:18"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"4549:1:18"}]}]},"pre":{"nodeType":"YulBlock","src":"4528:3:18","statements":[]},"src":"4524:208:18"},{"body":{"nodeType":"YulBlock","src":"4768:156:18","statements":[{"nodeType":"YulVariableDeclaration","src":"4786:43:18","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4813:3:18"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4818:9:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4809:3:18"},"nodeType":"YulFunctionCall","src":"4809:19:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4803:5:18"},"nodeType":"YulFunctionCall","src":"4803:26:18"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"4790:9:18","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4853:6:18"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"4880:9:18"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4895:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"4903:4:18","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4891:3:18"},"nodeType":"YulFunctionCall","src":"4891:17:18"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"4861:18:18"},"nodeType":"YulFunctionCall","src":"4861:48:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4846:6:18"},"nodeType":"YulFunctionCall","src":"4846:64:18"},"nodeType":"YulExpressionStatement","src":"4846:64:18"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"4751:7:18"},{"name":"newLen","nodeType":"YulIdentifier","src":"4760:6:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4748:2:18"},"nodeType":"YulFunctionCall","src":"4748:19:18"},"nodeType":"YulIf","src":"4745:179:18"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4944:4:18"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4958:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"4966:1:18","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4954:3:18"},"nodeType":"YulFunctionCall","src":"4954:14:18"},{"kind":"number","nodeType":"YulLiteral","src":"4970:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4950:3:18"},"nodeType":"YulFunctionCall","src":"4950:22:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4937:6:18"},"nodeType":"YulFunctionCall","src":"4937:36:18"},"nodeType":"YulExpressionStatement","src":"4937:36:18"}]},"nodeType":"YulCase","src":"4365:618:18","value":{"kind":"number","nodeType":"YulLiteral","src":"4370:1:18","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"5000:222:18","statements":[{"nodeType":"YulVariableDeclaration","src":"5014:14:18","value":{"kind":"number","nodeType":"YulLiteral","src":"5027:1:18","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5018:5:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"5051:67:18","statements":[{"nodeType":"YulAssignment","src":"5069:35:18","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5088:3:18"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"5093:9:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5084:3:18"},"nodeType":"YulFunctionCall","src":"5084:19:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5078:5:18"},"nodeType":"YulFunctionCall","src":"5078:26:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5069:5:18"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"5044:6:18"},"nodeType":"YulIf","src":"5041:77:18"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5138:4:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5197:5:18"},{"name":"newLen","nodeType":"YulIdentifier","src":"5204:6:18"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"5144:52:18"},"nodeType":"YulFunctionCall","src":"5144:67:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"5131:6:18"},"nodeType":"YulFunctionCall","src":"5131:81:18"},"nodeType":"YulExpressionStatement","src":"5131:81:18"}]},"nodeType":"YulCase","src":"4992:230:18","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4345:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"4353:2:18","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4342:2:18"},"nodeType":"YulFunctionCall","src":"4342:14:18"},"nodeType":"YulSwitch","src":"4335:887:18"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"3914:4:18","type":""},{"name":"src","nodeType":"YulTypedName","src":"3920:3:18","type":""}],"src":"3833:1395:18"}]},"contents":"{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n}\n","id":18,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x8 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x506978656C347465000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5049580000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x0 SWAP1 DUP2 PUSH3 0x8F SWAP2 SWAP1 PUSH3 0x420 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP2 PUSH3 0xA1 SWAP2 SWAP1 PUSH3 0x420 JUMP JUMPDEST POP POP POP PUSH3 0xC4 PUSH3 0xB8 PUSH3 0xD8 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0xE0 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH7 0x2386F26FC10000 PUSH1 0xB DUP2 SWAP1 SSTORE POP PUSH3 0x507 JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x7 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x228 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x23E JUMPI PUSH3 0x23D PUSH3 0x1E0 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH3 0x2A8 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x269 JUMP JUMPDEST PUSH3 0x2B4 DUP7 DUP4 PUSH3 0x269 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x301 PUSH3 0x2FB PUSH3 0x2F5 DUP5 PUSH3 0x2CC JUMP JUMPDEST PUSH3 0x2D6 JUMP JUMPDEST PUSH3 0x2CC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x31D DUP4 PUSH3 0x2E0 JUMP JUMPDEST PUSH3 0x335 PUSH3 0x32C DUP3 PUSH3 0x308 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x276 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH3 0x34C PUSH3 0x33D JUMP JUMPDEST PUSH3 0x359 DUP2 DUP5 DUP5 PUSH3 0x312 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x381 JUMPI PUSH3 0x375 PUSH1 0x0 DUP3 PUSH3 0x342 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x35F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x3D0 JUMPI PUSH3 0x39A DUP2 PUSH3 0x244 JUMP JUMPDEST PUSH3 0x3A5 DUP5 PUSH3 0x259 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x3B5 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x3CD PUSH3 0x3C4 DUP6 PUSH3 0x259 JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x35E JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3F5 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x3D5 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x410 DUP4 DUP4 PUSH3 0x3E2 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x42B DUP3 PUSH3 0x1A6 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x447 JUMPI PUSH3 0x446 PUSH3 0x1B1 JUMP JUMPDEST JUMPDEST PUSH3 0x453 DUP3 SLOAD PUSH3 0x20F JUMP JUMPDEST PUSH3 0x460 DUP3 DUP3 DUP6 PUSH3 0x385 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x498 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x483 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x48F DUP6 DUP3 PUSH3 0x402 JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0x4FF JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x4A8 DUP7 PUSH3 0x244 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x4D2 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x4AB JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0x4F2 JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0x4EE PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x3E2 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x393A DUP1 PUSH3 0x517 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x166 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7231A876 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x9A22D0EA GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xC87B56DD GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x551 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x58E JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5CB JUMPI DUP1 PUSH4 0xFDF2D21E EQ PUSH2 0x5F4 JUMPI PUSH2 0x166 JUMP JUMPDEST DUP1 PUSH4 0x9A22D0EA EQ PUSH2 0x4C2 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x4FF JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x528 JUMPI PUSH2 0x166 JUMP JUMPDEST DUP1 PUSH4 0x7231A876 EQ PUSH2 0x3AD JUMPI DUP1 PUSH4 0x8337AFDC EQ PUSH2 0x3EA JUMPI DUP1 PUSH4 0x862440E2 EQ PUSH2 0x41A JUMPI DUP1 PUSH4 0x889576E9 EQ PUSH2 0x443 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x46C JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x497 JUMPI PUSH2 0x166 JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x123 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x28D JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x2B6 JUMPI DUP1 PUSH4 0x5B7121F8 EQ PUSH2 0x2DF JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x31C JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x359 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x396 JUMPI PUSH2 0x166 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x16B JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x1D3 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x210 JUMPI DUP1 PUSH4 0x13966DB5 EQ PUSH2 0x239 JUMPI DUP1 PUSH4 0x207E6161 EQ PUSH2 0x264 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x192 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18D SWAP2 SWAP1 PUSH2 0x234A JUMP JUMPDEST PUSH2 0x61F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x2392 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BD PUSH2 0x701 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CA SWAP2 SWAP1 PUSH2 0x243D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F5 SWAP2 SWAP1 PUSH2 0x2495 JUMP JUMPDEST PUSH2 0x793 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x207 SWAP2 SWAP1 PUSH2 0x2503 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x232 SWAP2 SWAP1 PUSH2 0x254A JUMP JUMPDEST PUSH2 0x7D9 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x245 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24E PUSH2 0x8F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x25B SWAP2 SWAP1 PUSH2 0x2599 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x270 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x286 SWAP2 SWAP1 PUSH2 0x2495 JUMP JUMPDEST PUSH2 0x8F6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x299 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AF SWAP2 SWAP1 PUSH2 0x25B4 JUMP JUMPDEST PUSH2 0x908 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2D8 SWAP2 SWAP1 PUSH2 0x25B4 JUMP JUMPDEST PUSH2 0x968 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x306 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x301 SWAP2 SWAP1 PUSH2 0x2495 JUMP JUMPDEST PUSH2 0x988 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x313 SWAP2 SWAP1 PUSH2 0x2503 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x328 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x343 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x33E SWAP2 SWAP1 PUSH2 0x2495 JUMP JUMPDEST PUSH2 0x9C5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x350 SWAP2 SWAP1 PUSH2 0x2503 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x365 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x380 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x37B SWAP2 SWAP1 PUSH2 0x2607 JUMP JUMPDEST PUSH2 0xA4B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x38D SWAP2 SWAP1 PUSH2 0x2599 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH2 0xB02 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3CF SWAP2 SWAP1 PUSH2 0x2607 JUMP JUMPDEST PUSH2 0xB16 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3E1 SWAP2 SWAP1 PUSH2 0x26F2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x404 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3FF SWAP2 SWAP1 PUSH2 0x2849 JUMP JUMPDEST PUSH2 0xC24 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x411 SWAP2 SWAP1 PUSH2 0x2599 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x426 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x441 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x43C SWAP2 SWAP1 PUSH2 0x28B8 JUMP JUMPDEST PUSH2 0xD5A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x46A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x465 SWAP2 SWAP1 PUSH2 0x2914 JUMP JUMPDEST PUSH2 0xDE4 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x478 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x481 PUSH2 0xEA1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x48E SWAP2 SWAP1 PUSH2 0x2503 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AC PUSH2 0xECB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4B9 SWAP2 SWAP1 PUSH2 0x243D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4E9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4E4 SWAP2 SWAP1 PUSH2 0x2495 JUMP JUMPDEST PUSH2 0xF5D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4F6 SWAP2 SWAP1 PUSH2 0x2599 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x526 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x521 SWAP2 SWAP1 PUSH2 0x2980 JUMP JUMPDEST PUSH2 0xF7A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x534 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x54F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x54A SWAP2 SWAP1 PUSH2 0x2A61 JUMP JUMPDEST PUSH2 0xF90 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x55D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x578 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x573 SWAP2 SWAP1 PUSH2 0x2495 JUMP JUMPDEST PUSH2 0xFF2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x585 SWAP2 SWAP1 PUSH2 0x243D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x59A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5B5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5B0 SWAP2 SWAP1 PUSH2 0x2AE4 JUMP JUMPDEST PUSH2 0x1104 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5C2 SWAP2 SWAP1 PUSH2 0x2392 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5F2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5ED SWAP2 SWAP1 PUSH2 0x2607 JUMP JUMPDEST PUSH2 0x1198 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x600 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x609 PUSH2 0x121B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x616 SWAP2 SWAP1 PUSH2 0x2599 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x6EA JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x6FA JUMPI POP PUSH2 0x6F9 DUP3 PUSH2 0x122C JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x710 SWAP1 PUSH2 0x2B53 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x73C SWAP1 PUSH2 0x2B53 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x789 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x75E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x789 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x76C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x79E DUP3 PUSH2 0x1296 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E4 DUP3 PUSH2 0x9C5 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x854 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x84B SWAP1 PUSH2 0x2BF6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x873 PUSH2 0x12E1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x8A2 JUMPI POP PUSH2 0x8A1 DUP2 PUSH2 0x89C PUSH2 0x12E1 JUMP JUMPDEST PUSH2 0x1104 JUMP JUMPDEST JUMPDEST PUSH2 0x8E1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D8 SWAP1 PUSH2 0x2C88 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8EB DUP4 DUP4 PUSH2 0x12E9 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST PUSH2 0x8FE PUSH2 0x13A2 JUMP JUMPDEST DUP1 PUSH1 0xB DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x919 PUSH2 0x913 PUSH2 0x12E1 JUMP JUMPDEST DUP3 PUSH2 0x1420 JUMP JUMPDEST PUSH2 0x958 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x94F SWAP1 PUSH2 0x2D1A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x963 DUP4 DUP4 DUP4 PUSH2 0x14B5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x983 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xF90 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x9D1 DUP4 PUSH2 0x17AE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA42 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA39 SWAP1 PUSH2 0x2D86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xABB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAB2 SWAP1 PUSH2 0x2E18 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB0A PUSH2 0x13A2 JUMP JUMPDEST PUSH2 0xB14 PUSH1 0x0 PUSH2 0x17EB JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xB23 DUP4 PUSH2 0xA4B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB41 JUMPI PUSH2 0xB40 PUSH2 0x271E JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB6F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 SUB PUSH2 0xB84 JUMPI DUP1 SWAP3 POP POP POP PUSH2 0xC1F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 POP JUMPDEST PUSH2 0xB94 PUSH2 0x121B JUMP JUMPDEST DUP2 GT PUSH2 0xC17 JUMPI DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xBBA DUP3 PUSH2 0x9C5 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC04 JUMPI DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xBE9 JUMPI PUSH2 0xBE8 PUSH2 0x2E38 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 DUP1 PUSH2 0xC00 SWAP1 PUSH2 0x2E96 JUMP JUMPDEST SWAP3 POP POP JUMPDEST DUP1 DUP1 PUSH2 0xC0F SWAP1 PUSH2 0x2E96 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xB8C JUMP JUMPDEST POP DUP2 SWAP4 POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xB SLOAD CALLVALUE LT ISZERO PUSH2 0xC6B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC62 SWAP1 PUSH2 0x2F2A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC75 PUSH1 0x8 PUSH2 0x18B1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC81 PUSH1 0x8 PUSH2 0x18C7 JUMP JUMPDEST SWAP1 POP PUSH2 0xC8D DUP6 DUP3 PUSH2 0x18D5 JUMP JUMPDEST PUSH2 0xC97 DUP2 DUP5 PUSH2 0x1AF2 JUMP JUMPDEST CALLER PUSH1 0x9 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 PUSH1 0xA PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xD09 PUSH2 0xEA1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC CALLVALUE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xD4E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD65 DUP4 PUSH2 0x9C5 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDD5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDCC SWAP1 PUSH2 0x2F96 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDDF DUP4 DUP4 PUSH2 0x1AF2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x9 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xE85 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE7C SWAP1 PUSH2 0x3002 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0xA PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0xEDA SWAP1 PUSH2 0x2B53 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xF06 SWAP1 PUSH2 0x2B53 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xF53 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xF28 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xF53 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xF36 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF8C PUSH2 0xF85 PUSH2 0x12E1 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x1B5F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xFA1 PUSH2 0xF9B PUSH2 0x12E1 JUMP JUMPDEST DUP4 PUSH2 0x1420 JUMP JUMPDEST PUSH2 0xFE0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFD7 SWAP1 PUSH2 0x2D1A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xFEC DUP5 DUP5 DUP5 DUP5 PUSH2 0x1CCB JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xFFD DUP3 PUSH2 0x1296 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0x101D SWAP1 PUSH2 0x2B53 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1049 SWAP1 PUSH2 0x2B53 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1096 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x106B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1096 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1079 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x10A7 PUSH2 0x1D27 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x10BC JUMPI DUP2 SWAP3 POP POP POP PUSH2 0x10FF JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x10F1 JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x10D9 SWAP3 SWAP2 SWAP1 PUSH2 0x305E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP PUSH2 0x10FF JUMP JUMPDEST PUSH2 0x10FA DUP5 PUSH2 0x1D3E JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x11A0 PUSH2 0x13A2 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x120F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1206 SWAP1 PUSH2 0x30F4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1218 DUP2 PUSH2 0x17EB JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1227 PUSH1 0x8 PUSH2 0x18C7 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x129F DUP2 PUSH2 0x1DA6 JUMP JUMPDEST PUSH2 0x12DE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12D5 SWAP1 PUSH2 0x2D86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x135C DUP4 PUSH2 0x9C5 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x13AA PUSH2 0x12E1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x13C8 PUSH2 0xEA1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x141E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1415 SWAP1 PUSH2 0x3160 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x142C DUP4 PUSH2 0x9C5 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x146E JUMPI POP PUSH2 0x146D DUP2 DUP6 PUSH2 0x1104 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x14AC JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1494 DUP5 PUSH2 0x793 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x14D5 DUP3 PUSH2 0x9C5 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x152B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1522 SWAP1 PUSH2 0x31F2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x159A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1591 SWAP1 PUSH2 0x3284 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x15A7 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1DE7 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x15C7 DUP3 PUSH2 0x9C5 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x161D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1614 SWAP1 PUSH2 0x31F2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x17A9 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1F0D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x7 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1944 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x193B SWAP1 PUSH2 0x32F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x194D DUP2 PUSH2 0x1DA6 JUMP JUMPDEST ISZERO PUSH2 0x198D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1984 SWAP1 PUSH2 0x335C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x199B PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1DE7 JUMP JUMPDEST PUSH2 0x19A4 DUP2 PUSH2 0x1DA6 JUMP JUMPDEST ISZERO PUSH2 0x19E4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19DB SWAP1 PUSH2 0x335C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1AEE PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1F0D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1AFB DUP3 PUSH2 0x1DA6 JUMP JUMPDEST PUSH2 0x1B3A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B31 SWAP1 PUSH2 0x33EE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 DUP2 PUSH2 0x1B5A SWAP2 SWAP1 PUSH2 0x35BA JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1BCD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1BC4 SWAP1 PUSH2 0x36D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1CBE SWAP2 SWAP1 PUSH2 0x2392 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1CD6 DUP5 DUP5 DUP5 PUSH2 0x14B5 JUMP JUMPDEST PUSH2 0x1CE2 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1F13 JUMP JUMPDEST PUSH2 0x1D21 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D18 SWAP1 PUSH2 0x376A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1D49 DUP3 PUSH2 0x1296 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D53 PUSH2 0x1D27 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x1D73 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1D9E JUMP JUMPDEST DUP1 PUSH2 0x1D7D DUP5 PUSH2 0x209A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1D8E SWAP3 SWAP2 SWAP1 PUSH2 0x305E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1DC8 DUP4 PUSH2 0x17AE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1F07 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1E7B JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1E73 SWAP2 SWAP1 PUSH2 0x378A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1F06 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1EFE SWAP2 SWAP1 PUSH2 0x37BE JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F34 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2168 JUMP JUMPDEST ISZERO PUSH2 0x208D JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1F5D PUSH2 0x12E1 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F7F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3847 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1FBB JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1FB8 SWAP2 SWAP1 PUSH2 0x38A8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x203D JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1FEB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FF0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x2035 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x202C SWAP1 PUSH2 0x376A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x2092 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x20A9 DUP5 PUSH2 0x218B JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x20C8 JUMPI PUSH2 0x20C7 PUSH2 0x271E JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x20FA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x215D JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x2151 JUMPI PUSH2 0x2150 PUSH2 0x38D5 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x2108 JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x21E9 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x21DF JUMPI PUSH2 0x21DE PUSH2 0x38D5 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x2226 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x221C JUMPI PUSH2 0x221B PUSH2 0x38D5 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x2255 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x224B JUMPI PUSH2 0x224A PUSH2 0x38D5 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x227E JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x2274 JUMPI PUSH2 0x2273 PUSH2 0x38D5 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x22A3 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x2299 JUMPI PUSH2 0x2298 PUSH2 0x38D5 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x22C6 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x22BC JUMPI PUSH2 0x22BB PUSH2 0x38D5 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x22D5 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2327 DUP2 PUSH2 0x22F2 JUMP JUMPDEST DUP2 EQ PUSH2 0x2332 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2344 DUP2 PUSH2 0x231E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2360 JUMPI PUSH2 0x235F PUSH2 0x22E8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x236E DUP5 DUP3 DUP6 ADD PUSH2 0x2335 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x238C DUP2 PUSH2 0x2377 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x23A7 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2383 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x23E7 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x23CC JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x240F DUP3 PUSH2 0x23AD JUMP JUMPDEST PUSH2 0x2419 DUP2 DUP6 PUSH2 0x23B8 JUMP JUMPDEST SWAP4 POP PUSH2 0x2429 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x23C9 JUMP JUMPDEST PUSH2 0x2432 DUP2 PUSH2 0x23F3 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2457 DUP2 DUP5 PUSH2 0x2404 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2472 DUP2 PUSH2 0x245F JUMP JUMPDEST DUP2 EQ PUSH2 0x247D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x248F DUP2 PUSH2 0x2469 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x24AB JUMPI PUSH2 0x24AA PUSH2 0x22E8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x24B9 DUP5 DUP3 DUP6 ADD PUSH2 0x2480 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24ED DUP3 PUSH2 0x24C2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x24FD DUP2 PUSH2 0x24E2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2518 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x24F4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2527 DUP2 PUSH2 0x24E2 JUMP JUMPDEST DUP2 EQ PUSH2 0x2532 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2544 DUP2 PUSH2 0x251E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2561 JUMPI PUSH2 0x2560 PUSH2 0x22E8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x256F DUP6 DUP3 DUP7 ADD PUSH2 0x2535 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2580 DUP6 DUP3 DUP7 ADD PUSH2 0x2480 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x2593 DUP2 PUSH2 0x245F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x25AE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x258A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x25CD JUMPI PUSH2 0x25CC PUSH2 0x22E8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x25DB DUP7 DUP3 DUP8 ADD PUSH2 0x2535 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x25EC DUP7 DUP3 DUP8 ADD PUSH2 0x2535 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x25FD DUP7 DUP3 DUP8 ADD PUSH2 0x2480 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x261D JUMPI PUSH2 0x261C PUSH2 0x22E8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x262B DUP5 DUP3 DUP6 ADD PUSH2 0x2535 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2669 DUP2 PUSH2 0x245F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x267B DUP4 DUP4 PUSH2 0x2660 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x269F DUP3 PUSH2 0x2634 JUMP JUMPDEST PUSH2 0x26A9 DUP2 DUP6 PUSH2 0x263F JUMP JUMPDEST SWAP4 POP PUSH2 0x26B4 DUP4 PUSH2 0x2650 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x26E5 JUMPI DUP2 MLOAD PUSH2 0x26CC DUP9 DUP3 PUSH2 0x266F JUMP JUMPDEST SWAP8 POP PUSH2 0x26D7 DUP4 PUSH2 0x2687 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x26B8 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x270C DUP2 DUP5 PUSH2 0x2694 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x2756 DUP3 PUSH2 0x23F3 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2775 JUMPI PUSH2 0x2774 PUSH2 0x271E JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2788 PUSH2 0x22DE JUMP JUMPDEST SWAP1 POP PUSH2 0x2794 DUP3 DUP3 PUSH2 0x274D JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x27B4 JUMPI PUSH2 0x27B3 PUSH2 0x271E JUMP JUMPDEST JUMPDEST PUSH2 0x27BD DUP3 PUSH2 0x23F3 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27EC PUSH2 0x27E7 DUP5 PUSH2 0x2799 JUMP JUMPDEST PUSH2 0x277E JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x2808 JUMPI PUSH2 0x2807 PUSH2 0x2719 JUMP JUMPDEST JUMPDEST PUSH2 0x2813 DUP5 DUP3 DUP6 PUSH2 0x27CA JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2830 JUMPI PUSH2 0x282F PUSH2 0x2714 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2840 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x27D9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2862 JUMPI PUSH2 0x2861 PUSH2 0x22E8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2870 DUP7 DUP3 DUP8 ADD PUSH2 0x2535 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2881 DUP7 DUP3 DUP8 ADD PUSH2 0x2480 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x28A2 JUMPI PUSH2 0x28A1 PUSH2 0x22ED JUMP JUMPDEST JUMPDEST PUSH2 0x28AE DUP7 DUP3 DUP8 ADD PUSH2 0x281B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x28CF JUMPI PUSH2 0x28CE PUSH2 0x22E8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x28DD DUP6 DUP3 DUP7 ADD PUSH2 0x2480 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x28FE JUMPI PUSH2 0x28FD PUSH2 0x22ED JUMP JUMPDEST JUMPDEST PUSH2 0x290A DUP6 DUP3 DUP7 ADD PUSH2 0x281B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x292B JUMPI PUSH2 0x292A PUSH2 0x22E8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2939 DUP6 DUP3 DUP7 ADD PUSH2 0x2480 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x294A DUP6 DUP3 DUP7 ADD PUSH2 0x2480 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x295D DUP2 PUSH2 0x2377 JUMP JUMPDEST DUP2 EQ PUSH2 0x2968 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x297A DUP2 PUSH2 0x2954 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2997 JUMPI PUSH2 0x2996 PUSH2 0x22E8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x29A5 DUP6 DUP3 DUP7 ADD PUSH2 0x2535 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x29B6 DUP6 DUP3 DUP7 ADD PUSH2 0x296B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x29DB JUMPI PUSH2 0x29DA PUSH2 0x271E JUMP JUMPDEST JUMPDEST PUSH2 0x29E4 DUP3 PUSH2 0x23F3 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A04 PUSH2 0x29FF DUP5 PUSH2 0x29C0 JUMP JUMPDEST PUSH2 0x277E JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x2A20 JUMPI PUSH2 0x2A1F PUSH2 0x2719 JUMP JUMPDEST JUMPDEST PUSH2 0x2A2B DUP5 DUP3 DUP6 PUSH2 0x27CA JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2A48 JUMPI PUSH2 0x2A47 PUSH2 0x2714 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2A58 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x29F1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2A7B JUMPI PUSH2 0x2A7A PUSH2 0x22E8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2A89 DUP8 DUP3 DUP9 ADD PUSH2 0x2535 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x2A9A DUP8 DUP3 DUP9 ADD PUSH2 0x2535 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x2AAB DUP8 DUP3 DUP9 ADD PUSH2 0x2480 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2ACC JUMPI PUSH2 0x2ACB PUSH2 0x22ED JUMP JUMPDEST JUMPDEST PUSH2 0x2AD8 DUP8 DUP3 DUP9 ADD PUSH2 0x2A33 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2AFB JUMPI PUSH2 0x2AFA PUSH2 0x22E8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2B09 DUP6 DUP3 DUP7 ADD PUSH2 0x2535 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2B1A DUP6 DUP3 DUP7 ADD PUSH2 0x2535 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2B6B JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2B7E JUMPI PUSH2 0x2B7D PUSH2 0x2B24 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BE0 PUSH1 0x21 DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x2BEB DUP3 PUSH2 0x2B84 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C0F DUP2 PUSH2 0x2BD3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C72 PUSH1 0x3D DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x2C7D DUP3 PUSH2 0x2C16 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2CA1 DUP2 PUSH2 0x2C65 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D04 PUSH1 0x2D DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x2D0F DUP3 PUSH2 0x2CA8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2D33 DUP2 PUSH2 0x2CF7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D70 PUSH1 0x18 DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x2D7B DUP3 PUSH2 0x2D3A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2D9F DUP2 PUSH2 0x2D63 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E02 PUSH1 0x29 DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x2E0D DUP3 PUSH2 0x2DA6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E31 DUP2 PUSH2 0x2DF5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2EA1 DUP3 PUSH2 0x245F JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x2ED3 JUMPI PUSH2 0x2ED2 PUSH2 0x2E67 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E73756666696369656E74207061796D656E74000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F14 PUSH1 0x14 DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x2F1F DUP3 PUSH2 0x2EDE JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2F43 DUP2 PUSH2 0x2F07 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x554E415554484F52495A45440000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F80 PUSH1 0xC DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x2F8B DUP3 PUSH2 0x2F4A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2FAF DUP2 PUSH2 0x2F73 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x556E617574686F72697A65640000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FEC PUSH1 0xC DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x2FF7 DUP3 PUSH2 0x2FB6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x301B DUP2 PUSH2 0x2FDF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3038 DUP3 PUSH2 0x23AD JUMP JUMPDEST PUSH2 0x3042 DUP2 DUP6 PUSH2 0x3022 JUMP JUMPDEST SWAP4 POP PUSH2 0x3052 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x23C9 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x306A DUP3 DUP6 PUSH2 0x302D JUMP JUMPDEST SWAP2 POP PUSH2 0x3076 DUP3 DUP5 PUSH2 0x302D JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30DE PUSH1 0x26 DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x30E9 DUP3 PUSH2 0x3082 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x310D DUP2 PUSH2 0x30D1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x314A PUSH1 0x20 DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x3155 DUP3 PUSH2 0x3114 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3179 DUP2 PUSH2 0x313D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x31DC PUSH1 0x25 DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x31E7 DUP3 PUSH2 0x3180 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x320B DUP2 PUSH2 0x31CF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x326E PUSH1 0x24 DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x3279 DUP3 PUSH2 0x3212 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x329D DUP2 PUSH2 0x3261 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32DA PUSH1 0x20 DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x32E5 DUP3 PUSH2 0x32A4 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3309 DUP2 PUSH2 0x32CD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3346 PUSH1 0x1C DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x3351 DUP3 PUSH2 0x3310 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3375 DUP2 PUSH2 0x3339 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524337323155524953746F726167653A2055524920736574206F66206E6F6E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6578697374656E7420746F6B656E000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33D8 PUSH1 0x2E DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x33E3 DUP3 PUSH2 0x337C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3407 DUP2 PUSH2 0x33CB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x3470 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x3433 JUMP JUMPDEST PUSH2 0x347A DUP7 DUP4 PUSH2 0x3433 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34B7 PUSH2 0x34B2 PUSH2 0x34AD DUP5 PUSH2 0x245F JUMP JUMPDEST PUSH2 0x3492 JUMP JUMPDEST PUSH2 0x245F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x34D1 DUP4 PUSH2 0x349C JUMP JUMPDEST PUSH2 0x34E5 PUSH2 0x34DD DUP3 PUSH2 0x34BE JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x3440 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x34FA PUSH2 0x34ED JUMP JUMPDEST PUSH2 0x3505 DUP2 DUP5 DUP5 PUSH2 0x34C8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3529 JUMPI PUSH2 0x351E PUSH1 0x0 DUP3 PUSH2 0x34F2 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x350B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x356E JUMPI PUSH2 0x353F DUP2 PUSH2 0x340E JUMP JUMPDEST PUSH2 0x3548 DUP5 PUSH2 0x3423 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x3557 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x356B PUSH2 0x3563 DUP6 PUSH2 0x3423 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x350A JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3591 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x3573 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x35AA DUP4 DUP4 PUSH2 0x3580 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x35C3 DUP3 PUSH2 0x23AD JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x35DC JUMPI PUSH2 0x35DB PUSH2 0x271E JUMP JUMPDEST JUMPDEST PUSH2 0x35E6 DUP3 SLOAD PUSH2 0x2B53 JUMP JUMPDEST PUSH2 0x35F1 DUP3 DUP3 DUP6 PUSH2 0x352D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x3624 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x3612 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x361C DUP6 DUP3 PUSH2 0x359E JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x3684 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x3632 DUP7 PUSH2 0x340E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x365A JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3635 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x3677 JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x3673 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x3580 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36C2 PUSH1 0x19 DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x36CD DUP3 PUSH2 0x368C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x36F1 DUP2 PUSH2 0x36B5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3754 PUSH1 0x32 DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x375F DUP3 PUSH2 0x36F8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3783 DUP2 PUSH2 0x3747 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3795 DUP3 PUSH2 0x245F JUMP JUMPDEST SWAP2 POP PUSH2 0x37A0 DUP4 PUSH2 0x245F JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x37B8 JUMPI PUSH2 0x37B7 PUSH2 0x2E67 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37C9 DUP3 PUSH2 0x245F JUMP JUMPDEST SWAP2 POP PUSH2 0x37D4 DUP4 PUSH2 0x245F JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x37EC JUMPI PUSH2 0x37EB PUSH2 0x2E67 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3819 DUP3 PUSH2 0x37F2 JUMP JUMPDEST PUSH2 0x3823 DUP2 DUP6 PUSH2 0x37FD JUMP JUMPDEST SWAP4 POP PUSH2 0x3833 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x23C9 JUMP JUMPDEST PUSH2 0x383C DUP2 PUSH2 0x23F3 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x385C PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x24F4 JUMP JUMPDEST PUSH2 0x3869 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x24F4 JUMP JUMPDEST PUSH2 0x3876 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x258A JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x3888 DUP2 DUP5 PUSH2 0x380E JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x38A2 DUP2 PUSH2 0x231E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x38BE JUMPI PUSH2 0x38BD PUSH2 0x22E8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x38CC DUP5 DUP3 DUP6 ADD PUSH2 0x3893 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMP MLOAD 0xAE DUP6 0xB4 CALLDATACOPY 0xB3 SWAP5 0xA9 0x5C SHL 0xD7 SWAP1 0x5C 0x4B CALL 0xC7 0xCE 0xA5 0xF8 DUP5 PUSH19 0x9AEF28A6216FA55594AB64736F6C6343000811 STOP CALLER ","sourceMap":"250:2422:17:-:0;;;524:120;;;;;;;;;;1390:113:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1464:5;1456;:13;;;;;;:::i;:::-;;1489:7;1479;:17;;;;;;:::i;:::-;;1390:113;;936:32:0;955:12;:10;;;:12;;:::i;:::-;936:18;;;:32;;:::i;:::-;584:10:17::1;574:7;:20;;;;250:2422:::0;;640:96:7;693:7;719:10;712:17;;640:96;:::o;2433:187:0:-;2506:16;2525:6;;;;;;;;;;;2506:25;;2550:8;2541:6;;:17;;;;;;;;;;;;;;;;;;2604:8;2573:40;;2594:8;2573:40;;;;;;;;;;;;2496:124;2433:187;:::o;7:99:18:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:180::-;160:77;157:1;150:88;257:4;254:1;247:15;281:4;278:1;271:15;298:180;346:77;343:1;336:88;443:4;440:1;433:15;467:4;464:1;457:15;484:320;528:6;565:1;559:4;555:12;545:22;;612:1;606:4;602:12;633:18;623:81;;689:4;681:6;677:17;667:27;;623:81;751:2;743:6;740:14;720:18;717:38;714:84;;770:18;;:::i;:::-;714:84;535:269;484:320;;;:::o;810:141::-;859:4;882:3;874:11;;905:3;902:1;895:14;939:4;936:1;926:18;918:26;;810:141;;;:::o;957:93::-;994:6;1041:2;1036;1029:5;1025:14;1021:23;1011:33;;957:93;;;:::o;1056:107::-;1100:8;1150:5;1144:4;1140:16;1119:37;;1056:107;;;;:::o;1169:393::-;1238:6;1288:1;1276:10;1272:18;1311:97;1341:66;1330:9;1311:97;:::i;:::-;1429:39;1459:8;1448:9;1429:39;:::i;:::-;1417:51;;1501:4;1497:9;1490:5;1486:21;1477:30;;1550:4;1540:8;1536:19;1529:5;1526:30;1516:40;;1245:317;;1169:393;;;;;:::o;1568:77::-;1605:7;1634:5;1623:16;;1568:77;;;:::o;1651:60::-;1679:3;1700:5;1693:12;;1651:60;;;:::o;1717:142::-;1767:9;1800:53;1818:34;1827:24;1845:5;1827:24;:::i;:::-;1818:34;:::i;:::-;1800:53;:::i;:::-;1787:66;;1717:142;;;:::o;1865:75::-;1908:3;1929:5;1922:12;;1865:75;;;:::o;1946:269::-;2056:39;2087:7;2056:39;:::i;:::-;2117:91;2166:41;2190:16;2166:41;:::i;:::-;2158:6;2151:4;2145:11;2117:91;:::i;:::-;2111:4;2104:105;2022:193;1946:269;;;:::o;2221:73::-;2266:3;2221:73;:::o;2300:189::-;2377:32;;:::i;:::-;2418:65;2476:6;2468;2462:4;2418:65;:::i;:::-;2353:136;2300:189;;:::o;2495:186::-;2555:120;2572:3;2565:5;2562:14;2555:120;;;2626:39;2663:1;2656:5;2626:39;:::i;:::-;2599:1;2592:5;2588:13;2579:22;;2555:120;;;2495:186;;:::o;2687:543::-;2788:2;2783:3;2780:11;2777:446;;;2822:38;2854:5;2822:38;:::i;:::-;2906:29;2924:10;2906:29;:::i;:::-;2896:8;2892:44;3089:2;3077:10;3074:18;3071:49;;;3110:8;3095:23;;3071:49;3133:80;3189:22;3207:3;3189:22;:::i;:::-;3179:8;3175:37;3162:11;3133:80;:::i;:::-;2792:431;;2777:446;2687:543;;;:::o;3236:117::-;3290:8;3340:5;3334:4;3330:16;3309:37;;3236:117;;;;:::o;3359:169::-;3403:6;3436:51;3484:1;3480:6;3472:5;3469:1;3465:13;3436:51;:::i;:::-;3432:56;3517:4;3511;3507:15;3497:25;;3410:118;3359:169;;;;:::o;3533:295::-;3609:4;3755:29;3780:3;3774:4;3755:29;:::i;:::-;3747:37;;3817:3;3814:1;3810:11;3804:4;3801:21;3793:29;;3533:295;;;;:::o;3833:1395::-;3950:37;3983:3;3950:37;:::i;:::-;4052:18;4044:6;4041:30;4038:56;;;4074:18;;:::i;:::-;4038:56;4118:38;4150:4;4144:11;4118:38;:::i;:::-;4203:67;4263:6;4255;4249:4;4203:67;:::i;:::-;4297:1;4321:4;4308:17;;4353:2;4345:6;4342:14;4370:1;4365:618;;;;5027:1;5044:6;5041:77;;;5093:9;5088:3;5084:19;5078:26;5069:35;;5041:77;5144:67;5204:6;5197:5;5144:67;:::i;:::-;5138:4;5131:81;5000:222;4335:887;;4365:618;4417:4;4413:9;4405:6;4401:22;4451:37;4483:4;4451:37;:::i;:::-;4510:1;4524:208;4538:7;4535:1;4532:14;4524:208;;;4617:9;4612:3;4608:19;4602:26;4594:6;4587:42;4668:1;4660:6;4656:14;4646:24;;4715:2;4704:9;4700:18;4687:31;;4561:4;4558:1;4554:12;4549:17;;4524:208;;;4760:6;4751:7;4748:19;4745:179;;;4818:9;4813:3;4809:19;4803:26;4861:48;4903:4;4895:6;4891:17;4880:9;4861:48;:::i;:::-;4853:6;4846:64;4768:156;4745:179;4970:1;4966;4958:6;4954:14;4950:22;4944:4;4937:36;4372:611;;;4335:887;;3925:1303;;;3833:1395;;:::o;250:2422:17:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_1056":{"entryPoint":7949,"id":1056,"parameterSlots":4,"returnSlots":0},"@_approve_889":{"entryPoint":4841,"id":889,"parameterSlots":2,"returnSlots":0},"@_baseURI_326":{"entryPoint":7463,"id":326,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_1043":{"entryPoint":7655,"id":1043,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_997":{"entryPoint":7955,"id":997,"parameterSlots":4,"returnSlots":1},"@_checkOwner_54":{"entryPoint":5026,"id":54,"parameterSlots":0,"returnSlots":0},"@_exists_558":{"entryPoint":7590,"id":558,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_592":{"entryPoint":5152,"id":592,"parameterSlots":2,"returnSlots":1},"@_mint_713":{"entryPoint":6357,"id":713,"parameterSlots":2,"returnSlots":0},"@_msgSender_1685":{"entryPoint":4833,"id":1685,"parameterSlots":0,"returnSlots":1},"@_ownerOf_540":{"entryPoint":6062,"id":540,"parameterSlots":1,"returnSlots":1},"@_requireMinted_935":{"entryPoint":4758,"id":935,"parameterSlots":1,"returnSlots":0},"@_safeTransfer_527":{"entryPoint":7371,"id":527,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_921":{"entryPoint":7007,"id":921,"parameterSlots":3,"returnSlots":0},"@_setTokenURI_1285":{"entryPoint":6898,"id":1285,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_111":{"entryPoint":6123,"id":111,"parameterSlots":1,"returnSlots":0},"@_transfer_865":{"entryPoint":5301,"id":865,"parameterSlots":3,"returnSlots":0},"@approve_369":{"entryPoint":2009,"id":369,"parameterSlots":2,"returnSlots":0},"@balanceOf_230":{"entryPoint":2635,"id":230,"parameterSlots":1,"returnSlots":1},"@currentItem_5874":{"entryPoint":4635,"id":5874,"parameterSlots":0,"returnSlots":1},"@current_1713":{"entryPoint":6343,"id":1713,"parameterSlots":1,"returnSlots":1},"@getApproved_387":{"entryPoint":1939,"id":387,"parameterSlots":1,"returnSlots":1},"@getMinter_5969":{"entryPoint":2440,"id":5969,"parameterSlots":1,"returnSlots":1},"@getRoyaltiesPercent_6005":{"entryPoint":3933,"id":6005,"parameterSlots":1,"returnSlots":1},"@increment_1727":{"entryPoint":6321,"id":1727,"parameterSlots":1,"returnSlots":0},"@isApprovedForAll_422":{"entryPoint":4356,"id":422,"parameterSlots":2,"returnSlots":1},"@isContract_1361":{"entryPoint":8552,"id":1361,"parameterSlots":1,"returnSlots":1},"@itemsOf_5945":{"entryPoint":2838,"id":5945,"parameterSlots":1,"returnSlots":1},"@log10_2682":{"entryPoint":8587,"id":2682,"parameterSlots":1,"returnSlots":1},"@mintFeeUpdate_5957":{"entryPoint":2294,"id":5957,"parameterSlots":1,"returnSlots":0},"@mintFee_5759":{"entryPoint":2288,"id":5759,"parameterSlots":0,"returnSlots":0},"@mintItem_5837":{"entryPoint":3108,"id":5837,"parameterSlots":3,"returnSlots":1},"@name_268":{"entryPoint":1793,"id":268,"parameterSlots":0,"returnSlots":1},"@ownerOf_258":{"entryPoint":2501,"id":258,"parameterSlots":1,"returnSlots":1},"@owner_40":{"entryPoint":3745,"id":40,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_68":{"entryPoint":2818,"id":68,"parameterSlots":0,"returnSlots":0},"@safeTransferFrom_468":{"entryPoint":2408,"id":468,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_498":{"entryPoint":3984,"id":498,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_404":{"entryPoint":3962,"id":404,"parameterSlots":2,"returnSlots":0},"@setRoyaltiesPercent_5993":{"entryPoint":3556,"id":5993,"parameterSlots":2,"returnSlots":0},"@setURI_5864":{"entryPoint":3418,"id":5864,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1967":{"entryPoint":4652,"id":1967,"parameterSlots":1,"returnSlots":1},"@supportsInterface_206":{"entryPoint":1567,"id":206,"parameterSlots":1,"returnSlots":1},"@symbol_278":{"entryPoint":3787,"id":278,"parameterSlots":0,"returnSlots":1},"@toString_1827":{"entryPoint":8346,"id":1827,"parameterSlots":1,"returnSlots":1},"@tokenURI_1263":{"entryPoint":4082,"id":1263,"parameterSlots":1,"returnSlots":1},"@tokenURI_317":{"entryPoint":7486,"id":317,"parameterSlots":1,"returnSlots":1},"@transferFrom_449":{"entryPoint":2312,"id":449,"parameterSlots":3,"returnSlots":0},"@transferOwnership_91":{"entryPoint":4504,"id":91,"parameterSlots":1,"returnSlots":0},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":10737,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_string_memory_ptr":{"entryPoint":10201,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":9525,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":10603,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":9013,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":14483,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":10803,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_string_memory_ptr":{"entryPoint":10267,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":9344,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":9735,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":10980,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":9652,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":10849,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":10624,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":9546,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256t_string_memory_ptr":{"entryPoint":10313,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes4":{"entryPoint":9034,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":14504,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":9365,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_string_memory_ptr":{"entryPoint":10424,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":10516,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encodeUpdatedPos_t_uint256_to_t_uint256":{"entryPoint":9839,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":9460,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack":{"entryPoint":9876,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":9091,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":14350,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":9220,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":12333,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack":{"entryPoint":11511,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1b2638459828301e8cd6c7c02856073bacf975379e0867f689bb14feacb780c5_to_t_string_memory_ptr_fromStack":{"entryPoint":12255,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack":{"entryPoint":14151,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack":{"entryPoint":12497,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_269df367cd41cace5897a935d0e0858fe4543b5619d45e09af6b124c1bb3d528_to_t_string_memory_ptr_fromStack":{"entryPoint":12147,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack":{"entryPoint":12751,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack":{"entryPoint":13113,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack":{"entryPoint":12897,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack":{"entryPoint":14005,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack":{"entryPoint":11765,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4_to_t_string_memory_ptr_fromStack":{"entryPoint":13259,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack":{"entryPoint":13005,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_8d1b93b434e468e73514a2449ae955e822f73dcdf924bb4553be247ebca8755e_to_t_string_memory_ptr_fromStack":{"entryPoint":12039,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack":{"entryPoint":12605,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack":{"entryPoint":11619,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack":{"entryPoint":11219,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack":{"entryPoint":11365,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256":{"entryPoint":9824,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":9610,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":12382,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":9475,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":14407,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":9970,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":9106,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9277,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11546,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1b2638459828301e8cd6c7c02856073bacf975379e0867f689bb14feacb780c5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12290,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14186,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12532,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_269df367cd41cace5897a935d0e0858fe4543b5619d45e09af6b124c1bb3d528__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12182,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12786,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13148,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12932,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14040,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11800,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13294,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13040,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8d1b93b434e468e73514a2449ae955e822f73dcdf924bb4553be247ebca8755e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12074,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12640,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11654,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11254,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11400,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":9625,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":10110,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":8926,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":10688,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":10137,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":9808,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":13326,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":9780,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":14322,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":9133,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":9863,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack":{"entryPoint":9791,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":14333,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":9144,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":12322,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":14270,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":14218,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":13613,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_address":{"entryPoint":9442,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":9079,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":8946,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":9410,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":9311,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":13578,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":13468,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":13754,"id":null,"parameterSlots":2,"returnSlots":0},"copy_calldata_to_memory_with_cleanup":{"entryPoint":10186,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":9161,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":13347,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":11091,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":13726,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":10061,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":13458,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":11926,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":13696,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":11879,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":14549,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":11044,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":11832,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":10014,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":13502,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":10004,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":10009,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":8941,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":8936,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":9203,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":13363,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":13683,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":13554,"id":null,"parameterSlots":2,"returnSlots":0},"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af":{"entryPoint":11432,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1b2638459828301e8cd6c7c02856073bacf975379e0867f689bb14feacb780c5":{"entryPoint":12214,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e":{"entryPoint":14072,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe":{"entryPoint":12418,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_269df367cd41cace5897a935d0e0858fe4543b5619d45e09af6b124c1bb3d528":{"entryPoint":12106,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48":{"entryPoint":12672,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57":{"entryPoint":13072,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4":{"entryPoint":12818,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05":{"entryPoint":13964,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159":{"entryPoint":11686,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4":{"entryPoint":13180,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6":{"entryPoint":12964,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_8d1b93b434e468e73514a2449ae955e822f73dcdf924bb4553be247ebca8755e":{"entryPoint":11998,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe":{"entryPoint":12564,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f":{"entryPoint":11578,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942":{"entryPoint":11140,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83":{"entryPoint":11286,"id":null,"parameterSlots":1,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":13376,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":13512,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_t_address":{"entryPoint":9502,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":10580,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":8990,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":9321,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":13549,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:41480:18","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:18","statements":[{"nodeType":"YulAssignment","src":"57:19:18","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:18","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:18"},"nodeType":"YulFunctionCall","src":"67:9:18"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:18"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:18","type":""}],"src":"7:75:18"},{"body":{"nodeType":"YulBlock","src":"177:28:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:18"},"nodeType":"YulFunctionCall","src":"187:12:18"},"nodeType":"YulExpressionStatement","src":"187:12:18"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:18"},{"body":{"nodeType":"YulBlock","src":"300:28:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:18"},"nodeType":"YulFunctionCall","src":"310:12:18"},"nodeType":"YulExpressionStatement","src":"310:12:18"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:18"},{"body":{"nodeType":"YulBlock","src":"378:105:18","statements":[{"nodeType":"YulAssignment","src":"388:89:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:18","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:18"},"nodeType":"YulFunctionCall","src":"399:78:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:18"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:18","type":""}],"src":"334:149:18"},{"body":{"nodeType":"YulBlock","src":"531:78:18","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:18"},"nodeType":"YulFunctionCall","src":"589:12:18"},"nodeType":"YulExpressionStatement","src":"589:12:18"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:18"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:18"},"nodeType":"YulFunctionCall","src":"561:23:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:18"},"nodeType":"YulFunctionCall","src":"551:34:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:18"},"nodeType":"YulFunctionCall","src":"544:42:18"},"nodeType":"YulIf","src":"541:62:18"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:18","type":""}],"src":"489:120:18"},{"body":{"nodeType":"YulBlock","src":"666:86:18","statements":[{"nodeType":"YulAssignment","src":"676:29:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:18"},"nodeType":"YulFunctionCall","src":"685:20:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:18"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:18"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:18"},"nodeType":"YulFunctionCall","src":"714:32:18"},"nodeType":"YulExpressionStatement","src":"714:32:18"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:18","type":""}],"src":"615:137:18"},{"body":{"nodeType":"YulBlock","src":"823:262:18","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:18"},"nodeType":"YulFunctionCall","src":"871:79:18"},"nodeType":"YulExpressionStatement","src":"871:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:18"},"nodeType":"YulFunctionCall","src":"840:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:18","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:18"},"nodeType":"YulFunctionCall","src":"836:32:18"},"nodeType":"YulIf","src":"833:119:18"},{"nodeType":"YulBlock","src":"962:116:18","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:18","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:18"},"nodeType":"YulFunctionCall","src":"1036:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:18"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:18"},"nodeType":"YulFunctionCall","src":"1016:52:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:18"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:18","type":""}],"src":"758:327:18"},{"body":{"nodeType":"YulBlock","src":"1133:48:18","statements":[{"nodeType":"YulAssignment","src":"1143:32:18","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:18"},"nodeType":"YulFunctionCall","src":"1161:13:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:18"},"nodeType":"YulFunctionCall","src":"1154:21:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:18"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:18","type":""}],"src":"1091:90:18"},{"body":{"nodeType":"YulBlock","src":"1246:50:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:18"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:18"},"nodeType":"YulFunctionCall","src":"1268:21:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:18"},"nodeType":"YulFunctionCall","src":"1256:34:18"},"nodeType":"YulExpressionStatement","src":"1256:34:18"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:18","type":""}],"src":"1187:109:18"},{"body":{"nodeType":"YulBlock","src":"1394:118:18","statements":[{"nodeType":"YulAssignment","src":"1404:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:18"},"nodeType":"YulFunctionCall","src":"1412:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:18"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:18"},"nodeType":"YulFunctionCall","src":"1487:17:18"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:18"},"nodeType":"YulFunctionCall","src":"1440:65:18"},"nodeType":"YulExpressionStatement","src":"1440:65:18"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:18","type":""}],"src":"1302:210:18"},{"body":{"nodeType":"YulBlock","src":"1577:40:18","statements":[{"nodeType":"YulAssignment","src":"1588:22:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1604:5:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1598:5:18"},"nodeType":"YulFunctionCall","src":"1598:12:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1588:6:18"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1560:5:18","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1570:6:18","type":""}],"src":"1518:99:18"},{"body":{"nodeType":"YulBlock","src":"1719:73:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1736:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"1741:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1729:6:18"},"nodeType":"YulFunctionCall","src":"1729:19:18"},"nodeType":"YulExpressionStatement","src":"1729:19:18"},{"nodeType":"YulAssignment","src":"1757:29:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1776:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"1781:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1772:3:18"},"nodeType":"YulFunctionCall","src":"1772:14:18"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1757:11:18"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1691:3:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"1696:6:18","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1707:11:18","type":""}],"src":"1623:169:18"},{"body":{"nodeType":"YulBlock","src":"1860:184:18","statements":[{"nodeType":"YulVariableDeclaration","src":"1870:10:18","value":{"kind":"number","nodeType":"YulLiteral","src":"1879:1:18","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1874:1:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"1939:63:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1964:3:18"},{"name":"i","nodeType":"YulIdentifier","src":"1969:1:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1960:3:18"},"nodeType":"YulFunctionCall","src":"1960:11:18"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1983:3:18"},{"name":"i","nodeType":"YulIdentifier","src":"1988:1:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1979:3:18"},"nodeType":"YulFunctionCall","src":"1979:11:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1973:5:18"},"nodeType":"YulFunctionCall","src":"1973:18:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1953:6:18"},"nodeType":"YulFunctionCall","src":"1953:39:18"},"nodeType":"YulExpressionStatement","src":"1953:39:18"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1900:1:18"},{"name":"length","nodeType":"YulIdentifier","src":"1903:6:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1897:2:18"},"nodeType":"YulFunctionCall","src":"1897:13:18"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1911:19:18","statements":[{"nodeType":"YulAssignment","src":"1913:15:18","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1922:1:18"},{"kind":"number","nodeType":"YulLiteral","src":"1925:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1918:3:18"},"nodeType":"YulFunctionCall","src":"1918:10:18"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1913:1:18"}]}]},"pre":{"nodeType":"YulBlock","src":"1893:3:18","statements":[]},"src":"1889:113:18"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2022:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"2027:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2018:3:18"},"nodeType":"YulFunctionCall","src":"2018:16:18"},{"kind":"number","nodeType":"YulLiteral","src":"2036:1:18","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2011:6:18"},"nodeType":"YulFunctionCall","src":"2011:27:18"},"nodeType":"YulExpressionStatement","src":"2011:27:18"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1842:3:18","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1847:3:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"1852:6:18","type":""}],"src":"1798:246:18"},{"body":{"nodeType":"YulBlock","src":"2098:54:18","statements":[{"nodeType":"YulAssignment","src":"2108:38:18","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2126:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"2133:2:18","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2122:3:18"},"nodeType":"YulFunctionCall","src":"2122:14:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2142:2:18","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2138:3:18"},"nodeType":"YulFunctionCall","src":"2138:7:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2118:3:18"},"nodeType":"YulFunctionCall","src":"2118:28:18"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"2108:6:18"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2081:5:18","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"2091:6:18","type":""}],"src":"2050:102:18"},{"body":{"nodeType":"YulBlock","src":"2250:285:18","statements":[{"nodeType":"YulVariableDeclaration","src":"2260:53:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2307:5:18"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2274:32:18"},"nodeType":"YulFunctionCall","src":"2274:39:18"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2264:6:18","type":""}]},{"nodeType":"YulAssignment","src":"2322:78:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2388:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"2393:6:18"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2329:58:18"},"nodeType":"YulFunctionCall","src":"2329:71:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2322:3:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2448:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"2455:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2444:3:18"},"nodeType":"YulFunctionCall","src":"2444:16:18"},{"name":"pos","nodeType":"YulIdentifier","src":"2462:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"2467:6:18"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"2409:34:18"},"nodeType":"YulFunctionCall","src":"2409:65:18"},"nodeType":"YulExpressionStatement","src":"2409:65:18"},{"nodeType":"YulAssignment","src":"2483:46:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2494:3:18"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2521:6:18"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2499:21:18"},"nodeType":"YulFunctionCall","src":"2499:29:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2490:3:18"},"nodeType":"YulFunctionCall","src":"2490:39:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2483:3:18"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2231:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2238:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2246:3:18","type":""}],"src":"2158:377:18"},{"body":{"nodeType":"YulBlock","src":"2659:195:18","statements":[{"nodeType":"YulAssignment","src":"2669:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2681:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"2692:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2677:3:18"},"nodeType":"YulFunctionCall","src":"2677:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2669:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2716:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"2727:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2712:3:18"},"nodeType":"YulFunctionCall","src":"2712:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2735:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"2741:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2731:3:18"},"nodeType":"YulFunctionCall","src":"2731:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2705:6:18"},"nodeType":"YulFunctionCall","src":"2705:47:18"},"nodeType":"YulExpressionStatement","src":"2705:47:18"},{"nodeType":"YulAssignment","src":"2761:86:18","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2833:6:18"},{"name":"tail","nodeType":"YulIdentifier","src":"2842:4:18"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2769:63:18"},"nodeType":"YulFunctionCall","src":"2769:78:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2761:4:18"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2631:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2643:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2654:4:18","type":""}],"src":"2541:313:18"},{"body":{"nodeType":"YulBlock","src":"2905:32:18","statements":[{"nodeType":"YulAssignment","src":"2915:16:18","value":{"name":"value","nodeType":"YulIdentifier","src":"2926:5:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2915:7:18"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2887:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2897:7:18","type":""}],"src":"2860:77:18"},{"body":{"nodeType":"YulBlock","src":"2986:79:18","statements":[{"body":{"nodeType":"YulBlock","src":"3043:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3052:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3055:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3045:6:18"},"nodeType":"YulFunctionCall","src":"3045:12:18"},"nodeType":"YulExpressionStatement","src":"3045:12:18"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3009:5:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3034:5:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3016:17:18"},"nodeType":"YulFunctionCall","src":"3016:24:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3006:2:18"},"nodeType":"YulFunctionCall","src":"3006:35:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2999:6:18"},"nodeType":"YulFunctionCall","src":"2999:43:18"},"nodeType":"YulIf","src":"2996:63:18"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2979:5:18","type":""}],"src":"2943:122:18"},{"body":{"nodeType":"YulBlock","src":"3123:87:18","statements":[{"nodeType":"YulAssignment","src":"3133:29:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3155:6:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3142:12:18"},"nodeType":"YulFunctionCall","src":"3142:20:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3133:5:18"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3198:5:18"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"3171:26:18"},"nodeType":"YulFunctionCall","src":"3171:33:18"},"nodeType":"YulExpressionStatement","src":"3171:33:18"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3101:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"3109:3:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3117:5:18","type":""}],"src":"3071:139:18"},{"body":{"nodeType":"YulBlock","src":"3282:263:18","statements":[{"body":{"nodeType":"YulBlock","src":"3328:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3330:77:18"},"nodeType":"YulFunctionCall","src":"3330:79:18"},"nodeType":"YulExpressionStatement","src":"3330:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3303:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"3312:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3299:3:18"},"nodeType":"YulFunctionCall","src":"3299:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"3324:2:18","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3295:3:18"},"nodeType":"YulFunctionCall","src":"3295:32:18"},"nodeType":"YulIf","src":"3292:119:18"},{"nodeType":"YulBlock","src":"3421:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"3436:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"3450:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3440:6:18","type":""}]},{"nodeType":"YulAssignment","src":"3465:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3500:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"3511:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3496:3:18"},"nodeType":"YulFunctionCall","src":"3496:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3520:7:18"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3475:20:18"},"nodeType":"YulFunctionCall","src":"3475:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3465:6:18"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3252:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3263:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3275:6:18","type":""}],"src":"3216:329:18"},{"body":{"nodeType":"YulBlock","src":"3596:81:18","statements":[{"nodeType":"YulAssignment","src":"3606:65:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3621:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"3628:42:18","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3617:3:18"},"nodeType":"YulFunctionCall","src":"3617:54:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3606:7:18"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3578:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3588:7:18","type":""}],"src":"3551:126:18"},{"body":{"nodeType":"YulBlock","src":"3728:51:18","statements":[{"nodeType":"YulAssignment","src":"3738:35:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3767:5:18"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"3749:17:18"},"nodeType":"YulFunctionCall","src":"3749:24:18"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3738:7:18"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3710:5:18","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3720:7:18","type":""}],"src":"3683:96:18"},{"body":{"nodeType":"YulBlock","src":"3850:53:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3867:3:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3890:5:18"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"3872:17:18"},"nodeType":"YulFunctionCall","src":"3872:24:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3860:6:18"},"nodeType":"YulFunctionCall","src":"3860:37:18"},"nodeType":"YulExpressionStatement","src":"3860:37:18"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3838:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3845:3:18","type":""}],"src":"3785:118:18"},{"body":{"nodeType":"YulBlock","src":"4007:124:18","statements":[{"nodeType":"YulAssignment","src":"4017:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4029:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"4040:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4025:3:18"},"nodeType":"YulFunctionCall","src":"4025:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4017:4:18"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4097:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4110:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"4121:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4106:3:18"},"nodeType":"YulFunctionCall","src":"4106:17:18"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4053:43:18"},"nodeType":"YulFunctionCall","src":"4053:71:18"},"nodeType":"YulExpressionStatement","src":"4053:71:18"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3979:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3991:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4002:4:18","type":""}],"src":"3909:222:18"},{"body":{"nodeType":"YulBlock","src":"4180:79:18","statements":[{"body":{"nodeType":"YulBlock","src":"4237:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4246:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4249:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4239:6:18"},"nodeType":"YulFunctionCall","src":"4239:12:18"},"nodeType":"YulExpressionStatement","src":"4239:12:18"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4203:5:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4228:5:18"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4210:17:18"},"nodeType":"YulFunctionCall","src":"4210:24:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4200:2:18"},"nodeType":"YulFunctionCall","src":"4200:35:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4193:6:18"},"nodeType":"YulFunctionCall","src":"4193:43:18"},"nodeType":"YulIf","src":"4190:63:18"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4173:5:18","type":""}],"src":"4137:122:18"},{"body":{"nodeType":"YulBlock","src":"4317:87:18","statements":[{"nodeType":"YulAssignment","src":"4327:29:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4349:6:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4336:12:18"},"nodeType":"YulFunctionCall","src":"4336:20:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4327:5:18"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4392:5:18"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"4365:26:18"},"nodeType":"YulFunctionCall","src":"4365:33:18"},"nodeType":"YulExpressionStatement","src":"4365:33:18"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4295:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"4303:3:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4311:5:18","type":""}],"src":"4265:139:18"},{"body":{"nodeType":"YulBlock","src":"4493:391:18","statements":[{"body":{"nodeType":"YulBlock","src":"4539:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4541:77:18"},"nodeType":"YulFunctionCall","src":"4541:79:18"},"nodeType":"YulExpressionStatement","src":"4541:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4514:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"4523:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4510:3:18"},"nodeType":"YulFunctionCall","src":"4510:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"4535:2:18","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4506:3:18"},"nodeType":"YulFunctionCall","src":"4506:32:18"},"nodeType":"YulIf","src":"4503:119:18"},{"nodeType":"YulBlock","src":"4632:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"4647:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"4661:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4651:6:18","type":""}]},{"nodeType":"YulAssignment","src":"4676:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4711:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"4722:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4707:3:18"},"nodeType":"YulFunctionCall","src":"4707:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4731:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4686:20:18"},"nodeType":"YulFunctionCall","src":"4686:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4676:6:18"}]}]},{"nodeType":"YulBlock","src":"4759:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"4774:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"4788:2:18","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4778:6:18","type":""}]},{"nodeType":"YulAssignment","src":"4804:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4839:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"4850:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4835:3:18"},"nodeType":"YulFunctionCall","src":"4835:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4859:7:18"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4814:20:18"},"nodeType":"YulFunctionCall","src":"4814:53:18"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4804:6:18"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4455:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4466:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4478:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4486:6:18","type":""}],"src":"4410:474:18"},{"body":{"nodeType":"YulBlock","src":"4955:53:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4972:3:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4995:5:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4977:17:18"},"nodeType":"YulFunctionCall","src":"4977:24:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4965:6:18"},"nodeType":"YulFunctionCall","src":"4965:37:18"},"nodeType":"YulExpressionStatement","src":"4965:37:18"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4943:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4950:3:18","type":""}],"src":"4890:118:18"},{"body":{"nodeType":"YulBlock","src":"5112:124:18","statements":[{"nodeType":"YulAssignment","src":"5122:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5134:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"5145:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5130:3:18"},"nodeType":"YulFunctionCall","src":"5130:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5122:4:18"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5202:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5215:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"5226:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5211:3:18"},"nodeType":"YulFunctionCall","src":"5211:17:18"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"5158:43:18"},"nodeType":"YulFunctionCall","src":"5158:71:18"},"nodeType":"YulExpressionStatement","src":"5158:71:18"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5084:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5096:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5107:4:18","type":""}],"src":"5014:222:18"},{"body":{"nodeType":"YulBlock","src":"5342:519:18","statements":[{"body":{"nodeType":"YulBlock","src":"5388:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5390:77:18"},"nodeType":"YulFunctionCall","src":"5390:79:18"},"nodeType":"YulExpressionStatement","src":"5390:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5363:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"5372:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5359:3:18"},"nodeType":"YulFunctionCall","src":"5359:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"5384:2:18","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5355:3:18"},"nodeType":"YulFunctionCall","src":"5355:32:18"},"nodeType":"YulIf","src":"5352:119:18"},{"nodeType":"YulBlock","src":"5481:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"5496:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"5510:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5500:6:18","type":""}]},{"nodeType":"YulAssignment","src":"5525:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5560:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"5571:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5556:3:18"},"nodeType":"YulFunctionCall","src":"5556:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5580:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5535:20:18"},"nodeType":"YulFunctionCall","src":"5535:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5525:6:18"}]}]},{"nodeType":"YulBlock","src":"5608:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"5623:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"5637:2:18","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5627:6:18","type":""}]},{"nodeType":"YulAssignment","src":"5653:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5688:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"5699:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5684:3:18"},"nodeType":"YulFunctionCall","src":"5684:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5708:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5663:20:18"},"nodeType":"YulFunctionCall","src":"5663:53:18"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5653:6:18"}]}]},{"nodeType":"YulBlock","src":"5736:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"5751:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"5765:2:18","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5755:6:18","type":""}]},{"nodeType":"YulAssignment","src":"5781:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5816:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"5827:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5812:3:18"},"nodeType":"YulFunctionCall","src":"5812:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5836:7:18"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5791:20:18"},"nodeType":"YulFunctionCall","src":"5791:53:18"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5781:6:18"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5296:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5307:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5319:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5327:6:18","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5335:6:18","type":""}],"src":"5242:619:18"},{"body":{"nodeType":"YulBlock","src":"5933:263:18","statements":[{"body":{"nodeType":"YulBlock","src":"5979:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5981:77:18"},"nodeType":"YulFunctionCall","src":"5981:79:18"},"nodeType":"YulExpressionStatement","src":"5981:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5954:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"5963:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5950:3:18"},"nodeType":"YulFunctionCall","src":"5950:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"5975:2:18","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5946:3:18"},"nodeType":"YulFunctionCall","src":"5946:32:18"},"nodeType":"YulIf","src":"5943:119:18"},{"nodeType":"YulBlock","src":"6072:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"6087:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"6101:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6091:6:18","type":""}]},{"nodeType":"YulAssignment","src":"6116:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6151:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"6162:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6147:3:18"},"nodeType":"YulFunctionCall","src":"6147:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6171:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6126:20:18"},"nodeType":"YulFunctionCall","src":"6126:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6116:6:18"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5903:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5914:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5926:6:18","type":""}],"src":"5867:329:18"},{"body":{"nodeType":"YulBlock","src":"6276:40:18","statements":[{"nodeType":"YulAssignment","src":"6287:22:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6303:5:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6297:5:18"},"nodeType":"YulFunctionCall","src":"6297:12:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6287:6:18"}]}]},"name":"array_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6259:5:18","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"6269:6:18","type":""}],"src":"6202:114:18"},{"body":{"nodeType":"YulBlock","src":"6433:73:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6450:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"6455:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6443:6:18"},"nodeType":"YulFunctionCall","src":"6443:19:18"},"nodeType":"YulExpressionStatement","src":"6443:19:18"},{"nodeType":"YulAssignment","src":"6471:29:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6490:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"6495:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6486:3:18"},"nodeType":"YulFunctionCall","src":"6486:14:18"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"6471:11:18"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6405:3:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"6410:6:18","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"6421:11:18","type":""}],"src":"6322:184:18"},{"body":{"nodeType":"YulBlock","src":"6584:60:18","statements":[{"nodeType":"YulAssignment","src":"6594:11:18","value":{"name":"ptr","nodeType":"YulIdentifier","src":"6602:3:18"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"6594:4:18"}]},{"nodeType":"YulAssignment","src":"6615:22:18","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"6627:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"6632:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6623:3:18"},"nodeType":"YulFunctionCall","src":"6623:14:18"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"6615:4:18"}]}]},"name":"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"6571:3:18","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"6579:4:18","type":""}],"src":"6512:132:18"},{"body":{"nodeType":"YulBlock","src":"6705:53:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6722:3:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6745:5:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6727:17:18"},"nodeType":"YulFunctionCall","src":"6727:24:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6715:6:18"},"nodeType":"YulFunctionCall","src":"6715:37:18"},"nodeType":"YulExpressionStatement","src":"6715:37:18"}]},"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6693:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6700:3:18","type":""}],"src":"6650:108:18"},{"body":{"nodeType":"YulBlock","src":"6844:99:18","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6888:6:18"},{"name":"pos","nodeType":"YulIdentifier","src":"6896:3:18"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"6854:33:18"},"nodeType":"YulFunctionCall","src":"6854:46:18"},"nodeType":"YulExpressionStatement","src":"6854:46:18"},{"nodeType":"YulAssignment","src":"6909:28:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6927:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"6932:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6923:3:18"},"nodeType":"YulFunctionCall","src":"6923:14:18"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"6909:10:18"}]}]},"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"6817:6:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6825:3:18","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"6833:10:18","type":""}],"src":"6764:179:18"},{"body":{"nodeType":"YulBlock","src":"7024:38:18","statements":[{"nodeType":"YulAssignment","src":"7034:22:18","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"7046:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"7051:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7042:3:18"},"nodeType":"YulFunctionCall","src":"7042:14:18"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"7034:4:18"}]}]},"name":"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"7011:3:18","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"7019:4:18","type":""}],"src":"6949:113:18"},{"body":{"nodeType":"YulBlock","src":"7222:608:18","statements":[{"nodeType":"YulVariableDeclaration","src":"7232:68:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7294:5:18"}],"functionName":{"name":"array_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"7246:47:18"},"nodeType":"YulFunctionCall","src":"7246:54:18"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7236:6:18","type":""}]},{"nodeType":"YulAssignment","src":"7309:93:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7390:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"7395:6:18"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7316:73:18"},"nodeType":"YulFunctionCall","src":"7316:86:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7309:3:18"}]},{"nodeType":"YulVariableDeclaration","src":"7411:71:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7476:5:18"}],"functionName":{"name":"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"7426:49:18"},"nodeType":"YulFunctionCall","src":"7426:56:18"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"7415:7:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7491:21:18","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"7505:7:18"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"7495:6:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"7581:224:18","statements":[{"nodeType":"YulVariableDeclaration","src":"7595:34:18","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7622:6:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7616:5:18"},"nodeType":"YulFunctionCall","src":"7616:13:18"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"7599:13:18","type":""}]},{"nodeType":"YulAssignment","src":"7642:70:18","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"7693:13:18"},{"name":"pos","nodeType":"YulIdentifier","src":"7708:3:18"}],"functionName":{"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"7649:43:18"},"nodeType":"YulFunctionCall","src":"7649:63:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7642:3:18"}]},{"nodeType":"YulAssignment","src":"7725:70:18","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7788:6:18"}],"functionName":{"name":"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"7735:52:18"},"nodeType":"YulFunctionCall","src":"7735:60:18"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7725:6:18"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7543:1:18"},{"name":"length","nodeType":"YulIdentifier","src":"7546:6:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7540:2:18"},"nodeType":"YulFunctionCall","src":"7540:13:18"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7554:18:18","statements":[{"nodeType":"YulAssignment","src":"7556:14:18","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7565:1:18"},{"kind":"number","nodeType":"YulLiteral","src":"7568:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7561:3:18"},"nodeType":"YulFunctionCall","src":"7561:9:18"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"7556:1:18"}]}]},"pre":{"nodeType":"YulBlock","src":"7525:14:18","statements":[{"nodeType":"YulVariableDeclaration","src":"7527:10:18","value":{"kind":"number","nodeType":"YulLiteral","src":"7536:1:18","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7531:1:18","type":""}]}]},"src":"7521:284:18"},{"nodeType":"YulAssignment","src":"7814:10:18","value":{"name":"pos","nodeType":"YulIdentifier","src":"7821:3:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7814:3:18"}]}]},"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7201:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7208:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7217:3:18","type":""}],"src":"7098:732:18"},{"body":{"nodeType":"YulBlock","src":"7984:225:18","statements":[{"nodeType":"YulAssignment","src":"7994:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8006:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"8017:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8002:3:18"},"nodeType":"YulFunctionCall","src":"8002:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7994:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8041:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"8052:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8037:3:18"},"nodeType":"YulFunctionCall","src":"8037:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8060:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"8066:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8056:3:18"},"nodeType":"YulFunctionCall","src":"8056:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8030:6:18"},"nodeType":"YulFunctionCall","src":"8030:47:18"},"nodeType":"YulExpressionStatement","src":"8030:47:18"},{"nodeType":"YulAssignment","src":"8086:116:18","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8188:6:18"},{"name":"tail","nodeType":"YulIdentifier","src":"8197:4:18"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8094:93:18"},"nodeType":"YulFunctionCall","src":"8094:108:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8086:4:18"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7956:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7968:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7979:4:18","type":""}],"src":"7836:373:18"},{"body":{"nodeType":"YulBlock","src":"8304:28:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8321:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8324:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8314:6:18"},"nodeType":"YulFunctionCall","src":"8314:12:18"},"nodeType":"YulExpressionStatement","src":"8314:12:18"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"8215:117:18"},{"body":{"nodeType":"YulBlock","src":"8427:28:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8444:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8447:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8437:6:18"},"nodeType":"YulFunctionCall","src":"8437:12:18"},"nodeType":"YulExpressionStatement","src":"8437:12:18"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"8338:117:18"},{"body":{"nodeType":"YulBlock","src":"8489:152:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8506:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8509:77:18","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8499:6:18"},"nodeType":"YulFunctionCall","src":"8499:88:18"},"nodeType":"YulExpressionStatement","src":"8499:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8603:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8606:4:18","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8596:6:18"},"nodeType":"YulFunctionCall","src":"8596:15:18"},"nodeType":"YulExpressionStatement","src":"8596:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8627:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8630:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8620:6:18"},"nodeType":"YulFunctionCall","src":"8620:15:18"},"nodeType":"YulExpressionStatement","src":"8620:15:18"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"8461:180:18"},{"body":{"nodeType":"YulBlock","src":"8690:238:18","statements":[{"nodeType":"YulVariableDeclaration","src":"8700:58:18","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8722:6:18"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"8752:4:18"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"8730:21:18"},"nodeType":"YulFunctionCall","src":"8730:27:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8718:3:18"},"nodeType":"YulFunctionCall","src":"8718:40:18"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"8704:10:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"8869:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"8871:16:18"},"nodeType":"YulFunctionCall","src":"8871:18:18"},"nodeType":"YulExpressionStatement","src":"8871:18:18"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"8812:10:18"},{"kind":"number","nodeType":"YulLiteral","src":"8824:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8809:2:18"},"nodeType":"YulFunctionCall","src":"8809:34:18"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"8848:10:18"},{"name":"memPtr","nodeType":"YulIdentifier","src":"8860:6:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8845:2:18"},"nodeType":"YulFunctionCall","src":"8845:22:18"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"8806:2:18"},"nodeType":"YulFunctionCall","src":"8806:62:18"},"nodeType":"YulIf","src":"8803:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8907:2:18","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"8911:10:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8900:6:18"},"nodeType":"YulFunctionCall","src":"8900:22:18"},"nodeType":"YulExpressionStatement","src":"8900:22:18"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"8676:6:18","type":""},{"name":"size","nodeType":"YulTypedName","src":"8684:4:18","type":""}],"src":"8647:281:18"},{"body":{"nodeType":"YulBlock","src":"8975:88:18","statements":[{"nodeType":"YulAssignment","src":"8985:30:18","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"8995:18:18"},"nodeType":"YulFunctionCall","src":"8995:20:18"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8985:6:18"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9044:6:18"},{"name":"size","nodeType":"YulIdentifier","src":"9052:4:18"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"9024:19:18"},"nodeType":"YulFunctionCall","src":"9024:33:18"},"nodeType":"YulExpressionStatement","src":"9024:33:18"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"8959:4:18","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"8968:6:18","type":""}],"src":"8934:129:18"},{"body":{"nodeType":"YulBlock","src":"9136:241:18","statements":[{"body":{"nodeType":"YulBlock","src":"9241:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"9243:16:18"},"nodeType":"YulFunctionCall","src":"9243:18:18"},"nodeType":"YulExpressionStatement","src":"9243:18:18"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9213:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"9221:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9210:2:18"},"nodeType":"YulFunctionCall","src":"9210:30:18"},"nodeType":"YulIf","src":"9207:56:18"},{"nodeType":"YulAssignment","src":"9273:37:18","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9303:6:18"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"9281:21:18"},"nodeType":"YulFunctionCall","src":"9281:29:18"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"9273:4:18"}]},{"nodeType":"YulAssignment","src":"9347:23:18","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"9359:4:18"},{"kind":"number","nodeType":"YulLiteral","src":"9365:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9355:3:18"},"nodeType":"YulFunctionCall","src":"9355:15:18"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"9347:4:18"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"9120:6:18","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"9131:4:18","type":""}],"src":"9069:308:18"},{"body":{"nodeType":"YulBlock","src":"9447:82:18","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"9470:3:18"},{"name":"src","nodeType":"YulIdentifier","src":"9475:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"9480:6:18"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"9457:12:18"},"nodeType":"YulFunctionCall","src":"9457:30:18"},"nodeType":"YulExpressionStatement","src":"9457:30:18"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"9507:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"9512:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9503:3:18"},"nodeType":"YulFunctionCall","src":"9503:16:18"},{"kind":"number","nodeType":"YulLiteral","src":"9521:1:18","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9496:6:18"},"nodeType":"YulFunctionCall","src":"9496:27:18"},"nodeType":"YulExpressionStatement","src":"9496:27:18"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"9429:3:18","type":""},{"name":"dst","nodeType":"YulTypedName","src":"9434:3:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"9439:6:18","type":""}],"src":"9383:146:18"},{"body":{"nodeType":"YulBlock","src":"9619:341:18","statements":[{"nodeType":"YulAssignment","src":"9629:75:18","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9696:6:18"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"9654:41:18"},"nodeType":"YulFunctionCall","src":"9654:49:18"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"9638:15:18"},"nodeType":"YulFunctionCall","src":"9638:66:18"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"9629:5:18"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"9720:5:18"},{"name":"length","nodeType":"YulIdentifier","src":"9727:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9713:6:18"},"nodeType":"YulFunctionCall","src":"9713:21:18"},"nodeType":"YulExpressionStatement","src":"9713:21:18"},{"nodeType":"YulVariableDeclaration","src":"9743:27:18","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"9758:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"9765:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9754:3:18"},"nodeType":"YulFunctionCall","src":"9754:16:18"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"9747:3:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"9808:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"9810:77:18"},"nodeType":"YulFunctionCall","src":"9810:79:18"},"nodeType":"YulExpressionStatement","src":"9810:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"9789:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"9794:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9785:3:18"},"nodeType":"YulFunctionCall","src":"9785:16:18"},{"name":"end","nodeType":"YulIdentifier","src":"9803:3:18"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9782:2:18"},"nodeType":"YulFunctionCall","src":"9782:25:18"},"nodeType":"YulIf","src":"9779:112:18"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"9937:3:18"},{"name":"dst","nodeType":"YulIdentifier","src":"9942:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"9947:6:18"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"9900:36:18"},"nodeType":"YulFunctionCall","src":"9900:54:18"},"nodeType":"YulExpressionStatement","src":"9900:54:18"}]},"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"9592:3:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"9597:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"9605:3:18","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"9613:5:18","type":""}],"src":"9535:425:18"},{"body":{"nodeType":"YulBlock","src":"10042:278:18","statements":[{"body":{"nodeType":"YulBlock","src":"10091:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"10093:77:18"},"nodeType":"YulFunctionCall","src":"10093:79:18"},"nodeType":"YulExpressionStatement","src":"10093:79:18"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10070:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"10078:4:18","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10066:3:18"},"nodeType":"YulFunctionCall","src":"10066:17:18"},{"name":"end","nodeType":"YulIdentifier","src":"10085:3:18"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10062:3:18"},"nodeType":"YulFunctionCall","src":"10062:27:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10055:6:18"},"nodeType":"YulFunctionCall","src":"10055:35:18"},"nodeType":"YulIf","src":"10052:122:18"},{"nodeType":"YulVariableDeclaration","src":"10183:34:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10210:6:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10197:12:18"},"nodeType":"YulFunctionCall","src":"10197:20:18"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"10187:6:18","type":""}]},{"nodeType":"YulAssignment","src":"10226:88:18","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10287:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"10295:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10283:3:18"},"nodeType":"YulFunctionCall","src":"10283:17:18"},{"name":"length","nodeType":"YulIdentifier","src":"10302:6:18"},{"name":"end","nodeType":"YulIdentifier","src":"10310:3:18"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"10235:47:18"},"nodeType":"YulFunctionCall","src":"10235:79:18"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"10226:5:18"}]}]},"name":"abi_decode_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"10020:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"10028:3:18","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"10036:5:18","type":""}],"src":"9980:340:18"},{"body":{"nodeType":"YulBlock","src":"10436:689:18","statements":[{"body":{"nodeType":"YulBlock","src":"10482:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10484:77:18"},"nodeType":"YulFunctionCall","src":"10484:79:18"},"nodeType":"YulExpressionStatement","src":"10484:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10457:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"10466:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10453:3:18"},"nodeType":"YulFunctionCall","src":"10453:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"10478:2:18","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10449:3:18"},"nodeType":"YulFunctionCall","src":"10449:32:18"},"nodeType":"YulIf","src":"10446:119:18"},{"nodeType":"YulBlock","src":"10575:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"10590:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"10604:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10594:6:18","type":""}]},{"nodeType":"YulAssignment","src":"10619:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10654:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"10665:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10650:3:18"},"nodeType":"YulFunctionCall","src":"10650:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10674:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10629:20:18"},"nodeType":"YulFunctionCall","src":"10629:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10619:6:18"}]}]},{"nodeType":"YulBlock","src":"10702:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"10717:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"10731:2:18","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10721:6:18","type":""}]},{"nodeType":"YulAssignment","src":"10747:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10782:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"10793:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10778:3:18"},"nodeType":"YulFunctionCall","src":"10778:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10802:7:18"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"10757:20:18"},"nodeType":"YulFunctionCall","src":"10757:53:18"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10747:6:18"}]}]},{"nodeType":"YulBlock","src":"10830:288:18","statements":[{"nodeType":"YulVariableDeclaration","src":"10845:46:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10876:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"10887:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10872:3:18"},"nodeType":"YulFunctionCall","src":"10872:18:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10859:12:18"},"nodeType":"YulFunctionCall","src":"10859:32:18"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10849:6:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"10938:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"10940:77:18"},"nodeType":"YulFunctionCall","src":"10940:79:18"},"nodeType":"YulExpressionStatement","src":"10940:79:18"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10910:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"10918:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10907:2:18"},"nodeType":"YulFunctionCall","src":"10907:30:18"},"nodeType":"YulIf","src":"10904:117:18"},{"nodeType":"YulAssignment","src":"11035:73:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11080:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"11091:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11076:3:18"},"nodeType":"YulFunctionCall","src":"11076:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11100:7:18"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"11045:30:18"},"nodeType":"YulFunctionCall","src":"11045:63:18"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"11035:6:18"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10390:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10401:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10413:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10421:6:18","type":""},{"name":"value2","nodeType":"YulTypedName","src":"10429:6:18","type":""}],"src":"10326:799:18"},{"body":{"nodeType":"YulBlock","src":"11224:561:18","statements":[{"body":{"nodeType":"YulBlock","src":"11270:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"11272:77:18"},"nodeType":"YulFunctionCall","src":"11272:79:18"},"nodeType":"YulExpressionStatement","src":"11272:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11245:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"11254:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11241:3:18"},"nodeType":"YulFunctionCall","src":"11241:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"11266:2:18","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11237:3:18"},"nodeType":"YulFunctionCall","src":"11237:32:18"},"nodeType":"YulIf","src":"11234:119:18"},{"nodeType":"YulBlock","src":"11363:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"11378:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"11392:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11382:6:18","type":""}]},{"nodeType":"YulAssignment","src":"11407:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11442:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"11453:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11438:3:18"},"nodeType":"YulFunctionCall","src":"11438:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11462:7:18"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"11417:20:18"},"nodeType":"YulFunctionCall","src":"11417:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11407:6:18"}]}]},{"nodeType":"YulBlock","src":"11490:288:18","statements":[{"nodeType":"YulVariableDeclaration","src":"11505:46:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11536:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"11547:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11532:3:18"},"nodeType":"YulFunctionCall","src":"11532:18:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11519:12:18"},"nodeType":"YulFunctionCall","src":"11519:32:18"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11509:6:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"11598:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"11600:77:18"},"nodeType":"YulFunctionCall","src":"11600:79:18"},"nodeType":"YulExpressionStatement","src":"11600:79:18"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11570:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"11578:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11567:2:18"},"nodeType":"YulFunctionCall","src":"11567:30:18"},"nodeType":"YulIf","src":"11564:117:18"},{"nodeType":"YulAssignment","src":"11695:73:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11740:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"11751:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11736:3:18"},"nodeType":"YulFunctionCall","src":"11736:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11760:7:18"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"11705:30:18"},"nodeType":"YulFunctionCall","src":"11705:63:18"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11695:6:18"}]}]}]},"name":"abi_decode_tuple_t_uint256t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11186:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11197:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11209:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11217:6:18","type":""}],"src":"11131:654:18"},{"body":{"nodeType":"YulBlock","src":"11874:391:18","statements":[{"body":{"nodeType":"YulBlock","src":"11920:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"11922:77:18"},"nodeType":"YulFunctionCall","src":"11922:79:18"},"nodeType":"YulExpressionStatement","src":"11922:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11895:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"11904:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11891:3:18"},"nodeType":"YulFunctionCall","src":"11891:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"11916:2:18","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11887:3:18"},"nodeType":"YulFunctionCall","src":"11887:32:18"},"nodeType":"YulIf","src":"11884:119:18"},{"nodeType":"YulBlock","src":"12013:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"12028:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"12042:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12032:6:18","type":""}]},{"nodeType":"YulAssignment","src":"12057:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12092:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"12103:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12088:3:18"},"nodeType":"YulFunctionCall","src":"12088:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12112:7:18"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"12067:20:18"},"nodeType":"YulFunctionCall","src":"12067:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12057:6:18"}]}]},{"nodeType":"YulBlock","src":"12140:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"12155:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"12169:2:18","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12159:6:18","type":""}]},{"nodeType":"YulAssignment","src":"12185:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12220:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"12231:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12216:3:18"},"nodeType":"YulFunctionCall","src":"12216:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12240:7:18"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"12195:20:18"},"nodeType":"YulFunctionCall","src":"12195:53:18"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"12185:6:18"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11836:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11847:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11859:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11867:6:18","type":""}],"src":"11791:474:18"},{"body":{"nodeType":"YulBlock","src":"12311:76:18","statements":[{"body":{"nodeType":"YulBlock","src":"12365:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12374:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12377:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12367:6:18"},"nodeType":"YulFunctionCall","src":"12367:12:18"},"nodeType":"YulExpressionStatement","src":"12367:12:18"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12334:5:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12356:5:18"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"12341:14:18"},"nodeType":"YulFunctionCall","src":"12341:21:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"12331:2:18"},"nodeType":"YulFunctionCall","src":"12331:32:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12324:6:18"},"nodeType":"YulFunctionCall","src":"12324:40:18"},"nodeType":"YulIf","src":"12321:60:18"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12304:5:18","type":""}],"src":"12271:116:18"},{"body":{"nodeType":"YulBlock","src":"12442:84:18","statements":[{"nodeType":"YulAssignment","src":"12452:29:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"12474:6:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12461:12:18"},"nodeType":"YulFunctionCall","src":"12461:20:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"12452:5:18"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12514:5:18"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"12490:23:18"},"nodeType":"YulFunctionCall","src":"12490:30:18"},"nodeType":"YulExpressionStatement","src":"12490:30:18"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"12420:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"12428:3:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"12436:5:18","type":""}],"src":"12393:133:18"},{"body":{"nodeType":"YulBlock","src":"12612:388:18","statements":[{"body":{"nodeType":"YulBlock","src":"12658:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"12660:77:18"},"nodeType":"YulFunctionCall","src":"12660:79:18"},"nodeType":"YulExpressionStatement","src":"12660:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12633:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"12642:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12629:3:18"},"nodeType":"YulFunctionCall","src":"12629:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"12654:2:18","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12625:3:18"},"nodeType":"YulFunctionCall","src":"12625:32:18"},"nodeType":"YulIf","src":"12622:119:18"},{"nodeType":"YulBlock","src":"12751:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"12766:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"12780:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12770:6:18","type":""}]},{"nodeType":"YulAssignment","src":"12795:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12830:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"12841:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12826:3:18"},"nodeType":"YulFunctionCall","src":"12826:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12850:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"12805:20:18"},"nodeType":"YulFunctionCall","src":"12805:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12795:6:18"}]}]},{"nodeType":"YulBlock","src":"12878:115:18","statements":[{"nodeType":"YulVariableDeclaration","src":"12893:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"12907:2:18","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12897:6:18","type":""}]},{"nodeType":"YulAssignment","src":"12923:60:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12955:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"12966:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12951:3:18"},"nodeType":"YulFunctionCall","src":"12951:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12975:7:18"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"12933:17:18"},"nodeType":"YulFunctionCall","src":"12933:50:18"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"12923:6:18"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12574:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12585:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12597:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12605:6:18","type":""}],"src":"12532:468:18"},{"body":{"nodeType":"YulBlock","src":"13072:241:18","statements":[{"body":{"nodeType":"YulBlock","src":"13177:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"13179:16:18"},"nodeType":"YulFunctionCall","src":"13179:18:18"},"nodeType":"YulExpressionStatement","src":"13179:18:18"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13149:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"13157:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13146:2:18"},"nodeType":"YulFunctionCall","src":"13146:30:18"},"nodeType":"YulIf","src":"13143:56:18"},{"nodeType":"YulAssignment","src":"13209:37:18","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13239:6:18"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"13217:21:18"},"nodeType":"YulFunctionCall","src":"13217:29:18"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"13209:4:18"}]},{"nodeType":"YulAssignment","src":"13283:23:18","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"13295:4:18"},{"kind":"number","nodeType":"YulLiteral","src":"13301:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13291:3:18"},"nodeType":"YulFunctionCall","src":"13291:15:18"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"13283:4:18"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"13056:6:18","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"13067:4:18","type":""}],"src":"13006:307:18"},{"body":{"nodeType":"YulBlock","src":"13402:340:18","statements":[{"nodeType":"YulAssignment","src":"13412:74:18","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13478:6:18"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"13437:40:18"},"nodeType":"YulFunctionCall","src":"13437:48:18"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"13421:15:18"},"nodeType":"YulFunctionCall","src":"13421:65:18"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"13412:5:18"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"13502:5:18"},{"name":"length","nodeType":"YulIdentifier","src":"13509:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13495:6:18"},"nodeType":"YulFunctionCall","src":"13495:21:18"},"nodeType":"YulExpressionStatement","src":"13495:21:18"},{"nodeType":"YulVariableDeclaration","src":"13525:27:18","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"13540:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"13547:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13536:3:18"},"nodeType":"YulFunctionCall","src":"13536:16:18"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"13529:3:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"13590:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"13592:77:18"},"nodeType":"YulFunctionCall","src":"13592:79:18"},"nodeType":"YulExpressionStatement","src":"13592:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"13571:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"13576:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13567:3:18"},"nodeType":"YulFunctionCall","src":"13567:16:18"},{"name":"end","nodeType":"YulIdentifier","src":"13585:3:18"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13564:2:18"},"nodeType":"YulFunctionCall","src":"13564:25:18"},"nodeType":"YulIf","src":"13561:112:18"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"13719:3:18"},{"name":"dst","nodeType":"YulIdentifier","src":"13724:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"13729:6:18"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"13682:36:18"},"nodeType":"YulFunctionCall","src":"13682:54:18"},"nodeType":"YulExpressionStatement","src":"13682:54:18"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"13375:3:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"13380:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"13388:3:18","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"13396:5:18","type":""}],"src":"13319:423:18"},{"body":{"nodeType":"YulBlock","src":"13822:277:18","statements":[{"body":{"nodeType":"YulBlock","src":"13871:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"13873:77:18"},"nodeType":"YulFunctionCall","src":"13873:79:18"},"nodeType":"YulExpressionStatement","src":"13873:79:18"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13850:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"13858:4:18","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13846:3:18"},"nodeType":"YulFunctionCall","src":"13846:17:18"},{"name":"end","nodeType":"YulIdentifier","src":"13865:3:18"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13842:3:18"},"nodeType":"YulFunctionCall","src":"13842:27:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13835:6:18"},"nodeType":"YulFunctionCall","src":"13835:35:18"},"nodeType":"YulIf","src":"13832:122:18"},{"nodeType":"YulVariableDeclaration","src":"13963:34:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13990:6:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13977:12:18"},"nodeType":"YulFunctionCall","src":"13977:20:18"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"13967:6:18","type":""}]},{"nodeType":"YulAssignment","src":"14006:87:18","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14066:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"14074:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14062:3:18"},"nodeType":"YulFunctionCall","src":"14062:17:18"},{"name":"length","nodeType":"YulIdentifier","src":"14081:6:18"},{"name":"end","nodeType":"YulIdentifier","src":"14089:3:18"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"14015:46:18"},"nodeType":"YulFunctionCall","src":"14015:78:18"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"14006:5:18"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"13800:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"13808:3:18","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"13816:5:18","type":""}],"src":"13761:338:18"},{"body":{"nodeType":"YulBlock","src":"14231:817:18","statements":[{"body":{"nodeType":"YulBlock","src":"14278:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"14280:77:18"},"nodeType":"YulFunctionCall","src":"14280:79:18"},"nodeType":"YulExpressionStatement","src":"14280:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14252:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"14261:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14248:3:18"},"nodeType":"YulFunctionCall","src":"14248:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"14273:3:18","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14244:3:18"},"nodeType":"YulFunctionCall","src":"14244:33:18"},"nodeType":"YulIf","src":"14241:120:18"},{"nodeType":"YulBlock","src":"14371:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"14386:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"14400:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14390:6:18","type":""}]},{"nodeType":"YulAssignment","src":"14415:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14450:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"14461:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14446:3:18"},"nodeType":"YulFunctionCall","src":"14446:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14470:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"14425:20:18"},"nodeType":"YulFunctionCall","src":"14425:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14415:6:18"}]}]},{"nodeType":"YulBlock","src":"14498:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"14513:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"14527:2:18","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14517:6:18","type":""}]},{"nodeType":"YulAssignment","src":"14543:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14578:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"14589:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14574:3:18"},"nodeType":"YulFunctionCall","src":"14574:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14598:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"14553:20:18"},"nodeType":"YulFunctionCall","src":"14553:53:18"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"14543:6:18"}]}]},{"nodeType":"YulBlock","src":"14626:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"14641:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"14655:2:18","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14645:6:18","type":""}]},{"nodeType":"YulAssignment","src":"14671:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14706:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"14717:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14702:3:18"},"nodeType":"YulFunctionCall","src":"14702:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14726:7:18"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"14681:20:18"},"nodeType":"YulFunctionCall","src":"14681:53:18"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"14671:6:18"}]}]},{"nodeType":"YulBlock","src":"14754:287:18","statements":[{"nodeType":"YulVariableDeclaration","src":"14769:46:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14800:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"14811:2:18","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14796:3:18"},"nodeType":"YulFunctionCall","src":"14796:18:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"14783:12:18"},"nodeType":"YulFunctionCall","src":"14783:32:18"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14773:6:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"14862:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"14864:77:18"},"nodeType":"YulFunctionCall","src":"14864:79:18"},"nodeType":"YulExpressionStatement","src":"14864:79:18"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14834:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"14842:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14831:2:18"},"nodeType":"YulFunctionCall","src":"14831:30:18"},"nodeType":"YulIf","src":"14828:117:18"},{"nodeType":"YulAssignment","src":"14959:72:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15003:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"15014:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14999:3:18"},"nodeType":"YulFunctionCall","src":"14999:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15023:7:18"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"14969:29:18"},"nodeType":"YulFunctionCall","src":"14969:62:18"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"14959:6:18"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14177:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14188:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14200:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14208:6:18","type":""},{"name":"value2","nodeType":"YulTypedName","src":"14216:6:18","type":""},{"name":"value3","nodeType":"YulTypedName","src":"14224:6:18","type":""}],"src":"14105:943:18"},{"body":{"nodeType":"YulBlock","src":"15137:391:18","statements":[{"body":{"nodeType":"YulBlock","src":"15183:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"15185:77:18"},"nodeType":"YulFunctionCall","src":"15185:79:18"},"nodeType":"YulExpressionStatement","src":"15185:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"15158:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"15167:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15154:3:18"},"nodeType":"YulFunctionCall","src":"15154:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"15179:2:18","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"15150:3:18"},"nodeType":"YulFunctionCall","src":"15150:32:18"},"nodeType":"YulIf","src":"15147:119:18"},{"nodeType":"YulBlock","src":"15276:117:18","statements":[{"nodeType":"YulVariableDeclaration","src":"15291:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"15305:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15295:6:18","type":""}]},{"nodeType":"YulAssignment","src":"15320:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15355:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"15366:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15351:3:18"},"nodeType":"YulFunctionCall","src":"15351:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15375:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"15330:20:18"},"nodeType":"YulFunctionCall","src":"15330:53:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"15320:6:18"}]}]},{"nodeType":"YulBlock","src":"15403:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"15418:16:18","value":{"kind":"number","nodeType":"YulLiteral","src":"15432:2:18","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15422:6:18","type":""}]},{"nodeType":"YulAssignment","src":"15448:63:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15483:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"15494:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15479:3:18"},"nodeType":"YulFunctionCall","src":"15479:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15503:7:18"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"15458:20:18"},"nodeType":"YulFunctionCall","src":"15458:53:18"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"15448:6:18"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15099:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"15110:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"15122:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15130:6:18","type":""}],"src":"15054:474:18"},{"body":{"nodeType":"YulBlock","src":"15562:152:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15579:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15582:77:18","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15572:6:18"},"nodeType":"YulFunctionCall","src":"15572:88:18"},"nodeType":"YulExpressionStatement","src":"15572:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15676:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"15679:4:18","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15669:6:18"},"nodeType":"YulFunctionCall","src":"15669:15:18"},"nodeType":"YulExpressionStatement","src":"15669:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15700:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15703:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15693:6:18"},"nodeType":"YulFunctionCall","src":"15693:15:18"},"nodeType":"YulExpressionStatement","src":"15693:15:18"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"15534:180:18"},{"body":{"nodeType":"YulBlock","src":"15771:269:18","statements":[{"nodeType":"YulAssignment","src":"15781:22:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15795:4:18"},{"kind":"number","nodeType":"YulLiteral","src":"15801:1:18","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"15791:3:18"},"nodeType":"YulFunctionCall","src":"15791:12:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"15781:6:18"}]},{"nodeType":"YulVariableDeclaration","src":"15812:38:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15842:4:18"},{"kind":"number","nodeType":"YulLiteral","src":"15848:1:18","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15838:3:18"},"nodeType":"YulFunctionCall","src":"15838:12:18"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"15816:18:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"15889:51:18","statements":[{"nodeType":"YulAssignment","src":"15903:27:18","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"15917:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"15925:4:18","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15913:3:18"},"nodeType":"YulFunctionCall","src":"15913:17:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"15903:6:18"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"15869:18:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15862:6:18"},"nodeType":"YulFunctionCall","src":"15862:26:18"},"nodeType":"YulIf","src":"15859:81:18"},{"body":{"nodeType":"YulBlock","src":"15992:42:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"16006:16:18"},"nodeType":"YulFunctionCall","src":"16006:18:18"},"nodeType":"YulExpressionStatement","src":"16006:18:18"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"15956:18:18"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"15979:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"15987:2:18","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"15976:2:18"},"nodeType":"YulFunctionCall","src":"15976:14:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"15953:2:18"},"nodeType":"YulFunctionCall","src":"15953:38:18"},"nodeType":"YulIf","src":"15950:84:18"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"15755:4:18","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"15764:6:18","type":""}],"src":"15720:320:18"},{"body":{"nodeType":"YulBlock","src":"16152:114:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16174:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"16182:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16170:3:18"},"nodeType":"YulFunctionCall","src":"16170:14:18"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"16186:34:18","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16163:6:18"},"nodeType":"YulFunctionCall","src":"16163:58:18"},"nodeType":"YulExpressionStatement","src":"16163:58:18"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16242:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"16250:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16238:3:18"},"nodeType":"YulFunctionCall","src":"16238:15:18"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"16255:3:18","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16231:6:18"},"nodeType":"YulFunctionCall","src":"16231:28:18"},"nodeType":"YulExpressionStatement","src":"16231:28:18"}]},"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"16144:6:18","type":""}],"src":"16046:220:18"},{"body":{"nodeType":"YulBlock","src":"16418:220:18","statements":[{"nodeType":"YulAssignment","src":"16428:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16494:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"16499:2:18","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16435:58:18"},"nodeType":"YulFunctionCall","src":"16435:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16428:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16600:3:18"}],"functionName":{"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulIdentifier","src":"16511:88:18"},"nodeType":"YulFunctionCall","src":"16511:93:18"},"nodeType":"YulExpressionStatement","src":"16511:93:18"},{"nodeType":"YulAssignment","src":"16613:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16624:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"16629:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16620:3:18"},"nodeType":"YulFunctionCall","src":"16620:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16613:3:18"}]}]},"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16406:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16414:3:18","type":""}],"src":"16272:366:18"},{"body":{"nodeType":"YulBlock","src":"16815:248:18","statements":[{"nodeType":"YulAssignment","src":"16825:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16837:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"16848:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16833:3:18"},"nodeType":"YulFunctionCall","src":"16833:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16825:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16872:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"16883:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16868:3:18"},"nodeType":"YulFunctionCall","src":"16868:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16891:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"16897:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16887:3:18"},"nodeType":"YulFunctionCall","src":"16887:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16861:6:18"},"nodeType":"YulFunctionCall","src":"16861:47:18"},"nodeType":"YulExpressionStatement","src":"16861:47:18"},{"nodeType":"YulAssignment","src":"16917:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17051:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16925:124:18"},"nodeType":"YulFunctionCall","src":"16925:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16917:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16795:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16810:4:18","type":""}],"src":"16644:419:18"},{"body":{"nodeType":"YulBlock","src":"17175:142:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17197:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"17205:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17193:3:18"},"nodeType":"YulFunctionCall","src":"17193:14:18"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"17209:34:18","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17186:6:18"},"nodeType":"YulFunctionCall","src":"17186:58:18"},"nodeType":"YulExpressionStatement","src":"17186:58:18"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17265:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"17273:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17261:3:18"},"nodeType":"YulFunctionCall","src":"17261:15:18"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"17278:31:18","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17254:6:18"},"nodeType":"YulFunctionCall","src":"17254:56:18"},"nodeType":"YulExpressionStatement","src":"17254:56:18"}]},"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17167:6:18","type":""}],"src":"17069:248:18"},{"body":{"nodeType":"YulBlock","src":"17469:220:18","statements":[{"nodeType":"YulAssignment","src":"17479:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17545:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"17550:2:18","type":"","value":"61"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17486:58:18"},"nodeType":"YulFunctionCall","src":"17486:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17479:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17651:3:18"}],"functionName":{"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulIdentifier","src":"17562:88:18"},"nodeType":"YulFunctionCall","src":"17562:93:18"},"nodeType":"YulExpressionStatement","src":"17562:93:18"},{"nodeType":"YulAssignment","src":"17664:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17675:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"17680:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17671:3:18"},"nodeType":"YulFunctionCall","src":"17671:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17664:3:18"}]}]},"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17457:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17465:3:18","type":""}],"src":"17323:366:18"},{"body":{"nodeType":"YulBlock","src":"17866:248:18","statements":[{"nodeType":"YulAssignment","src":"17876:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17888:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"17899:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17884:3:18"},"nodeType":"YulFunctionCall","src":"17884:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17876:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17923:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"17934:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17919:3:18"},"nodeType":"YulFunctionCall","src":"17919:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17942:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"17948:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17938:3:18"},"nodeType":"YulFunctionCall","src":"17938:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17912:6:18"},"nodeType":"YulFunctionCall","src":"17912:47:18"},"nodeType":"YulExpressionStatement","src":"17912:47:18"},{"nodeType":"YulAssignment","src":"17968:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18102:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17976:124:18"},"nodeType":"YulFunctionCall","src":"17976:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17968:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17846:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17861:4:18","type":""}],"src":"17695:419:18"},{"body":{"nodeType":"YulBlock","src":"18226:126:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18248:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"18256:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18244:3:18"},"nodeType":"YulFunctionCall","src":"18244:14:18"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"18260:34:18","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18237:6:18"},"nodeType":"YulFunctionCall","src":"18237:58:18"},"nodeType":"YulExpressionStatement","src":"18237:58:18"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18316:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"18324:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18312:3:18"},"nodeType":"YulFunctionCall","src":"18312:15:18"},{"hexValue":"72206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"18329:15:18","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18305:6:18"},"nodeType":"YulFunctionCall","src":"18305:40:18"},"nodeType":"YulExpressionStatement","src":"18305:40:18"}]},"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18218:6:18","type":""}],"src":"18120:232:18"},{"body":{"nodeType":"YulBlock","src":"18504:220:18","statements":[{"nodeType":"YulAssignment","src":"18514:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18580:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"18585:2:18","type":"","value":"45"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18521:58:18"},"nodeType":"YulFunctionCall","src":"18521:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18514:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18686:3:18"}],"functionName":{"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulIdentifier","src":"18597:88:18"},"nodeType":"YulFunctionCall","src":"18597:93:18"},"nodeType":"YulExpressionStatement","src":"18597:93:18"},{"nodeType":"YulAssignment","src":"18699:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18710:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"18715:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18706:3:18"},"nodeType":"YulFunctionCall","src":"18706:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18699:3:18"}]}]},"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18492:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18500:3:18","type":""}],"src":"18358:366:18"},{"body":{"nodeType":"YulBlock","src":"18901:248:18","statements":[{"nodeType":"YulAssignment","src":"18911:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18923:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"18934:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18919:3:18"},"nodeType":"YulFunctionCall","src":"18919:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18911:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18958:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"18969:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18954:3:18"},"nodeType":"YulFunctionCall","src":"18954:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18977:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"18983:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18973:3:18"},"nodeType":"YulFunctionCall","src":"18973:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18947:6:18"},"nodeType":"YulFunctionCall","src":"18947:47:18"},"nodeType":"YulExpressionStatement","src":"18947:47:18"},{"nodeType":"YulAssignment","src":"19003:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19137:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19011:124:18"},"nodeType":"YulFunctionCall","src":"19011:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19003:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18881:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18896:4:18","type":""}],"src":"18730:419:18"},{"body":{"nodeType":"YulBlock","src":"19261:68:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19283:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"19291:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19279:3:18"},"nodeType":"YulFunctionCall","src":"19279:14:18"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"19295:26:18","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19272:6:18"},"nodeType":"YulFunctionCall","src":"19272:50:18"},"nodeType":"YulExpressionStatement","src":"19272:50:18"}]},"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19253:6:18","type":""}],"src":"19155:174:18"},{"body":{"nodeType":"YulBlock","src":"19481:220:18","statements":[{"nodeType":"YulAssignment","src":"19491:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19557:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"19562:2:18","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19498:58:18"},"nodeType":"YulFunctionCall","src":"19498:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19491:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19663:3:18"}],"functionName":{"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulIdentifier","src":"19574:88:18"},"nodeType":"YulFunctionCall","src":"19574:93:18"},"nodeType":"YulExpressionStatement","src":"19574:93:18"},{"nodeType":"YulAssignment","src":"19676:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19687:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"19692:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19683:3:18"},"nodeType":"YulFunctionCall","src":"19683:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19676:3:18"}]}]},"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19469:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19477:3:18","type":""}],"src":"19335:366:18"},{"body":{"nodeType":"YulBlock","src":"19878:248:18","statements":[{"nodeType":"YulAssignment","src":"19888:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19900:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"19911:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19896:3:18"},"nodeType":"YulFunctionCall","src":"19896:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19888:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19935:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"19946:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19931:3:18"},"nodeType":"YulFunctionCall","src":"19931:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19954:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"19960:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19950:3:18"},"nodeType":"YulFunctionCall","src":"19950:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19924:6:18"},"nodeType":"YulFunctionCall","src":"19924:47:18"},"nodeType":"YulExpressionStatement","src":"19924:47:18"},{"nodeType":"YulAssignment","src":"19980:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20114:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19988:124:18"},"nodeType":"YulFunctionCall","src":"19988:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19980:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19858:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19873:4:18","type":""}],"src":"19707:419:18"},{"body":{"nodeType":"YulBlock","src":"20238:122:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20260:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"20268:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20256:3:18"},"nodeType":"YulFunctionCall","src":"20256:14:18"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"20272:34:18","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20249:6:18"},"nodeType":"YulFunctionCall","src":"20249:58:18"},"nodeType":"YulExpressionStatement","src":"20249:58:18"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20328:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"20336:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20324:3:18"},"nodeType":"YulFunctionCall","src":"20324:15:18"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"20341:11:18","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20317:6:18"},"nodeType":"YulFunctionCall","src":"20317:36:18"},"nodeType":"YulExpressionStatement","src":"20317:36:18"}]},"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20230:6:18","type":""}],"src":"20132:228:18"},{"body":{"nodeType":"YulBlock","src":"20512:220:18","statements":[{"nodeType":"YulAssignment","src":"20522:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20588:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"20593:2:18","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20529:58:18"},"nodeType":"YulFunctionCall","src":"20529:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20522:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20694:3:18"}],"functionName":{"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulIdentifier","src":"20605:88:18"},"nodeType":"YulFunctionCall","src":"20605:93:18"},"nodeType":"YulExpressionStatement","src":"20605:93:18"},{"nodeType":"YulAssignment","src":"20707:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20718:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"20723:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20714:3:18"},"nodeType":"YulFunctionCall","src":"20714:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20707:3:18"}]}]},"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20500:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20508:3:18","type":""}],"src":"20366:366:18"},{"body":{"nodeType":"YulBlock","src":"20909:248:18","statements":[{"nodeType":"YulAssignment","src":"20919:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20931:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"20942:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20927:3:18"},"nodeType":"YulFunctionCall","src":"20927:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20919:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20966:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"20977:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20962:3:18"},"nodeType":"YulFunctionCall","src":"20962:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20985:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"20991:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20981:3:18"},"nodeType":"YulFunctionCall","src":"20981:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20955:6:18"},"nodeType":"YulFunctionCall","src":"20955:47:18"},"nodeType":"YulExpressionStatement","src":"20955:47:18"},{"nodeType":"YulAssignment","src":"21011:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21145:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21019:124:18"},"nodeType":"YulFunctionCall","src":"21019:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21011:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20889:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20904:4:18","type":""}],"src":"20738:419:18"},{"body":{"nodeType":"YulBlock","src":"21191:152:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21208:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21211:77:18","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21201:6:18"},"nodeType":"YulFunctionCall","src":"21201:88:18"},"nodeType":"YulExpressionStatement","src":"21201:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21305:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"21308:4:18","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21298:6:18"},"nodeType":"YulFunctionCall","src":"21298:15:18"},"nodeType":"YulExpressionStatement","src":"21298:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21329:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21332:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21322:6:18"},"nodeType":"YulFunctionCall","src":"21322:15:18"},"nodeType":"YulExpressionStatement","src":"21322:15:18"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"21163:180:18"},{"body":{"nodeType":"YulBlock","src":"21377:152:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21394:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21397:77:18","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21387:6:18"},"nodeType":"YulFunctionCall","src":"21387:88:18"},"nodeType":"YulExpressionStatement","src":"21387:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21491:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"21494:4:18","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21484:6:18"},"nodeType":"YulFunctionCall","src":"21484:15:18"},"nodeType":"YulExpressionStatement","src":"21484:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21515:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21518:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21508:6:18"},"nodeType":"YulFunctionCall","src":"21508:15:18"},"nodeType":"YulExpressionStatement","src":"21508:15:18"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"21349:180:18"},{"body":{"nodeType":"YulBlock","src":"21578:190:18","statements":[{"nodeType":"YulAssignment","src":"21588:33:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21615:5:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"21597:17:18"},"nodeType":"YulFunctionCall","src":"21597:24:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"21588:5:18"}]},{"body":{"nodeType":"YulBlock","src":"21711:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"21713:16:18"},"nodeType":"YulFunctionCall","src":"21713:18:18"},"nodeType":"YulExpressionStatement","src":"21713:18:18"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21636:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"21643:66:18","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"21633:2:18"},"nodeType":"YulFunctionCall","src":"21633:77:18"},"nodeType":"YulIf","src":"21630:103:18"},{"nodeType":"YulAssignment","src":"21742:20:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21753:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"21760:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21749:3:18"},"nodeType":"YulFunctionCall","src":"21749:13:18"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"21742:3:18"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21564:5:18","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"21574:3:18","type":""}],"src":"21535:233:18"},{"body":{"nodeType":"YulBlock","src":"21880:64:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21902:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"21910:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21898:3:18"},"nodeType":"YulFunctionCall","src":"21898:14:18"},{"hexValue":"496e73756666696369656e74207061796d656e74","kind":"string","nodeType":"YulLiteral","src":"21914:22:18","type":"","value":"Insufficient payment"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21891:6:18"},"nodeType":"YulFunctionCall","src":"21891:46:18"},"nodeType":"YulExpressionStatement","src":"21891:46:18"}]},"name":"store_literal_in_memory_8d1b93b434e468e73514a2449ae955e822f73dcdf924bb4553be247ebca8755e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"21872:6:18","type":""}],"src":"21774:170:18"},{"body":{"nodeType":"YulBlock","src":"22096:220:18","statements":[{"nodeType":"YulAssignment","src":"22106:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22172:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"22177:2:18","type":"","value":"20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22113:58:18"},"nodeType":"YulFunctionCall","src":"22113:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22106:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22278:3:18"}],"functionName":{"name":"store_literal_in_memory_8d1b93b434e468e73514a2449ae955e822f73dcdf924bb4553be247ebca8755e","nodeType":"YulIdentifier","src":"22189:88:18"},"nodeType":"YulFunctionCall","src":"22189:93:18"},"nodeType":"YulExpressionStatement","src":"22189:93:18"},{"nodeType":"YulAssignment","src":"22291:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22302:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"22307:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22298:3:18"},"nodeType":"YulFunctionCall","src":"22298:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22291:3:18"}]}]},"name":"abi_encode_t_stringliteral_8d1b93b434e468e73514a2449ae955e822f73dcdf924bb4553be247ebca8755e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22084:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22092:3:18","type":""}],"src":"21950:366:18"},{"body":{"nodeType":"YulBlock","src":"22493:248:18","statements":[{"nodeType":"YulAssignment","src":"22503:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22515:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"22526:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22511:3:18"},"nodeType":"YulFunctionCall","src":"22511:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22503:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22550:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"22561:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22546:3:18"},"nodeType":"YulFunctionCall","src":"22546:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22569:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"22575:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22565:3:18"},"nodeType":"YulFunctionCall","src":"22565:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22539:6:18"},"nodeType":"YulFunctionCall","src":"22539:47:18"},"nodeType":"YulExpressionStatement","src":"22539:47:18"},{"nodeType":"YulAssignment","src":"22595:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22729:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_8d1b93b434e468e73514a2449ae955e822f73dcdf924bb4553be247ebca8755e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22603:124:18"},"nodeType":"YulFunctionCall","src":"22603:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22595:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_8d1b93b434e468e73514a2449ae955e822f73dcdf924bb4553be247ebca8755e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22473:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22488:4:18","type":""}],"src":"22322:419:18"},{"body":{"nodeType":"YulBlock","src":"22853:56:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22875:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"22883:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22871:3:18"},"nodeType":"YulFunctionCall","src":"22871:14:18"},{"hexValue":"554e415554484f52495a4544","kind":"string","nodeType":"YulLiteral","src":"22887:14:18","type":"","value":"UNAUTHORIZED"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22864:6:18"},"nodeType":"YulFunctionCall","src":"22864:38:18"},"nodeType":"YulExpressionStatement","src":"22864:38:18"}]},"name":"store_literal_in_memory_269df367cd41cace5897a935d0e0858fe4543b5619d45e09af6b124c1bb3d528","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22845:6:18","type":""}],"src":"22747:162:18"},{"body":{"nodeType":"YulBlock","src":"23061:220:18","statements":[{"nodeType":"YulAssignment","src":"23071:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23137:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"23142:2:18","type":"","value":"12"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23078:58:18"},"nodeType":"YulFunctionCall","src":"23078:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23071:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23243:3:18"}],"functionName":{"name":"store_literal_in_memory_269df367cd41cace5897a935d0e0858fe4543b5619d45e09af6b124c1bb3d528","nodeType":"YulIdentifier","src":"23154:88:18"},"nodeType":"YulFunctionCall","src":"23154:93:18"},"nodeType":"YulExpressionStatement","src":"23154:93:18"},{"nodeType":"YulAssignment","src":"23256:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23267:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"23272:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23263:3:18"},"nodeType":"YulFunctionCall","src":"23263:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"23256:3:18"}]}]},"name":"abi_encode_t_stringliteral_269df367cd41cace5897a935d0e0858fe4543b5619d45e09af6b124c1bb3d528_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"23049:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"23057:3:18","type":""}],"src":"22915:366:18"},{"body":{"nodeType":"YulBlock","src":"23458:248:18","statements":[{"nodeType":"YulAssignment","src":"23468:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23480:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"23491:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23476:3:18"},"nodeType":"YulFunctionCall","src":"23476:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23468:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23515:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"23526:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23511:3:18"},"nodeType":"YulFunctionCall","src":"23511:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23534:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"23540:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23530:3:18"},"nodeType":"YulFunctionCall","src":"23530:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23504:6:18"},"nodeType":"YulFunctionCall","src":"23504:47:18"},"nodeType":"YulExpressionStatement","src":"23504:47:18"},{"nodeType":"YulAssignment","src":"23560:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23694:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_269df367cd41cace5897a935d0e0858fe4543b5619d45e09af6b124c1bb3d528_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23568:124:18"},"nodeType":"YulFunctionCall","src":"23568:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23560:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_269df367cd41cace5897a935d0e0858fe4543b5619d45e09af6b124c1bb3d528__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23438:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23453:4:18","type":""}],"src":"23287:419:18"},{"body":{"nodeType":"YulBlock","src":"23818:56:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23840:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"23848:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23836:3:18"},"nodeType":"YulFunctionCall","src":"23836:14:18"},{"hexValue":"556e617574686f72697a6564","kind":"string","nodeType":"YulLiteral","src":"23852:14:18","type":"","value":"Unauthorized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23829:6:18"},"nodeType":"YulFunctionCall","src":"23829:38:18"},"nodeType":"YulExpressionStatement","src":"23829:38:18"}]},"name":"store_literal_in_memory_1b2638459828301e8cd6c7c02856073bacf975379e0867f689bb14feacb780c5","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"23810:6:18","type":""}],"src":"23712:162:18"},{"body":{"nodeType":"YulBlock","src":"24026:220:18","statements":[{"nodeType":"YulAssignment","src":"24036:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24102:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"24107:2:18","type":"","value":"12"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24043:58:18"},"nodeType":"YulFunctionCall","src":"24043:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24036:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24208:3:18"}],"functionName":{"name":"store_literal_in_memory_1b2638459828301e8cd6c7c02856073bacf975379e0867f689bb14feacb780c5","nodeType":"YulIdentifier","src":"24119:88:18"},"nodeType":"YulFunctionCall","src":"24119:93:18"},"nodeType":"YulExpressionStatement","src":"24119:93:18"},{"nodeType":"YulAssignment","src":"24221:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24232:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"24237:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24228:3:18"},"nodeType":"YulFunctionCall","src":"24228:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24221:3:18"}]}]},"name":"abi_encode_t_stringliteral_1b2638459828301e8cd6c7c02856073bacf975379e0867f689bb14feacb780c5_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24014:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24022:3:18","type":""}],"src":"23880:366:18"},{"body":{"nodeType":"YulBlock","src":"24423:248:18","statements":[{"nodeType":"YulAssignment","src":"24433:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24445:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"24456:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24441:3:18"},"nodeType":"YulFunctionCall","src":"24441:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24433:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24480:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"24491:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24476:3:18"},"nodeType":"YulFunctionCall","src":"24476:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24499:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"24505:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24495:3:18"},"nodeType":"YulFunctionCall","src":"24495:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24469:6:18"},"nodeType":"YulFunctionCall","src":"24469:47:18"},"nodeType":"YulExpressionStatement","src":"24469:47:18"},{"nodeType":"YulAssignment","src":"24525:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24659:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_1b2638459828301e8cd6c7c02856073bacf975379e0867f689bb14feacb780c5_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24533:124:18"},"nodeType":"YulFunctionCall","src":"24533:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24525:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_1b2638459828301e8cd6c7c02856073bacf975379e0867f689bb14feacb780c5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24403:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24418:4:18","type":""}],"src":"24252:419:18"},{"body":{"nodeType":"YulBlock","src":"24791:34:18","statements":[{"nodeType":"YulAssignment","src":"24801:18:18","value":{"name":"pos","nodeType":"YulIdentifier","src":"24816:3:18"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"24801:11:18"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24763:3:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"24768:6:18","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"24779:11:18","type":""}],"src":"24677:148:18"},{"body":{"nodeType":"YulBlock","src":"24941:280:18","statements":[{"nodeType":"YulVariableDeclaration","src":"24951:53:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24998:5:18"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"24965:32:18"},"nodeType":"YulFunctionCall","src":"24965:39:18"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"24955:6:18","type":""}]},{"nodeType":"YulAssignment","src":"25013:96:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25097:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"25102:6:18"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"25020:76:18"},"nodeType":"YulFunctionCall","src":"25020:89:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25013:3:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25157:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"25164:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25153:3:18"},"nodeType":"YulFunctionCall","src":"25153:16:18"},{"name":"pos","nodeType":"YulIdentifier","src":"25171:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"25176:6:18"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"25118:34:18"},"nodeType":"YulFunctionCall","src":"25118:65:18"},"nodeType":"YulExpressionStatement","src":"25118:65:18"},{"nodeType":"YulAssignment","src":"25192:23:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25203:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"25208:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25199:3:18"},"nodeType":"YulFunctionCall","src":"25199:16:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"25192:3:18"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"24922:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"24929:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24937:3:18","type":""}],"src":"24831:390:18"},{"body":{"nodeType":"YulBlock","src":"25411:251:18","statements":[{"nodeType":"YulAssignment","src":"25422:102:18","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"25511:6:18"},{"name":"pos","nodeType":"YulIdentifier","src":"25520:3:18"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"25429:81:18"},"nodeType":"YulFunctionCall","src":"25429:95:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25422:3:18"}]},{"nodeType":"YulAssignment","src":"25534:102:18","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"25623:6:18"},{"name":"pos","nodeType":"YulIdentifier","src":"25632:3:18"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"25541:81:18"},"nodeType":"YulFunctionCall","src":"25541:95:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25534:3:18"}]},{"nodeType":"YulAssignment","src":"25646:10:18","value":{"name":"pos","nodeType":"YulIdentifier","src":"25653:3:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"25646:3:18"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"25382:3:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"25388:6:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"25396:6:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"25407:3:18","type":""}],"src":"25227:435:18"},{"body":{"nodeType":"YulBlock","src":"25774:119:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"25796:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"25804:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25792:3:18"},"nodeType":"YulFunctionCall","src":"25792:14:18"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"25808:34:18","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25785:6:18"},"nodeType":"YulFunctionCall","src":"25785:58:18"},"nodeType":"YulExpressionStatement","src":"25785:58:18"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"25864:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"25872:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25860:3:18"},"nodeType":"YulFunctionCall","src":"25860:15:18"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"25877:8:18","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25853:6:18"},"nodeType":"YulFunctionCall","src":"25853:33:18"},"nodeType":"YulExpressionStatement","src":"25853:33:18"}]},"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"25766:6:18","type":""}],"src":"25668:225:18"},{"body":{"nodeType":"YulBlock","src":"26045:220:18","statements":[{"nodeType":"YulAssignment","src":"26055:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26121:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"26126:2:18","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26062:58:18"},"nodeType":"YulFunctionCall","src":"26062:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"26055:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26227:3:18"}],"functionName":{"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulIdentifier","src":"26138:88:18"},"nodeType":"YulFunctionCall","src":"26138:93:18"},"nodeType":"YulExpressionStatement","src":"26138:93:18"},{"nodeType":"YulAssignment","src":"26240:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26251:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"26256:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26247:3:18"},"nodeType":"YulFunctionCall","src":"26247:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"26240:3:18"}]}]},"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26033:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"26041:3:18","type":""}],"src":"25899:366:18"},{"body":{"nodeType":"YulBlock","src":"26442:248:18","statements":[{"nodeType":"YulAssignment","src":"26452:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26464:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"26475:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26460:3:18"},"nodeType":"YulFunctionCall","src":"26460:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26452:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26499:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"26510:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26495:3:18"},"nodeType":"YulFunctionCall","src":"26495:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26518:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"26524:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26514:3:18"},"nodeType":"YulFunctionCall","src":"26514:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26488:6:18"},"nodeType":"YulFunctionCall","src":"26488:47:18"},"nodeType":"YulExpressionStatement","src":"26488:47:18"},{"nodeType":"YulAssignment","src":"26544:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26678:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26552:124:18"},"nodeType":"YulFunctionCall","src":"26552:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26544:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26422:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26437:4:18","type":""}],"src":"26271:419:18"},{"body":{"nodeType":"YulBlock","src":"26802:76:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"26824:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"26832:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26820:3:18"},"nodeType":"YulFunctionCall","src":"26820:14:18"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"26836:34:18","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26813:6:18"},"nodeType":"YulFunctionCall","src":"26813:58:18"},"nodeType":"YulExpressionStatement","src":"26813:58:18"}]},"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"26794:6:18","type":""}],"src":"26696:182:18"},{"body":{"nodeType":"YulBlock","src":"27030:220:18","statements":[{"nodeType":"YulAssignment","src":"27040:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27106:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"27111:2:18","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27047:58:18"},"nodeType":"YulFunctionCall","src":"27047:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"27040:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27212:3:18"}],"functionName":{"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulIdentifier","src":"27123:88:18"},"nodeType":"YulFunctionCall","src":"27123:93:18"},"nodeType":"YulExpressionStatement","src":"27123:93:18"},{"nodeType":"YulAssignment","src":"27225:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27236:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"27241:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27232:3:18"},"nodeType":"YulFunctionCall","src":"27232:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"27225:3:18"}]}]},"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"27018:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"27026:3:18","type":""}],"src":"26884:366:18"},{"body":{"nodeType":"YulBlock","src":"27427:248:18","statements":[{"nodeType":"YulAssignment","src":"27437:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27449:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"27460:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27445:3:18"},"nodeType":"YulFunctionCall","src":"27445:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27437:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27484:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"27495:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27480:3:18"},"nodeType":"YulFunctionCall","src":"27480:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27503:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"27509:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27499:3:18"},"nodeType":"YulFunctionCall","src":"27499:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27473:6:18"},"nodeType":"YulFunctionCall","src":"27473:47:18"},"nodeType":"YulExpressionStatement","src":"27473:47:18"},{"nodeType":"YulAssignment","src":"27529:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27663:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27537:124:18"},"nodeType":"YulFunctionCall","src":"27537:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27529:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27407:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27422:4:18","type":""}],"src":"27256:419:18"},{"body":{"nodeType":"YulBlock","src":"27787:118:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27809:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"27817:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27805:3:18"},"nodeType":"YulFunctionCall","src":"27805:14:18"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"27821:34:18","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27798:6:18"},"nodeType":"YulFunctionCall","src":"27798:58:18"},"nodeType":"YulExpressionStatement","src":"27798:58:18"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27877:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"27885:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27873:3:18"},"nodeType":"YulFunctionCall","src":"27873:15:18"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"27890:7:18","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27866:6:18"},"nodeType":"YulFunctionCall","src":"27866:32:18"},"nodeType":"YulExpressionStatement","src":"27866:32:18"}]},"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"27779:6:18","type":""}],"src":"27681:224:18"},{"body":{"nodeType":"YulBlock","src":"28057:220:18","statements":[{"nodeType":"YulAssignment","src":"28067:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28133:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"28138:2:18","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28074:58:18"},"nodeType":"YulFunctionCall","src":"28074:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"28067:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28239:3:18"}],"functionName":{"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulIdentifier","src":"28150:88:18"},"nodeType":"YulFunctionCall","src":"28150:93:18"},"nodeType":"YulExpressionStatement","src":"28150:93:18"},{"nodeType":"YulAssignment","src":"28252:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28263:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"28268:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28259:3:18"},"nodeType":"YulFunctionCall","src":"28259:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"28252:3:18"}]}]},"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"28045:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"28053:3:18","type":""}],"src":"27911:366:18"},{"body":{"nodeType":"YulBlock","src":"28454:248:18","statements":[{"nodeType":"YulAssignment","src":"28464:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28476:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"28487:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28472:3:18"},"nodeType":"YulFunctionCall","src":"28472:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28464:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28511:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"28522:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28507:3:18"},"nodeType":"YulFunctionCall","src":"28507:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"28530:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"28536:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28526:3:18"},"nodeType":"YulFunctionCall","src":"28526:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28500:6:18"},"nodeType":"YulFunctionCall","src":"28500:47:18"},"nodeType":"YulExpressionStatement","src":"28500:47:18"},{"nodeType":"YulAssignment","src":"28556:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"28690:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28564:124:18"},"nodeType":"YulFunctionCall","src":"28564:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28556:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28434:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28449:4:18","type":""}],"src":"28283:419:18"},{"body":{"nodeType":"YulBlock","src":"28814:117:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"28836:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"28844:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28832:3:18"},"nodeType":"YulFunctionCall","src":"28832:14:18"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"28848:34:18","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28825:6:18"},"nodeType":"YulFunctionCall","src":"28825:58:18"},"nodeType":"YulExpressionStatement","src":"28825:58:18"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"28904:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"28912:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28900:3:18"},"nodeType":"YulFunctionCall","src":"28900:15:18"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"28917:6:18","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28893:6:18"},"nodeType":"YulFunctionCall","src":"28893:31:18"},"nodeType":"YulExpressionStatement","src":"28893:31:18"}]},"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"28806:6:18","type":""}],"src":"28708:223:18"},{"body":{"nodeType":"YulBlock","src":"29083:220:18","statements":[{"nodeType":"YulAssignment","src":"29093:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29159:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"29164:2:18","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29100:58:18"},"nodeType":"YulFunctionCall","src":"29100:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"29093:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29265:3:18"}],"functionName":{"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulIdentifier","src":"29176:88:18"},"nodeType":"YulFunctionCall","src":"29176:93:18"},"nodeType":"YulExpressionStatement","src":"29176:93:18"},{"nodeType":"YulAssignment","src":"29278:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29289:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"29294:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29285:3:18"},"nodeType":"YulFunctionCall","src":"29285:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"29278:3:18"}]}]},"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29071:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"29079:3:18","type":""}],"src":"28937:366:18"},{"body":{"nodeType":"YulBlock","src":"29480:248:18","statements":[{"nodeType":"YulAssignment","src":"29490:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29502:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"29513:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29498:3:18"},"nodeType":"YulFunctionCall","src":"29498:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29490:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29537:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"29548:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29533:3:18"},"nodeType":"YulFunctionCall","src":"29533:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29556:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"29562:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29552:3:18"},"nodeType":"YulFunctionCall","src":"29552:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29526:6:18"},"nodeType":"YulFunctionCall","src":"29526:47:18"},"nodeType":"YulExpressionStatement","src":"29526:47:18"},{"nodeType":"YulAssignment","src":"29582:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29716:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29590:124:18"},"nodeType":"YulFunctionCall","src":"29590:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29582:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29460:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29475:4:18","type":""}],"src":"29309:419:18"},{"body":{"nodeType":"YulBlock","src":"29840:76:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29862:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"29870:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29858:3:18"},"nodeType":"YulFunctionCall","src":"29858:14:18"},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"29874:34:18","type":"","value":"ERC721: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29851:6:18"},"nodeType":"YulFunctionCall","src":"29851:58:18"},"nodeType":"YulExpressionStatement","src":"29851:58:18"}]},"name":"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"29832:6:18","type":""}],"src":"29734:182:18"},{"body":{"nodeType":"YulBlock","src":"30068:220:18","statements":[{"nodeType":"YulAssignment","src":"30078:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30144:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"30149:2:18","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30085:58:18"},"nodeType":"YulFunctionCall","src":"30085:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"30078:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30250:3:18"}],"functionName":{"name":"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","nodeType":"YulIdentifier","src":"30161:88:18"},"nodeType":"YulFunctionCall","src":"30161:93:18"},"nodeType":"YulExpressionStatement","src":"30161:93:18"},{"nodeType":"YulAssignment","src":"30263:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30274:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"30279:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30270:3:18"},"nodeType":"YulFunctionCall","src":"30270:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"30263:3:18"}]}]},"name":"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"30056:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"30064:3:18","type":""}],"src":"29922:366:18"},{"body":{"nodeType":"YulBlock","src":"30465:248:18","statements":[{"nodeType":"YulAssignment","src":"30475:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30487:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"30498:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30483:3:18"},"nodeType":"YulFunctionCall","src":"30483:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30475:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30522:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"30533:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30518:3:18"},"nodeType":"YulFunctionCall","src":"30518:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30541:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"30547:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30537:3:18"},"nodeType":"YulFunctionCall","src":"30537:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30511:6:18"},"nodeType":"YulFunctionCall","src":"30511:47:18"},"nodeType":"YulExpressionStatement","src":"30511:47:18"},{"nodeType":"YulAssignment","src":"30567:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30701:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30575:124:18"},"nodeType":"YulFunctionCall","src":"30575:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30567:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30445:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30460:4:18","type":""}],"src":"30294:419:18"},{"body":{"nodeType":"YulBlock","src":"30825:72:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30847:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"30855:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30843:3:18"},"nodeType":"YulFunctionCall","src":"30843:14:18"},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","kind":"string","nodeType":"YulLiteral","src":"30859:30:18","type":"","value":"ERC721: token already minted"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30836:6:18"},"nodeType":"YulFunctionCall","src":"30836:54:18"},"nodeType":"YulExpressionStatement","src":"30836:54:18"}]},"name":"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"30817:6:18","type":""}],"src":"30719:178:18"},{"body":{"nodeType":"YulBlock","src":"31049:220:18","statements":[{"nodeType":"YulAssignment","src":"31059:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31125:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"31130:2:18","type":"","value":"28"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31066:58:18"},"nodeType":"YulFunctionCall","src":"31066:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"31059:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31231:3:18"}],"functionName":{"name":"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","nodeType":"YulIdentifier","src":"31142:88:18"},"nodeType":"YulFunctionCall","src":"31142:93:18"},"nodeType":"YulExpressionStatement","src":"31142:93:18"},{"nodeType":"YulAssignment","src":"31244:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31255:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"31260:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31251:3:18"},"nodeType":"YulFunctionCall","src":"31251:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"31244:3:18"}]}]},"name":"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"31037:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"31045:3:18","type":""}],"src":"30903:366:18"},{"body":{"nodeType":"YulBlock","src":"31446:248:18","statements":[{"nodeType":"YulAssignment","src":"31456:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31468:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"31479:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31464:3:18"},"nodeType":"YulFunctionCall","src":"31464:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31456:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31503:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"31514:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31499:3:18"},"nodeType":"YulFunctionCall","src":"31499:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31522:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"31528:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31518:3:18"},"nodeType":"YulFunctionCall","src":"31518:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31492:6:18"},"nodeType":"YulFunctionCall","src":"31492:47:18"},"nodeType":"YulExpressionStatement","src":"31492:47:18"},{"nodeType":"YulAssignment","src":"31548:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31682:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31556:124:18"},"nodeType":"YulFunctionCall","src":"31556:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31548:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"31426:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"31441:4:18","type":""}],"src":"31275:419:18"},{"body":{"nodeType":"YulBlock","src":"31806:127:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31828:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"31836:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31824:3:18"},"nodeType":"YulFunctionCall","src":"31824:14:18"},{"hexValue":"45524337323155524953746f726167653a2055524920736574206f66206e6f6e","kind":"string","nodeType":"YulLiteral","src":"31840:34:18","type":"","value":"ERC721URIStorage: URI set of non"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31817:6:18"},"nodeType":"YulFunctionCall","src":"31817:58:18"},"nodeType":"YulExpressionStatement","src":"31817:58:18"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31896:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"31904:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31892:3:18"},"nodeType":"YulFunctionCall","src":"31892:15:18"},{"hexValue":"6578697374656e7420746f6b656e","kind":"string","nodeType":"YulLiteral","src":"31909:16:18","type":"","value":"existent token"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31885:6:18"},"nodeType":"YulFunctionCall","src":"31885:41:18"},"nodeType":"YulExpressionStatement","src":"31885:41:18"}]},"name":"store_literal_in_memory_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"31798:6:18","type":""}],"src":"31700:233:18"},{"body":{"nodeType":"YulBlock","src":"32085:220:18","statements":[{"nodeType":"YulAssignment","src":"32095:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32161:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"32166:2:18","type":"","value":"46"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32102:58:18"},"nodeType":"YulFunctionCall","src":"32102:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"32095:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32267:3:18"}],"functionName":{"name":"store_literal_in_memory_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4","nodeType":"YulIdentifier","src":"32178:88:18"},"nodeType":"YulFunctionCall","src":"32178:93:18"},"nodeType":"YulExpressionStatement","src":"32178:93:18"},{"nodeType":"YulAssignment","src":"32280:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32291:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"32296:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32287:3:18"},"nodeType":"YulFunctionCall","src":"32287:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"32280:3:18"}]}]},"name":"abi_encode_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"32073:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"32081:3:18","type":""}],"src":"31939:366:18"},{"body":{"nodeType":"YulBlock","src":"32482:248:18","statements":[{"nodeType":"YulAssignment","src":"32492:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32504:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"32515:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32500:3:18"},"nodeType":"YulFunctionCall","src":"32500:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32492:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32539:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"32550:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32535:3:18"},"nodeType":"YulFunctionCall","src":"32535:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32558:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"32564:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"32554:3:18"},"nodeType":"YulFunctionCall","src":"32554:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32528:6:18"},"nodeType":"YulFunctionCall","src":"32528:47:18"},"nodeType":"YulExpressionStatement","src":"32528:47:18"},{"nodeType":"YulAssignment","src":"32584:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32718:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32592:124:18"},"nodeType":"YulFunctionCall","src":"32592:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32584:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"32462:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"32477:4:18","type":""}],"src":"32311:419:18"},{"body":{"nodeType":"YulBlock","src":"32790:87:18","statements":[{"nodeType":"YulAssignment","src":"32800:11:18","value":{"name":"ptr","nodeType":"YulIdentifier","src":"32808:3:18"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"32800:4:18"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32828:1:18","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"32831:3:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32821:6:18"},"nodeType":"YulFunctionCall","src":"32821:14:18"},"nodeType":"YulExpressionStatement","src":"32821:14:18"},{"nodeType":"YulAssignment","src":"32844:26:18","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32862:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"32865:4:18","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"32852:9:18"},"nodeType":"YulFunctionCall","src":"32852:18:18"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"32844:4:18"}]}]},"name":"array_dataslot_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"32777:3:18","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"32785:4:18","type":""}],"src":"32736:141:18"},{"body":{"nodeType":"YulBlock","src":"32927:49:18","statements":[{"nodeType":"YulAssignment","src":"32937:33:18","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32955:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"32962:2:18","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32951:3:18"},"nodeType":"YulFunctionCall","src":"32951:14:18"},{"kind":"number","nodeType":"YulLiteral","src":"32967:2:18","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"32947:3:18"},"nodeType":"YulFunctionCall","src":"32947:23:18"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"32937:6:18"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"32910:5:18","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"32920:6:18","type":""}],"src":"32883:93:18"},{"body":{"nodeType":"YulBlock","src":"33035:54:18","statements":[{"nodeType":"YulAssignment","src":"33045:37:18","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"33070:4:18"},{"name":"value","nodeType":"YulIdentifier","src":"33076:5:18"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"33066:3:18"},"nodeType":"YulFunctionCall","src":"33066:16:18"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"33045:8:18"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"33010:4:18","type":""},{"name":"value","nodeType":"YulTypedName","src":"33016:5:18","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"33026:8:18","type":""}],"src":"32982:107:18"},{"body":{"nodeType":"YulBlock","src":"33171:317:18","statements":[{"nodeType":"YulVariableDeclaration","src":"33181:35:18","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"33202:10:18"},{"kind":"number","nodeType":"YulLiteral","src":"33214:1:18","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"33198:3:18"},"nodeType":"YulFunctionCall","src":"33198:18:18"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"33185:9:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"33225:109:18","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"33256:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"33267:66:18","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"33237:18:18"},"nodeType":"YulFunctionCall","src":"33237:97:18"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"33229:4:18","type":""}]},{"nodeType":"YulAssignment","src":"33343:51:18","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"33374:9:18"},{"name":"toInsert","nodeType":"YulIdentifier","src":"33385:8:18"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"33355:18:18"},"nodeType":"YulFunctionCall","src":"33355:39:18"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"33343:8:18"}]},{"nodeType":"YulAssignment","src":"33403:30:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33416:5:18"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"33427:4:18"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"33423:3:18"},"nodeType":"YulFunctionCall","src":"33423:9:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"33412:3:18"},"nodeType":"YulFunctionCall","src":"33412:21:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"33403:5:18"}]},{"nodeType":"YulAssignment","src":"33442:40:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33455:5:18"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"33466:8:18"},{"name":"mask","nodeType":"YulIdentifier","src":"33476:4:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"33462:3:18"},"nodeType":"YulFunctionCall","src":"33462:19:18"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"33452:2:18"},"nodeType":"YulFunctionCall","src":"33452:30:18"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"33442:6:18"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"33132:5:18","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"33139:10:18","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"33151:8:18","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"33164:6:18","type":""}],"src":"33095:393:18"},{"body":{"nodeType":"YulBlock","src":"33526:28:18","statements":[{"nodeType":"YulAssignment","src":"33536:12:18","value":{"name":"value","nodeType":"YulIdentifier","src":"33543:5:18"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"33536:3:18"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"33512:5:18","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"33522:3:18","type":""}],"src":"33494:60:18"},{"body":{"nodeType":"YulBlock","src":"33620:82:18","statements":[{"nodeType":"YulAssignment","src":"33630:66:18","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33688:5:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"33670:17:18"},"nodeType":"YulFunctionCall","src":"33670:24:18"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"33661:8:18"},"nodeType":"YulFunctionCall","src":"33661:34:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"33643:17:18"},"nodeType":"YulFunctionCall","src":"33643:53:18"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"33630:9:18"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"33600:5:18","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"33610:9:18","type":""}],"src":"33560:142:18"},{"body":{"nodeType":"YulBlock","src":"33755:28:18","statements":[{"nodeType":"YulAssignment","src":"33765:12:18","value":{"name":"value","nodeType":"YulIdentifier","src":"33772:5:18"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"33765:3:18"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"33741:5:18","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"33751:3:18","type":""}],"src":"33708:75:18"},{"body":{"nodeType":"YulBlock","src":"33865:193:18","statements":[{"nodeType":"YulVariableDeclaration","src":"33875:63:18","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"33930:7:18"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"33899:30:18"},"nodeType":"YulFunctionCall","src":"33899:39:18"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"33879:16:18","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"33954:4:18"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"33994:4:18"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"33988:5:18"},"nodeType":"YulFunctionCall","src":"33988:11:18"},{"name":"offset","nodeType":"YulIdentifier","src":"34001:6:18"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"34033:16:18"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"34009:23:18"},"nodeType":"YulFunctionCall","src":"34009:41:18"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"33960:27:18"},"nodeType":"YulFunctionCall","src":"33960:91:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"33947:6:18"},"nodeType":"YulFunctionCall","src":"33947:105:18"},"nodeType":"YulExpressionStatement","src":"33947:105:18"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"33842:4:18","type":""},{"name":"offset","nodeType":"YulTypedName","src":"33848:6:18","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"33856:7:18","type":""}],"src":"33789:269:18"},{"body":{"nodeType":"YulBlock","src":"34113:24:18","statements":[{"nodeType":"YulAssignment","src":"34123:8:18","value":{"kind":"number","nodeType":"YulLiteral","src":"34130:1:18","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"34123:3:18"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"34109:3:18","type":""}],"src":"34064:73:18"},{"body":{"nodeType":"YulBlock","src":"34196:136:18","statements":[{"nodeType":"YulVariableDeclaration","src":"34206:46:18","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"34220:30:18"},"nodeType":"YulFunctionCall","src":"34220:32:18"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"34210:6:18","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"34305:4:18"},{"name":"offset","nodeType":"YulIdentifier","src":"34311:6:18"},{"name":"zero_0","nodeType":"YulIdentifier","src":"34319:6:18"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"34261:43:18"},"nodeType":"YulFunctionCall","src":"34261:65:18"},"nodeType":"YulExpressionStatement","src":"34261:65:18"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"34182:4:18","type":""},{"name":"offset","nodeType":"YulTypedName","src":"34188:6:18","type":""}],"src":"34143:189:18"},{"body":{"nodeType":"YulBlock","src":"34388:136:18","statements":[{"body":{"nodeType":"YulBlock","src":"34455:63:18","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"34499:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"34506:1:18","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"34469:29:18"},"nodeType":"YulFunctionCall","src":"34469:39:18"},"nodeType":"YulExpressionStatement","src":"34469:39:18"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"34408:5:18"},{"name":"end","nodeType":"YulIdentifier","src":"34415:3:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"34405:2:18"},"nodeType":"YulFunctionCall","src":"34405:14:18"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"34420:26:18","statements":[{"nodeType":"YulAssignment","src":"34422:22:18","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"34435:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"34442:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34431:3:18"},"nodeType":"YulFunctionCall","src":"34431:13:18"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"34422:5:18"}]}]},"pre":{"nodeType":"YulBlock","src":"34402:2:18","statements":[]},"src":"34398:120:18"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"34376:5:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"34383:3:18","type":""}],"src":"34338:186:18"},{"body":{"nodeType":"YulBlock","src":"34609:464:18","statements":[{"body":{"nodeType":"YulBlock","src":"34635:431:18","statements":[{"nodeType":"YulVariableDeclaration","src":"34649:54:18","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"34697:5:18"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"34665:31:18"},"nodeType":"YulFunctionCall","src":"34665:38:18"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"34653:8:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"34716:63:18","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"34739:8:18"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"34767:10:18"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"34749:17:18"},"nodeType":"YulFunctionCall","src":"34749:29:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34735:3:18"},"nodeType":"YulFunctionCall","src":"34735:44:18"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"34720:11:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"34936:27:18","statements":[{"nodeType":"YulAssignment","src":"34938:23:18","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"34953:8:18"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"34938:11:18"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"34920:10:18"},{"kind":"number","nodeType":"YulLiteral","src":"34932:2:18","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"34917:2:18"},"nodeType":"YulFunctionCall","src":"34917:18:18"},"nodeType":"YulIf","src":"34914:49:18"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"35005:11:18"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"35022:8:18"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"35050:3:18"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"35032:17:18"},"nodeType":"YulFunctionCall","src":"35032:22:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35018:3:18"},"nodeType":"YulFunctionCall","src":"35018:37:18"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"34976:28:18"},"nodeType":"YulFunctionCall","src":"34976:80:18"},"nodeType":"YulExpressionStatement","src":"34976:80:18"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"34626:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"34631:2:18","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"34623:2:18"},"nodeType":"YulFunctionCall","src":"34623:11:18"},"nodeType":"YulIf","src":"34620:446:18"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"34585:5:18","type":""},{"name":"len","nodeType":"YulTypedName","src":"34592:3:18","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"34597:10:18","type":""}],"src":"34530:543:18"},{"body":{"nodeType":"YulBlock","src":"35142:54:18","statements":[{"nodeType":"YulAssignment","src":"35152:37:18","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"35177:4:18"},{"name":"value","nodeType":"YulIdentifier","src":"35183:5:18"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"35173:3:18"},"nodeType":"YulFunctionCall","src":"35173:16:18"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"35152:8:18"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"35117:4:18","type":""},{"name":"value","nodeType":"YulTypedName","src":"35123:5:18","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"35133:8:18","type":""}],"src":"35079:117:18"},{"body":{"nodeType":"YulBlock","src":"35253:118:18","statements":[{"nodeType":"YulVariableDeclaration","src":"35263:68:18","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"35312:1:18","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"35315:5:18"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"35308:3:18"},"nodeType":"YulFunctionCall","src":"35308:13:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"35327:1:18","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"35323:3:18"},"nodeType":"YulFunctionCall","src":"35323:6:18"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"35279:28:18"},"nodeType":"YulFunctionCall","src":"35279:51:18"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"35275:3:18"},"nodeType":"YulFunctionCall","src":"35275:56:18"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"35267:4:18","type":""}]},{"nodeType":"YulAssignment","src":"35340:25:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"35354:4:18"},{"name":"mask","nodeType":"YulIdentifier","src":"35360:4:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"35350:3:18"},"nodeType":"YulFunctionCall","src":"35350:15:18"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"35340:6:18"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"35230:4:18","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"35236:5:18","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"35246:6:18","type":""}],"src":"35202:169:18"},{"body":{"nodeType":"YulBlock","src":"35457:214:18","statements":[{"nodeType":"YulAssignment","src":"35590:37:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"35617:4:18"},{"name":"len","nodeType":"YulIdentifier","src":"35623:3:18"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"35598:18:18"},"nodeType":"YulFunctionCall","src":"35598:29:18"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"35590:4:18"}]},{"nodeType":"YulAssignment","src":"35636:29:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"35647:4:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"35657:1:18","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"35660:3:18"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"35653:3:18"},"nodeType":"YulFunctionCall","src":"35653:11:18"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"35644:2:18"},"nodeType":"YulFunctionCall","src":"35644:21:18"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"35636:4:18"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"35438:4:18","type":""},{"name":"len","nodeType":"YulTypedName","src":"35444:3:18","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"35452:4:18","type":""}],"src":"35376:295:18"},{"body":{"nodeType":"YulBlock","src":"35768:1303:18","statements":[{"nodeType":"YulVariableDeclaration","src":"35779:51:18","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"35826:3:18"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"35793:32:18"},"nodeType":"YulFunctionCall","src":"35793:37:18"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"35783:6:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"35915:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"35917:16:18"},"nodeType":"YulFunctionCall","src":"35917:18:18"},"nodeType":"YulExpressionStatement","src":"35917:18:18"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"35887:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"35895:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"35884:2:18"},"nodeType":"YulFunctionCall","src":"35884:30:18"},"nodeType":"YulIf","src":"35881:56:18"},{"nodeType":"YulVariableDeclaration","src":"35947:52:18","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"35993:4:18"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"35987:5:18"},"nodeType":"YulFunctionCall","src":"35987:11:18"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"35961:25:18"},"nodeType":"YulFunctionCall","src":"35961:38:18"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"35951:6:18","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"36092:4:18"},{"name":"oldLen","nodeType":"YulIdentifier","src":"36098:6:18"},{"name":"newLen","nodeType":"YulIdentifier","src":"36106:6:18"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulIdentifier","src":"36046:45:18"},"nodeType":"YulFunctionCall","src":"36046:67:18"},"nodeType":"YulExpressionStatement","src":"36046:67:18"},{"nodeType":"YulVariableDeclaration","src":"36123:18:18","value":{"kind":"number","nodeType":"YulLiteral","src":"36140:1:18","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"36127:9:18","type":""}]},{"nodeType":"YulAssignment","src":"36151:17:18","value":{"kind":"number","nodeType":"YulLiteral","src":"36164:4:18","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"36151:9:18"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"36215:611:18","statements":[{"nodeType":"YulVariableDeclaration","src":"36229:37:18","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"36248:6:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"36260:4:18","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"36256:3:18"},"nodeType":"YulFunctionCall","src":"36256:9:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"36244:3:18"},"nodeType":"YulFunctionCall","src":"36244:22:18"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"36233:7:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"36280:51:18","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"36326:4:18"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"36294:31:18"},"nodeType":"YulFunctionCall","src":"36294:37:18"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"36284:6:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"36344:10:18","value":{"kind":"number","nodeType":"YulLiteral","src":"36353:1:18","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"36348:1:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"36412:163:18","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"36437:6:18"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"36455:3:18"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"36460:9:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36451:3:18"},"nodeType":"YulFunctionCall","src":"36451:19:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"36445:5:18"},"nodeType":"YulFunctionCall","src":"36445:26:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"36430:6:18"},"nodeType":"YulFunctionCall","src":"36430:42:18"},"nodeType":"YulExpressionStatement","src":"36430:42:18"},{"nodeType":"YulAssignment","src":"36489:24:18","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"36503:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"36511:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36499:3:18"},"nodeType":"YulFunctionCall","src":"36499:14:18"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"36489:6:18"}]},{"nodeType":"YulAssignment","src":"36530:31:18","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"36547:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"36558:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36543:3:18"},"nodeType":"YulFunctionCall","src":"36543:18:18"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"36530:9:18"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"36378:1:18"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"36381:7:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"36375:2:18"},"nodeType":"YulFunctionCall","src":"36375:14:18"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"36390:21:18","statements":[{"nodeType":"YulAssignment","src":"36392:17:18","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"36401:1:18"},{"kind":"number","nodeType":"YulLiteral","src":"36404:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36397:3:18"},"nodeType":"YulFunctionCall","src":"36397:12:18"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"36392:1:18"}]}]},"pre":{"nodeType":"YulBlock","src":"36371:3:18","statements":[]},"src":"36367:208:18"},{"body":{"nodeType":"YulBlock","src":"36611:156:18","statements":[{"nodeType":"YulVariableDeclaration","src":"36629:43:18","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"36656:3:18"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"36661:9:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36652:3:18"},"nodeType":"YulFunctionCall","src":"36652:19:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"36646:5:18"},"nodeType":"YulFunctionCall","src":"36646:26:18"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"36633:9:18","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"36696:6:18"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"36723:9:18"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"36738:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"36746:4:18","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"36734:3:18"},"nodeType":"YulFunctionCall","src":"36734:17:18"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"36704:18:18"},"nodeType":"YulFunctionCall","src":"36704:48:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"36689:6:18"},"nodeType":"YulFunctionCall","src":"36689:64:18"},"nodeType":"YulExpressionStatement","src":"36689:64:18"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"36594:7:18"},{"name":"newLen","nodeType":"YulIdentifier","src":"36603:6:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"36591:2:18"},"nodeType":"YulFunctionCall","src":"36591:19:18"},"nodeType":"YulIf","src":"36588:179:18"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"36787:4:18"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"36801:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"36809:1:18","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"36797:3:18"},"nodeType":"YulFunctionCall","src":"36797:14:18"},{"kind":"number","nodeType":"YulLiteral","src":"36813:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36793:3:18"},"nodeType":"YulFunctionCall","src":"36793:22:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"36780:6:18"},"nodeType":"YulFunctionCall","src":"36780:36:18"},"nodeType":"YulExpressionStatement","src":"36780:36:18"}]},"nodeType":"YulCase","src":"36208:618:18","value":{"kind":"number","nodeType":"YulLiteral","src":"36213:1:18","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"36843:222:18","statements":[{"nodeType":"YulVariableDeclaration","src":"36857:14:18","value":{"kind":"number","nodeType":"YulLiteral","src":"36870:1:18","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"36861:5:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"36894:67:18","statements":[{"nodeType":"YulAssignment","src":"36912:35:18","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"36931:3:18"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"36936:9:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36927:3:18"},"nodeType":"YulFunctionCall","src":"36927:19:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"36921:5:18"},"nodeType":"YulFunctionCall","src":"36921:26:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"36912:5:18"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"36887:6:18"},"nodeType":"YulIf","src":"36884:77:18"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"36981:4:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"37040:5:18"},{"name":"newLen","nodeType":"YulIdentifier","src":"37047:6:18"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"36987:52:18"},"nodeType":"YulFunctionCall","src":"36987:67:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"36974:6:18"},"nodeType":"YulFunctionCall","src":"36974:81:18"},"nodeType":"YulExpressionStatement","src":"36974:81:18"}]},"nodeType":"YulCase","src":"36835:230:18","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"36188:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"36196:2:18","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"36185:2:18"},"nodeType":"YulFunctionCall","src":"36185:14:18"},"nodeType":"YulSwitch","src":"36178:887:18"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"35757:4:18","type":""},{"name":"src","nodeType":"YulTypedName","src":"35763:3:18","type":""}],"src":"35676:1395:18"},{"body":{"nodeType":"YulBlock","src":"37183:69:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"37205:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"37213:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37201:3:18"},"nodeType":"YulFunctionCall","src":"37201:14:18"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"37217:27:18","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37194:6:18"},"nodeType":"YulFunctionCall","src":"37194:51:18"},"nodeType":"YulExpressionStatement","src":"37194:51:18"}]},"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"37175:6:18","type":""}],"src":"37077:175:18"},{"body":{"nodeType":"YulBlock","src":"37404:220:18","statements":[{"nodeType":"YulAssignment","src":"37414:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37480:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"37485:2:18","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"37421:58:18"},"nodeType":"YulFunctionCall","src":"37421:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"37414:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37586:3:18"}],"functionName":{"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulIdentifier","src":"37497:88:18"},"nodeType":"YulFunctionCall","src":"37497:93:18"},"nodeType":"YulExpressionStatement","src":"37497:93:18"},{"nodeType":"YulAssignment","src":"37599:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37610:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"37615:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37606:3:18"},"nodeType":"YulFunctionCall","src":"37606:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"37599:3:18"}]}]},"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"37392:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"37400:3:18","type":""}],"src":"37258:366:18"},{"body":{"nodeType":"YulBlock","src":"37801:248:18","statements":[{"nodeType":"YulAssignment","src":"37811:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37823:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"37834:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37819:3:18"},"nodeType":"YulFunctionCall","src":"37819:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"37811:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37858:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"37869:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37854:3:18"},"nodeType":"YulFunctionCall","src":"37854:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"37877:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"37883:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"37873:3:18"},"nodeType":"YulFunctionCall","src":"37873:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37847:6:18"},"nodeType":"YulFunctionCall","src":"37847:47:18"},"nodeType":"YulExpressionStatement","src":"37847:47:18"},{"nodeType":"YulAssignment","src":"37903:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"38037:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"37911:124:18"},"nodeType":"YulFunctionCall","src":"37911:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"37903:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"37781:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"37796:4:18","type":""}],"src":"37630:419:18"},{"body":{"nodeType":"YulBlock","src":"38161:131:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"38183:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"38191:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38179:3:18"},"nodeType":"YulFunctionCall","src":"38179:14:18"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"38195:34:18","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38172:6:18"},"nodeType":"YulFunctionCall","src":"38172:58:18"},"nodeType":"YulExpressionStatement","src":"38172:58:18"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"38251:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"38259:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38247:3:18"},"nodeType":"YulFunctionCall","src":"38247:15:18"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"38264:20:18","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38240:6:18"},"nodeType":"YulFunctionCall","src":"38240:45:18"},"nodeType":"YulExpressionStatement","src":"38240:45:18"}]},"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"38153:6:18","type":""}],"src":"38055:237:18"},{"body":{"nodeType":"YulBlock","src":"38444:220:18","statements":[{"nodeType":"YulAssignment","src":"38454:74:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38520:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"38525:2:18","type":"","value":"50"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"38461:58:18"},"nodeType":"YulFunctionCall","src":"38461:67:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"38454:3:18"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38626:3:18"}],"functionName":{"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulIdentifier","src":"38537:88:18"},"nodeType":"YulFunctionCall","src":"38537:93:18"},"nodeType":"YulExpressionStatement","src":"38537:93:18"},{"nodeType":"YulAssignment","src":"38639:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38650:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"38655:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38646:3:18"},"nodeType":"YulFunctionCall","src":"38646:12:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"38639:3:18"}]}]},"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"38432:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"38440:3:18","type":""}],"src":"38298:366:18"},{"body":{"nodeType":"YulBlock","src":"38841:248:18","statements":[{"nodeType":"YulAssignment","src":"38851:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38863:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"38874:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38859:3:18"},"nodeType":"YulFunctionCall","src":"38859:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"38851:4:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38898:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"38909:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38894:3:18"},"nodeType":"YulFunctionCall","src":"38894:17:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"38917:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"38923:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"38913:3:18"},"nodeType":"YulFunctionCall","src":"38913:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38887:6:18"},"nodeType":"YulFunctionCall","src":"38887:47:18"},"nodeType":"YulExpressionStatement","src":"38887:47:18"},{"nodeType":"YulAssignment","src":"38943:139:18","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"39077:4:18"}],"functionName":{"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"38951:124:18"},"nodeType":"YulFunctionCall","src":"38951:131:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"38943:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"38821:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"38836:4:18","type":""}],"src":"38670:419:18"},{"body":{"nodeType":"YulBlock","src":"39140:149:18","statements":[{"nodeType":"YulAssignment","src":"39150:25:18","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"39173:1:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"39155:17:18"},"nodeType":"YulFunctionCall","src":"39155:20:18"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"39150:1:18"}]},{"nodeType":"YulAssignment","src":"39184:25:18","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"39207:1:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"39189:17:18"},"nodeType":"YulFunctionCall","src":"39189:20:18"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"39184:1:18"}]},{"nodeType":"YulAssignment","src":"39218:17:18","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"39230:1:18"},{"name":"y","nodeType":"YulIdentifier","src":"39233:1:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"39226:3:18"},"nodeType":"YulFunctionCall","src":"39226:9:18"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"39218:4:18"}]},{"body":{"nodeType":"YulBlock","src":"39260:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"39262:16:18"},"nodeType":"YulFunctionCall","src":"39262:18:18"},"nodeType":"YulExpressionStatement","src":"39262:18:18"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"39251:4:18"},{"name":"x","nodeType":"YulIdentifier","src":"39257:1:18"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"39248:2:18"},"nodeType":"YulFunctionCall","src":"39248:11:18"},"nodeType":"YulIf","src":"39245:37:18"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"39126:1:18","type":""},{"name":"y","nodeType":"YulTypedName","src":"39129:1:18","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"39135:4:18","type":""}],"src":"39095:194:18"},{"body":{"nodeType":"YulBlock","src":"39339:147:18","statements":[{"nodeType":"YulAssignment","src":"39349:25:18","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"39372:1:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"39354:17:18"},"nodeType":"YulFunctionCall","src":"39354:20:18"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"39349:1:18"}]},{"nodeType":"YulAssignment","src":"39383:25:18","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"39406:1:18"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"39388:17:18"},"nodeType":"YulFunctionCall","src":"39388:20:18"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"39383:1:18"}]},{"nodeType":"YulAssignment","src":"39417:16:18","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"39428:1:18"},{"name":"y","nodeType":"YulIdentifier","src":"39431:1:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39424:3:18"},"nodeType":"YulFunctionCall","src":"39424:9:18"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"39417:3:18"}]},{"body":{"nodeType":"YulBlock","src":"39457:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"39459:16:18"},"nodeType":"YulFunctionCall","src":"39459:18:18"},"nodeType":"YulExpressionStatement","src":"39459:18:18"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"39449:1:18"},{"name":"sum","nodeType":"YulIdentifier","src":"39452:3:18"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"39446:2:18"},"nodeType":"YulFunctionCall","src":"39446:10:18"},"nodeType":"YulIf","src":"39443:36:18"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"39326:1:18","type":""},{"name":"y","nodeType":"YulTypedName","src":"39329:1:18","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"39335:3:18","type":""}],"src":"39295:191:18"},{"body":{"nodeType":"YulBlock","src":"39550:40:18","statements":[{"nodeType":"YulAssignment","src":"39561:22:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"39577:5:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"39571:5:18"},"nodeType":"YulFunctionCall","src":"39571:12:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"39561:6:18"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"39533:5:18","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"39543:6:18","type":""}],"src":"39492:98:18"},{"body":{"nodeType":"YulBlock","src":"39691:73:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"39708:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"39713:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39701:6:18"},"nodeType":"YulFunctionCall","src":"39701:19:18"},"nodeType":"YulExpressionStatement","src":"39701:19:18"},{"nodeType":"YulAssignment","src":"39729:29:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"39748:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"39753:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39744:3:18"},"nodeType":"YulFunctionCall","src":"39744:14:18"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"39729:11:18"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"39663:3:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"39668:6:18","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"39679:11:18","type":""}],"src":"39596:168:18"},{"body":{"nodeType":"YulBlock","src":"39860:283:18","statements":[{"nodeType":"YulVariableDeclaration","src":"39870:52:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"39916:5:18"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"39884:31:18"},"nodeType":"YulFunctionCall","src":"39884:38:18"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"39874:6:18","type":""}]},{"nodeType":"YulAssignment","src":"39931:77:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"39996:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"40001:6:18"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"39938:57:18"},"nodeType":"YulFunctionCall","src":"39938:70:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"39931:3:18"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"40056:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"40063:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40052:3:18"},"nodeType":"YulFunctionCall","src":"40052:16:18"},{"name":"pos","nodeType":"YulIdentifier","src":"40070:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"40075:6:18"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"40017:34:18"},"nodeType":"YulFunctionCall","src":"40017:65:18"},"nodeType":"YulExpressionStatement","src":"40017:65:18"},{"nodeType":"YulAssignment","src":"40091:46:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"40102:3:18"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"40129:6:18"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"40107:21:18"},"nodeType":"YulFunctionCall","src":"40107:29:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40098:3:18"},"nodeType":"YulFunctionCall","src":"40098:39:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"40091:3:18"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"39841:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"39848:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"39856:3:18","type":""}],"src":"39770:373:18"},{"body":{"nodeType":"YulBlock","src":"40349:440:18","statements":[{"nodeType":"YulAssignment","src":"40359:27:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40371:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"40382:3:18","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40367:3:18"},"nodeType":"YulFunctionCall","src":"40367:19:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"40359:4:18"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"40440:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40453:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"40464:1:18","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40449:3:18"},"nodeType":"YulFunctionCall","src":"40449:17:18"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"40396:43:18"},"nodeType":"YulFunctionCall","src":"40396:71:18"},"nodeType":"YulExpressionStatement","src":"40396:71:18"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"40521:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40534:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"40545:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40530:3:18"},"nodeType":"YulFunctionCall","src":"40530:18:18"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"40477:43:18"},"nodeType":"YulFunctionCall","src":"40477:72:18"},"nodeType":"YulExpressionStatement","src":"40477:72:18"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"40603:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40616:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"40627:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40612:3:18"},"nodeType":"YulFunctionCall","src":"40612:18:18"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"40559:43:18"},"nodeType":"YulFunctionCall","src":"40559:72:18"},"nodeType":"YulExpressionStatement","src":"40559:72:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40652:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"40663:2:18","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40648:3:18"},"nodeType":"YulFunctionCall","src":"40648:18:18"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"40672:4:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"40678:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"40668:3:18"},"nodeType":"YulFunctionCall","src":"40668:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40641:6:18"},"nodeType":"YulFunctionCall","src":"40641:48:18"},"nodeType":"YulExpressionStatement","src":"40641:48:18"},{"nodeType":"YulAssignment","src":"40698:84:18","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"40768:6:18"},{"name":"tail","nodeType":"YulIdentifier","src":"40777:4:18"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"40706:61:18"},"nodeType":"YulFunctionCall","src":"40706:76:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"40698:4:18"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"40297:9:18","type":""},{"name":"value3","nodeType":"YulTypedName","src":"40309:6:18","type":""},{"name":"value2","nodeType":"YulTypedName","src":"40317:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"40325:6:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"40333:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"40344:4:18","type":""}],"src":"40149:640:18"},{"body":{"nodeType":"YulBlock","src":"40857:79:18","statements":[{"nodeType":"YulAssignment","src":"40867:22:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"40882:6:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"40876:5:18"},"nodeType":"YulFunctionCall","src":"40876:13:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"40867:5:18"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"40924:5:18"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"40898:25:18"},"nodeType":"YulFunctionCall","src":"40898:32:18"},"nodeType":"YulExpressionStatement","src":"40898:32:18"}]},"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"40835:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"40843:3:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"40851:5:18","type":""}],"src":"40795:141:18"},{"body":{"nodeType":"YulBlock","src":"41018:273:18","statements":[{"body":{"nodeType":"YulBlock","src":"41064:83:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"41066:77:18"},"nodeType":"YulFunctionCall","src":"41066:79:18"},"nodeType":"YulExpressionStatement","src":"41066:79:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"41039:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"41048:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"41035:3:18"},"nodeType":"YulFunctionCall","src":"41035:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"41060:2:18","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"41031:3:18"},"nodeType":"YulFunctionCall","src":"41031:32:18"},"nodeType":"YulIf","src":"41028:119:18"},{"nodeType":"YulBlock","src":"41157:127:18","statements":[{"nodeType":"YulVariableDeclaration","src":"41172:15:18","value":{"kind":"number","nodeType":"YulLiteral","src":"41186:1:18","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"41176:6:18","type":""}]},{"nodeType":"YulAssignment","src":"41201:73:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41246:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"41257:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41242:3:18"},"nodeType":"YulFunctionCall","src":"41242:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"41266:7:18"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulIdentifier","src":"41211:30:18"},"nodeType":"YulFunctionCall","src":"41211:63:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"41201:6:18"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"40988:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"40999:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"41011:6:18","type":""}],"src":"40942:349:18"},{"body":{"nodeType":"YulBlock","src":"41325:152:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"41342:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"41345:77:18","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41335:6:18"},"nodeType":"YulFunctionCall","src":"41335:88:18"},"nodeType":"YulExpressionStatement","src":"41335:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"41439:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"41442:4:18","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41432:6:18"},"nodeType":"YulFunctionCall","src":"41432:15:18"},"nodeType":"YulExpressionStatement","src":"41432:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"41463:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"41466:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"41456:6:18"},"nodeType":"YulFunctionCall","src":"41456:15:18"},"nodeType":"YulExpressionStatement","src":"41456:15:18"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"41297:180:18"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_array$_t_uint256_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encodeUpdatedPos_t_uint256_to_t_uint256(value0, pos) -> updatedPos {\n        abi_encode_t_uint256_to_t_uint256(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // uint256[] -> uint256[]\n    function abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_uint256_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_uint256_to_t_uint256(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256t_string_memory_ptr(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_string_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approval to current owne\")\n\n        mstore(add(memPtr, 32), \"r\")\n\n    }\n\n    function abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve caller is not to\")\n\n        mstore(add(memPtr, 32), \"ken owner or approved for all\")\n\n    }\n\n    function abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 61)\n        store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: caller is not token owne\")\n\n        mstore(add(memPtr, 32), \"r or approved\")\n\n    }\n\n    function abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n        store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: invalid token ID\")\n\n    }\n\n    function abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: address zero is not a va\")\n\n        mstore(add(memPtr, 32), \"lid owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function store_literal_in_memory_8d1b93b434e468e73514a2449ae955e822f73dcdf924bb4553be247ebca8755e(memPtr) {\n\n        mstore(add(memPtr, 0), \"Insufficient payment\")\n\n    }\n\n    function abi_encode_t_stringliteral_8d1b93b434e468e73514a2449ae955e822f73dcdf924bb4553be247ebca8755e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)\n        store_literal_in_memory_8d1b93b434e468e73514a2449ae955e822f73dcdf924bb4553be247ebca8755e(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_8d1b93b434e468e73514a2449ae955e822f73dcdf924bb4553be247ebca8755e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8d1b93b434e468e73514a2449ae955e822f73dcdf924bb4553be247ebca8755e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_269df367cd41cace5897a935d0e0858fe4543b5619d45e09af6b124c1bb3d528(memPtr) {\n\n        mstore(add(memPtr, 0), \"UNAUTHORIZED\")\n\n    }\n\n    function abi_encode_t_stringliteral_269df367cd41cace5897a935d0e0858fe4543b5619d45e09af6b124c1bb3d528_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 12)\n        store_literal_in_memory_269df367cd41cace5897a935d0e0858fe4543b5619d45e09af6b124c1bb3d528(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_269df367cd41cace5897a935d0e0858fe4543b5619d45e09af6b124c1bb3d528__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_269df367cd41cace5897a935d0e0858fe4543b5619d45e09af6b124c1bb3d528_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_1b2638459828301e8cd6c7c02856073bacf975379e0867f689bb14feacb780c5(memPtr) {\n\n        mstore(add(memPtr, 0), \"Unauthorized\")\n\n    }\n\n    function abi_encode_t_stringliteral_1b2638459828301e8cd6c7c02856073bacf975379e0867f689bb14feacb780c5_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 12)\n        store_literal_in_memory_1b2638459828301e8cd6c7c02856073bacf975379e0867f689bb14feacb780c5(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1b2638459828301e8cd6c7c02856073bacf975379e0867f689bb14feacb780c5__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1b2638459828301e8cd6c7c02856073bacf975379e0867f689bb14feacb780c5_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer from incorrect \")\n\n        mstore(add(memPtr, 32), \"owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: mint to the zero address\")\n\n    }\n\n    function abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: token already minted\")\n\n    }\n\n    function abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 28)\n        store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721URIStorage: URI set of non\")\n\n        mstore(add(memPtr, 32), \"existent token\")\n\n    }\n\n    function abi_encode_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve to caller\")\n\n    }\n\n    function abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to non ERC721Re\")\n\n        mstore(add(memPtr, 32), \"ceiver implementer\")\n\n    }\n\n    function abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)\n        store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n}\n","id":18,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x166 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7231A876 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x9A22D0EA GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xC87B56DD GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x551 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x58E JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5CB JUMPI DUP1 PUSH4 0xFDF2D21E EQ PUSH2 0x5F4 JUMPI PUSH2 0x166 JUMP JUMPDEST DUP1 PUSH4 0x9A22D0EA EQ PUSH2 0x4C2 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x4FF JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x528 JUMPI PUSH2 0x166 JUMP JUMPDEST DUP1 PUSH4 0x7231A876 EQ PUSH2 0x3AD JUMPI DUP1 PUSH4 0x8337AFDC EQ PUSH2 0x3EA JUMPI DUP1 PUSH4 0x862440E2 EQ PUSH2 0x41A JUMPI DUP1 PUSH4 0x889576E9 EQ PUSH2 0x443 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x46C JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x497 JUMPI PUSH2 0x166 JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x123 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x28D JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x2B6 JUMPI DUP1 PUSH4 0x5B7121F8 EQ PUSH2 0x2DF JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x31C JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x359 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x396 JUMPI PUSH2 0x166 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x16B JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x1D3 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x210 JUMPI DUP1 PUSH4 0x13966DB5 EQ PUSH2 0x239 JUMPI DUP1 PUSH4 0x207E6161 EQ PUSH2 0x264 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x192 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18D SWAP2 SWAP1 PUSH2 0x234A JUMP JUMPDEST PUSH2 0x61F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x2392 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BD PUSH2 0x701 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CA SWAP2 SWAP1 PUSH2 0x243D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F5 SWAP2 SWAP1 PUSH2 0x2495 JUMP JUMPDEST PUSH2 0x793 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x207 SWAP2 SWAP1 PUSH2 0x2503 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x232 SWAP2 SWAP1 PUSH2 0x254A JUMP JUMPDEST PUSH2 0x7D9 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x245 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24E PUSH2 0x8F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x25B SWAP2 SWAP1 PUSH2 0x2599 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x270 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x286 SWAP2 SWAP1 PUSH2 0x2495 JUMP JUMPDEST PUSH2 0x8F6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x299 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AF SWAP2 SWAP1 PUSH2 0x25B4 JUMP JUMPDEST PUSH2 0x908 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2D8 SWAP2 SWAP1 PUSH2 0x25B4 JUMP JUMPDEST PUSH2 0x968 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x306 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x301 SWAP2 SWAP1 PUSH2 0x2495 JUMP JUMPDEST PUSH2 0x988 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x313 SWAP2 SWAP1 PUSH2 0x2503 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x328 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x343 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x33E SWAP2 SWAP1 PUSH2 0x2495 JUMP JUMPDEST PUSH2 0x9C5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x350 SWAP2 SWAP1 PUSH2 0x2503 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x365 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x380 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x37B SWAP2 SWAP1 PUSH2 0x2607 JUMP JUMPDEST PUSH2 0xA4B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x38D SWAP2 SWAP1 PUSH2 0x2599 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH2 0xB02 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3CF SWAP2 SWAP1 PUSH2 0x2607 JUMP JUMPDEST PUSH2 0xB16 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3E1 SWAP2 SWAP1 PUSH2 0x26F2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x404 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3FF SWAP2 SWAP1 PUSH2 0x2849 JUMP JUMPDEST PUSH2 0xC24 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x411 SWAP2 SWAP1 PUSH2 0x2599 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x426 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x441 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x43C SWAP2 SWAP1 PUSH2 0x28B8 JUMP JUMPDEST PUSH2 0xD5A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x46A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x465 SWAP2 SWAP1 PUSH2 0x2914 JUMP JUMPDEST PUSH2 0xDE4 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x478 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x481 PUSH2 0xEA1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x48E SWAP2 SWAP1 PUSH2 0x2503 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AC PUSH2 0xECB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4B9 SWAP2 SWAP1 PUSH2 0x243D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4E9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4E4 SWAP2 SWAP1 PUSH2 0x2495 JUMP JUMPDEST PUSH2 0xF5D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4F6 SWAP2 SWAP1 PUSH2 0x2599 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x526 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x521 SWAP2 SWAP1 PUSH2 0x2980 JUMP JUMPDEST PUSH2 0xF7A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x534 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x54F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x54A SWAP2 SWAP1 PUSH2 0x2A61 JUMP JUMPDEST PUSH2 0xF90 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x55D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x578 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x573 SWAP2 SWAP1 PUSH2 0x2495 JUMP JUMPDEST PUSH2 0xFF2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x585 SWAP2 SWAP1 PUSH2 0x243D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x59A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5B5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5B0 SWAP2 SWAP1 PUSH2 0x2AE4 JUMP JUMPDEST PUSH2 0x1104 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5C2 SWAP2 SWAP1 PUSH2 0x2392 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5F2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5ED SWAP2 SWAP1 PUSH2 0x2607 JUMP JUMPDEST PUSH2 0x1198 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x600 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x609 PUSH2 0x121B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x616 SWAP2 SWAP1 PUSH2 0x2599 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x6EA JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x6FA JUMPI POP PUSH2 0x6F9 DUP3 PUSH2 0x122C JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x710 SWAP1 PUSH2 0x2B53 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x73C SWAP1 PUSH2 0x2B53 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x789 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x75E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x789 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x76C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x79E DUP3 PUSH2 0x1296 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E4 DUP3 PUSH2 0x9C5 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x854 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x84B SWAP1 PUSH2 0x2BF6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x873 PUSH2 0x12E1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x8A2 JUMPI POP PUSH2 0x8A1 DUP2 PUSH2 0x89C PUSH2 0x12E1 JUMP JUMPDEST PUSH2 0x1104 JUMP JUMPDEST JUMPDEST PUSH2 0x8E1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D8 SWAP1 PUSH2 0x2C88 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8EB DUP4 DUP4 PUSH2 0x12E9 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST PUSH2 0x8FE PUSH2 0x13A2 JUMP JUMPDEST DUP1 PUSH1 0xB DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x919 PUSH2 0x913 PUSH2 0x12E1 JUMP JUMPDEST DUP3 PUSH2 0x1420 JUMP JUMPDEST PUSH2 0x958 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x94F SWAP1 PUSH2 0x2D1A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x963 DUP4 DUP4 DUP4 PUSH2 0x14B5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x983 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xF90 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x9D1 DUP4 PUSH2 0x17AE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA42 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA39 SWAP1 PUSH2 0x2D86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xABB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAB2 SWAP1 PUSH2 0x2E18 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB0A PUSH2 0x13A2 JUMP JUMPDEST PUSH2 0xB14 PUSH1 0x0 PUSH2 0x17EB JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xB23 DUP4 PUSH2 0xA4B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB41 JUMPI PUSH2 0xB40 PUSH2 0x271E JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB6F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 SUB PUSH2 0xB84 JUMPI DUP1 SWAP3 POP POP POP PUSH2 0xC1F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 POP JUMPDEST PUSH2 0xB94 PUSH2 0x121B JUMP JUMPDEST DUP2 GT PUSH2 0xC17 JUMPI DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xBBA DUP3 PUSH2 0x9C5 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC04 JUMPI DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xBE9 JUMPI PUSH2 0xBE8 PUSH2 0x2E38 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 DUP1 PUSH2 0xC00 SWAP1 PUSH2 0x2E96 JUMP JUMPDEST SWAP3 POP POP JUMPDEST DUP1 DUP1 PUSH2 0xC0F SWAP1 PUSH2 0x2E96 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xB8C JUMP JUMPDEST POP DUP2 SWAP4 POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xB SLOAD CALLVALUE LT ISZERO PUSH2 0xC6B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC62 SWAP1 PUSH2 0x2F2A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC75 PUSH1 0x8 PUSH2 0x18B1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC81 PUSH1 0x8 PUSH2 0x18C7 JUMP JUMPDEST SWAP1 POP PUSH2 0xC8D DUP6 DUP3 PUSH2 0x18D5 JUMP JUMPDEST PUSH2 0xC97 DUP2 DUP5 PUSH2 0x1AF2 JUMP JUMPDEST CALLER PUSH1 0x9 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 PUSH1 0xA PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xD09 PUSH2 0xEA1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC CALLVALUE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xD4E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD65 DUP4 PUSH2 0x9C5 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDD5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDCC SWAP1 PUSH2 0x2F96 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDDF DUP4 DUP4 PUSH2 0x1AF2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x9 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xE85 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE7C SWAP1 PUSH2 0x3002 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0xA PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0xEDA SWAP1 PUSH2 0x2B53 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xF06 SWAP1 PUSH2 0x2B53 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xF53 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xF28 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xF53 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xF36 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF8C PUSH2 0xF85 PUSH2 0x12E1 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x1B5F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xFA1 PUSH2 0xF9B PUSH2 0x12E1 JUMP JUMPDEST DUP4 PUSH2 0x1420 JUMP JUMPDEST PUSH2 0xFE0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFD7 SWAP1 PUSH2 0x2D1A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xFEC DUP5 DUP5 DUP5 DUP5 PUSH2 0x1CCB JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xFFD DUP3 PUSH2 0x1296 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0x101D SWAP1 PUSH2 0x2B53 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1049 SWAP1 PUSH2 0x2B53 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1096 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x106B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1096 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1079 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x10A7 PUSH2 0x1D27 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x10BC JUMPI DUP2 SWAP3 POP POP POP PUSH2 0x10FF JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x10F1 JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x10D9 SWAP3 SWAP2 SWAP1 PUSH2 0x305E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP PUSH2 0x10FF JUMP JUMPDEST PUSH2 0x10FA DUP5 PUSH2 0x1D3E JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x11A0 PUSH2 0x13A2 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x120F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1206 SWAP1 PUSH2 0x30F4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1218 DUP2 PUSH2 0x17EB JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1227 PUSH1 0x8 PUSH2 0x18C7 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x129F DUP2 PUSH2 0x1DA6 JUMP JUMPDEST PUSH2 0x12DE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12D5 SWAP1 PUSH2 0x2D86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x135C DUP4 PUSH2 0x9C5 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x13AA PUSH2 0x12E1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x13C8 PUSH2 0xEA1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x141E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1415 SWAP1 PUSH2 0x3160 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x142C DUP4 PUSH2 0x9C5 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x146E JUMPI POP PUSH2 0x146D DUP2 DUP6 PUSH2 0x1104 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x14AC JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1494 DUP5 PUSH2 0x793 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x14D5 DUP3 PUSH2 0x9C5 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x152B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1522 SWAP1 PUSH2 0x31F2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x159A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1591 SWAP1 PUSH2 0x3284 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x15A7 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1DE7 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x15C7 DUP3 PUSH2 0x9C5 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x161D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1614 SWAP1 PUSH2 0x31F2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x17A9 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1F0D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x7 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1944 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x193B SWAP1 PUSH2 0x32F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x194D DUP2 PUSH2 0x1DA6 JUMP JUMPDEST ISZERO PUSH2 0x198D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1984 SWAP1 PUSH2 0x335C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x199B PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1DE7 JUMP JUMPDEST PUSH2 0x19A4 DUP2 PUSH2 0x1DA6 JUMP JUMPDEST ISZERO PUSH2 0x19E4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19DB SWAP1 PUSH2 0x335C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1AEE PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1F0D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1AFB DUP3 PUSH2 0x1DA6 JUMP JUMPDEST PUSH2 0x1B3A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B31 SWAP1 PUSH2 0x33EE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 DUP2 PUSH2 0x1B5A SWAP2 SWAP1 PUSH2 0x35BA JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1BCD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1BC4 SWAP1 PUSH2 0x36D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1CBE SWAP2 SWAP1 PUSH2 0x2392 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1CD6 DUP5 DUP5 DUP5 PUSH2 0x14B5 JUMP JUMPDEST PUSH2 0x1CE2 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1F13 JUMP JUMPDEST PUSH2 0x1D21 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D18 SWAP1 PUSH2 0x376A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1D49 DUP3 PUSH2 0x1296 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D53 PUSH2 0x1D27 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x1D73 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1D9E JUMP JUMPDEST DUP1 PUSH2 0x1D7D DUP5 PUSH2 0x209A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1D8E SWAP3 SWAP2 SWAP1 PUSH2 0x305E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1DC8 DUP4 PUSH2 0x17AE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1F07 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1E7B JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1E73 SWAP2 SWAP1 PUSH2 0x378A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1F06 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1EFE SWAP2 SWAP1 PUSH2 0x37BE JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F34 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2168 JUMP JUMPDEST ISZERO PUSH2 0x208D JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1F5D PUSH2 0x12E1 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F7F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3847 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1FBB JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1FB8 SWAP2 SWAP1 PUSH2 0x38A8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x203D JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1FEB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FF0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x2035 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x202C SWAP1 PUSH2 0x376A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x2092 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x20A9 DUP5 PUSH2 0x218B JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x20C8 JUMPI PUSH2 0x20C7 PUSH2 0x271E JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x20FA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x215D JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x2151 JUMPI PUSH2 0x2150 PUSH2 0x38D5 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x2108 JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x21E9 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x21DF JUMPI PUSH2 0x21DE PUSH2 0x38D5 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x2226 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x221C JUMPI PUSH2 0x221B PUSH2 0x38D5 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x2255 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x224B JUMPI PUSH2 0x224A PUSH2 0x38D5 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x227E JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x2274 JUMPI PUSH2 0x2273 PUSH2 0x38D5 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x22A3 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x2299 JUMPI PUSH2 0x2298 PUSH2 0x38D5 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x22C6 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x22BC JUMPI PUSH2 0x22BB PUSH2 0x38D5 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x22D5 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2327 DUP2 PUSH2 0x22F2 JUMP JUMPDEST DUP2 EQ PUSH2 0x2332 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2344 DUP2 PUSH2 0x231E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2360 JUMPI PUSH2 0x235F PUSH2 0x22E8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x236E DUP5 DUP3 DUP6 ADD PUSH2 0x2335 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x238C DUP2 PUSH2 0x2377 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x23A7 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2383 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x23E7 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x23CC JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x240F DUP3 PUSH2 0x23AD JUMP JUMPDEST PUSH2 0x2419 DUP2 DUP6 PUSH2 0x23B8 JUMP JUMPDEST SWAP4 POP PUSH2 0x2429 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x23C9 JUMP JUMPDEST PUSH2 0x2432 DUP2 PUSH2 0x23F3 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2457 DUP2 DUP5 PUSH2 0x2404 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2472 DUP2 PUSH2 0x245F JUMP JUMPDEST DUP2 EQ PUSH2 0x247D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x248F DUP2 PUSH2 0x2469 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x24AB JUMPI PUSH2 0x24AA PUSH2 0x22E8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x24B9 DUP5 DUP3 DUP6 ADD PUSH2 0x2480 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24ED DUP3 PUSH2 0x24C2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x24FD DUP2 PUSH2 0x24E2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2518 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x24F4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2527 DUP2 PUSH2 0x24E2 JUMP JUMPDEST DUP2 EQ PUSH2 0x2532 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2544 DUP2 PUSH2 0x251E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2561 JUMPI PUSH2 0x2560 PUSH2 0x22E8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x256F DUP6 DUP3 DUP7 ADD PUSH2 0x2535 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2580 DUP6 DUP3 DUP7 ADD PUSH2 0x2480 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x2593 DUP2 PUSH2 0x245F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x25AE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x258A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x25CD JUMPI PUSH2 0x25CC PUSH2 0x22E8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x25DB DUP7 DUP3 DUP8 ADD PUSH2 0x2535 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x25EC DUP7 DUP3 DUP8 ADD PUSH2 0x2535 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x25FD DUP7 DUP3 DUP8 ADD PUSH2 0x2480 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x261D JUMPI PUSH2 0x261C PUSH2 0x22E8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x262B DUP5 DUP3 DUP6 ADD PUSH2 0x2535 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2669 DUP2 PUSH2 0x245F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x267B DUP4 DUP4 PUSH2 0x2660 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x269F DUP3 PUSH2 0x2634 JUMP JUMPDEST PUSH2 0x26A9 DUP2 DUP6 PUSH2 0x263F JUMP JUMPDEST SWAP4 POP PUSH2 0x26B4 DUP4 PUSH2 0x2650 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x26E5 JUMPI DUP2 MLOAD PUSH2 0x26CC DUP9 DUP3 PUSH2 0x266F JUMP JUMPDEST SWAP8 POP PUSH2 0x26D7 DUP4 PUSH2 0x2687 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x26B8 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x270C DUP2 DUP5 PUSH2 0x2694 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x2756 DUP3 PUSH2 0x23F3 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2775 JUMPI PUSH2 0x2774 PUSH2 0x271E JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2788 PUSH2 0x22DE JUMP JUMPDEST SWAP1 POP PUSH2 0x2794 DUP3 DUP3 PUSH2 0x274D JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x27B4 JUMPI PUSH2 0x27B3 PUSH2 0x271E JUMP JUMPDEST JUMPDEST PUSH2 0x27BD DUP3 PUSH2 0x23F3 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27EC PUSH2 0x27E7 DUP5 PUSH2 0x2799 JUMP JUMPDEST PUSH2 0x277E JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x2808 JUMPI PUSH2 0x2807 PUSH2 0x2719 JUMP JUMPDEST JUMPDEST PUSH2 0x2813 DUP5 DUP3 DUP6 PUSH2 0x27CA JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2830 JUMPI PUSH2 0x282F PUSH2 0x2714 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2840 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x27D9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2862 JUMPI PUSH2 0x2861 PUSH2 0x22E8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2870 DUP7 DUP3 DUP8 ADD PUSH2 0x2535 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2881 DUP7 DUP3 DUP8 ADD PUSH2 0x2480 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x28A2 JUMPI PUSH2 0x28A1 PUSH2 0x22ED JUMP JUMPDEST JUMPDEST PUSH2 0x28AE DUP7 DUP3 DUP8 ADD PUSH2 0x281B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x28CF JUMPI PUSH2 0x28CE PUSH2 0x22E8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x28DD DUP6 DUP3 DUP7 ADD PUSH2 0x2480 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x28FE JUMPI PUSH2 0x28FD PUSH2 0x22ED JUMP JUMPDEST JUMPDEST PUSH2 0x290A DUP6 DUP3 DUP7 ADD PUSH2 0x281B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x292B JUMPI PUSH2 0x292A PUSH2 0x22E8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2939 DUP6 DUP3 DUP7 ADD PUSH2 0x2480 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x294A DUP6 DUP3 DUP7 ADD PUSH2 0x2480 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x295D DUP2 PUSH2 0x2377 JUMP JUMPDEST DUP2 EQ PUSH2 0x2968 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x297A DUP2 PUSH2 0x2954 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2997 JUMPI PUSH2 0x2996 PUSH2 0x22E8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x29A5 DUP6 DUP3 DUP7 ADD PUSH2 0x2535 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x29B6 DUP6 DUP3 DUP7 ADD PUSH2 0x296B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x29DB JUMPI PUSH2 0x29DA PUSH2 0x271E JUMP JUMPDEST JUMPDEST PUSH2 0x29E4 DUP3 PUSH2 0x23F3 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A04 PUSH2 0x29FF DUP5 PUSH2 0x29C0 JUMP JUMPDEST PUSH2 0x277E JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x2A20 JUMPI PUSH2 0x2A1F PUSH2 0x2719 JUMP JUMPDEST JUMPDEST PUSH2 0x2A2B DUP5 DUP3 DUP6 PUSH2 0x27CA JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2A48 JUMPI PUSH2 0x2A47 PUSH2 0x2714 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2A58 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x29F1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2A7B JUMPI PUSH2 0x2A7A PUSH2 0x22E8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2A89 DUP8 DUP3 DUP9 ADD PUSH2 0x2535 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x2A9A DUP8 DUP3 DUP9 ADD PUSH2 0x2535 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x2AAB DUP8 DUP3 DUP9 ADD PUSH2 0x2480 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2ACC JUMPI PUSH2 0x2ACB PUSH2 0x22ED JUMP JUMPDEST JUMPDEST PUSH2 0x2AD8 DUP8 DUP3 DUP9 ADD PUSH2 0x2A33 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2AFB JUMPI PUSH2 0x2AFA PUSH2 0x22E8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2B09 DUP6 DUP3 DUP7 ADD PUSH2 0x2535 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2B1A DUP6 DUP3 DUP7 ADD PUSH2 0x2535 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2B6B JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2B7E JUMPI PUSH2 0x2B7D PUSH2 0x2B24 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BE0 PUSH1 0x21 DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x2BEB DUP3 PUSH2 0x2B84 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C0F DUP2 PUSH2 0x2BD3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C72 PUSH1 0x3D DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x2C7D DUP3 PUSH2 0x2C16 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2CA1 DUP2 PUSH2 0x2C65 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D04 PUSH1 0x2D DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x2D0F DUP3 PUSH2 0x2CA8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2D33 DUP2 PUSH2 0x2CF7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D70 PUSH1 0x18 DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x2D7B DUP3 PUSH2 0x2D3A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2D9F DUP2 PUSH2 0x2D63 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E02 PUSH1 0x29 DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x2E0D DUP3 PUSH2 0x2DA6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E31 DUP2 PUSH2 0x2DF5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2EA1 DUP3 PUSH2 0x245F JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x2ED3 JUMPI PUSH2 0x2ED2 PUSH2 0x2E67 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E73756666696369656E74207061796D656E74000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F14 PUSH1 0x14 DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x2F1F DUP3 PUSH2 0x2EDE JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2F43 DUP2 PUSH2 0x2F07 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x554E415554484F52495A45440000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F80 PUSH1 0xC DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x2F8B DUP3 PUSH2 0x2F4A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2FAF DUP2 PUSH2 0x2F73 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x556E617574686F72697A65640000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FEC PUSH1 0xC DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x2FF7 DUP3 PUSH2 0x2FB6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x301B DUP2 PUSH2 0x2FDF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3038 DUP3 PUSH2 0x23AD JUMP JUMPDEST PUSH2 0x3042 DUP2 DUP6 PUSH2 0x3022 JUMP JUMPDEST SWAP4 POP PUSH2 0x3052 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x23C9 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x306A DUP3 DUP6 PUSH2 0x302D JUMP JUMPDEST SWAP2 POP PUSH2 0x3076 DUP3 DUP5 PUSH2 0x302D JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30DE PUSH1 0x26 DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x30E9 DUP3 PUSH2 0x3082 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x310D DUP2 PUSH2 0x30D1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x314A PUSH1 0x20 DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x3155 DUP3 PUSH2 0x3114 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3179 DUP2 PUSH2 0x313D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x31DC PUSH1 0x25 DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x31E7 DUP3 PUSH2 0x3180 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x320B DUP2 PUSH2 0x31CF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x326E PUSH1 0x24 DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x3279 DUP3 PUSH2 0x3212 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x329D DUP2 PUSH2 0x3261 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32DA PUSH1 0x20 DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x32E5 DUP3 PUSH2 0x32A4 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3309 DUP2 PUSH2 0x32CD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3346 PUSH1 0x1C DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x3351 DUP3 PUSH2 0x3310 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3375 DUP2 PUSH2 0x3339 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524337323155524953746F726167653A2055524920736574206F66206E6F6E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6578697374656E7420746F6B656E000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33D8 PUSH1 0x2E DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x33E3 DUP3 PUSH2 0x337C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3407 DUP2 PUSH2 0x33CB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x3470 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x3433 JUMP JUMPDEST PUSH2 0x347A DUP7 DUP4 PUSH2 0x3433 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34B7 PUSH2 0x34B2 PUSH2 0x34AD DUP5 PUSH2 0x245F JUMP JUMPDEST PUSH2 0x3492 JUMP JUMPDEST PUSH2 0x245F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x34D1 DUP4 PUSH2 0x349C JUMP JUMPDEST PUSH2 0x34E5 PUSH2 0x34DD DUP3 PUSH2 0x34BE JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x3440 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x34FA PUSH2 0x34ED JUMP JUMPDEST PUSH2 0x3505 DUP2 DUP5 DUP5 PUSH2 0x34C8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3529 JUMPI PUSH2 0x351E PUSH1 0x0 DUP3 PUSH2 0x34F2 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x350B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x356E JUMPI PUSH2 0x353F DUP2 PUSH2 0x340E JUMP JUMPDEST PUSH2 0x3548 DUP5 PUSH2 0x3423 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x3557 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x356B PUSH2 0x3563 DUP6 PUSH2 0x3423 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x350A JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3591 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x3573 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x35AA DUP4 DUP4 PUSH2 0x3580 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x35C3 DUP3 PUSH2 0x23AD JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x35DC JUMPI PUSH2 0x35DB PUSH2 0x271E JUMP JUMPDEST JUMPDEST PUSH2 0x35E6 DUP3 SLOAD PUSH2 0x2B53 JUMP JUMPDEST PUSH2 0x35F1 DUP3 DUP3 DUP6 PUSH2 0x352D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x3624 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x3612 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x361C DUP6 DUP3 PUSH2 0x359E JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x3684 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x3632 DUP7 PUSH2 0x340E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x365A JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3635 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x3677 JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x3673 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x3580 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36C2 PUSH1 0x19 DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x36CD DUP3 PUSH2 0x368C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x36F1 DUP2 PUSH2 0x36B5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3754 PUSH1 0x32 DUP4 PUSH2 0x23B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x375F DUP3 PUSH2 0x36F8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3783 DUP2 PUSH2 0x3747 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3795 DUP3 PUSH2 0x245F JUMP JUMPDEST SWAP2 POP PUSH2 0x37A0 DUP4 PUSH2 0x245F JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x37B8 JUMPI PUSH2 0x37B7 PUSH2 0x2E67 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37C9 DUP3 PUSH2 0x245F JUMP JUMPDEST SWAP2 POP PUSH2 0x37D4 DUP4 PUSH2 0x245F JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x37EC JUMPI PUSH2 0x37EB PUSH2 0x2E67 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3819 DUP3 PUSH2 0x37F2 JUMP JUMPDEST PUSH2 0x3823 DUP2 DUP6 PUSH2 0x37FD JUMP JUMPDEST SWAP4 POP PUSH2 0x3833 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x23C9 JUMP JUMPDEST PUSH2 0x383C DUP2 PUSH2 0x23F3 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x385C PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x24F4 JUMP JUMPDEST PUSH2 0x3869 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x24F4 JUMP JUMPDEST PUSH2 0x3876 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x258A JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x3888 DUP2 DUP5 PUSH2 0x380E JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x38A2 DUP2 PUSH2 0x231E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x38BE JUMPI PUSH2 0x38BD PUSH2 0x22E8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x38CC DUP5 DUP3 DUP6 ADD PUSH2 0x3893 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMP MLOAD 0xAE DUP6 0xB4 CALLDATACOPY 0xB3 SWAP5 0xA9 0x5C SHL 0xD7 SWAP1 0x5C 0x4B CALL 0xC7 0xCE 0xA5 0xF8 DUP5 PUSH19 0x9AEF28A6216FA55594AB64736F6C6343000811 STOP CALLER ","sourceMap":"250:2422:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300:1;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2471:98;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3935:167;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3468:406;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;495:22:17;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2139:89;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4612:326:1;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5004:179;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2234:108:17;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2190:219:1;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1929:204;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1831:101:0;;;;;;;;;;;;;:::i;:::-;;1700:433:17;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;650:687;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1343:221;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2348:190;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1201:85:0;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2633:102:1;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2544:126:17;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4169:153:1;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5249:314;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;482:608:4;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4388:162:1;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2081:198:0;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1570:124:17;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;:300:1;1672:4;1722:25;1707:40;;;:11;:40;;;;:104;;;;1778:33;1763:48;;;:11;:48;;;;1707:104;:156;;;;1827:36;1851:11;1827:23;:36::i;:::-;1707:156;1688:175;;1570:300;;;:::o;2471:98::-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;4071:15;:24;4087:7;4071:24;;;;;;;;;;;;;;;;;;;;;4064:31;;3935:167;;;:::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;3605:11;;:2;:11;;;3597:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;3702:5;3686:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;3711:37;3728:5;3735:12;:10;:12::i;:::-;3711:16;:37::i;:::-;3686:62;3665:170;;;;;;;;;;;;:::i;:::-;;;;;;;;;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;495:22:17:-;;;;:::o;2139:89::-;1094:13:0;:11;:13::i;:::-;2215:6:17::1;2205:7;:16;;;;2139:89:::0;:::o;4612:326:1:-;4801:41;4820:12;:10;:12::i;:::-;4834:7;4801:18;:41::i;:::-;4793:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;4903:28;4913:4;4919:2;4923:7;4903:9;:28::i;:::-;4612:326;;;:::o;5004:179::-;5137:39;5154:4;5160:2;5164:7;5137:39;;;;;;;;;;;;:16;:39::i;:::-;5004:179;;;:::o;2234:108:17:-;2291:7;2317:9;:18;2327:7;2317:18;;;;;;;;;;;;;;;;;;;;;2310:25;;2234:108;;;:::o;2190:219:1:-;2262:7;2281:13;2297:17;2306:7;2297:8;:17::i;:::-;2281:33;;2349:1;2332:19;;:5;:19;;;2324:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;2397:5;2390:12;;;2190:219;;;:::o;1929:204::-;2001:7;2045:1;2028:19;;:5;:19;;;2020:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2110:9;:16;2120:5;2110:16;;;;;;;;;;;;;;;;2103:23;;1929:204;;;:::o;1831:101:0:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;1700:433:17:-;1753:16;1786:15;1804:16;1814:5;1804:9;:16::i;:::-;1786:34;;1828:22;1867:7;1853:22;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1828:47;;1906:1;1887:7;:21;1883:58;;1927:5;1920:12;;;;;;1883:58;1948:9;1974;1986:1;1974:13;;1969:138;1994:13;:11;:13::i;:::-;1989:1;:18;1969:138;;2042:5;2028:19;;:10;2036:1;2028:7;:10::i;:::-;:19;;;2024:75;;2072:1;2061:5;2067:1;2061:8;;;;;;;;:::i;:::-;;;;;;;:12;;;;;2085:3;;;;;:::i;:::-;;;;2024:75;2009:3;;;;;:::i;:::-;;;;1969:138;;;;2121:5;2114:12;;;;;1700:433;;;;:::o;650:687::-;778:7;822;;809:9;:20;;801:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;902:21;:9;:19;:21::i;:::-;934:17;954:19;:9;:17;:19::i;:::-;934:39;;983:20;989:2;993:9;983:5;:20::i;:::-;1013:33;1026:9;1037:8;1013:12;:33::i;:::-;1079:10;1056:9;:20;1066:9;1056:20;;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;1182:16;1151:17;:28;1169:9;1151:28;;;;;;;;;;;:47;;;;1275:7;:5;:7::i;:::-;1267:25;;:36;1293:9;1267:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1321:9;1314:16;;;650:687;;;;;:::o;1343:221::-;1424:17;1444:16;1452:7;1444;:16::i;:::-;1424:36;;1492:9;1478:23;;:10;:23;;;1470:48;;;;;;;;;;;;:::i;:::-;;;;;;;;;1528:29;1541:7;1550:6;1528:12;:29::i;:::-;1414:150;1343:221;;:::o;2348:190::-;2458:10;2436:32;;:9;:18;2446:7;2436:18;;;;;;;;;;;;;;;;;;;;;:32;;;2428:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;2524:7;2495:17;:26;2513:7;2495:26;;;;;;;;;;;:36;;;;2348:190;;:::o;1201:85:0:-;1247:7;1273:6;;;;;;;;;;;1266:13;;1201:85;:::o;2633:102:1:-;2689:13;2721:7;2714:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2633:102;:::o;2544:126:17:-;2611:7;2637:17;:26;2655:7;2637:26;;;;;;;;;;;;2630:33;;2544:126;;;:::o;4169:153:1:-;4263:52;4282:12;:10;:12::i;:::-;4296:8;4306;4263:18;:52::i;:::-;4169:153;;:::o;5249:314::-;5417:41;5436:12;:10;:12::i;:::-;5450:7;5417:18;:41::i;:::-;5409:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;5518:38;5532:4;5538:2;5542:7;5551:4;5518:13;:38::i;:::-;5249:314;;;;:::o;482:608:4:-;555:13;580:23;595:7;580:14;:23::i;:::-;614;640:10;:19;651:7;640:19;;;;;;;;;;;614:45;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;669:18;690:10;:8;:10::i;:::-;669:31;;795:1;779:4;773:18;:23;769:70;;819:9;812:16;;;;;;769:70;967:1;947:9;941:23;:27;937:106;;;1015:4;1021:9;998:33;;;;;;;;;:::i;:::-;;;;;;;;;;;;;984:48;;;;;;937:106;1060:23;1075:7;1060:14;:23::i;:::-;1053:30;;;;482:608;;;;:::o;4388:162:1:-;4485:4;4508:18;:25;4527:5;4508:25;;;;;;;;;;;;;;;:35;4534:8;4508:35;;;;;;;;;;;;;;;;;;;;;;;;;4501:42;;4388:162;;;;:::o;2081:198:0:-;1094:13;:11;:13::i;:::-;2189:1:::1;2169:22;;:8;:22;;::::0;2161:73:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2244:28;2263:8;2244:18;:28::i;:::-;2081:198:::0;:::o;1570:124:17:-;1638:7;1668:19;:9;:17;:19::i;:::-;1661:26;;1570:124;:::o;829:155:10:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;13466:133:1:-;13547:16;13555:7;13547;:16::i;:::-;13539:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;13466:133;:::o;640:96:7:-;693:7;719:10;712:17;;640:96;:::o;12768:171:1:-;12869:2;12842:15;:24;12858:7;12842:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;12924:7;12920:2;12886:46;;12895:23;12910:7;12895:14;:23::i;:::-;12886:46;;;;;;;;;;;;12768:171;;:::o;1359:130:0:-;1433:12;:10;:12::i;:::-;1422:23;;:7;:5;:7::i;:::-;:23;;;1414:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1359:130::o;7540:261:1:-;7633:4;7649:13;7665:23;7680:7;7665:14;:23::i;:::-;7649:39;;7717:5;7706:16;;:7;:16;;;:52;;;;7726:32;7743:5;7750:7;7726:16;:32::i;:::-;7706:52;:87;;;;7786:7;7762:31;;:20;7774:7;7762:11;:20::i;:::-;:31;;;7706:87;7698:96;;;7540:261;;;;:::o;11423:1233::-;11577:4;11550:31;;:23;11565:7;11550:14;:23::i;:::-;:31;;;11542:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11655:1;11641:16;;:2;:16;;;11633:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;11709:42;11730:4;11736:2;11740:7;11749:1;11709:20;:42::i;:::-;11878:4;11851:31;;:23;11866:7;11851:14;:23::i;:::-;:31;;;11843:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11993:15;:24;12009:7;11993:24;;;;;;;;;;;;11986:31;;;;;;;;;;;12480:1;12461:9;:15;12471:4;12461:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;12512:1;12495:9;:13;12505:2;12495:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;12552:2;12533:7;:16;12541:7;12533:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;12589:7;12585:2;12570:27;;12579:4;12570:27;;;;;;;;;;;;12608:41;12628:4;12634:2;12638:7;12647:1;12608:19;:41::i;:::-;11423:1233;;;:::o;6838:115::-;6904:7;6930;:16;6938:7;6930:16;;;;;;;;;;;;;;;;;;;;;6923:23;;6838:115;;;:::o;2433:187:0:-;2506:16;2525:6;;;;;;;;;;;2506:25;;2550:8;2541:6;;:17;;;;;;;;;;;;;;;;;;2604:8;2573:40;;2594:8;2573:40;;;;;;;;;;;;2496:124;2433:187;:::o;945:123:8:-;1050:1;1032:7;:14;;;:19;;;;;;;;;;;945:123;:::o;827:112::-;892:7;918;:14;;;911:21;;827:112;;;:::o;9091:920:1:-;9184:1;9170:16;;:2;:16;;;9162:61;;;;;;;;;;;;:::i;:::-;;;;;;;;;9242:16;9250:7;9242;:16::i;:::-;9241:17;9233:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;9302:48;9331:1;9335:2;9339:7;9348:1;9302:20;:48::i;:::-;9446:16;9454:7;9446;:16::i;:::-;9445:17;9437:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;9854:1;9837:9;:13;9847:2;9837:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;9895:2;9876:7;:16;9884:7;9876:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;9938:7;9934:2;9913:33;;9930:1;9913:33;;;;;;;;;;;;9957:47;9985:1;9989:2;9993:7;10002:1;9957:19;:47::i;:::-;9091:920;;:::o;1237:214:4:-;1336:16;1344:7;1336;:16::i;:::-;1328:75;;;;;;;;;;;;:::i;:::-;;;;;;;;;1435:9;1413:10;:19;1424:7;1413:19;;;;;;;;;;;:31;;;;;;:::i;:::-;;1237:214;;:::o;13075:307:1:-;13225:8;13216:17;;:5;:17;;;13208:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;13311:8;13273:18;:25;13292:5;13273:25;;;;;;;;;;;;;;;:35;13299:8;13273:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;13356:8;13334:41;;13349:5;13334:41;;;13366:8;13334:41;;;;;;:::i;:::-;;;;;;;;13075:307;;;:::o;6424:305::-;6574:28;6584:4;6590:2;6594:7;6574:9;:28::i;:::-;6620:47;6643:4;6649:2;6653:7;6662:4;6620:22;:47::i;:::-;6612:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;6424:305;;;;:::o;3319:92::-;3370:13;3395:9;;;;;;;;;;;;;;3319:92;:::o;2801:276::-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;:8;:10::i;:::-;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;;;2801:276;;;:::o;7256:126::-;7321:4;7373:1;7344:31;;:17;7353:7;7344:8;:17::i;:::-;:31;;;;7337:38;;7256:126;;;:::o;15698:396::-;15882:1;15870:9;:13;15866:222;;;15919:1;15903:18;;:4;:18;;;15899:85;;15960:9;15941;:15;15951:4;15941:15;;;;;;;;;;;;;;;;:28;;;;;;;:::i;:::-;;;;;;;;15899:85;16015:1;16001:16;;:2;:16;;;15997:81;;16054:9;16037;:13;16047:2;16037:13;;;;;;;;;;;;;;;;:26;;;;;;;:::i;:::-;;;;;;;;15997:81;15866:222;15698:396;;;;:::o;16800:153::-;;;;;:::o;14151:831::-;14300:4;14320:15;:2;:13;;;:15::i;:::-;14316:660;;;14371:2;14355:36;;;14392:12;:10;:12::i;:::-;14406:4;14412:7;14421:4;14355:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14351:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14610:1;14593:6;:13;:18;14589:321;;14635:60;;;;;;;;;;:::i;:::-;;;;;;;;14589:321;14862:6;14856:13;14847:6;14843:2;14839:15;14832:38;14351:573;14486:41;;;14476:51;;;:6;:51;;;;14469:58;;;;;14316:660;14961:4;14954:11;;14151:831;;;;;;;:::o;415:696:9:-;471:13;520:14;557:1;537:17;548:5;537:10;:17::i;:::-;:21;520:38;;572:20;606:6;595:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;572:41;;627:11;753:6;749:2;745:15;737:6;733:28;726:35;;788:280;795:4;788:280;;;819:5;;;;;;;;958:8;953:2;946:5;942:14;937:30;932:3;924:44;1012:2;1003:11;;;;;;:::i;:::-;;;;;1045:1;1036:5;:10;788:280;1032:21;788:280;1088:6;1081:13;;;;;415:696;;;:::o;1175:320:6:-;1235:4;1487:1;1465:7;:19;;;:23;1458:30;;1175:320;;;:::o;9889:890:12:-;9942:7;9961:14;9978:1;9961:18;;10026:6;10017:5;:15;10013:99;;10061:6;10052:15;;;;;;:::i;:::-;;;;;10095:2;10085:12;;;;10013:99;10138:6;10129:5;:15;10125:99;;10173:6;10164:15;;;;;;:::i;:::-;;;;;10207:2;10197:12;;;;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;;;;:::i;:::-;;;;;10319:2;10309:12;;;;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;;;;:::i;:::-;;;;;10429:1;10419:11;;;;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;;;;:::i;:::-;;;;;10538:1;10528:11;;;;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;;;;:::i;:::-;;;;;10647:1;10637:11;;;;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;;;;10676:64;10766:6;10759:13;;;9889:890;;;:::o;7:75:18:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:99::-;1570:6;1604:5;1598:12;1588:22;;1518:99;;;:::o;1623:169::-;1707:11;1741:6;1736:3;1729:19;1781:4;1776:3;1772:14;1757:29;;1623:169;;;;:::o;1798:246::-;1879:1;1889:113;1903:6;1900:1;1897:13;1889:113;;;1988:1;1983:3;1979:11;1973:18;1969:1;1964:3;1960:11;1953:39;1925:2;1922:1;1918:10;1913:15;;1889:113;;;2036:1;2027:6;2022:3;2018:16;2011:27;1860:184;1798:246;;;:::o;2050:102::-;2091:6;2142:2;2138:7;2133:2;2126:5;2122:14;2118:28;2108:38;;2050:102;;;:::o;2158:377::-;2246:3;2274:39;2307:5;2274:39;:::i;:::-;2329:71;2393:6;2388:3;2329:71;:::i;:::-;2322:78;;2409:65;2467:6;2462:3;2455:4;2448:5;2444:16;2409:65;:::i;:::-;2499:29;2521:6;2499:29;:::i;:::-;2494:3;2490:39;2483:46;;2250:285;2158:377;;;;:::o;2541:313::-;2654:4;2692:2;2681:9;2677:18;2669:26;;2741:9;2735:4;2731:20;2727:1;2716:9;2712:17;2705:47;2769:78;2842:4;2833:6;2769:78;:::i;:::-;2761:86;;2541:313;;;;:::o;2860:77::-;2897:7;2926:5;2915:16;;2860:77;;;:::o;2943:122::-;3016:24;3034:5;3016:24;:::i;:::-;3009:5;3006:35;2996:63;;3055:1;3052;3045:12;2996:63;2943:122;:::o;3071:139::-;3117:5;3155:6;3142:20;3133:29;;3171:33;3198:5;3171:33;:::i;:::-;3071:139;;;;:::o;3216:329::-;3275:6;3324:2;3312:9;3303:7;3299:23;3295:32;3292:119;;;3330:79;;:::i;:::-;3292:119;3450:1;3475:53;3520:7;3511:6;3500:9;3496:22;3475:53;:::i;:::-;3465:63;;3421:117;3216:329;;;;:::o;3551:126::-;3588:7;3628:42;3621:5;3617:54;3606:65;;3551:126;;;:::o;3683:96::-;3720:7;3749:24;3767:5;3749:24;:::i;:::-;3738:35;;3683:96;;;:::o;3785:118::-;3872:24;3890:5;3872:24;:::i;:::-;3867:3;3860:37;3785:118;;:::o;3909:222::-;4002:4;4040:2;4029:9;4025:18;4017:26;;4053:71;4121:1;4110:9;4106:17;4097:6;4053:71;:::i;:::-;3909:222;;;;:::o;4137:122::-;4210:24;4228:5;4210:24;:::i;:::-;4203:5;4200:35;4190:63;;4249:1;4246;4239:12;4190:63;4137:122;:::o;4265:139::-;4311:5;4349:6;4336:20;4327:29;;4365:33;4392:5;4365:33;:::i;:::-;4265:139;;;;:::o;4410:474::-;4478:6;4486;4535:2;4523:9;4514:7;4510:23;4506:32;4503:119;;;4541:79;;:::i;:::-;4503:119;4661:1;4686:53;4731:7;4722:6;4711:9;4707:22;4686:53;:::i;:::-;4676:63;;4632:117;4788:2;4814:53;4859:7;4850:6;4839:9;4835:22;4814:53;:::i;:::-;4804:63;;4759:118;4410:474;;;;;:::o;4890:118::-;4977:24;4995:5;4977:24;:::i;:::-;4972:3;4965:37;4890:118;;:::o;5014:222::-;5107:4;5145:2;5134:9;5130:18;5122:26;;5158:71;5226:1;5215:9;5211:17;5202:6;5158:71;:::i;:::-;5014:222;;;;:::o;5242:619::-;5319:6;5327;5335;5384:2;5372:9;5363:7;5359:23;5355:32;5352:119;;;5390:79;;:::i;:::-;5352:119;5510:1;5535:53;5580:7;5571:6;5560:9;5556:22;5535:53;:::i;:::-;5525:63;;5481:117;5637:2;5663:53;5708:7;5699:6;5688:9;5684:22;5663:53;:::i;:::-;5653:63;;5608:118;5765:2;5791:53;5836:7;5827:6;5816:9;5812:22;5791:53;:::i;:::-;5781:63;;5736:118;5242:619;;;;;:::o;5867:329::-;5926:6;5975:2;5963:9;5954:7;5950:23;5946:32;5943:119;;;5981:79;;:::i;:::-;5943:119;6101:1;6126:53;6171:7;6162:6;6151:9;6147:22;6126:53;:::i;:::-;6116:63;;6072:117;5867:329;;;;:::o;6202:114::-;6269:6;6303:5;6297:12;6287:22;;6202:114;;;:::o;6322:184::-;6421:11;6455:6;6450:3;6443:19;6495:4;6490:3;6486:14;6471:29;;6322:184;;;;:::o;6512:132::-;6579:4;6602:3;6594:11;;6632:4;6627:3;6623:14;6615:22;;6512:132;;;:::o;6650:108::-;6727:24;6745:5;6727:24;:::i;:::-;6722:3;6715:37;6650:108;;:::o;6764:179::-;6833:10;6854:46;6896:3;6888:6;6854:46;:::i;:::-;6932:4;6927:3;6923:14;6909:28;;6764:179;;;;:::o;6949:113::-;7019:4;7051;7046:3;7042:14;7034:22;;6949:113;;;:::o;7098:732::-;7217:3;7246:54;7294:5;7246:54;:::i;:::-;7316:86;7395:6;7390:3;7316:86;:::i;:::-;7309:93;;7426:56;7476:5;7426:56;:::i;:::-;7505:7;7536:1;7521:284;7546:6;7543:1;7540:13;7521:284;;;7622:6;7616:13;7649:63;7708:3;7693:13;7649:63;:::i;:::-;7642:70;;7735:60;7788:6;7735:60;:::i;:::-;7725:70;;7581:224;7568:1;7565;7561:9;7556:14;;7521:284;;;7525:14;7821:3;7814:10;;7222:608;;;7098:732;;;;:::o;7836:373::-;7979:4;8017:2;8006:9;8002:18;7994:26;;8066:9;8060:4;8056:20;8052:1;8041:9;8037:17;8030:47;8094:108;8197:4;8188:6;8094:108;:::i;:::-;8086:116;;7836:373;;;;:::o;8215:117::-;8324:1;8321;8314:12;8338:117;8447:1;8444;8437:12;8461:180;8509:77;8506:1;8499:88;8606:4;8603:1;8596:15;8630:4;8627:1;8620:15;8647:281;8730:27;8752:4;8730:27;:::i;:::-;8722:6;8718:40;8860:6;8848:10;8845:22;8824:18;8812:10;8809:34;8806:62;8803:88;;;8871:18;;:::i;:::-;8803:88;8911:10;8907:2;8900:22;8690:238;8647:281;;:::o;8934:129::-;8968:6;8995:20;;:::i;:::-;8985:30;;9024:33;9052:4;9044:6;9024:33;:::i;:::-;8934:129;;;:::o;9069:308::-;9131:4;9221:18;9213:6;9210:30;9207:56;;;9243:18;;:::i;:::-;9207:56;9281:29;9303:6;9281:29;:::i;:::-;9273:37;;9365:4;9359;9355:15;9347:23;;9069:308;;;:::o;9383:146::-;9480:6;9475:3;9470;9457:30;9521:1;9512:6;9507:3;9503:16;9496:27;9383:146;;;:::o;9535:425::-;9613:5;9638:66;9654:49;9696:6;9654:49;:::i;:::-;9638:66;:::i;:::-;9629:75;;9727:6;9720:5;9713:21;9765:4;9758:5;9754:16;9803:3;9794:6;9789:3;9785:16;9782:25;9779:112;;;9810:79;;:::i;:::-;9779:112;9900:54;9947:6;9942:3;9937;9900:54;:::i;:::-;9619:341;9535:425;;;;;:::o;9980:340::-;10036:5;10085:3;10078:4;10070:6;10066:17;10062:27;10052:122;;10093:79;;:::i;:::-;10052:122;10210:6;10197:20;10235:79;10310:3;10302:6;10295:4;10287:6;10283:17;10235:79;:::i;:::-;10226:88;;10042:278;9980:340;;;;:::o;10326:799::-;10413:6;10421;10429;10478:2;10466:9;10457:7;10453:23;10449:32;10446:119;;;10484:79;;:::i;:::-;10446:119;10604:1;10629:53;10674:7;10665:6;10654:9;10650:22;10629:53;:::i;:::-;10619:63;;10575:117;10731:2;10757:53;10802:7;10793:6;10782:9;10778:22;10757:53;:::i;:::-;10747:63;;10702:118;10887:2;10876:9;10872:18;10859:32;10918:18;10910:6;10907:30;10904:117;;;10940:79;;:::i;:::-;10904:117;11045:63;11100:7;11091:6;11080:9;11076:22;11045:63;:::i;:::-;11035:73;;10830:288;10326:799;;;;;:::o;11131:654::-;11209:6;11217;11266:2;11254:9;11245:7;11241:23;11237:32;11234:119;;;11272:79;;:::i;:::-;11234:119;11392:1;11417:53;11462:7;11453:6;11442:9;11438:22;11417:53;:::i;:::-;11407:63;;11363:117;11547:2;11536:9;11532:18;11519:32;11578:18;11570:6;11567:30;11564:117;;;11600:79;;:::i;:::-;11564:117;11705:63;11760:7;11751:6;11740:9;11736:22;11705:63;:::i;:::-;11695:73;;11490:288;11131:654;;;;;:::o;11791:474::-;11859:6;11867;11916:2;11904:9;11895:7;11891:23;11887:32;11884:119;;;11922:79;;:::i;:::-;11884:119;12042:1;12067:53;12112:7;12103:6;12092:9;12088:22;12067:53;:::i;:::-;12057:63;;12013:117;12169:2;12195:53;12240:7;12231:6;12220:9;12216:22;12195:53;:::i;:::-;12185:63;;12140:118;11791:474;;;;;:::o;12271:116::-;12341:21;12356:5;12341:21;:::i;:::-;12334:5;12331:32;12321:60;;12377:1;12374;12367:12;12321:60;12271:116;:::o;12393:133::-;12436:5;12474:6;12461:20;12452:29;;12490:30;12514:5;12490:30;:::i;:::-;12393:133;;;;:::o;12532:468::-;12597:6;12605;12654:2;12642:9;12633:7;12629:23;12625:32;12622:119;;;12660:79;;:::i;:::-;12622:119;12780:1;12805:53;12850:7;12841:6;12830:9;12826:22;12805:53;:::i;:::-;12795:63;;12751:117;12907:2;12933:50;12975:7;12966:6;12955:9;12951:22;12933:50;:::i;:::-;12923:60;;12878:115;12532:468;;;;;:::o;13006:307::-;13067:4;13157:18;13149:6;13146:30;13143:56;;;13179:18;;:::i;:::-;13143:56;13217:29;13239:6;13217:29;:::i;:::-;13209:37;;13301:4;13295;13291:15;13283:23;;13006:307;;;:::o;13319:423::-;13396:5;13421:65;13437:48;13478:6;13437:48;:::i;:::-;13421:65;:::i;:::-;13412:74;;13509:6;13502:5;13495:21;13547:4;13540:5;13536:16;13585:3;13576:6;13571:3;13567:16;13564:25;13561:112;;;13592:79;;:::i;:::-;13561:112;13682:54;13729:6;13724:3;13719;13682:54;:::i;:::-;13402:340;13319:423;;;;;:::o;13761:338::-;13816:5;13865:3;13858:4;13850:6;13846:17;13842:27;13832:122;;13873:79;;:::i;:::-;13832:122;13990:6;13977:20;14015:78;14089:3;14081:6;14074:4;14066:6;14062:17;14015:78;:::i;:::-;14006:87;;13822:277;13761:338;;;;:::o;14105:943::-;14200:6;14208;14216;14224;14273:3;14261:9;14252:7;14248:23;14244:33;14241:120;;;14280:79;;:::i;:::-;14241:120;14400:1;14425:53;14470:7;14461:6;14450:9;14446:22;14425:53;:::i;:::-;14415:63;;14371:117;14527:2;14553:53;14598:7;14589:6;14578:9;14574:22;14553:53;:::i;:::-;14543:63;;14498:118;14655:2;14681:53;14726:7;14717:6;14706:9;14702:22;14681:53;:::i;:::-;14671:63;;14626:118;14811:2;14800:9;14796:18;14783:32;14842:18;14834:6;14831:30;14828:117;;;14864:79;;:::i;:::-;14828:117;14969:62;15023:7;15014:6;15003:9;14999:22;14969:62;:::i;:::-;14959:72;;14754:287;14105:943;;;;;;;:::o;15054:474::-;15122:6;15130;15179:2;15167:9;15158:7;15154:23;15150:32;15147:119;;;15185:79;;:::i;:::-;15147:119;15305:1;15330:53;15375:7;15366:6;15355:9;15351:22;15330:53;:::i;:::-;15320:63;;15276:117;15432:2;15458:53;15503:7;15494:6;15483:9;15479:22;15458:53;:::i;:::-;15448:63;;15403:118;15054:474;;;;;:::o;15534:180::-;15582:77;15579:1;15572:88;15679:4;15676:1;15669:15;15703:4;15700:1;15693:15;15720:320;15764:6;15801:1;15795:4;15791:12;15781:22;;15848:1;15842:4;15838:12;15869:18;15859:81;;15925:4;15917:6;15913:17;15903:27;;15859:81;15987:2;15979:6;15976:14;15956:18;15953:38;15950:84;;16006:18;;:::i;:::-;15950:84;15771:269;15720:320;;;:::o;16046:220::-;16186:34;16182:1;16174:6;16170:14;16163:58;16255:3;16250:2;16242:6;16238:15;16231:28;16046:220;:::o;16272:366::-;16414:3;16435:67;16499:2;16494:3;16435:67;:::i;:::-;16428:74;;16511:93;16600:3;16511:93;:::i;:::-;16629:2;16624:3;16620:12;16613:19;;16272:366;;;:::o;16644:419::-;16810:4;16848:2;16837:9;16833:18;16825:26;;16897:9;16891:4;16887:20;16883:1;16872:9;16868:17;16861:47;16925:131;17051:4;16925:131;:::i;:::-;16917:139;;16644:419;;;:::o;17069:248::-;17209:34;17205:1;17197:6;17193:14;17186:58;17278:31;17273:2;17265:6;17261:15;17254:56;17069:248;:::o;17323:366::-;17465:3;17486:67;17550:2;17545:3;17486:67;:::i;:::-;17479:74;;17562:93;17651:3;17562:93;:::i;:::-;17680:2;17675:3;17671:12;17664:19;;17323:366;;;:::o;17695:419::-;17861:4;17899:2;17888:9;17884:18;17876:26;;17948:9;17942:4;17938:20;17934:1;17923:9;17919:17;17912:47;17976:131;18102:4;17976:131;:::i;:::-;17968:139;;17695:419;;;:::o;18120:232::-;18260:34;18256:1;18248:6;18244:14;18237:58;18329:15;18324:2;18316:6;18312:15;18305:40;18120:232;:::o;18358:366::-;18500:3;18521:67;18585:2;18580:3;18521:67;:::i;:::-;18514:74;;18597:93;18686:3;18597:93;:::i;:::-;18715:2;18710:3;18706:12;18699:19;;18358:366;;;:::o;18730:419::-;18896:4;18934:2;18923:9;18919:18;18911:26;;18983:9;18977:4;18973:20;18969:1;18958:9;18954:17;18947:47;19011:131;19137:4;19011:131;:::i;:::-;19003:139;;18730:419;;;:::o;19155:174::-;19295:26;19291:1;19283:6;19279:14;19272:50;19155:174;:::o;19335:366::-;19477:3;19498:67;19562:2;19557:3;19498:67;:::i;:::-;19491:74;;19574:93;19663:3;19574:93;:::i;:::-;19692:2;19687:3;19683:12;19676:19;;19335:366;;;:::o;19707:419::-;19873:4;19911:2;19900:9;19896:18;19888:26;;19960:9;19954:4;19950:20;19946:1;19935:9;19931:17;19924:47;19988:131;20114:4;19988:131;:::i;:::-;19980:139;;19707:419;;;:::o;20132:228::-;20272:34;20268:1;20260:6;20256:14;20249:58;20341:11;20336:2;20328:6;20324:15;20317:36;20132:228;:::o;20366:366::-;20508:3;20529:67;20593:2;20588:3;20529:67;:::i;:::-;20522:74;;20605:93;20694:3;20605:93;:::i;:::-;20723:2;20718:3;20714:12;20707:19;;20366:366;;;:::o;20738:419::-;20904:4;20942:2;20931:9;20927:18;20919:26;;20991:9;20985:4;20981:20;20977:1;20966:9;20962:17;20955:47;21019:131;21145:4;21019:131;:::i;:::-;21011:139;;20738:419;;;:::o;21163:180::-;21211:77;21208:1;21201:88;21308:4;21305:1;21298:15;21332:4;21329:1;21322:15;21349:180;21397:77;21394:1;21387:88;21494:4;21491:1;21484:15;21518:4;21515:1;21508:15;21535:233;21574:3;21597:24;21615:5;21597:24;:::i;:::-;21588:33;;21643:66;21636:5;21633:77;21630:103;;21713:18;;:::i;:::-;21630:103;21760:1;21753:5;21749:13;21742:20;;21535:233;;;:::o;21774:170::-;21914:22;21910:1;21902:6;21898:14;21891:46;21774:170;:::o;21950:366::-;22092:3;22113:67;22177:2;22172:3;22113:67;:::i;:::-;22106:74;;22189:93;22278:3;22189:93;:::i;:::-;22307:2;22302:3;22298:12;22291:19;;21950:366;;;:::o;22322:419::-;22488:4;22526:2;22515:9;22511:18;22503:26;;22575:9;22569:4;22565:20;22561:1;22550:9;22546:17;22539:47;22603:131;22729:4;22603:131;:::i;:::-;22595:139;;22322:419;;;:::o;22747:162::-;22887:14;22883:1;22875:6;22871:14;22864:38;22747:162;:::o;22915:366::-;23057:3;23078:67;23142:2;23137:3;23078:67;:::i;:::-;23071:74;;23154:93;23243:3;23154:93;:::i;:::-;23272:2;23267:3;23263:12;23256:19;;22915:366;;;:::o;23287:419::-;23453:4;23491:2;23480:9;23476:18;23468:26;;23540:9;23534:4;23530:20;23526:1;23515:9;23511:17;23504:47;23568:131;23694:4;23568:131;:::i;:::-;23560:139;;23287:419;;;:::o;23712:162::-;23852:14;23848:1;23840:6;23836:14;23829:38;23712:162;:::o;23880:366::-;24022:3;24043:67;24107:2;24102:3;24043:67;:::i;:::-;24036:74;;24119:93;24208:3;24119:93;:::i;:::-;24237:2;24232:3;24228:12;24221:19;;23880:366;;;:::o;24252:419::-;24418:4;24456:2;24445:9;24441:18;24433:26;;24505:9;24499:4;24495:20;24491:1;24480:9;24476:17;24469:47;24533:131;24659:4;24533:131;:::i;:::-;24525:139;;24252:419;;;:::o;24677:148::-;24779:11;24816:3;24801:18;;24677:148;;;;:::o;24831:390::-;24937:3;24965:39;24998:5;24965:39;:::i;:::-;25020:89;25102:6;25097:3;25020:89;:::i;:::-;25013:96;;25118:65;25176:6;25171:3;25164:4;25157:5;25153:16;25118:65;:::i;:::-;25208:6;25203:3;25199:16;25192:23;;24941:280;24831:390;;;;:::o;25227:435::-;25407:3;25429:95;25520:3;25511:6;25429:95;:::i;:::-;25422:102;;25541:95;25632:3;25623:6;25541:95;:::i;:::-;25534:102;;25653:3;25646:10;;25227:435;;;;;:::o;25668:225::-;25808:34;25804:1;25796:6;25792:14;25785:58;25877:8;25872:2;25864:6;25860:15;25853:33;25668:225;:::o;25899:366::-;26041:3;26062:67;26126:2;26121:3;26062:67;:::i;:::-;26055:74;;26138:93;26227:3;26138:93;:::i;:::-;26256:2;26251:3;26247:12;26240:19;;25899:366;;;:::o;26271:419::-;26437:4;26475:2;26464:9;26460:18;26452:26;;26524:9;26518:4;26514:20;26510:1;26499:9;26495:17;26488:47;26552:131;26678:4;26552:131;:::i;:::-;26544:139;;26271:419;;;:::o;26696:182::-;26836:34;26832:1;26824:6;26820:14;26813:58;26696:182;:::o;26884:366::-;27026:3;27047:67;27111:2;27106:3;27047:67;:::i;:::-;27040:74;;27123:93;27212:3;27123:93;:::i;:::-;27241:2;27236:3;27232:12;27225:19;;26884:366;;;:::o;27256:419::-;27422:4;27460:2;27449:9;27445:18;27437:26;;27509:9;27503:4;27499:20;27495:1;27484:9;27480:17;27473:47;27537:131;27663:4;27537:131;:::i;:::-;27529:139;;27256:419;;;:::o;27681:224::-;27821:34;27817:1;27809:6;27805:14;27798:58;27890:7;27885:2;27877:6;27873:15;27866:32;27681:224;:::o;27911:366::-;28053:3;28074:67;28138:2;28133:3;28074:67;:::i;:::-;28067:74;;28150:93;28239:3;28150:93;:::i;:::-;28268:2;28263:3;28259:12;28252:19;;27911:366;;;:::o;28283:419::-;28449:4;28487:2;28476:9;28472:18;28464:26;;28536:9;28530:4;28526:20;28522:1;28511:9;28507:17;28500:47;28564:131;28690:4;28564:131;:::i;:::-;28556:139;;28283:419;;;:::o;28708:223::-;28848:34;28844:1;28836:6;28832:14;28825:58;28917:6;28912:2;28904:6;28900:15;28893:31;28708:223;:::o;28937:366::-;29079:3;29100:67;29164:2;29159:3;29100:67;:::i;:::-;29093:74;;29176:93;29265:3;29176:93;:::i;:::-;29294:2;29289:3;29285:12;29278:19;;28937:366;;;:::o;29309:419::-;29475:4;29513:2;29502:9;29498:18;29490:26;;29562:9;29556:4;29552:20;29548:1;29537:9;29533:17;29526:47;29590:131;29716:4;29590:131;:::i;:::-;29582:139;;29309:419;;;:::o;29734:182::-;29874:34;29870:1;29862:6;29858:14;29851:58;29734:182;:::o;29922:366::-;30064:3;30085:67;30149:2;30144:3;30085:67;:::i;:::-;30078:74;;30161:93;30250:3;30161:93;:::i;:::-;30279:2;30274:3;30270:12;30263:19;;29922:366;;;:::o;30294:419::-;30460:4;30498:2;30487:9;30483:18;30475:26;;30547:9;30541:4;30537:20;30533:1;30522:9;30518:17;30511:47;30575:131;30701:4;30575:131;:::i;:::-;30567:139;;30294:419;;;:::o;30719:178::-;30859:30;30855:1;30847:6;30843:14;30836:54;30719:178;:::o;30903:366::-;31045:3;31066:67;31130:2;31125:3;31066:67;:::i;:::-;31059:74;;31142:93;31231:3;31142:93;:::i;:::-;31260:2;31255:3;31251:12;31244:19;;30903:366;;;:::o;31275:419::-;31441:4;31479:2;31468:9;31464:18;31456:26;;31528:9;31522:4;31518:20;31514:1;31503:9;31499:17;31492:47;31556:131;31682:4;31556:131;:::i;:::-;31548:139;;31275:419;;;:::o;31700:233::-;31840:34;31836:1;31828:6;31824:14;31817:58;31909:16;31904:2;31896:6;31892:15;31885:41;31700:233;:::o;31939:366::-;32081:3;32102:67;32166:2;32161:3;32102:67;:::i;:::-;32095:74;;32178:93;32267:3;32178:93;:::i;:::-;32296:2;32291:3;32287:12;32280:19;;31939:366;;;:::o;32311:419::-;32477:4;32515:2;32504:9;32500:18;32492:26;;32564:9;32558:4;32554:20;32550:1;32539:9;32535:17;32528:47;32592:131;32718:4;32592:131;:::i;:::-;32584:139;;32311:419;;;:::o;32736:141::-;32785:4;32808:3;32800:11;;32831:3;32828:1;32821:14;32865:4;32862:1;32852:18;32844:26;;32736:141;;;:::o;32883:93::-;32920:6;32967:2;32962;32955:5;32951:14;32947:23;32937:33;;32883:93;;;:::o;32982:107::-;33026:8;33076:5;33070:4;33066:16;33045:37;;32982:107;;;;:::o;33095:393::-;33164:6;33214:1;33202:10;33198:18;33237:97;33267:66;33256:9;33237:97;:::i;:::-;33355:39;33385:8;33374:9;33355:39;:::i;:::-;33343:51;;33427:4;33423:9;33416:5;33412:21;33403:30;;33476:4;33466:8;33462:19;33455:5;33452:30;33442:40;;33171:317;;33095:393;;;;;:::o;33494:60::-;33522:3;33543:5;33536:12;;33494:60;;;:::o;33560:142::-;33610:9;33643:53;33661:34;33670:24;33688:5;33670:24;:::i;:::-;33661:34;:::i;:::-;33643:53;:::i;:::-;33630:66;;33560:142;;;:::o;33708:75::-;33751:3;33772:5;33765:12;;33708:75;;;:::o;33789:269::-;33899:39;33930:7;33899:39;:::i;:::-;33960:91;34009:41;34033:16;34009:41;:::i;:::-;34001:6;33994:4;33988:11;33960:91;:::i;:::-;33954:4;33947:105;33865:193;33789:269;;;:::o;34064:73::-;34109:3;34064:73;:::o;34143:189::-;34220:32;;:::i;:::-;34261:65;34319:6;34311;34305:4;34261:65;:::i;:::-;34196:136;34143:189;;:::o;34338:186::-;34398:120;34415:3;34408:5;34405:14;34398:120;;;34469:39;34506:1;34499:5;34469:39;:::i;:::-;34442:1;34435:5;34431:13;34422:22;;34398:120;;;34338:186;;:::o;34530:543::-;34631:2;34626:3;34623:11;34620:446;;;34665:38;34697:5;34665:38;:::i;:::-;34749:29;34767:10;34749:29;:::i;:::-;34739:8;34735:44;34932:2;34920:10;34917:18;34914:49;;;34953:8;34938:23;;34914:49;34976:80;35032:22;35050:3;35032:22;:::i;:::-;35022:8;35018:37;35005:11;34976:80;:::i;:::-;34635:431;;34620:446;34530:543;;;:::o;35079:117::-;35133:8;35183:5;35177:4;35173:16;35152:37;;35079:117;;;;:::o;35202:169::-;35246:6;35279:51;35327:1;35323:6;35315:5;35312:1;35308:13;35279:51;:::i;:::-;35275:56;35360:4;35354;35350:15;35340:25;;35253:118;35202:169;;;;:::o;35376:295::-;35452:4;35598:29;35623:3;35617:4;35598:29;:::i;:::-;35590:37;;35660:3;35657:1;35653:11;35647:4;35644:21;35636:29;;35376:295;;;;:::o;35676:1395::-;35793:37;35826:3;35793:37;:::i;:::-;35895:18;35887:6;35884:30;35881:56;;;35917:18;;:::i;:::-;35881:56;35961:38;35993:4;35987:11;35961:38;:::i;:::-;36046:67;36106:6;36098;36092:4;36046:67;:::i;:::-;36140:1;36164:4;36151:17;;36196:2;36188:6;36185:14;36213:1;36208:618;;;;36870:1;36887:6;36884:77;;;36936:9;36931:3;36927:19;36921:26;36912:35;;36884:77;36987:67;37047:6;37040:5;36987:67;:::i;:::-;36981:4;36974:81;36843:222;36178:887;;36208:618;36260:4;36256:9;36248:6;36244:22;36294:37;36326:4;36294:37;:::i;:::-;36353:1;36367:208;36381:7;36378:1;36375:14;36367:208;;;36460:9;36455:3;36451:19;36445:26;36437:6;36430:42;36511:1;36503:6;36499:14;36489:24;;36558:2;36547:9;36543:18;36530:31;;36404:4;36401:1;36397:12;36392:17;;36367:208;;;36603:6;36594:7;36591:19;36588:179;;;36661:9;36656:3;36652:19;36646:26;36704:48;36746:4;36738:6;36734:17;36723:9;36704:48;:::i;:::-;36696:6;36689:64;36611:156;36588:179;36813:1;36809;36801:6;36797:14;36793:22;36787:4;36780:36;36215:611;;;36178:887;;35768:1303;;;35676:1395;;:::o;37077:175::-;37217:27;37213:1;37205:6;37201:14;37194:51;37077:175;:::o;37258:366::-;37400:3;37421:67;37485:2;37480:3;37421:67;:::i;:::-;37414:74;;37497:93;37586:3;37497:93;:::i;:::-;37615:2;37610:3;37606:12;37599:19;;37258:366;;;:::o;37630:419::-;37796:4;37834:2;37823:9;37819:18;37811:26;;37883:9;37877:4;37873:20;37869:1;37858:9;37854:17;37847:47;37911:131;38037:4;37911:131;:::i;:::-;37903:139;;37630:419;;;:::o;38055:237::-;38195:34;38191:1;38183:6;38179:14;38172:58;38264:20;38259:2;38251:6;38247:15;38240:45;38055:237;:::o;38298:366::-;38440:3;38461:67;38525:2;38520:3;38461:67;:::i;:::-;38454:74;;38537:93;38626:3;38537:93;:::i;:::-;38655:2;38650:3;38646:12;38639:19;;38298:366;;;:::o;38670:419::-;38836:4;38874:2;38863:9;38859:18;38851:26;;38923:9;38917:4;38913:20;38909:1;38898:9;38894:17;38887:47;38951:131;39077:4;38951:131;:::i;:::-;38943:139;;38670:419;;;:::o;39095:194::-;39135:4;39155:20;39173:1;39155:20;:::i;:::-;39150:25;;39189:20;39207:1;39189:20;:::i;:::-;39184:25;;39233:1;39230;39226:9;39218:17;;39257:1;39251:4;39248:11;39245:37;;;39262:18;;:::i;:::-;39245:37;39095:194;;;;:::o;39295:191::-;39335:3;39354:20;39372:1;39354:20;:::i;:::-;39349:25;;39388:20;39406:1;39388:20;:::i;:::-;39383:25;;39431:1;39428;39424:9;39417:16;;39452:3;39449:1;39446:10;39443:36;;;39459:18;;:::i;:::-;39443:36;39295:191;;;;:::o;39492:98::-;39543:6;39577:5;39571:12;39561:22;;39492:98;;;:::o;39596:168::-;39679:11;39713:6;39708:3;39701:19;39753:4;39748:3;39744:14;39729:29;;39596:168;;;;:::o;39770:373::-;39856:3;39884:38;39916:5;39884:38;:::i;:::-;39938:70;40001:6;39996:3;39938:70;:::i;:::-;39931:77;;40017:65;40075:6;40070:3;40063:4;40056:5;40052:16;40017:65;:::i;:::-;40107:29;40129:6;40107:29;:::i;:::-;40102:3;40098:39;40091:46;;39860:283;39770:373;;;;:::o;40149:640::-;40344:4;40382:3;40371:9;40367:19;40359:27;;40396:71;40464:1;40453:9;40449:17;40440:6;40396:71;:::i;:::-;40477:72;40545:2;40534:9;40530:18;40521:6;40477:72;:::i;:::-;40559;40627:2;40616:9;40612:18;40603:6;40559:72;:::i;:::-;40678:9;40672:4;40668:20;40663:2;40652:9;40648:18;40641:48;40706:76;40777:4;40768:6;40706:76;:::i;:::-;40698:84;;40149:640;;;;;;;:::o;40795:141::-;40851:5;40882:6;40876:13;40867:22;;40898:32;40924:5;40898:32;:::i;:::-;40795:141;;;;:::o;40942:349::-;41011:6;41060:2;41048:9;41039:7;41035:23;41031:32;41028:119;;;41066:79;;:::i;:::-;41028:119;41186:1;41211:63;41266:7;41257:6;41246:9;41242:22;41211:63;:::i;:::-;41201:73;;41157:127;40942:349;;;;:::o;41297:180::-;41345:77;41342:1;41335:88;41442:4;41439:1;41432:15;41466:4;41463:1;41456:15"},"gasEstimates":{"creation":{"codeDepositCost":"2930000","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2987","currentItem()":"2596","getApproved(uint256)":"5300","getMinter(uint256)":"2932","getRoyaltiesPercent(uint256)":"infinite","isApprovedForAll(address,address)":"infinite","itemsOf(address)":"infinite","mintFee()":"2541","mintFeeUpdate(uint256)":"24918","mintItem(address,uint256,string)":"infinite","name()":"infinite","owner()":"2633","ownerOf(uint256)":"3088","renounceOwnership()":"30531","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","setRoyaltiesPercent(uint256,uint256)":"infinite","setURI(uint256,string)":"infinite","supportsInterface(bytes4)":"797","symbol()":"infinite","tokenURI(uint256)":"infinite","transferFrom(address,address,uint256)":"infinite","transferOwnership(address)":"30832"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","currentItem()":"fdf2d21e","getApproved(uint256)":"081812fc","getMinter(uint256)":"5b7121f8","getRoyaltiesPercent(uint256)":"9a22d0ea","isApprovedForAll(address,address)":"e985e9c5","itemsOf(address)":"7231a876","mintFee()":"13966db5","mintFeeUpdate(uint256)":"207e6161","mintItem(address,uint256,string)":"8337afdc","name()":"06fdde03","owner()":"8da5cb5b","ownerOf(uint256)":"6352211e","renounceOwnership()":"715018a6","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","setRoyaltiesPercent(uint256,uint256)":"889576e9","setURI(uint256,string)":"862440e2","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyaltiesPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"itemsOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"mintFeeUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesPercent\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mintItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setRoyaltiesPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Pixel4te.sol\":\"Pixel4te\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Pixel4te.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Pixel4te is ERC721URIStorage, Ownable {\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIds;\\n    mapping(uint256 => address) private _mintedBy;\\n    mapping(uint256 => uint256) private _royaltiesPercent;\\n\\n    uint256 public mintFee;\\n\\n    constructor() ERC721(\\\"Pixel4te\\\", \\\"PIX\\\") {\\n        mintFee = 0.01 ether; // Set a default minting fee of 0.01 ether\\n    }\\n\\n    function mintItem(address to, uint256 royaltiesPercent, string memory tokenURI)\\n        public\\n        payable\\n        returns (uint256)\\n    {\\n        require(msg.value >= mintFee, \\\"Insufficient payment\\\"); // Require payment of the minting fee\\n        _tokenIds.increment();\\n\\n        uint256 newItemId = _tokenIds.current();\\n        _mint(to, newItemId);\\n        _setTokenURI(newItemId, tokenURI);\\n        _mintedBy[newItemId] = msg.sender; // Store the address of the user who minted the NFT\\n        _royaltiesPercent[newItemId] = royaltiesPercent;\\n\\n        // Transfer the minting fee to the contract owner\\n        payable(owner()).transfer(msg.value);\\n\\n        return newItemId;\\n    }\\n\\n    function setURI(uint tokenId, string memory newURI)\\n        public\\n    {\\n        address itemOwner = ownerOf(tokenId);\\n        require(msg.sender == itemOwner, 'UNAUTHORIZED');\\n        _setTokenURI(tokenId, newURI);\\n    }\\n\\n    function currentItem()\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _tokenIds.current();\\n    }\\n\\n    function itemsOf(address owner) public view returns (uint256[] memory) {\\n      \\n      uint256 balance = balanceOf(owner);\\n      uint256[] memory items = new uint256[](balance);\\n      if (balance == uint256(0)) {\\n        return items;\\n      }\\n      uint256 j = 0;\\n      for (uint256 i = 1; i <= currentItem(); i++) {\\n        if (ownerOf(i) == owner) {\\n          items[j] = i;\\n          j++;\\n        }\\n      }\\n      return items;\\n    }\\n\\n    function mintFeeUpdate(uint256 newFee) public onlyOwner {\\n        mintFee = newFee;\\n    }\\n\\n    function getMinter(uint256 tokenId) public view returns (address) {\\n        return _mintedBy[tokenId];\\n    }\\n\\n    function setRoyaltiesPercent(uint256 tokenId, uint256 percent) public {\\n        require(_mintedBy[tokenId] == msg.sender, \\\"Unauthorized\\\");\\n        _royaltiesPercent[tokenId] = percent;\\n    }\\n\\n    function getRoyaltiesPercent(uint256 tokenId) public view returns (uint256) {\\n        return _royaltiesPercent[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0xb098dda04c17a8b0d2d75c9fdd9a8c68ae537f2e9d88f9fc85812d207fa42aea\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"contracts/Pixel4te.sol:Pixel4te","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":140,"contract":"contracts/Pixel4te.sol:Pixel4te","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":144,"contract":"contracts/Pixel4te.sol:Pixel4te","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":148,"contract":"contracts/Pixel4te.sol:Pixel4te","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":152,"contract":"contracts/Pixel4te.sol:Pixel4te","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":158,"contract":"contracts/Pixel4te.sol:Pixel4te","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":1204,"contract":"contracts/Pixel4te.sol:Pixel4te","label":"_tokenURIs","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":7,"contract":"contracts/Pixel4te.sol:Pixel4te","label":"_owner","offset":0,"slot":"7","type":"t_address"},{"astId":5749,"contract":"contracts/Pixel4te.sol:Pixel4te","label":"_tokenIds","offset":0,"slot":"8","type":"t_struct(Counter)1701_storage"},{"astId":5753,"contract":"contracts/Pixel4te.sol:Pixel4te","label":"_mintedBy","offset":0,"slot":"9","type":"t_mapping(t_uint256,t_address)"},{"astId":5757,"contract":"contracts/Pixel4te.sol:Pixel4te","label":"_royaltiesPercent","offset":0,"slot":"10","type":"t_mapping(t_uint256,t_uint256)"},{"astId":5759,"contract":"contracts/Pixel4te.sol:Pixel4te","label":"mintFee","offset":0,"slot":"11","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Counter)1701_storage":{"encoding":"inplace","label":"struct Counters.Counter","members":[{"astId":1700,"contract":"contracts/Pixel4te.sol:Pixel4te","label":"_value","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}